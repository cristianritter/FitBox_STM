
FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b0  080094b0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080094b0  080094b0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094b0  080094b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b4  080094b4  000194b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080094b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  200001e4  0800969c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0800969c  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010874  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003137  00000000  00000000  00030a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00033bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  000349f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8f1  00000000  00000000  000356d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012306  00000000  00000000  0004ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5fe  00000000  00000000  000622c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee8c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c90  00000000  00000000  000ee918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	080093c4 	.word	0x080093c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	080093c4 	.word	0x080093c4

0800014c <LerADCS>:
		{0, 20, 40, 60, 80, 100}
		};

uint8_t inverter_config[3] = {0, 0, 0};

void LerADCS(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  joystickhid.rx_8lsb = (ADCValue[0]);
 8000150:	4b15      	ldr	r3, [pc, #84]	; (80001a8 <LerADCS+0x5c>)
 8000152:	881b      	ldrh	r3, [r3, #0]
 8000154:	b2da      	uxtb	r2, r3
 8000156:	4b15      	ldr	r3, [pc, #84]	; (80001ac <LerADCS+0x60>)
 8000158:	701a      	strb	r2, [r3, #0]
  joystickhid.ry_4lsb_rx_4msb = ((ADCValue[1] & 0xf) << 4 | ADCValue[0] >> 8);
 800015a:	4b13      	ldr	r3, [pc, #76]	; (80001a8 <LerADCS+0x5c>)
 800015c:	885b      	ldrh	r3, [r3, #2]
 800015e:	011b      	lsls	r3, r3, #4
 8000160:	b25a      	sxtb	r2, r3
 8000162:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <LerADCS+0x5c>)
 8000164:	881b      	ldrh	r3, [r3, #0]
 8000166:	0a1b      	lsrs	r3, r3, #8
 8000168:	b29b      	uxth	r3, r3
 800016a:	b25b      	sxtb	r3, r3
 800016c:	4313      	orrs	r3, r2
 800016e:	b25b      	sxtb	r3, r3
 8000170:	b2da      	uxtb	r2, r3
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <LerADCS+0x60>)
 8000174:	705a      	strb	r2, [r3, #1]
  joystickhid.ry_8msb = ADCValue[1] >> 4;
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <LerADCS+0x5c>)
 8000178:	885b      	ldrh	r3, [r3, #2]
 800017a:	091b      	lsrs	r3, r3, #4
 800017c:	b29b      	uxth	r3, r3
 800017e:	b2da      	uxtb	r2, r3
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <LerADCS+0x60>)
 8000182:	709a      	strb	r2, [r3, #2]
  joystickhid.rz_8lsb = ADCValue[2];
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <LerADCS+0x5c>)
 8000186:	889b      	ldrh	r3, [r3, #4]
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b08      	ldr	r3, [pc, #32]	; (80001ac <LerADCS+0x60>)
 800018c:	70da      	strb	r2, [r3, #3]
  joystickhid.rz_4msb = ADCValue[2] >> 8;
 800018e:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <LerADCS+0x5c>)
 8000190:	889b      	ldrh	r3, [r3, #4]
 8000192:	0a1b      	lsrs	r3, r3, #8
 8000194:	b29b      	uxth	r3, r3
 8000196:	b2da      	uxtb	r2, r3
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <LerADCS+0x60>)
 800019a:	711a      	strb	r2, [r3, #4]
  HAL_Delay(1);
 800019c:	2001      	movs	r0, #1
 800019e:	f000 fbed 	bl	800097c <HAL_Delay>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	200002b8 	.word	0x200002b8

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b5b0      	push	{r4, r5, r7, lr}
 80001b2:	b08e      	sub	sp, #56	; 0x38
 80001b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f000 fb7f 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f8b3 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 f9b3 	bl	8000528 <MX_GPIO_Init>
  MX_DMA_Init();
 80001c2:	f000 f993 	bl	80004ec <MX_DMA_Init>
  MX_ADC1_Init();
 80001c6:	f000 f90b 	bl	80003e0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80001ca:	f008 f84b 	bl	8008264 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80001ce:	f000 f963 	bl	8000498 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 80001d2:	2203      	movs	r2, #3
 80001d4:	494b      	ldr	r1, [pc, #300]	; (8000304 <main+0x154>)
 80001d6:	484c      	ldr	r0, [pc, #304]	; (8000308 <main+0x158>)
 80001d8:	f000 fccc 	bl	8000b74 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LerADCS();
 80001dc:	f7ff ffb6 	bl	800014c <LerADCS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Valores inicio !!!\r\n"; //Data to send
 80001e0:	4b4a      	ldr	r3, [pc, #296]	; (800030c <main+0x15c>)
 80001e2:	f107 0420 	add.w	r4, r7, #32
 80001e6:	461d      	mov	r5, r3
 80001e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001f0:	6020      	str	r0, [r4, #0]
 80001f2:	3404      	adds	r4, #4
 80001f4:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 80001f6:	f107 0120 	add.w	r1, r7, #32
 80001fa:	230a      	movs	r3, #10
 80001fc:	2215      	movs	r2, #21
 80001fe:	4844      	ldr	r0, [pc, #272]	; (8000310 <main+0x160>)
 8000200:	f003 fe27 	bl	8003e52 <HAL_UART_Transmit>

	  char buffer[6];
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.rx_8lsb), 100);
 8000204:	4b43      	ldr	r3, [pc, #268]	; (8000314 <main+0x164>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	461a      	mov	r2, r3
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	4942      	ldr	r1, [pc, #264]	; (8000318 <main+0x168>)
 8000210:	4618      	mov	r0, r3
 8000212:	f008 fc5d 	bl	8008ad0 <siprintf>
 8000216:	4603      	mov	r3, r0
 8000218:	b29a      	uxth	r2, r3
 800021a:	f107 0118 	add.w	r1, r7, #24
 800021e:	2364      	movs	r3, #100	; 0x64
 8000220:	483b      	ldr	r0, [pc, #236]	; (8000310 <main+0x160>)
 8000222:	f003 fe16 	bl	8003e52 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.ry_4lsb_rx_4msb), 100);
 8000226:	4b3b      	ldr	r3, [pc, #236]	; (8000314 <main+0x164>)
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	461a      	mov	r2, r3
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	4939      	ldr	r1, [pc, #228]	; (8000318 <main+0x168>)
 8000232:	4618      	mov	r0, r3
 8000234:	f008 fc4c 	bl	8008ad0 <siprintf>
 8000238:	4603      	mov	r3, r0
 800023a:	b29a      	uxth	r2, r3
 800023c:	f107 0118 	add.w	r1, r7, #24
 8000240:	2364      	movs	r3, #100	; 0x64
 8000242:	4833      	ldr	r0, [pc, #204]	; (8000310 <main+0x160>)
 8000244:	f003 fe05 	bl	8003e52 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.ry_8msb), 100);
 8000248:	4b32      	ldr	r3, [pc, #200]	; (8000314 <main+0x164>)
 800024a:	789b      	ldrb	r3, [r3, #2]
 800024c:	461a      	mov	r2, r3
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	4931      	ldr	r1, [pc, #196]	; (8000318 <main+0x168>)
 8000254:	4618      	mov	r0, r3
 8000256:	f008 fc3b 	bl	8008ad0 <siprintf>
 800025a:	4603      	mov	r3, r0
 800025c:	b29a      	uxth	r2, r3
 800025e:	f107 0118 	add.w	r1, r7, #24
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	482a      	ldr	r0, [pc, #168]	; (8000310 <main+0x160>)
 8000266:	f003 fdf4 	bl	8003e52 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.rz_4msb), 100);
 800026a:	4b2a      	ldr	r3, [pc, #168]	; (8000314 <main+0x164>)
 800026c:	791b      	ldrb	r3, [r3, #4]
 800026e:	461a      	mov	r2, r3
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4928      	ldr	r1, [pc, #160]	; (8000318 <main+0x168>)
 8000276:	4618      	mov	r0, r3
 8000278:	f008 fc2a 	bl	8008ad0 <siprintf>
 800027c:	4603      	mov	r3, r0
 800027e:	b29a      	uxth	r2, r3
 8000280:	f107 0118 	add.w	r1, r7, #24
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	4822      	ldr	r0, [pc, #136]	; (8000310 <main+0x160>)
 8000288:	f003 fde3 	bl	8003e52 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.rz_8lsb), 100);
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <main+0x164>)
 800028e:	78db      	ldrb	r3, [r3, #3]
 8000290:	461a      	mov	r2, r3
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	4920      	ldr	r1, [pc, #128]	; (8000318 <main+0x168>)
 8000298:	4618      	mov	r0, r3
 800029a:	f008 fc19 	bl	8008ad0 <siprintf>
 800029e:	4603      	mov	r3, r0
 80002a0:	b29a      	uxth	r2, r3
 80002a2:	f107 0118 	add.w	r1, r7, #24
 80002a6:	2364      	movs	r3, #100	; 0x64
 80002a8:	4819      	ldr	r0, [pc, #100]	; (8000310 <main+0x160>)
 80002aa:	f003 fdd2 	bl	8003e52 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", ADCValue[0]), 100);
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <main+0x154>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	4917      	ldr	r1, [pc, #92]	; (8000318 <main+0x168>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f008 fc08 	bl	8008ad0 <siprintf>
 80002c0:	4603      	mov	r3, r0
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	f107 0118 	add.w	r1, r7, #24
 80002c8:	2364      	movs	r3, #100	; 0x64
 80002ca:	4811      	ldr	r0, [pc, #68]	; (8000310 <main+0x160>)
 80002cc:	f003 fdc1 	bl	8003e52 <HAL_UART_Transmit>

	  uint8_t Test2[] = "\r\n Valores fim !!!\r\n"; //Data to send
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <main+0x16c>)
 80002d2:	463c      	mov	r4, r7
 80002d4:	461d      	mov	r5, r3
 80002d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002de:	6020      	str	r0, [r4, #0]
 80002e0:	3404      	adds	r4, #4
 80002e2:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart1,Test2,sizeof(Test),10);// Sending in normal mode
 80002e4:	4639      	mov	r1, r7
 80002e6:	230a      	movs	r3, #10
 80002e8:	2215      	movs	r2, #21
 80002ea:	4809      	ldr	r0, [pc, #36]	; (8000310 <main+0x160>)
 80002ec:	f003 fdb1 	bl	8003e52 <HAL_UART_Transmit>
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80002f0:	2208      	movs	r2, #8
 80002f2:	4908      	ldr	r1, [pc, #32]	; (8000314 <main+0x164>)
 80002f4:	480a      	ldr	r0, [pc, #40]	; (8000320 <main+0x170>)
 80002f6:	f006 fe53 	bl	8006fa0 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 fb3e 	bl	800097c <HAL_Delay>
  {
 8000300:	e76c      	b.n	80001dc <main+0x2c>
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000
 8000308:	20000200 	.word	0x20000200
 800030c:	080093e0 	.word	0x080093e0
 8000310:	20000274 	.word	0x20000274
 8000314:	200002b8 	.word	0x200002b8
 8000318:	080093dc 	.word	0x080093dc
 800031c:	080093f8 	.word	0x080093f8
 8000320:	200002cc 	.word	0x200002cc

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b094      	sub	sp, #80	; 0x50
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f008 fbc4 	bl	8008ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000354:	2301      	movs	r3, #1
 8000356:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000370:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000374:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037a:	4618      	mov	r0, r3
 800037c:	f003 f84c 	bl	8003418 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000386:	f000 f91b 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	2101      	movs	r1, #1
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 fab8 	bl	800391c <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003b2:	f000 f905 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003b6:	2312      	movs	r3, #18
 80003b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80003ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003c4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4618      	mov	r0, r3
 80003ca:	f003 fc3f 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003d4:	f000 f8f4 	bl	80005c0 <Error_Handler>
  }
}
 80003d8:	bf00      	nop
 80003da:	3750      	adds	r7, #80	; 0x50
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <MX_ADC1_Init+0xb0>)
 80003f2:	4a28      	ldr	r2, [pc, #160]	; (8000494 <MX_ADC1_Init+0xb4>)
 80003f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <MX_ADC1_Init+0xb0>)
 80003f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003fe:	4b24      	ldr	r3, [pc, #144]	; (8000490 <MX_ADC1_Init+0xb0>)
 8000400:	2201      	movs	r2, #1
 8000402:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000404:	4b22      	ldr	r3, [pc, #136]	; (8000490 <MX_ADC1_Init+0xb0>)
 8000406:	2200      	movs	r2, #0
 8000408:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800040a:	4b21      	ldr	r3, [pc, #132]	; (8000490 <MX_ADC1_Init+0xb0>)
 800040c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000410:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <MX_ADC1_Init+0xb0>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_ADC1_Init+0xb0>)
 800041a:	2203      	movs	r2, #3
 800041c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800041e:	481c      	ldr	r0, [pc, #112]	; (8000490 <MX_ADC1_Init+0xb0>)
 8000420:	f000 fad0 	bl	80009c4 <HAL_ADC_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800042a:	f000 f8c9 	bl	80005c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000432:	2301      	movs	r3, #1
 8000434:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000436:	2306      	movs	r3, #6
 8000438:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4619      	mov	r1, r3
 800043e:	4814      	ldr	r0, [pc, #80]	; (8000490 <MX_ADC1_Init+0xb0>)
 8000440:	f000 fc92 	bl	8000d68 <HAL_ADC_ConfigChannel>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800044a:	f000 f8b9 	bl	80005c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800044e:	2301      	movs	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000452:	2302      	movs	r3, #2
 8000454:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	480d      	ldr	r0, [pc, #52]	; (8000490 <MX_ADC1_Init+0xb0>)
 800045c:	f000 fc84 	bl	8000d68 <HAL_ADC_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000466:	f000 f8ab 	bl	80005c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800046a:	2302      	movs	r3, #2
 800046c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800046e:	2303      	movs	r3, #3
 8000470:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4619      	mov	r1, r3
 8000476:	4806      	ldr	r0, [pc, #24]	; (8000490 <MX_ADC1_Init+0xb0>)
 8000478:	f000 fc76 	bl	8000d68 <HAL_ADC_ConfigChannel>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000482:	f000 f89d 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000200 	.word	0x20000200
 8000494:	40012400 	.word	0x40012400

08000498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 800049e:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <MX_USART1_UART_Init+0x50>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 80004a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_USART1_UART_Init+0x4c>)
 80004d0:	f003 fc72 	bl	8003db8 <HAL_UART_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004da:	f000 f871 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000274 	.word	0x20000274
 80004e8:	40013800 	.word	0x40013800

080004ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_DMA_Init+0x38>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <MX_DMA_Init+0x38>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_DMA_Init+0x38>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	200b      	movs	r0, #11
 8000510:	f000 fefb 	bl	800130a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000514:	200b      	movs	r0, #11
 8000516:	f000 ff14 	bl	8001342 <HAL_NVIC_EnableIRQ>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_GPIO_Init+0x90>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a1d      	ldr	r2, [pc, #116]	; (80005b8 <MX_GPIO_Init+0x90>)
 8000542:	f043 0310 	orr.w	r3, r3, #16
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_GPIO_Init+0x90>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0310 	and.w	r3, r3, #16
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_GPIO_Init+0x90>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a17      	ldr	r2, [pc, #92]	; (80005b8 <MX_GPIO_Init+0x90>)
 800055a:	f043 0320 	orr.w	r3, r3, #32
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_GPIO_Init+0x90>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0320 	and.w	r3, r3, #32
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_GPIO_Init+0x90>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <MX_GPIO_Init+0x90>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_GPIO_Init+0x90>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	480c      	ldr	r0, [pc, #48]	; (80005bc <MX_GPIO_Init+0x94>)
 800058c:	f001 fa66 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2302      	movs	r3, #2
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_GPIO_Init+0x94>)
 80005aa:	f001 f8d3 	bl	8001754 <HAL_GPIO_Init>

}
 80005ae:	bf00      	nop
 80005b0:	3720      	adds	r7, #32
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40011000 	.word	0x40011000

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_MspInit+0x40>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a0d      	ldr	r2, [pc, #52]	; (800060c <HAL_MspInit+0x40>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <HAL_MspInit+0x40>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_MspInit+0x40>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_MspInit+0x40>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_MspInit+0x40>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <HAL_ADC_MspInit+0xc0>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d14a      	bne.n	80006c6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <HAL_ADC_MspInit+0xc4>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <HAL_ADC_MspInit+0xc4>)
 8000636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <HAL_ADC_MspInit+0xc4>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <HAL_ADC_MspInit+0xc4>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <HAL_ADC_MspInit+0xc4>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_ADC_MspInit+0xc4>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000660:	2307      	movs	r3, #7
 8000662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000664:	2303      	movs	r3, #3
 8000666:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <HAL_ADC_MspInit+0xc8>)
 8000670:	f001 f870 	bl	8001754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 8000676:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <HAL_ADC_MspInit+0xd0>)
 8000678:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 800068e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000692:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 8000696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800069a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 800069e:	2220      	movs	r2, #32
 80006a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 80006a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 80006ac:	f000 fe64 	bl	8001378 <HAL_DMA_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80006b6:	f7ff ff83 	bl	80005c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 80006be:	621a      	str	r2, [r3, #32]
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_ADC_MspInit+0xcc>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006c6:	bf00      	nop
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012400 	.word	0x40012400
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010800 	.word	0x40010800
 80006dc:	20000230 	.word	0x20000230
 80006e0:	40020008 	.word	0x40020008

080006e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <HAL_UART_MspInit+0x8c>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d131      	bne.n	8000768 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_UART_MspInit+0x90>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a1a      	ldr	r2, [pc, #104]	; (8000774 <HAL_UART_MspInit+0x90>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_UART_MspInit+0x90>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_UART_MspInit+0x90>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <HAL_UART_MspInit+0x90>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_UART_MspInit+0x90>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <HAL_UART_MspInit+0x94>)
 800074a:	f001 f803 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <HAL_UART_MspInit+0x94>)
 8000764:	f000 fff6 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40013800 	.word	0x40013800
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c2:	f000 f8bf 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <DMA1_Channel1_IRQHandler+0x10>)
 80007d2:	f000 fe8b 	bl	80014ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000230 	.word	0x20000230

080007e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007e6:	f001 fa9b 	bl	8001d20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000790 	.word	0x20000790

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f008 f922 	bl	8008a6c <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20005000 	.word	0x20005000
 8000854:	00000400 	.word	0x00000400
 8000858:	200002c0 	.word	0x200002c0
 800085c:	20000ae8 	.word	0x20000ae8

08000860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800086e:	490d      	ldr	r1, [pc, #52]	; (80008a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000884:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000892:	f7ff ffe5 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000896:	f008 f8ef 	bl	8008a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089a:	f7ff fc89 	bl	80001b0 <main>
  bx lr
 800089e:	4770      	bx	lr
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80008a8:	080094b8 	.word	0x080094b8
  ldr r2, =_sbss
 80008ac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80008b0:	20000ae4 	.word	0x20000ae4

080008b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_2_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_Init+0x28>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <HAL_Init+0x28>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 fd13 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ce:	200f      	movs	r0, #15
 80008d0:	f000 f808 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d4:	f7ff fe7a 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x54>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fd2b 	bl	800135e <HAL_SYSTICK_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00e      	b.n	8000930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80a      	bhi.n	800092e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f000 fcf3 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_InitTick+0x5c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000008 	.word	0x20000008
 800093c:	20000010 	.word	0x20000010
 8000940:	2000000c 	.word	0x2000000c

08000944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x1c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x20>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a03      	ldr	r2, [pc, #12]	; (8000964 <HAL_IncTick+0x20>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000010 	.word	0x20000010
 8000964:	200002c4 	.word	0x200002c4

08000968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b02      	ldr	r3, [pc, #8]	; (8000978 <HAL_GetTick+0x10>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	200002c4 	.word	0x200002c4

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff fff0 	bl	8000968 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_Delay+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a2:	bf00      	nop
 80009a4:	f7ff ffe0 	bl	8000968 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000010 	.word	0x20000010

080009c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e0be      	b.n	8000b64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d109      	bne.n	8000a08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fe04 	bl	8000610 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 faff 	bl	800100c <ADC_ConversionStop_Disable>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 8099 	bne.w	8000b52 <HAL_ADC_Init+0x18e>
 8000a20:	7dfb      	ldrb	r3, [r7, #23]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f040 8095 	bne.w	8000b52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a30:	f023 0302 	bic.w	r3, r3, #2
 8000a34:	f043 0202 	orr.w	r2, r3, #2
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7b1b      	ldrb	r3, [r3, #12]
 8000a4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a5c:	d003      	beq.n	8000a66 <HAL_ADC_Init+0xa2>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d102      	bne.n	8000a6c <HAL_ADC_Init+0xa8>
 8000a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6a:	e000      	b.n	8000a6e <HAL_ADC_Init+0xaa>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7d1b      	ldrb	r3, [r3, #20]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d119      	bne.n	8000ab0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	7b1b      	ldrb	r3, [r3, #12]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d109      	bne.n	8000a98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	035a      	lsls	r2, r3, #13
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	e00b      	b.n	8000ab0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	f043 0220 	orr.w	r2, r3, #32
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	f043 0201 	orr.w	r2, r3, #1
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <HAL_ADC_Init+0x1a8>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	68b9      	ldr	r1, [r7, #8]
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ae0:	d003      	beq.n	8000aea <HAL_ADC_Init+0x126>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d104      	bne.n	8000af4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	051b      	lsls	r3, r3, #20
 8000af2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	430a      	orrs	r2, r1
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_ADC_Init+0x1ac>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d10b      	bne.n	8000b30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	f023 0303 	bic.w	r3, r3, #3
 8000b26:	f043 0201 	orr.w	r2, r3, #1
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b2e:	e018      	b.n	8000b62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	f023 0312 	bic.w	r3, r3, #18
 8000b38:	f043 0210 	orr.w	r2, r3, #16
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	f043 0201 	orr.w	r2, r3, #1
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b50:	e007      	b.n	8000b62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	f043 0210 	orr.w	r2, r3, #16
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b70:	ff1f0efe 	.word	0xff1f0efe

08000b74 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a64      	ldr	r2, [pc, #400]	; (8000d1c <HAL_ADC_Start_DMA+0x1a8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d004      	beq.n	8000b98 <HAL_ADC_Start_DMA+0x24>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a63      	ldr	r2, [pc, #396]	; (8000d20 <HAL_ADC_Start_DMA+0x1ac>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d106      	bne.n	8000ba6 <HAL_ADC_Start_DMA+0x32>
 8000b98:	4b60      	ldr	r3, [pc, #384]	; (8000d1c <HAL_ADC_Start_DMA+0x1a8>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f040 80b3 	bne.w	8000d0c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d101      	bne.n	8000bb4 <HAL_ADC_Start_DMA+0x40>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e0ae      	b.n	8000d12 <HAL_ADC_Start_DMA+0x19e>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f000 f9cb 	bl	8000f58 <ADC_Enable>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f040 809a 	bne.w	8000d02 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bd6:	f023 0301 	bic.w	r3, r3, #1
 8000bda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a4e      	ldr	r2, [pc, #312]	; (8000d20 <HAL_ADC_Start_DMA+0x1ac>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d105      	bne.n	8000bf8 <HAL_ADC_Start_DMA+0x84>
 8000bec:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <HAL_ADC_Start_DMA+0x1a8>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d115      	bne.n	8000c24 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d026      	beq.n	8000c60 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c22:	e01d      	b.n	8000c60 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a39      	ldr	r2, [pc, #228]	; (8000d1c <HAL_ADC_Start_DMA+0x1a8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d004      	beq.n	8000c44 <HAL_ADC_Start_DMA+0xd0>
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a38      	ldr	r2, [pc, #224]	; (8000d20 <HAL_ADC_Start_DMA+0x1ac>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d10d      	bne.n	8000c60 <HAL_ADC_Start_DMA+0xec>
 8000c44:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <HAL_ADC_Start_DMA+0x1a8>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d007      	beq.n	8000c60 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	f023 0206 	bic.w	r2, r3, #6
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c78:	e002      	b.n	8000c80 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <HAL_ADC_Start_DMA+0x1b0>)
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <HAL_ADC_Start_DMA+0x1b4>)
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <HAL_ADC_Start_DMA+0x1b8>)
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f06f 0202 	mvn.w	r2, #2
 8000ca8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cb8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6a18      	ldr	r0, [r3, #32]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	334c      	adds	r3, #76	; 0x4c
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f000 fbaf 	bl	800142c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cd8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cdc:	d108      	bne.n	8000cf0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cec:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cee:	e00f      	b.n	8000d10 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cfe:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d00:	e006      	b.n	8000d10 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000d0a:	e001      	b.n	8000d10 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40012400 	.word	0x40012400
 8000d20:	40012800 	.word	0x40012800
 8000d24:	0800108f 	.word	0x0800108f
 8000d28:	0800110b 	.word	0x0800110b
 8000d2c:	08001127 	.word	0x08001127

08000d30 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
	...

08000d68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <HAL_ADC_ConfigChannel+0x20>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e0dc      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x1da>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	d81c      	bhi.n	8000dd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	3b05      	subs	r3, #5
 8000daa:	221f      	movs	r2, #31
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4019      	ands	r1, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3b05      	subs	r3, #5
 8000dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd0:	e03c      	b.n	8000e4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b0c      	cmp	r3, #12
 8000dd8:	d81c      	bhi.n	8000e14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	3b23      	subs	r3, #35	; 0x23
 8000dec:	221f      	movs	r2, #31
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4019      	ands	r1, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	3b23      	subs	r3, #35	; 0x23
 8000e06:	fa00 f203 	lsl.w	r2, r0, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
 8000e12:	e01b      	b.n	8000e4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	3b41      	subs	r3, #65	; 0x41
 8000e26:	221f      	movs	r2, #31
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4019      	ands	r1, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b41      	subs	r3, #65	; 0x41
 8000e40:	fa00 f203 	lsl.w	r2, r0, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	d91c      	bls.n	8000e8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68d9      	ldr	r1, [r3, #12]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	3b1e      	subs	r3, #30
 8000e66:	2207      	movs	r2, #7
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4019      	ands	r1, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3b1e      	subs	r3, #30
 8000e80:	fa00 f203 	lsl.w	r2, r0, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	e019      	b.n	8000ec2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6919      	ldr	r1, [r3, #16]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4019      	ands	r1, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6898      	ldr	r0, [r3, #8]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d003      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ece:	2b11      	cmp	r3, #17
 8000ed0:	d132      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d125      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d126      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ef8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b10      	cmp	r3, #16
 8000f00:	d11a      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	0c9a      	lsrs	r2, r3, #18
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f18:	e002      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f9      	bne.n	8000f1a <HAL_ADC_ConfigChannel+0x1b2>
 8000f26:	e007      	b.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f043 0220 	orr.w	r2, r3, #32
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40012400 	.word	0x40012400
 8000f50:	20000008 	.word	0x20000008
 8000f54:	431bde83 	.word	0x431bde83

08000f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d040      	beq.n	8000ff8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0201 	orr.w	r2, r2, #1
 8000f84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <ADC_Enable+0xac>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <ADC_Enable+0xb0>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	0c9b      	lsrs	r3, r3, #18
 8000f92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f94:	e002      	b.n	8000f9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f9      	bne.n	8000f96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fa2:	f7ff fce1 	bl	8000968 <HAL_GetTick>
 8000fa6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fa8:	e01f      	b.n	8000fea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000faa:	f7ff fcdd 	bl	8000968 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d918      	bls.n	8000fea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d011      	beq.n	8000fea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	f043 0210 	orr.w	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e007      	b.n	8000ffa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d1d8      	bne.n	8000faa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	431bde83 	.word	0x431bde83

0800100c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b01      	cmp	r3, #1
 8001024:	d12e      	bne.n	8001084 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001036:	f7ff fc97 	bl	8000968 <HAL_GetTick>
 800103a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800103c:	e01b      	b.n	8001076 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800103e:	f7ff fc93 	bl	8000968 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d914      	bls.n	8001076 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10d      	bne.n	8001076 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	f043 0210 	orr.w	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e007      	b.n	8001086 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	d0dc      	beq.n	800103e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d127      	bne.n	80010f8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010c2:	d115      	bne.n	80010f0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d111      	bne.n	80010f0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fe1d 	bl	8000d30 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80010f6:	e004      	b.n	8001102 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	4798      	blx	r3
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff fe12 	bl	8000d42 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	f043 0204 	orr.w	r2, r3, #4
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fe01 	bl	8000d54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4906      	ldr	r1, [pc, #24]	; (80011f4 <__NVIC_EnableIRQ+0x34>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff90 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff2d 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff42 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff90 	bl	800124c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5f 	bl	80011f8 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff35 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa2 	bl	80012b0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e043      	b.n	8001416 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_DMA_Init+0xa8>)
 8001396:	4413      	add	r3, r2
 8001398:	4a22      	ldr	r2, [pc, #136]	; (8001424 <HAL_DMA_Init+0xac>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	009a      	lsls	r2, r3, #2
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <HAL_DMA_Init+0xb0>)
 80013aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	bffdfff8 	.word	0xbffdfff8
 8001424:	cccccccd 	.word	0xcccccccd
 8001428:	40020000 	.word	0x40020000

0800142c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_DMA_Start_IT+0x20>
 8001448:	2302      	movs	r3, #2
 800144a:	e04a      	b.n	80014e2 <HAL_DMA_Start_IT+0xb6>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800145a:	2b01      	cmp	r3, #1
 800145c:	d13a      	bne.n	80014d4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2202      	movs	r2, #2
 8001462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f938 	bl	80016f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 020e 	orr.w	r2, r2, #14
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e00f      	b.n	80014c2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0204 	bic.w	r2, r2, #4
 80014b0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 020a 	orr.w	r2, r2, #10
 80014c0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e005      	b.n	80014e0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014dc:	2302      	movs	r3, #2
 80014de:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	2204      	movs	r2, #4
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d04f      	beq.n	80015b4 <HAL_DMA_IRQHandler+0xc8>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d04a      	beq.n	80015b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0204 	bic.w	r2, r2, #4
 800153a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a66      	ldr	r2, [pc, #408]	; (80016dc <HAL_DMA_IRQHandler+0x1f0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d029      	beq.n	800159a <HAL_DMA_IRQHandler+0xae>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a65      	ldr	r2, [pc, #404]	; (80016e0 <HAL_DMA_IRQHandler+0x1f4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d022      	beq.n	8001596 <HAL_DMA_IRQHandler+0xaa>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_DMA_IRQHandler+0x1f8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01a      	beq.n	8001590 <HAL_DMA_IRQHandler+0xa4>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a62      	ldr	r2, [pc, #392]	; (80016e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d012      	beq.n	800158a <HAL_DMA_IRQHandler+0x9e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a60      	ldr	r2, [pc, #384]	; (80016ec <HAL_DMA_IRQHandler+0x200>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00a      	beq.n	8001584 <HAL_DMA_IRQHandler+0x98>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5f      	ldr	r2, [pc, #380]	; (80016f0 <HAL_DMA_IRQHandler+0x204>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d102      	bne.n	800157e <HAL_DMA_IRQHandler+0x92>
 8001578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157c:	e00e      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 800157e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001582:	e00b      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 8001584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001588:	e008      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 800158a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800158e:	e005      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 8001590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001594:	e002      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	e000      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 800159a:	2304      	movs	r3, #4
 800159c:	4a55      	ldr	r2, [pc, #340]	; (80016f4 <HAL_DMA_IRQHandler+0x208>)
 800159e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 8094 	beq.w	80016d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015b2:	e08e      	b.n	80016d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	2202      	movs	r2, #2
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d056      	beq.n	8001672 <HAL_DMA_IRQHandler+0x186>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d051      	beq.n	8001672 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10b      	bne.n	80015f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020a 	bic.w	r2, r2, #10
 80015ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a38      	ldr	r2, [pc, #224]	; (80016dc <HAL_DMA_IRQHandler+0x1f0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d029      	beq.n	8001652 <HAL_DMA_IRQHandler+0x166>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <HAL_DMA_IRQHandler+0x1f4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d022      	beq.n	800164e <HAL_DMA_IRQHandler+0x162>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a35      	ldr	r2, [pc, #212]	; (80016e4 <HAL_DMA_IRQHandler+0x1f8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01a      	beq.n	8001648 <HAL_DMA_IRQHandler+0x15c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a34      	ldr	r2, [pc, #208]	; (80016e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d012      	beq.n	8001642 <HAL_DMA_IRQHandler+0x156>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a32      	ldr	r2, [pc, #200]	; (80016ec <HAL_DMA_IRQHandler+0x200>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00a      	beq.n	800163c <HAL_DMA_IRQHandler+0x150>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a31      	ldr	r2, [pc, #196]	; (80016f0 <HAL_DMA_IRQHandler+0x204>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d102      	bne.n	8001636 <HAL_DMA_IRQHandler+0x14a>
 8001630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001634:	e00e      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 8001636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800163a:	e00b      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 800163c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001640:	e008      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 8001642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001646:	e005      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 8001648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164c:	e002      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 800164e:	2320      	movs	r3, #32
 8001650:	e000      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 8001652:	2302      	movs	r3, #2
 8001654:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_DMA_IRQHandler+0x208>)
 8001656:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d034      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001670:	e02f      	b.n	80016d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2208      	movs	r2, #8
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d028      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x1e8>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d023      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 020e 	bic.w	r2, r2, #14
 800169a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a4:	2101      	movs	r1, #1
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    }
  }
  return;
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
}
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020008 	.word	0x40020008
 80016e0:	4002001c 	.word	0x4002001c
 80016e4:	40020030 	.word	0x40020030
 80016e8:	40020044 	.word	0x40020044
 80016ec:	40020058 	.word	0x40020058
 80016f0:	4002006c 	.word	0x4002006c
 80016f4:	40020000 	.word	0x40020000

080016f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170e:	2101      	movs	r1, #1
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d108      	bne.n	8001738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001736:	e007      	b.n	8001748 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	60da      	str	r2, [r3, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b08b      	sub	sp, #44	; 0x2c
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e169      	b.n	8001a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001768:	2201      	movs	r2, #1
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 8158 	bne.w	8001a36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4a9a      	ldr	r2, [pc, #616]	; (80019f4 <HAL_GPIO_Init+0x2a0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d05e      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 8001790:	4a98      	ldr	r2, [pc, #608]	; (80019f4 <HAL_GPIO_Init+0x2a0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d875      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 8001796:	4a98      	ldr	r2, [pc, #608]	; (80019f8 <HAL_GPIO_Init+0x2a4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d058      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 800179c:	4a96      	ldr	r2, [pc, #600]	; (80019f8 <HAL_GPIO_Init+0x2a4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d86f      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017a2:	4a96      	ldr	r2, [pc, #600]	; (80019fc <HAL_GPIO_Init+0x2a8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d052      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017a8:	4a94      	ldr	r2, [pc, #592]	; (80019fc <HAL_GPIO_Init+0x2a8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d869      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ae:	4a94      	ldr	r2, [pc, #592]	; (8001a00 <HAL_GPIO_Init+0x2ac>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d04c      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017b4:	4a92      	ldr	r2, [pc, #584]	; (8001a00 <HAL_GPIO_Init+0x2ac>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d863      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ba:	4a92      	ldr	r2, [pc, #584]	; (8001a04 <HAL_GPIO_Init+0x2b0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d046      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017c0:	4a90      	ldr	r2, [pc, #576]	; (8001a04 <HAL_GPIO_Init+0x2b0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d85d      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d82a      	bhi.n	8001820 <HAL_GPIO_Init+0xcc>
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d859      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <HAL_GPIO_Init+0x80>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	0800184f 	.word	0x0800184f
 80017d8:	08001829 	.word	0x08001829
 80017dc:	0800183b 	.word	0x0800183b
 80017e0:	0800187d 	.word	0x0800187d
 80017e4:	08001883 	.word	0x08001883
 80017e8:	08001883 	.word	0x08001883
 80017ec:	08001883 	.word	0x08001883
 80017f0:	08001883 	.word	0x08001883
 80017f4:	08001883 	.word	0x08001883
 80017f8:	08001883 	.word	0x08001883
 80017fc:	08001883 	.word	0x08001883
 8001800:	08001883 	.word	0x08001883
 8001804:	08001883 	.word	0x08001883
 8001808:	08001883 	.word	0x08001883
 800180c:	08001883 	.word	0x08001883
 8001810:	08001883 	.word	0x08001883
 8001814:	08001883 	.word	0x08001883
 8001818:	08001831 	.word	0x08001831
 800181c:	08001845 	.word	0x08001845
 8001820:	4a79      	ldr	r2, [pc, #484]	; (8001a08 <HAL_GPIO_Init+0x2b4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001826:	e02c      	b.n	8001882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e029      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	3304      	adds	r3, #4
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e024      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	3308      	adds	r3, #8
 8001840:	623b      	str	r3, [r7, #32]
          break;
 8001842:	e01f      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	330c      	adds	r3, #12
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e01a      	b.n	8001884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001856:	2304      	movs	r3, #4
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e013      	b.n	8001884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001864:	2308      	movs	r3, #8
 8001866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	611a      	str	r2, [r3, #16]
          break;
 800186e:	e009      	b.n	8001884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001870:	2308      	movs	r3, #8
 8001872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	615a      	str	r2, [r3, #20]
          break;
 800187a:	e003      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x130>
          break;
 8001882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d801      	bhi.n	800188e <HAL_GPIO_Init+0x13a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	e001      	b.n	8001892 <HAL_GPIO_Init+0x13e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3304      	adds	r3, #4
 8001892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2bff      	cmp	r3, #255	; 0xff
 8001898:	d802      	bhi.n	80018a0 <HAL_GPIO_Init+0x14c>
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x152>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	3b08      	subs	r3, #8
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	210f      	movs	r1, #15
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	6a39      	ldr	r1, [r7, #32]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80b1 	beq.w	8001a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d4:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_GPIO_Init+0x2b8>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_GPIO_Init+0x2b8>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_GPIO_Init+0x2b8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018ec:	4a48      	ldr	r2, [pc, #288]	; (8001a10 <HAL_GPIO_Init+0x2bc>)
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a40      	ldr	r2, [pc, #256]	; (8001a14 <HAL_GPIO_Init+0x2c0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d013      	beq.n	8001940 <HAL_GPIO_Init+0x1ec>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a3f      	ldr	r2, [pc, #252]	; (8001a18 <HAL_GPIO_Init+0x2c4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00d      	beq.n	800193c <HAL_GPIO_Init+0x1e8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3e      	ldr	r2, [pc, #248]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d007      	beq.n	8001938 <HAL_GPIO_Init+0x1e4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3d      	ldr	r2, [pc, #244]	; (8001a20 <HAL_GPIO_Init+0x2cc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_GPIO_Init+0x1e0>
 8001930:	2303      	movs	r3, #3
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 8001934:	2304      	movs	r3, #4
 8001936:	e004      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 8001938:	2302      	movs	r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 8001940:	2300      	movs	r3, #0
 8001942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001944:	f002 0203 	and.w	r2, r2, #3
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	4093      	lsls	r3, r2
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001952:	492f      	ldr	r1, [pc, #188]	; (8001a10 <HAL_GPIO_Init+0x2bc>)
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	492c      	ldr	r1, [pc, #176]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	4928      	ldr	r1, [pc, #160]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4922      	ldr	r1, [pc, #136]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	491e      	ldr	r1, [pc, #120]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4918      	ldr	r1, [pc, #96]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4914      	ldr	r1, [pc, #80]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d021      	beq.n	8001a28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	490e      	ldr	r1, [pc, #56]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60cb      	str	r3, [r1, #12]
 80019f0:	e021      	b.n	8001a36 <HAL_GPIO_Init+0x2e2>
 80019f2:	bf00      	nop
 80019f4:	10320000 	.word	0x10320000
 80019f8:	10310000 	.word	0x10310000
 80019fc:	10220000 	.word	0x10220000
 8001a00:	10210000 	.word	0x10210000
 8001a04:	10120000 	.word	0x10120000
 8001a08:	10110000 	.word	0x10110000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	40010800 	.word	0x40010800
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	40011000 	.word	0x40011000
 8001a20:	40011400 	.word	0x40011400
 8001a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_GPIO_Init+0x304>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	4909      	ldr	r1, [pc, #36]	; (8001a58 <HAL_GPIO_Init+0x304>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	3301      	adds	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f47f ae8e 	bne.w	8001768 <HAL_GPIO_Init+0x14>
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	372c      	adds	r7, #44	; 0x2c
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	40010400 	.word	0x40010400

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a78:	e003      	b.n	8001a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	041a      	lsls	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43d9      	mvns	r1, r3
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	400b      	ands	r3, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	611a      	str	r2, [r3, #16]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac0:	b08b      	sub	sp, #44	; 0x2c
 8001ac2:	af06      	add	r7, sp, #24
 8001ac4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0fd      	b.n	8001ccc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f006 fd33 	bl	8008550 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2203      	movs	r2, #3
 8001aee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fb3c 	bl	8004174 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	687e      	ldr	r6, [r7, #4]
 8001b04:	466d      	mov	r5, sp
 8001b06:	f106 0410 	add.w	r4, r6, #16
 8001b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	602b      	str	r3, [r5, #0]
 8001b12:	1d33      	adds	r3, r6, #4
 8001b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b16:	6838      	ldr	r0, [r7, #0]
 8001b18:	f002 fb06 	bl	8004128 <USB_CoreInit>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0ce      	b.n	8001ccc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fb37 	bl	80041a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e04c      	b.n	8001bda <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	3301      	adds	r3, #1
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	440b      	add	r3, r1
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	b298      	uxth	r0, r3
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3336      	adds	r3, #54	; 0x36
 8001b7e:	4602      	mov	r2, r0
 8001b80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	3303      	adds	r3, #3
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3338      	adds	r3, #56	; 0x38
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	333c      	adds	r3, #60	; 0x3c
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	3340      	adds	r3, #64	; 0x40
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3ad      	bcc.n	8001b40 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e044      	b.n	8001c74 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d3b5      	bcc.n	8001bea <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	687e      	ldr	r6, [r7, #4]
 8001c86:	466d      	mov	r5, sp
 8001c88:	f106 0410 	add.w	r4, r6, #16
 8001c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	602b      	str	r3, [r5, #0]
 8001c94:	1d33      	adds	r3, r6, #4
 8001c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	f002 fa91 	bl	80041c0 <USB_DevInit>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e00d      	b.n	8001ccc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 ff43 	bl	8006b50 <USB_DevDisconnect>

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_PCD_Start+0x16>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e016      	b.n	8001d18 <HAL_PCD_Start+0x44>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f002 fa26 	bl	8004148 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f006 fe7d 	bl	80089fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 ff17 	bl	8006b3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 ff19 	bl	8006b64 <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d3c:	d102      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fb48 	bl	80023d4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 ff0b 	bl	8006b64 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d58:	d112      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f006 fc67 	bl	8008646 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f923 	bl	8001fc6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 feed 	bl	8006b64 <USB_ReadInterrupts>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d94:	d10b      	bne.n	8001dae <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001da8:	b292      	uxth	r2, r2
 8001daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 fed6 	bl	8006b64 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc2:	d10b      	bne.n	8001ddc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 febf 	bl	8006b64 <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df0:	d126      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0204 	bic.w	r2, r2, #4
 8001e04:	b292      	uxth	r2, r2
 8001e06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0208 	bic.w	r2, r2, #8
 8001e1c:	b292      	uxth	r2, r2
 8001e1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f006 fc48 	bl	80086b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fe8d 	bl	8006b64 <USB_ReadInterrupts>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e54:	f040 8082 	bne.w	8001f5c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	77fb      	strb	r3, [r7, #31]
 8001e5c:	e010      	b.n	8001e80 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	7ffb      	ldrb	r3, [r7, #31]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	441a      	add	r2, r3
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	8812      	ldrh	r2, [r2, #0]
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	3320      	adds	r3, #32
 8001e74:	443b      	add	r3, r7
 8001e76:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	77fb      	strb	r3, [r7, #31]
 8001e80:	7ffb      	ldrb	r3, [r7, #31]
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d9eb      	bls.n	8001e5e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	b292      	uxth	r2, r2
 8001e9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001eb6:	bf00      	nop
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f6      	beq.n	8001eb8 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001edc:	b292      	uxth	r2, r2
 8001ede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	77fb      	strb	r3, [r7, #31]
 8001ee6:	e00f      	b.n	8001f08 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ee8:	7ffb      	ldrb	r3, [r7, #31]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	7ffa      	ldrb	r2, [r7, #31]
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	440a      	add	r2, r1
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	3320      	adds	r3, #32
 8001efa:	443b      	add	r3, r7
 8001efc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f00:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f02:	7ffb      	ldrb	r3, [r7, #31]
 8001f04:	3301      	adds	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]
 8001f08:	7ffb      	ldrb	r3, [r7, #31]
 8001f0a:	2b07      	cmp	r3, #7
 8001f0c:	d9ec      	bls.n	8001ee8 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0208 	orr.w	r2, r2, #8
 8001f20:	b292      	uxth	r2, r2
 8001f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f38:	b292      	uxth	r2, r2
 8001f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0204 	orr.w	r2, r2, #4
 8001f50:	b292      	uxth	r2, r2
 8001f52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f006 fb94 	bl	8008684 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fdff 	bl	8006b64 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f70:	d10e      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f84:	b292      	uxth	r2, r2
 8001f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f006 fb4d 	bl	800862a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fde5 	bl	8006b64 <USB_ReadInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa4:	d10b      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_PCD_SetAddress+0x1a>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e013      	b.n	8002008 <HAL_PCD_SetAddress+0x42>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f004 fd8c 	bl	8006b16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	70fb      	strb	r3, [r7, #3]
 8002022:	460b      	mov	r3, r1
 8002024:	803b      	strh	r3, [r7, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800202e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002032:	2b00      	cmp	r3, #0
 8002034:	da0e      	bge.n	8002054 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	705a      	strb	r2, [r3, #1]
 8002052:	e00e      	b.n	8002072 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 0207 	and.w	r2, r3, #7
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800207e:	883a      	ldrh	r2, [r7, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	78ba      	ldrb	r2, [r7, #2]
 8002088:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800209c:	78bb      	ldrb	r3, [r7, #2]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d102      	bne.n	80020a8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_PCD_EP_Open+0xa6>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e00e      	b.n	80020d4 <HAL_PCD_EP_Open+0xc4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 f89b 	bl	8004200 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020d2:	7afb      	ldrb	r3, [r7, #11]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da0e      	bge.n	800210e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	705a      	strb	r2, [r3, #1]
 800210c:	e00e      	b.n	800212c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 0207 	and.w	r2, r3, #7
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_PCD_EP_Close+0x6a>
 8002142:	2302      	movs	r3, #2
 8002144:	e00e      	b.n	8002164 <HAL_PCD_EP_Close+0x88>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fbbd 	bl	80048d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	460b      	mov	r3, r1
 800217a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800217c:	7afb      	ldrb	r3, [r7, #11]
 800217e:	f003 0207 	and.w	r2, r3, #7
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6979      	ldr	r1, [r7, #20]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fd6f 	bl	8004cac <USB_EPStartXfer>
 80021ce:	e005      	b.n	80021dc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6979      	ldr	r1, [r7, #20]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 fd68 	bl	8004cac <USB_EPStartXfer>
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	460b      	mov	r3, r1
 80021f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2201      	movs	r2, #1
 8002230:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	b2da      	uxtb	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800223e:	7afb      	ldrb	r3, [r7, #11]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6979      	ldr	r1, [r7, #20]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fd2c 	bl	8004cac <USB_EPStartXfer>
 8002254:	e005      	b.n	8002262 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6979      	ldr	r1, [r7, #20]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fd25 	bl	8004cac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 0207 	and.w	r2, r3, #7
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d901      	bls.n	800228a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e04c      	b.n	8002324 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800228a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228e:	2b00      	cmp	r3, #0
 8002290:	da0e      	bge.n	80022b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	705a      	strb	r2, [r3, #1]
 80022ae:	e00c      	b.n	80022ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_PCD_EP_SetStall+0x7e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e01c      	b.n	8002324 <HAL_PCD_EP_SetStall+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fb0f 	bl	800691c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	2b00      	cmp	r3, #0
 8002306:	d108      	bne.n	800231a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f004 fc34 	bl	8006b82 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	d901      	bls.n	800234a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e040      	b.n	80023cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800234a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234e:	2b00      	cmp	r3, #0
 8002350:	da0e      	bge.n	8002370 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	705a      	strb	r2, [r3, #1]
 800236e:	e00e      	b.n	800238e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 0207 	and.w	r2, r3, #7
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_PCD_EP_ClrStall+0x82>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e00e      	b.n	80023cc <HAL_PCD_EP_ClrStall+0xa0>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 fafd 	bl	80069bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	; 0x38
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023dc:	e2ec      	b.n	80029b8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80023f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 8161 	bne.w	80026c0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d152      	bne.n	80024ae <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002418:	81fb      	strh	r3, [r7, #14]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	89fb      	ldrh	r3, [r7, #14]
 8002420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002428:	b29b      	uxth	r3, r3
 800242a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3328      	adds	r3, #40	; 0x28
 8002430:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	3302      	adds	r3, #2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	441a      	add	r2, r3
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f006 f8c1 	bl	80085f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 829b 	beq.w	80029b8 <PCD_EP_ISR_Handler+0x5e4>
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 8296 	bne.w	80029b8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002498:	b2da      	uxtb	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b292      	uxth	r2, r2
 80024a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024ac:	e284      	b.n	80029b8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d034      	beq.n	8002532 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	3306      	adds	r3, #6
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002506:	b29b      	uxth	r3, r3
 8002508:	f004 fb8b 	bl	8006c22 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29a      	uxth	r2, r3
 8002514:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002518:	4013      	ands	r3, r2
 800251a:	823b      	strh	r3, [r7, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	8a3a      	ldrh	r2, [r7, #16]
 8002522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002526:	b292      	uxth	r2, r2
 8002528:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f006 f836 	bl	800859c <HAL_PCD_SetupStageCallback>
 8002530:	e242      	b.n	80029b8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002532:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002536:	2b00      	cmp	r3, #0
 8002538:	f280 823e 	bge.w	80029b8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002548:	4013      	ands	r3, r2
 800254a:	83bb      	strh	r3, [r7, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	8bba      	ldrh	r2, [r7, #28]
 8002552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002556:	b292      	uxth	r2, r2
 8002558:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	3306      	adds	r3, #6
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d019      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x1ee>
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d015      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	6959      	ldr	r1, [r3, #20]
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f004 fb3b 	bl	8006c22 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	441a      	add	r2, r3
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025ba:	2100      	movs	r1, #0
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f005 ffff 	bl	80085c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 81f2 	bne.w	80029b8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4413      	add	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d112      	bne.n	8002622 <PCD_EP_ISR_Handler+0x24e>
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002606:	b29a      	uxth	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800261a:	b29a      	uxth	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	e02f      	b.n	8002682 <PCD_EP_ISR_Handler+0x2ae>
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b3e      	cmp	r3, #62	; 0x3e
 8002628:	d813      	bhi.n	8002652 <PCD_EP_ISR_Handler+0x27e>
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <PCD_EP_ISR_Handler+0x270>
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	3301      	adds	r3, #1
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	b29b      	uxth	r3, r3
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	b29a      	uxth	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e017      	b.n	8002682 <PCD_EP_ISR_Handler+0x2ae>
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <PCD_EP_ISR_Handler+0x298>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	3b01      	subs	r3, #1
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	b29b      	uxth	r3, r3
 8002670:	029b      	lsls	r3, r3, #10
 8002672:	b29b      	uxth	r3, r3
 8002674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800267c:	b29a      	uxth	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800268e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002692:	827b      	strh	r3, [r7, #18]
 8002694:	8a7b      	ldrh	r3, [r7, #18]
 8002696:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800269a:	827b      	strh	r3, [r7, #18]
 800269c:	8a7b      	ldrh	r3, [r7, #18]
 800269e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026a2:	827b      	strh	r3, [r7, #18]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	8a7b      	ldrh	r3, [r7, #18]
 80026aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	8013      	strh	r3, [r2, #0]
 80026be:	e17b      	b.n	80029b8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f280 80ea 	bge.w	80028b0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026f2:	4013      	ands	r3, r2
 80026f4:	853b      	strh	r3, [r7, #40]	; 0x28
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002706:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800270a:	b292      	uxth	r2, r2
 800270c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800270e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	7b1b      	ldrb	r3, [r3, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d122      	bne.n	8002772 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002734:	b29b      	uxth	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	3306      	adds	r3, #6
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002754:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002756:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8087 	beq.w	800286c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	6959      	ldr	r1, [r3, #20]
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	88da      	ldrh	r2, [r3, #6]
 800276a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800276c:	f004 fa59 	bl	8006c22 <USB_ReadPMA>
 8002770:	e07c      	b.n	800286c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	78db      	ldrb	r3, [r3, #3]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d108      	bne.n	800278c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800277a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800277c:	461a      	mov	r2, r3
 800277e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f927 	bl	80029d4 <HAL_PCD_EP_DB_Receive>
 8002786:	4603      	mov	r3, r0
 8002788:	86fb      	strh	r3, [r7, #54]	; 0x36
 800278a:	e06f      	b.n	800286c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	441a      	add	r2, r3
 80027b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d021      	beq.n	800282a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	3302      	adds	r3, #2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002810:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002812:	2b00      	cmp	r3, #0
 8002814:	d02a      	beq.n	800286c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	6959      	ldr	r1, [r3, #20]
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	891a      	ldrh	r2, [r3, #8]
 8002822:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002824:	f004 f9fd 	bl	8006c22 <USB_ReadPMA>
 8002828:	e020      	b.n	800286c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	3306      	adds	r3, #6
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002852:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	6959      	ldr	r1, [r3, #20]
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	895a      	ldrh	r2, [r3, #10]
 8002866:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002868:	f004 f9db 	bl	8006c22 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002872:	441a      	add	r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287e:	441a      	add	r2, r3
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <PCD_EP_ISR_Handler+0x4c2>
 800288c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d206      	bcs.n	80028a4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f005 fe8f 	bl	80085c0 <HAL_PCD_DataOutStageCallback>
 80028a2:	e005      	b.n	80028b0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 f9fe 	bl	8004cac <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d07e      	beq.n	80029b8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80028ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	843b      	strh	r3, [r7, #32]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	8c3b      	ldrh	r3, [r7, #32]
 80028fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002902:	b29b      	uxth	r3, r3
 8002904:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d00c      	beq.n	8002928 <PCD_EP_ISR_Handler+0x554>
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	78db      	ldrb	r3, [r3, #3]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800291a:	2b02      	cmp	r3, #2
 800291c:	d146      	bne.n	80029ac <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800291e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d141      	bne.n	80029ac <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	3302      	adds	r3, #2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002950:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	8bfb      	ldrh	r3, [r7, #30]
 8002958:	429a      	cmp	r2, r3
 800295a:	d906      	bls.n	800296a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	8bfb      	ldrh	r3, [r7, #30]
 8002962:	1ad2      	subs	r2, r2, r3
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	619a      	str	r2, [r3, #24]
 8002968:	e002      	b.n	8002970 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d106      	bne.n	8002986 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f005 fe39 	bl	80085f6 <HAL_PCD_DataInStageCallback>
 8002984:	e018      	b.n	80029b8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	8bfb      	ldrh	r3, [r7, #30]
 800298c:	441a      	add	r2, r3
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	8bfb      	ldrh	r3, [r7, #30]
 8002998:	441a      	add	r2, r3
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 f981 	bl	8004cac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029aa:	e005      	b.n	80029b8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029ae:	461a      	mov	r2, r3
 80029b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f91b 	bl	8002bee <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	b21b      	sxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f6ff ad0a 	blt.w	80023de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3738      	adds	r7, #56	; 0x38
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d07e      	beq.n	8002aea <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	3302      	adds	r3, #2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a14:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	8b7b      	ldrh	r3, [r7, #26]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d306      	bcc.n	8002a2e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	8b7b      	ldrh	r3, [r7, #26]
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	619a      	str	r2, [r3, #24]
 8002a2c:	e002      	b.n	8002a34 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d123      	bne.n	8002a84 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	833b      	strh	r3, [r7, #24]
 8002a58:	8b3b      	ldrh	r3, [r7, #24]
 8002a5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a5e:	833b      	strh	r3, [r7, #24]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	8b3b      	ldrh	r3, [r7, #24]
 8002a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01f      	beq.n	8002ace <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa8:	82fb      	strh	r3, [r7, #22]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	441a      	add	r2, r3
 8002ab8:	8afb      	ldrh	r3, [r7, #22]
 8002aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8087 	beq.w	8002be4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	6959      	ldr	r1, [r3, #20]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	891a      	ldrh	r2, [r3, #8]
 8002ae2:	8b7b      	ldrh	r3, [r7, #26]
 8002ae4:	f004 f89d 	bl	8006c22 <USB_ReadPMA>
 8002ae8:	e07c      	b.n	8002be4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	3306      	adds	r3, #6
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	8b7b      	ldrh	r3, [r7, #26]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d306      	bcc.n	8002b2c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	8b7b      	ldrh	r3, [r7, #26]
 8002b24:	1ad2      	subs	r2, r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	619a      	str	r2, [r3, #24]
 8002b2a:	e002      	b.n	8002b32 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d123      	bne.n	8002b82 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	83fb      	strh	r3, [r7, #30]
 8002b56:	8bfb      	ldrh	r3, [r7, #30]
 8002b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b5c:	83fb      	strh	r3, [r7, #30]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	8bfb      	ldrh	r3, [r7, #30]
 8002b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11f      	bne.n	8002bcc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	83bb      	strh	r3, [r7, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	8bbb      	ldrh	r3, [r7, #28]
 8002bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bcc:	8b7b      	ldrh	r3, [r7, #26]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	6959      	ldr	r1, [r3, #20]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	895a      	ldrh	r2, [r3, #10]
 8002bde:	8b7b      	ldrh	r3, [r7, #26]
 8002be0:	f004 f81f 	bl	8006c22 <USB_ReadPMA>
    }
  }

  return count;
 8002be4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b0a2      	sub	sp, #136	; 0x88
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 81c7 	beq.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d907      	bls.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c48:	1ad2      	subs	r2, r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	619a      	str	r2, [r3, #24]
 8002c4e:	e002      	b.n	8002c56 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 80b9 	bne.w	8002dd2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	785b      	ldrb	r3, [r3, #1]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d126      	bne.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	4413      	add	r3, r2
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	011a      	lsls	r2, r3, #4
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	4413      	add	r3, r2
 8002c8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	801a      	strh	r2, [r3, #0]
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	801a      	strh	r2, [r3, #0]
 8002cb4:	e01a      	b.n	8002cec <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d116      	bne.n	8002cec <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	4413      	add	r3, r2
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	011a      	lsls	r2, r3, #4
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	4413      	add	r3, r2
 8002ce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	785b      	ldrb	r3, [r3, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d126      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	011a      	lsls	r2, r3, #4
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	801a      	strh	r2, [r3, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e017      	b.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d113      	bne.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	4413      	add	r3, r2
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	011a      	lsls	r2, r3, #4
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2200      	movs	r2, #0
 8002d76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f005 fc39 	bl	80085f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 82d4 	beq.w	8003338 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	827b      	strh	r3, [r7, #18]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	441a      	add	r2, r3
 8002dba:	8a7b      	ldrh	r3, [r7, #18]
 8002dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	8013      	strh	r3, [r2, #0]
 8002dd0:	e2b2      	b.n	8003338 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d021      	beq.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	f040 8286 	bne.w	8003338 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e34:	441a      	add	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e42:	441a      	add	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d309      	bcc.n	8002e68 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e60:	1ad2      	subs	r2, r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	621a      	str	r2, [r3, #32]
 8002e66:	e015      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e7e:	e009      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d155      	bne.n	8002f48 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	4413      	add	r3, r2
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	011a      	lsls	r2, r3, #4
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d112      	bne.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x302>
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	801a      	strh	r2, [r3, #0]
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	e047      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ef4:	d811      	bhi.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f08:	3301      	adds	r3, #1
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e032      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x342>
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	029b      	lsls	r3, r3, #10
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	e01b      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d117      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	643b      	str	r3, [r7, #64]	; 0x40
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f64:	4413      	add	r3, r2
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	011a      	lsls	r2, r3, #4
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f70:	4413      	add	r3, r2
 8002f72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	891a      	ldrh	r2, [r3, #8]
 8002f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f003 fe02 	bl	8006b98 <USB_WritePMA>
 8002f94:	e1d0      	b.n	8003338 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3306      	adds	r3, #6
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d307      	bcc.n	8002fde <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	619a      	str	r2, [r3, #24]
 8002fdc:	e002      	b.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 80c4 	bne.w	8003176 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d126      	bne.n	8003044 <HAL_PCD_EP_DB_Transmit+0x456>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003004:	b29b      	uxth	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	4413      	add	r3, r2
 800300c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	011a      	lsls	r2, r3, #4
 8003014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003016:	4413      	add	r3, r2
 8003018:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800301c:	66bb      	str	r3, [r7, #104]	; 0x68
 800301e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003028:	b29a      	uxth	r2, r3
 800302a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800302c:	801a      	strh	r2, [r3, #0]
 800302e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303c:	b29a      	uxth	r2, r3
 800303e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	e01a      	b.n	800307a <HAL_PCD_EP_DB_Transmit+0x48c>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	785b      	ldrb	r3, [r3, #1]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d116      	bne.n	800307a <HAL_PCD_EP_DB_Transmit+0x48c>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	677b      	str	r3, [r7, #116]	; 0x74
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003060:	4413      	add	r3, r2
 8003062:	677b      	str	r3, [r7, #116]	; 0x74
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	011a      	lsls	r2, r3, #4
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	4413      	add	r3, r2
 800306e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003072:	673b      	str	r3, [r7, #112]	; 0x70
 8003074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003076:	2200      	movs	r2, #0
 8003078:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d12f      	bne.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030a0:	4413      	add	r3, r2
 80030a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	011a      	lsls	r2, r3, #4
 80030ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030b0:	4413      	add	r3, r2
 80030b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030cc:	801a      	strh	r2, [r3, #0]
 80030ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030de:	b29a      	uxth	r2, r3
 80030e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e4:	801a      	strh	r2, [r3, #0]
 80030e6:	e017      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x52a>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	785b      	ldrb	r3, [r3, #1]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d113      	bne.n	8003118 <HAL_PCD_EP_DB_Transmit+0x52a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	4413      	add	r3, r2
 8003100:	67bb      	str	r3, [r7, #120]	; 0x78
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	011a      	lsls	r2, r3, #4
 8003108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310a:	4413      	add	r3, r2
 800310c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003110:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003114:	2200      	movs	r2, #0
 8003116:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f005 fa69 	bl	80085f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8104 	bne.w	8003338 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	441a      	add	r2, r3
 800315c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003170:	b29b      	uxth	r3, r3
 8003172:	8013      	strh	r3, [r2, #0]
 8003174:	e0e0      	b.n	8003338 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d121      	bne.n	80031c4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	f040 80b4 	bne.w	8003338 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031d8:	441a      	add	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031e6:	441a      	add	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d309      	bcc.n	800320c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6a1a      	ldr	r2, [r3, #32]
 8003202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003204:	1ad2      	subs	r2, r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	621a      	str	r2, [r3, #32]
 800320a:	e015      	b.n	8003238 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d107      	bne.n	8003224 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003214:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003218:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003222:	e009      	b.n	8003238 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	667b      	str	r3, [r7, #100]	; 0x64
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d155      	bne.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x704>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003254:	b29b      	uxth	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325a:	4413      	add	r3, r2
 800325c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	011a      	lsls	r2, r3, #4
 8003264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003266:	4413      	add	r3, r2
 8003268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800326c:	65bb      	str	r3, [r7, #88]	; 0x58
 800326e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003270:	2b00      	cmp	r3, #0
 8003272:	d112      	bne.n	800329a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800327e:	b29a      	uxth	r2, r3
 8003280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003282:	801a      	strh	r2, [r3, #0]
 8003284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003292:	b29a      	uxth	r2, r3
 8003294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003296:	801a      	strh	r2, [r3, #0]
 8003298:	e044      	b.n	8003324 <HAL_PCD_EP_DB_Transmit+0x736>
 800329a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329c:	2b3e      	cmp	r3, #62	; 0x3e
 800329e:	d811      	bhi.n	80032c4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	657b      	str	r3, [r7, #84]	; 0x54
 80032a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80032b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b2:	3301      	adds	r3, #1
 80032b4:	657b      	str	r3, [r7, #84]	; 0x54
 80032b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	029b      	lsls	r3, r3, #10
 80032bc:	b29a      	uxth	r2, r3
 80032be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	e02f      	b.n	8003324 <HAL_PCD_EP_DB_Transmit+0x736>
 80032c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	657b      	str	r3, [r7, #84]	; 0x54
 80032ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <HAL_PCD_EP_DB_Transmit+0x6ec>
 80032d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d6:	3b01      	subs	r3, #1
 80032d8:	657b      	str	r3, [r7, #84]	; 0x54
 80032da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032dc:	b29b      	uxth	r3, r3
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	e018      	b.n	8003324 <HAL_PCD_EP_DB_Transmit+0x736>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	785b      	ldrb	r3, [r3, #1]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d114      	bne.n	8003324 <HAL_PCD_EP_DB_Transmit+0x736>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003308:	4413      	add	r3, r2
 800330a:	667b      	str	r3, [r7, #100]	; 0x64
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	011a      	lsls	r2, r3, #4
 8003312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003314:	4413      	add	r3, r2
 8003316:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800331a:	663b      	str	r3, [r7, #96]	; 0x60
 800331c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331e:	b29a      	uxth	r2, r3
 8003320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003322:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	6959      	ldr	r1, [r3, #20]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	895a      	ldrh	r2, [r3, #10]
 8003330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003332:	b29b      	uxth	r3, r3
 8003334:	f003 fc30 	bl	8006b98 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003352:	823b      	strh	r3, [r7, #16]
 8003354:	8a3b      	ldrh	r3, [r7, #16]
 8003356:	f083 0310 	eor.w	r3, r3, #16
 800335a:	823b      	strh	r3, [r7, #16]
 800335c:	8a3b      	ldrh	r3, [r7, #16]
 800335e:	f083 0320 	eor.w	r3, r3, #32
 8003362:	823b      	strh	r3, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	8a3b      	ldrh	r3, [r7, #16]
 8003374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003384:	b29b      	uxth	r3, r3
 8003386:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3788      	adds	r7, #136	; 0x88
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
 80033a0:	4613      	mov	r3, r2
 80033a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033a4:	897b      	ldrh	r3, [r7, #10]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b0:	897b      	ldrh	r3, [r7, #10]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e009      	b.n	80033dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033c8:	897a      	ldrh	r2, [r7, #10]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033dc:	893b      	ldrh	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	80da      	strh	r2, [r3, #6]
 80033f0:	e00b      	b.n	800340a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2201      	movs	r2, #1
 80033f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	b29a      	uxth	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
	...

08003418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e272      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8087 	beq.w	8003546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003438:	4b92      	ldr	r3, [pc, #584]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b04      	cmp	r3, #4
 8003442:	d00c      	beq.n	800345e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003444:	4b8f      	ldr	r3, [pc, #572]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d112      	bne.n	8003476 <HAL_RCC_OscConfig+0x5e>
 8003450:	4b8c      	ldr	r3, [pc, #560]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d10b      	bne.n	8003476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345e:	4b89      	ldr	r3, [pc, #548]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d06c      	beq.n	8003544 <HAL_RCC_OscConfig+0x12c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d168      	bne.n	8003544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e24c      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x76>
 8003480:	4b80      	ldr	r3, [pc, #512]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7f      	ldr	r2, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	e02e      	b.n	80034ec <HAL_RCC_OscConfig+0xd4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x98>
 8003496:	4b7b      	ldr	r3, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7a      	ldr	r2, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 800349c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b78      	ldr	r3, [pc, #480]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a77      	ldr	r2, [pc, #476]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e01d      	b.n	80034ec <HAL_RCC_OscConfig+0xd4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0xbc>
 80034ba:	4b72      	ldr	r3, [pc, #456]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a71      	ldr	r2, [pc, #452]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6e      	ldr	r2, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0xd4>
 80034d4:	4b6b      	ldr	r3, [pc, #428]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6a      	ldr	r2, [pc, #424]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a67      	ldr	r2, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fd fa38 	bl	8000968 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fd fa34 	bl	8000968 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e200      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	4b5d      	ldr	r3, [pc, #372]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0xe4>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fd fa24 	bl	8000968 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7fd fa20 	bl	8000968 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1ec      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x10c>
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d063      	beq.n	800361a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003552:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d11c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x18c>
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d116      	bne.n	80035a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003576:	4b43      	ldr	r3, [pc, #268]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_RCC_OscConfig+0x176>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d001      	beq.n	800358e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e1c0      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4939      	ldr	r1, [pc, #228]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	e03a      	b.n	800361a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <HAL_RCC_OscConfig+0x270>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fd f9d9 	bl	8000968 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ba:	f7fd f9d5 	bl	8000968 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e1a1      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d8:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4927      	ldr	r1, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]
 80035ec:	e015      	b.n	800361a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_RCC_OscConfig+0x270>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fd f9b8 	bl	8000968 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fc:	f7fd f9b4 	bl	8000968 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e180      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d03a      	beq.n	800369c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d019      	beq.n	8003662 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003634:	f7fd f998 	bl	8000968 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363c:	f7fd f994 	bl	8000968 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e160      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800365a:	2001      	movs	r0, #1
 800365c:	f000 fad8 	bl	8003c10 <RCC_Delay>
 8003660:	e01c      	b.n	800369c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003668:	f7fd f97e 	bl	8000968 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366e:	e00f      	b.n	8003690 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7fd f97a 	bl	8000968 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d908      	bls.n	8003690 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e146      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	42420000 	.word	0x42420000
 800368c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003690:	4b92      	ldr	r3, [pc, #584]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e9      	bne.n	8003670 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a6 	beq.w	80037f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ae:	4b8b      	ldr	r3, [pc, #556]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10d      	bne.n	80036d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	4b88      	ldr	r3, [pc, #544]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4a87      	ldr	r2, [pc, #540]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c4:	61d3      	str	r3, [r2, #28]
 80036c6:	4b85      	ldr	r3, [pc, #532]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d6:	4b82      	ldr	r3, [pc, #520]	; (80038e0 <HAL_RCC_OscConfig+0x4c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d118      	bne.n	8003714 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e2:	4b7f      	ldr	r3, [pc, #508]	; (80038e0 <HAL_RCC_OscConfig+0x4c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7e      	ldr	r2, [pc, #504]	; (80038e0 <HAL_RCC_OscConfig+0x4c8>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ee:	f7fd f93b 	bl	8000968 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f6:	f7fd f937 	bl	8000968 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	; 0x64
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e103      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <HAL_RCC_OscConfig+0x4c8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x312>
 800371c:	4b6f      	ldr	r3, [pc, #444]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a6e      	ldr	r2, [pc, #440]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6213      	str	r3, [r2, #32]
 8003728:	e02d      	b.n	8003786 <HAL_RCC_OscConfig+0x36e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x334>
 8003732:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a69      	ldr	r2, [pc, #420]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6213      	str	r3, [r2, #32]
 800373e:	4b67      	ldr	r3, [pc, #412]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a66      	ldr	r2, [pc, #408]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	6213      	str	r3, [r2, #32]
 800374a:	e01c      	b.n	8003786 <HAL_RCC_OscConfig+0x36e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b05      	cmp	r3, #5
 8003752:	d10c      	bne.n	800376e <HAL_RCC_OscConfig+0x356>
 8003754:	4b61      	ldr	r3, [pc, #388]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4a60      	ldr	r2, [pc, #384]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800375a:	f043 0304 	orr.w	r3, r3, #4
 800375e:	6213      	str	r3, [r2, #32]
 8003760:	4b5e      	ldr	r3, [pc, #376]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4a5d      	ldr	r2, [pc, #372]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6213      	str	r3, [r2, #32]
 800376c:	e00b      	b.n	8003786 <HAL_RCC_OscConfig+0x36e>
 800376e:	4b5b      	ldr	r3, [pc, #364]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a5a      	ldr	r2, [pc, #360]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6213      	str	r3, [r2, #32]
 800377a:	4b58      	ldr	r3, [pc, #352]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a57      	ldr	r2, [pc, #348]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d015      	beq.n	80037ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fd f8eb 	bl	8000968 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd f8e7 	bl	8000968 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e0b1      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ee      	beq.n	8003796 <HAL_RCC_OscConfig+0x37e>
 80037b8:	e014      	b.n	80037e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ba:	f7fd f8d5 	bl	8000968 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fd f8d1 	bl	8000968 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e09b      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d8:	4b40      	ldr	r3, [pc, #256]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ee      	bne.n	80037c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ea:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8087 	beq.w	800390e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003800:	4b36      	ldr	r3, [pc, #216]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b08      	cmp	r3, #8
 800380a:	d061      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d146      	bne.n	80038a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_RCC_OscConfig+0x4cc>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fd f8a5 	bl	8000968 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003822:	f7fd f8a1 	bl	8000968 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e06d      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d108      	bne.n	800385c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4921      	ldr	r1, [pc, #132]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800385c:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a19      	ldr	r1, [r3, #32]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	430b      	orrs	r3, r1
 800386e:	491b      	ldr	r1, [pc, #108]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x4cc>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd f875 	bl	8000968 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fd f871 	bl	8000968 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e03d      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x46a>
 80038a0:	e035      	b.n	800390e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_RCC_OscConfig+0x4cc>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd f85e 	bl	8000968 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd f85a 	bl	8000968 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e026      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x498>
 80038ce:	e01e      	b.n	800390e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e019      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
 80038e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_OscConfig+0x500>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0d0      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003930:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d910      	bls.n	8003960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b67      	ldr	r3, [pc, #412]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 0207 	bic.w	r2, r3, #7
 8003946:	4965      	ldr	r1, [pc, #404]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0b8      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003978:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003990:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a52      	ldr	r2, [pc, #328]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800399a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b50      	ldr	r3, [pc, #320]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	494d      	ldr	r1, [pc, #308]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d040      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d115      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e07f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e073      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e06b      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4936      	ldr	r1, [pc, #216]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a0c:	f7fc ffac 	bl	8000968 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fc ffa8 	bl	8000968 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e053      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b27      	ldr	r3, [pc, #156]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d210      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b24      	ldr	r3, [pc, #144]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0207 	bic.w	r2, r3, #7
 8003a52:	4922      	ldr	r1, [pc, #136]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e032      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4916      	ldr	r1, [pc, #88]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490e      	ldr	r1, [pc, #56]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aaa:	f000 f821 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490a      	ldr	r1, [pc, #40]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x1d0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc ff0a 	bl	80008e4 <HAL_InitTick>

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	08009464 	.word	0x08009464
 8003ae8:	20000008 	.word	0x20000008
 8003aec:	2000000c 	.word	0x2000000c

08003af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	b490      	push	{r4, r7}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xac>)
 8003af8:	1d3c      	adds	r4, r7, #4
 8003afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b00:	f240 2301 	movw	r3, #513	; 0x201
 8003b04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d002      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x40>
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x46>
 8003b2e:	e02b      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b32:	623b      	str	r3, [r7, #32]
      break;
 8003b34:	e02b      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	0c9b      	lsrs	r3, r3, #18
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3328      	adds	r3, #40	; 0x28
 8003b40:	443b      	add	r3, r7
 8003b42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d012      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	0c5b      	lsrs	r3, r3, #17
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	3328      	adds	r3, #40	; 0x28
 8003b5e:	443b      	add	r3, r7
 8003b60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b6a:	fb03 f202 	mul.w	r2, r3, r2
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	e004      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	623b      	str	r3, [r7, #32]
      break;
 8003b86:	e002      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b8a:	623b      	str	r3, [r7, #32]
      break;
 8003b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	; 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc90      	pop	{r4, r7}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	08009410 	.word	0x08009410
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	007a1200 	.word	0x007a1200
 8003ba8:	003d0900 	.word	0x003d0900

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b02      	ldr	r3, [pc, #8]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	20000008 	.word	0x20000008

08003bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc4:	f7ff fff2 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4903      	ldr	r1, [pc, #12]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	08009474 	.word	0x08009474

08003be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bec:	f7ff ffde 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	0adb      	lsrs	r3, r3, #11
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08009474 	.word	0x08009474

08003c10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <RCC_Delay+0x34>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <RCC_Delay+0x38>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0a5b      	lsrs	r3, r3, #9
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c2c:	bf00      	nop
  }
  while (Delay --);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	60fa      	str	r2, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f9      	bne.n	8003c2c <RCC_Delay+0x1c>
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	20000008 	.word	0x20000008
 8003c48:	10624dd3 	.word	0x10624dd3

08003c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d07d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6c:	4b4f      	ldr	r3, [pc, #316]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c78:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4a4b      	ldr	r2, [pc, #300]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c82:	61d3      	str	r3, [r2, #28]
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c90:	2301      	movs	r3, #1
 8003c92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d118      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca0:	4b43      	ldr	r3, [pc, #268]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a42      	ldr	r2, [pc, #264]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cac:	f7fc fe5c 	bl	8000968 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb4:	f7fc fe58 	bl	8000968 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e06d      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cd2:	4b36      	ldr	r3, [pc, #216]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d02e      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d027      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cf0:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d06:	4a29      	ldr	r2, [pc, #164]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d014      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fc fe27 	bl	8000968 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fc fe23 	bl	8000968 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e036      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ee      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4917      	ldr	r1, [pc, #92]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b14      	ldr	r3, [pc, #80]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	4a13      	ldr	r2, [pc, #76]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	490b      	ldr	r1, [pc, #44]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4904      	ldr	r1, [pc, #16]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42420440 	.word	0x42420440

08003db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e03f      	b.n	8003e4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fc fc80 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f905 	bl	800400c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b08a      	sub	sp, #40	; 0x28
 8003e56:	af02      	add	r7, sp, #8
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d17c      	bne.n	8003f6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_UART_Transmit+0x2c>
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e075      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Transmit+0x3e>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e06e      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea6:	f7fc fd5f 	bl	8000968 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	d108      	bne.n	8003ed4 <HAL_UART_Transmit+0x82>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ee4:	e02a      	b.n	8003f3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2200      	movs	r2, #0
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f840 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e036      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e007      	b.n	8003f2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1cf      	bne.n	8003ee6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2140      	movs	r1, #64	; 0x40
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f810 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e006      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3720      	adds	r7, #32
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f86:	e02c      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d028      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f96:	f7fc fce7 	bl	8000968 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d21d      	bcs.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fb4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e00f      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d0c3      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004046:	f023 030c 	bic.w	r3, r3, #12
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	430b      	orrs	r3, r1
 8004052:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2c      	ldr	r2, [pc, #176]	; (8004120 <UART_SetConfig+0x114>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d103      	bne.n	800407c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004074:	f7ff fdb8 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	e002      	b.n	8004082 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7ff fda0 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004080:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009a      	lsls	r2, r3, #2
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <UART_SetConfig+0x118>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	0119      	lsls	r1, r3, #4
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <UART_SetConfig+0x118>)
 80040ba:	fba3 0302 	umull	r0, r3, r3, r2
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2064      	movs	r0, #100	; 0x64
 80040c2:	fb00 f303 	mul.w	r3, r0, r3
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3332      	adds	r3, #50	; 0x32
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <UART_SetConfig+0x118>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d8:	4419      	add	r1, r3
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <UART_SetConfig+0x118>)
 80040f2:	fba3 0302 	umull	r0, r3, r3, r2
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2064      	movs	r0, #100	; 0x64
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	3332      	adds	r3, #50	; 0x32
 8004104:	4a07      	ldr	r2, [pc, #28]	; (8004124 <UART_SetConfig+0x118>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	f003 020f 	and.w	r2, r3, #15
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	440a      	add	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40013800 	.word	0x40013800
 8004124:	51eb851f 	.word	0x51eb851f

08004128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004128:	b084      	sub	sp, #16
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	f107 0014 	add.w	r0, r7, #20
 8004136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	b004      	add	sp, #16
 8004146:	4770      	bx	lr

08004148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004158:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800415c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800417c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004180:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	b29b      	uxth	r3, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	b29b      	uxth	r3, r3
 8004192:	4013      	ands	r3, r2
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041c0:	b084      	sub	sp, #16
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	f107 0014 	add.w	r0, r7, #20
 80041ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	b004      	add	sp, #16
 80041fe:	4770      	bx	lr

08004200 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004200:	b480      	push	{r7}
 8004202:	b09b      	sub	sp, #108	; 0x6c
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	78db      	ldrb	r3, [r3, #3]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d81f      	bhi.n	8004272 <USB_ActivateEndpoint+0x72>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <USB_ActivateEndpoint+0x38>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	08004249 	.word	0x08004249
 800423c:	08004265 	.word	0x08004265
 8004240:	0800427b 	.word	0x0800427b
 8004244:	08004257 	.word	0x08004257
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004248:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800424c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004250:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004254:	e012      	b.n	800427c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004256:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800425a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800425e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004262:	e00b      	b.n	800427c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004264:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800426c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004270:	e004      	b.n	800427c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004278:	e000      	b.n	800427c <USB_ActivateEndpoint+0x7c>
      break;
 800427a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800428a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	b29b      	uxth	r3, r3
 800429c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	441a      	add	r2, r3
 80042cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80042d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	7b1b      	ldrb	r3, [r3, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f040 8149 	bne.w	8004580 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	785b      	ldrb	r3, [r3, #1]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8084 	beq.w	8004400 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004302:	b29b      	uxth	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	4413      	add	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	011a      	lsls	r2, r3, #4
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	88db      	ldrh	r3, [r3, #6]
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	b29b      	uxth	r3, r3
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	81fb      	strh	r3, [r7, #14]
 800433a:	89fb      	ldrh	r3, [r7, #14]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <USB_ActivateEndpoint+0x17c>
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	81bb      	strh	r3, [r7, #12]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	89bb      	ldrh	r3, [r7, #12]
 8004368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800436c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004374:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004378:	b29b      	uxth	r3, r3
 800437a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	78db      	ldrb	r3, [r3, #3]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d020      	beq.n	80043c6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439a:	813b      	strh	r3, [r7, #8]
 800439c:	893b      	ldrh	r3, [r7, #8]
 800439e:	f083 0320 	eor.w	r3, r3, #32
 80043a2:	813b      	strh	r3, [r7, #8]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	893b      	ldrh	r3, [r7, #8]
 80043b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]
 80043c4:	e27f      	b.n	80048c6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043dc:	817b      	strh	r3, [r7, #10]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]
 80043fe:	e262      	b.n	80048c6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800440a:	b29b      	uxth	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	4413      	add	r3, r2
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	011a      	lsls	r2, r3, #4
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441c:	4413      	add	r3, r2
 800441e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	88db      	ldrh	r3, [r3, #6]
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	b29b      	uxth	r3, r3
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443e:	b29b      	uxth	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	4413      	add	r3, r2
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	011a      	lsls	r2, r3, #4
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	4413      	add	r3, r2
 8004452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004456:	623b      	str	r3, [r7, #32]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d112      	bne.n	8004486 <USB_ActivateEndpoint+0x286>
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800446a:	b29a      	uxth	r2, r3
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447e:	b29a      	uxth	r2, r3
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	e02f      	b.n	80044e6 <USB_ActivateEndpoint+0x2e6>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b3e      	cmp	r3, #62	; 0x3e
 800448c:	d813      	bhi.n	80044b6 <USB_ActivateEndpoint+0x2b6>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	663b      	str	r3, [r7, #96]	; 0x60
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <USB_ActivateEndpoint+0x2a8>
 80044a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044a4:	3301      	adds	r3, #1
 80044a6:	663b      	str	r3, [r7, #96]	; 0x60
 80044a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	029b      	lsls	r3, r3, #10
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	e017      	b.n	80044e6 <USB_ActivateEndpoint+0x2e6>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	663b      	str	r3, [r7, #96]	; 0x60
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <USB_ActivateEndpoint+0x2d0>
 80044ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044cc:	3b01      	subs	r3, #1
 80044ce:	663b      	str	r3, [r7, #96]	; 0x60
 80044d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	029b      	lsls	r3, r3, #10
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	83fb      	strh	r3, [r7, #30]
 80044f4:	8bfb      	ldrh	r3, [r7, #30]
 80044f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01b      	beq.n	8004536 <USB_ActivateEndpoint+0x336>
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004514:	83bb      	strh	r3, [r7, #28]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	8bbb      	ldrh	r3, [r7, #28]
 8004522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800452e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004532:	b29b      	uxth	r3, r3
 8004534:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	837b      	strh	r3, [r7, #26]
 800454e:	8b7b      	ldrh	r3, [r7, #26]
 8004550:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004554:	837b      	strh	r3, [r7, #26]
 8004556:	8b7b      	ldrh	r3, [r7, #26]
 8004558:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800455c:	837b      	strh	r3, [r7, #26]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	441a      	add	r2, r3
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]
 800457e:	e1a2      	b.n	80048c6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80045a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	65bb      	str	r3, [r7, #88]	; 0x58
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045cc:	4413      	add	r3, r2
 80045ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045de:	657b      	str	r3, [r7, #84]	; 0x54
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	891b      	ldrh	r3, [r3, #8]
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ee:	801a      	strh	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	653b      	str	r3, [r7, #80]	; 0x50
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004600:	4413      	add	r3, r2
 8004602:	653b      	str	r3, [r7, #80]	; 0x50
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	011a      	lsls	r2, r3, #4
 800460a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460c:	4413      	add	r3, r2
 800460e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	895b      	ldrh	r3, [r3, #10]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004622:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	785b      	ldrb	r3, [r3, #1]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8091 	bne.w	8004750 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800463c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01b      	beq.n	800467e <USB_ActivateEndpoint+0x47e>
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800466a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467a:	b29b      	uxth	r3, r3
 800467c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	873b      	strh	r3, [r7, #56]	; 0x38
 800468c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01b      	beq.n	80046ce <USB_ActivateEndpoint+0x4ce>
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	441a      	add	r2, r3
 80046b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472c:	867b      	strh	r3, [r7, #50]	; 0x32
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	441a      	add	r2, r3
 8004738:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800473a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474a:	b29b      	uxth	r3, r3
 800474c:	8013      	strh	r3, [r2, #0]
 800474e:	e0ba      	b.n	80048c6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004760:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01d      	beq.n	80047a8 <USB_ActivateEndpoint+0x5a8>
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01d      	beq.n	8004800 <USB_ActivateEndpoint+0x600>
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	78db      	ldrb	r3, [r3, #3]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d024      	beq.n	8004852 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004822:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004826:	f083 0320 	eor.w	r3, r3, #32
 800482a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	441a      	add	r2, r3
 8004838:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800483c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484c:	b29b      	uxth	r3, r3
 800484e:	8013      	strh	r3, [r2, #0]
 8004850:	e01d      	b.n	800488e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004868:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80048c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	376c      	adds	r7, #108	; 0x6c
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b08d      	sub	sp, #52	; 0x34
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	7b1b      	ldrb	r3, [r3, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 808e 	bne.w	8004a04 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d044      	beq.n	800497a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	81bb      	strh	r3, [r7, #12]
 80048fe:	89bb      	ldrh	r3, [r7, #12]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <USB_DeactivateEndpoint+0x6c>
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	817b      	strh	r3, [r7, #10]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	897b      	ldrh	r3, [r7, #10]
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004938:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004956:	813b      	strh	r3, [r7, #8]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	893b      	ldrh	r3, [r7, #8]
 8004964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]
 8004978:	e192      	b.n	8004ca0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	827b      	strh	r3, [r7, #18]
 8004988:	8a7b      	ldrh	r3, [r7, #18]
 800498a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01b      	beq.n	80049ca <USB_DeactivateEndpoint+0xf6>
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	823b      	strh	r3, [r7, #16]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	8a3b      	ldrh	r3, [r7, #16]
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	81fb      	strh	r3, [r7, #14]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	89fb      	ldrh	r3, [r7, #14]
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
 8004a02:	e14d      	b.n	8004ca0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 80a5 	bne.w	8004b58 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	843b      	strh	r3, [r7, #32]
 8004a1c:	8c3b      	ldrh	r3, [r7, #32]
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01b      	beq.n	8004a5e <USB_DeactivateEndpoint+0x18a>
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3c:	83fb      	strh	r3, [r7, #30]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	441a      	add	r2, r3
 8004a48:	8bfb      	ldrh	r3, [r7, #30]
 8004a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	83bb      	strh	r3, [r7, #28]
 8004a6c:	8bbb      	ldrh	r3, [r7, #28]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01b      	beq.n	8004aae <USB_DeactivateEndpoint+0x1da>
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	837b      	strh	r3, [r7, #26]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	441a      	add	r2, r3
 8004a98:	8b7b      	ldrh	r3, [r7, #26]
 8004a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac4:	833b      	strh	r3, [r7, #24]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	441a      	add	r2, r3
 8004ad0:	8b3b      	ldrh	r3, [r7, #24]
 8004ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ade:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afc:	82fb      	strh	r3, [r7, #22]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	8afb      	ldrh	r3, [r7, #22]
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b34:	82bb      	strh	r3, [r7, #20]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	8abb      	ldrh	r3, [r7, #20]
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]
 8004b56:	e0a3      	b.n	8004ca0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <USB_DeactivateEndpoint+0x2d4>
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004bb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01b      	beq.n	8004bf8 <USB_DeactivateEndpoint+0x324>
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3734      	adds	r7, #52	; 0x34
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b0cc      	sub	sp, #304	; 0x130
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cba:	6018      	str	r0, [r3, #0]
 8004cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	f041 817d 	bne.w	8005fd2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d908      	bls.n	8004d06 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d04:	e007      	b.n	8004d16 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	7b1b      	ldrb	r3, [r3, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d152      	bne.n	8004dcc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6959      	ldr	r1, [r3, #20]
 8004d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	88da      	ldrh	r2, [r3, #6]
 8004d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	f001 ff23 	bl	8006b98 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d5e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4619      	mov	r1, r3
 8004d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d84:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4413      	add	r3, r2
 8004da8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	f001 b8b5 	b.w	8005f36 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	78db      	ldrb	r3, [r3, #3]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f040 84c6 	bne.w	800576a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	f240 8443 	bls.w	8005682 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e68:	1ad2      	subs	r2, r2, r3
 8004e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 823e 	beq.w	800531a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ea6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eaa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 809a 	bne.w	8004ff8 <USB_EPStartXfer+0x34c>
 8004ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ecc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ed0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004edc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ef6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	440a      	add	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	011a      	lsls	r2, r3, #4
 8004f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d122      	bne.n	8004f76 <USB_EPStartXfer+0x2ca>
 8004f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	e079      	b.n	800506a <USB_EPStartXfer+0x3be>
 8004f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f7c:	d81b      	bhi.n	8004fb6 <USB_EPStartXfer+0x30a>
 8004f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <USB_EPStartXfer+0x2f2>
 8004f94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	801a      	strh	r2, [r3, #0]
 8004fb4:	e059      	b.n	800506a <USB_EPStartXfer+0x3be>
 8004fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <USB_EPStartXfer+0x32a>
 8004fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	029b      	lsls	r3, r3, #10
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	e038      	b.n	800506a <USB_EPStartXfer+0x3be>
 8004ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d130      	bne.n	800506a <USB_EPStartXfer+0x3be>
 8005008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005016:	b29b      	uxth	r3, r3
 8005018:	4619      	mov	r1, r3
 800501a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005022:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005026:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	440a      	add	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	011a      	lsls	r2, r3, #4
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4413      	add	r3, r2
 800504a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800504e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505c:	b29a      	uxth	r2, r3
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800506a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	895b      	ldrh	r3, [r3, #10]
 8005076:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800507a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6959      	ldr	r1, [r3, #20]
 8005086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508a:	b29b      	uxth	r3, r3
 800508c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005090:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005094:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005098:	6800      	ldr	r0, [r0, #0]
 800509a:	f001 fd7d 	bl	8006b98 <USB_WritePMA>
            ep->xfer_buff += len;
 800509e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ae:	441a      	add	r2, r3
 80050b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d90f      	bls.n	80050f8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80050d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6a1a      	ldr	r2, [r3, #32]
 80050e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	621a      	str	r2, [r3, #32]
 80050f6:	e00e      	b.n	8005116 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 809a 	bne.w	800525c <USB_EPStartXfer+0x5b0>
 8005128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005130:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005134:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514a:	b29b      	uxth	r3, r3
 800514c:	4619      	mov	r1, r3
 800514e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005152:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005156:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800515a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	440a      	add	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	011a      	lsls	r2, r3, #4
 8005172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005176:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4413      	add	r3, r2
 800517e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d122      	bne.n	80051da <USB_EPStartXfer+0x52e>
 8005194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005198:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e083      	b.n	80052e2 <USB_EPStartXfer+0x636>
 80051da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051de:	2b3e      	cmp	r3, #62	; 0x3e
 80051e0:	d81b      	bhi.n	800521a <USB_EPStartXfer+0x56e>
 80051e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <USB_EPStartXfer+0x556>
 80051f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051fc:	3301      	adds	r3, #1
 80051fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005202:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005206:	b29b      	uxth	r3, r3
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	b29a      	uxth	r2, r3
 800520c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005210:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	e063      	b.n	80052e2 <USB_EPStartXfer+0x636>
 800521a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <USB_EPStartXfer+0x58e>
 8005230:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005234:	3b01      	subs	r3, #1
 8005236:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800523a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800523e:	b29b      	uxth	r3, r3
 8005240:	029b      	lsls	r3, r3, #10
 8005242:	b29b      	uxth	r3, r3
 8005244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524c:	b29a      	uxth	r2, r3
 800524e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005252:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e042      	b.n	80052e2 <USB_EPStartXfer+0x636>
 800525c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d13a      	bne.n	80052e2 <USB_EPStartXfer+0x636>
 800526c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005270:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005274:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005278:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528e:	b29b      	uxth	r3, r3
 8005290:	4619      	mov	r1, r3
 8005292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005296:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800529a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800529e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	440a      	add	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	011a      	lsls	r2, r3, #4
 80052b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4413      	add	r3, r2
 80052c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	891b      	ldrh	r3, [r3, #8]
 80052ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6959      	ldr	r1, [r3, #20]
 80052fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005302:	b29b      	uxth	r3, r3
 8005304:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005308:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800530c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005310:	6800      	ldr	r0, [r0, #0]
 8005312:	f001 fc41 	bl	8006b98 <USB_WritePMA>
 8005316:	f000 be0e 	b.w	8005f36 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800531a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d16d      	bne.n	8005406 <USB_EPStartXfer+0x75a>
 800532a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	64bb      	str	r3, [r7, #72]	; 0x48
 8005336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005344:	b29b      	uxth	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534a:	4413      	add	r3, r2
 800534c:	64bb      	str	r3, [r7, #72]	; 0x48
 800534e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	011a      	lsls	r2, r3, #4
 800535c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535e:	4413      	add	r3, r2
 8005360:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005364:	647b      	str	r3, [r7, #68]	; 0x44
 8005366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d112      	bne.n	8005394 <USB_EPStartXfer+0x6e8>
 800536e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005378:	b29a      	uxth	r2, r3
 800537a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537c:	801a      	strh	r2, [r3, #0]
 800537e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538c:	b29a      	uxth	r2, r3
 800538e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	e063      	b.n	800545c <USB_EPStartXfer+0x7b0>
 8005394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005398:	2b3e      	cmp	r3, #62	; 0x3e
 800539a:	d817      	bhi.n	80053cc <USB_EPStartXfer+0x720>
 800539c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <USB_EPStartXfer+0x710>
 80053b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053b6:	3301      	adds	r3, #1
 80053b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	e047      	b.n	800545c <USB_EPStartXfer+0x7b0>
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <USB_EPStartXfer+0x740>
 80053e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053e6:	3b01      	subs	r3, #1
 80053e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	029b      	lsls	r3, r3, #10
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fe:	b29a      	uxth	r2, r3
 8005400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	e02a      	b.n	800545c <USB_EPStartXfer+0x7b0>
 8005406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d122      	bne.n	800545c <USB_EPStartXfer+0x7b0>
 8005416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	653b      	str	r3, [r7, #80]	; 0x50
 8005422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005430:	b29b      	uxth	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005436:	4413      	add	r3, r2
 8005438:	653b      	str	r3, [r7, #80]	; 0x50
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	011a      	lsls	r2, r3, #4
 8005448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800544a:	4413      	add	r3, r2
 800544c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005456:	b29a      	uxth	r2, r3
 8005458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800545c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	891b      	ldrh	r3, [r3, #8]
 8005468:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800546c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6959      	ldr	r1, [r3, #20]
 8005478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800547c:	b29b      	uxth	r3, r3
 800547e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005482:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005486:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	f001 fb84 	bl	8006b98 <USB_WritePMA>
            ep->xfer_buff += len;
 8005490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a0:	441a      	add	r2, r3
 80054a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6a1a      	ldr	r2, [r3, #32]
 80054ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d90f      	bls.n	80054ea <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6a1a      	ldr	r2, [r3, #32]
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054da:	1ad2      	subs	r2, r2, r3
 80054dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	621a      	str	r2, [r3, #32]
 80054e8:	e00e      	b.n	8005508 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80054ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80054fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2200      	movs	r2, #0
 8005506:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	643b      	str	r3, [r7, #64]	; 0x40
 8005514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d16d      	bne.n	8005600 <USB_EPStartXfer+0x954>
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800553e:	b29b      	uxth	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	4413      	add	r3, r2
 8005546:	63bb      	str	r3, [r7, #56]	; 0x38
 8005548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011a      	lsls	r2, r3, #4
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	4413      	add	r3, r2
 800555a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
 8005560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d112      	bne.n	800558e <USB_EPStartXfer+0x8e2>
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005572:	b29a      	uxth	r2, r3
 8005574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005586:	b29a      	uxth	r2, r3
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	801a      	strh	r2, [r3, #0]
 800558c:	e05d      	b.n	800564a <USB_EPStartXfer+0x99e>
 800558e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005592:	2b3e      	cmp	r3, #62	; 0x3e
 8005594:	d817      	bhi.n	80055c6 <USB_EPStartXfer+0x91a>
 8005596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <USB_EPStartXfer+0x90a>
 80055ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055b0:	3301      	adds	r3, #1
 80055b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	029b      	lsls	r3, r3, #10
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e041      	b.n	800564a <USB_EPStartXfer+0x99e>
 80055c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <USB_EPStartXfer+0x93a>
 80055dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055e0:	3b01      	subs	r3, #1
 80055e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	029b      	lsls	r3, r3, #10
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e024      	b.n	800564a <USB_EPStartXfer+0x99e>
 8005600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d11c      	bne.n	800564a <USB_EPStartXfer+0x99e>
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005624:	4413      	add	r3, r2
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
 8005628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	011a      	lsls	r2, r3, #4
 8005636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005638:	4413      	add	r3, r2
 800563a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005644:	b29a      	uxth	r2, r3
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800564a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	895b      	ldrh	r3, [r3, #10]
 8005656:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6959      	ldr	r1, [r3, #20]
 8005666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566a:	b29b      	uxth	r3, r3
 800566c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005670:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005674:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005678:	6800      	ldr	r0, [r0, #0]
 800567a:	f001 fa8d 	bl	8006b98 <USB_WritePMA>
 800567e:	f000 bc5a 	b.w	8005f36 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570e:	4413      	add	r3, r2
 8005710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	011a      	lsls	r2, r3, #4
 8005720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005722:	4413      	add	r3, r2
 8005724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005728:	65bb      	str	r3, [r7, #88]	; 0x58
 800572a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572e:	b29a      	uxth	r2, r3
 8005730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005732:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	891b      	ldrh	r3, [r3, #8]
 8005740:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6959      	ldr	r1, [r3, #20]
 8005750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005754:	b29b      	uxth	r3, r3
 8005756:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800575a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800575e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005762:	6800      	ldr	r0, [r0, #0]
 8005764:	f001 fa18 	bl	8006b98 <USB_WritePMA>
 8005768:	e3e5      	b.n	8005f36 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005790:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 81bc 	beq.w	8005b84 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800580c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800581a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d16d      	bne.n	8005906 <USB_EPStartXfer+0xc5a>
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	67bb      	str	r3, [r7, #120]	; 0x78
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005844:	b29b      	uxth	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800584a:	4413      	add	r3, r2
 800584c:	67bb      	str	r3, [r7, #120]	; 0x78
 800584e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	011a      	lsls	r2, r3, #4
 800585c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585e:	4413      	add	r3, r2
 8005860:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005864:	677b      	str	r3, [r7, #116]	; 0x74
 8005866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d112      	bne.n	8005894 <USB_EPStartXfer+0xbe8>
 800586e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005878:	b29a      	uxth	r2, r3
 800587a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588c:	b29a      	uxth	r2, r3
 800588e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e060      	b.n	8005956 <USB_EPStartXfer+0xcaa>
 8005894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005898:	2b3e      	cmp	r3, #62	; 0x3e
 800589a:	d817      	bhi.n	80058cc <USB_EPStartXfer+0xc20>
 800589c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <USB_EPStartXfer+0xc10>
 80058b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058b6:	3301      	adds	r3, #1
 80058b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	029b      	lsls	r3, r3, #10
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e044      	b.n	8005956 <USB_EPStartXfer+0xcaa>
 80058cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <USB_EPStartXfer+0xc40>
 80058e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058e6:	3b01      	subs	r3, #1
 80058e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	029b      	lsls	r3, r3, #10
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e027      	b.n	8005956 <USB_EPStartXfer+0xcaa>
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d11f      	bne.n	8005956 <USB_EPStartXfer+0xcaa>
 8005916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800592c:	4413      	add	r3, r2
 800592e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	011a      	lsls	r2, r3, #4
 8005940:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005944:	4413      	add	r3, r2
 8005946:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800594a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800594c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005950:	b29a      	uxth	r2, r3
 8005952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005954:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	895b      	ldrh	r3, [r3, #10]
 8005962:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6959      	ldr	r1, [r3, #20]
 8005972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005976:	b29b      	uxth	r3, r3
 8005978:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800597c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005980:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005984:	6800      	ldr	r0, [r0, #0]
 8005986:	f001 f907 	bl	8006b98 <USB_WritePMA>
          ep->xfer_buff += len;
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599a:	441a      	add	r2, r3
 800599c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80059a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1a      	ldr	r2, [r3, #32]
 80059b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d90f      	bls.n	80059e4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80059c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a1a      	ldr	r2, [r3, #32]
 80059d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	621a      	str	r2, [r3, #32]
 80059e2:	e00e      	b.n	8005a02 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80059f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2200      	movs	r2, #0
 8005a00:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 8295 	beq.w	8005f36 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d16d      	bne.n	8005af8 <USB_EPStartXfer+0xe4c>
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a3c:	4413      	add	r3, r2
 8005a3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	011a      	lsls	r2, r3, #4
 8005a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a50:	4413      	add	r3, r2
 8005a52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a56:	667b      	str	r3, [r7, #100]	; 0x64
 8005a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d112      	bne.n	8005a86 <USB_EPStartXfer+0xdda>
 8005a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	e063      	b.n	8005b4e <USB_EPStartXfer+0xea2>
 8005a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a8c:	d817      	bhi.n	8005abe <USB_EPStartXfer+0xe12>
 8005a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <USB_EPStartXfer+0xe02>
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	e047      	b.n	8005b4e <USB_EPStartXfer+0xea2>
 8005abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d104      	bne.n	8005ade <USB_EPStartXfer+0xe32>
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	029b      	lsls	r3, r3, #10
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	e02a      	b.n	8005b4e <USB_EPStartXfer+0xea2>
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d122      	bne.n	8005b4e <USB_EPStartXfer+0xea2>
 8005b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	673b      	str	r3, [r7, #112]	; 0x70
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b28:	4413      	add	r3, r2
 8005b2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	011a      	lsls	r2, r3, #4
 8005b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	891b      	ldrh	r3, [r3, #8]
 8005b5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6959      	ldr	r1, [r3, #20]
 8005b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b74:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b7c:	6800      	ldr	r0, [r0, #0]
 8005b7e:	f001 f80b 	bl	8006b98 <USB_WritePMA>
 8005b82:	e1d8      	b.n	8005f36 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d178      	bne.n	8005c86 <USB_EPStartXfer+0xfda>
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bb8:	4413      	add	r3, r2
 8005bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	011a      	lsls	r2, r3, #4
 8005bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d116      	bne.n	8005c10 <USB_EPStartXfer+0xf64>
 8005be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e06b      	b.n	8005ce8 <USB_EPStartXfer+0x103c>
 8005c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c14:	2b3e      	cmp	r3, #62	; 0x3e
 8005c16:	d818      	bhi.n	8005c4a <USB_EPStartXfer+0xf9e>
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <USB_EPStartXfer+0xf8c>
 8005c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c32:	3301      	adds	r3, #1
 8005c34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	e04e      	b.n	8005ce8 <USB_EPStartXfer+0x103c>
 8005c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <USB_EPStartXfer+0xfbe>
 8005c60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c64:	3b01      	subs	r3, #1
 8005c66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	029b      	lsls	r3, r3, #10
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e030      	b.n	8005ce8 <USB_EPStartXfer+0x103c>
 8005c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d128      	bne.n	8005ce8 <USB_EPStartXfer+0x103c>
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cba:	4413      	add	r3, r2
 8005cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	011a      	lsls	r2, r3, #4
 8005cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ce6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	891b      	ldrh	r3, [r3, #8]
 8005cf4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6959      	ldr	r1, [r3, #20]
 8005d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d0e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d12:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	f000 ff3e 	bl	8006b98 <USB_WritePMA>
          ep->xfer_buff += len;
 8005d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2c:	441a      	add	r2, r3
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d90f      	bls.n	8005d76 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a1a      	ldr	r2, [r3, #32]
 8005d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	621a      	str	r2, [r3, #32]
 8005d74:	e00e      	b.n	8005d94 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2200      	movs	r2, #0
 8005d92:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80cc 	beq.w	8005f36 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d178      	bne.n	8005eae <USB_EPStartXfer+0x1202>
 8005dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005de0:	4413      	add	r3, r2
 8005de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df8:	4413      	add	r3, r2
 8005dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d116      	bne.n	8005e38 <USB_EPStartXfer+0x118c>
 8005e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	e064      	b.n	8005f02 <USB_EPStartXfer+0x1256>
 8005e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e3e:	d818      	bhi.n	8005e72 <USB_EPStartXfer+0x11c6>
 8005e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <USB_EPStartXfer+0x11b4>
 8005e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e047      	b.n	8005f02 <USB_EPStartXfer+0x1256>
 8005e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <USB_EPStartXfer+0x11e6>
 8005e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	e029      	b.n	8005f02 <USB_EPStartXfer+0x1256>
 8005eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d121      	bne.n	8005f02 <USB_EPStartXfer+0x1256>
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	011a      	lsls	r2, r3, #4
 8005ee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eec:	4413      	add	r3, r2
 8005eee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	895b      	ldrh	r3, [r3, #10]
 8005f0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6959      	ldr	r1, [r3, #20]
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f30:	6800      	ldr	r0, [r0, #0]
 8005f32:	f000 fe31 	bl	8006b98 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f58:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f64:	8013      	strh	r3, [r2, #0]
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f72:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005f76:	8812      	ldrh	r2, [r2, #0]
 8005f78:	f082 0210 	eor.w	r2, r2, #16
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f82:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f8a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005f8e:	8812      	ldrh	r2, [r2, #0]
 8005f90:	f082 0220 	eor.w	r2, r2, #32
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	8013      	strh	r3, [r2, #0]
 8005fce:	f000 bc9f 	b.w	8006910 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	7b1b      	ldrb	r3, [r3, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 80ae 	bne.w	8006140 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d917      	bls.n	8006030 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006020:	1ad2      	subs	r2, r2, r3
 8006022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	619a      	str	r2, [r3, #24]
 800602e:	e00e      	b.n	800604e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800604e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800605c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006060:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006072:	4413      	add	r3, r2
 8006074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	011a      	lsls	r2, r3, #4
 8006086:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800608a:	4413      	add	r3, r2
 800608c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d116      	bne.n	80060ca <USB_EPStartXfer+0x141e>
 800609c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060c6:	801a      	strh	r2, [r3, #0]
 80060c8:	e3e8      	b.n	800689c <USB_EPStartXfer+0x1bf0>
 80060ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ce:	2b3e      	cmp	r3, #62	; 0x3e
 80060d0:	d818      	bhi.n	8006104 <USB_EPStartXfer+0x1458>
 80060d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d004      	beq.n	80060f2 <USB_EPStartXfer+0x1446>
 80060e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ec:	3301      	adds	r3, #1
 80060ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e3cb      	b.n	800689c <USB_EPStartXfer+0x1bf0>
 8006104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800610e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <USB_EPStartXfer+0x1478>
 800611a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800611e:	3b01      	subs	r3, #1
 8006120:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006124:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006128:	b29b      	uxth	r3, r3
 800612a:	029b      	lsls	r3, r3, #10
 800612c:	b29b      	uxth	r3, r3
 800612e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006136:	b29a      	uxth	r2, r3
 8006138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800613c:	801a      	strh	r2, [r3, #0]
 800613e:	e3ad      	b.n	800689c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	2b02      	cmp	r3, #2
 800614e:	f040 8200 	bne.w	8006552 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 8091 	bne.w	8006286 <USB_EPStartXfer+0x15da>
 8006164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006180:	b29b      	uxth	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006188:	4413      	add	r3, r2
 800618a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	011a      	lsls	r2, r3, #4
 800619c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061a0:	4413      	add	r3, r2
 80061a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d116      	bne.n	80061e8 <USB_EPStartXfer+0x153c>
 80061ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	e083      	b.n	80062f0 <USB_EPStartXfer+0x1644>
 80061e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b3e      	cmp	r3, #62	; 0x3e
 80061f6:	d820      	bhi.n	800623a <USB_EPStartXfer+0x158e>
 80061f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800620a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <USB_EPStartXfer+0x157c>
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006222:	3301      	adds	r3, #1
 8006224:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622c:	b29b      	uxth	r3, r3
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	b29a      	uxth	r2, r3
 8006232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	e05a      	b.n	80062f0 <USB_EPStartXfer+0x1644>
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800624c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <USB_EPStartXfer+0x15be>
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006264:	3b01      	subs	r3, #1
 8006266:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626e:	b29b      	uxth	r3, r3
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	b29b      	uxth	r3, r3
 8006274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	e034      	b.n	80062f0 <USB_EPStartXfer+0x1644>
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d12c      	bne.n	80062f0 <USB_EPStartXfer+0x1644>
 8006296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ba:	4413      	add	r3, r2
 80062bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	011a      	lsls	r2, r3, #4
 80062ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d2:	4413      	add	r3, r2
 80062d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 8091 	bne.w	8006432 <USB_EPStartXfer+0x1786>
 8006310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006334:	4413      	add	r3, r2
 8006336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	011a      	lsls	r2, r3, #4
 8006348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800634c:	4413      	add	r3, r2
 800634e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d116      	bne.n	8006394 <USB_EPStartXfer+0x16e8>
 8006366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006372:	b29a      	uxth	r2, r3
 8006374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638a:	b29a      	uxth	r2, r3
 800638c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006390:	801a      	strh	r2, [r3, #0]
 8006392:	e07c      	b.n	800648e <USB_EPStartXfer+0x17e2>
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b3e      	cmp	r3, #62	; 0x3e
 80063a2:	d820      	bhi.n	80063e6 <USB_EPStartXfer+0x173a>
 80063a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <USB_EPStartXfer+0x1728>
 80063ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063ce:	3301      	adds	r3, #1
 80063d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063d8:	b29b      	uxth	r3, r3
 80063da:	029b      	lsls	r3, r3, #10
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	e053      	b.n	800648e <USB_EPStartXfer+0x17e2>
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <USB_EPStartXfer+0x176a>
 800640c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006410:	3b01      	subs	r3, #1
 8006412:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006416:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800641a:	b29b      	uxth	r3, r3
 800641c:	029b      	lsls	r3, r3, #10
 800641e:	b29b      	uxth	r3, r3
 8006420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006428:	b29a      	uxth	r2, r3
 800642a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800642e:	801a      	strh	r2, [r3, #0]
 8006430:	e02d      	b.n	800648e <USB_EPStartXfer+0x17e2>
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d125      	bne.n	800648e <USB_EPStartXfer+0x17e2>
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006450:	b29b      	uxth	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006458:	4413      	add	r3, r2
 800645a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800645e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	011a      	lsls	r2, r3, #4
 800646c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006470:	4413      	add	r3, r2
 8006472:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	b29a      	uxth	r2, r3
 8006488:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800648c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800648e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 81fe 	beq.w	800689c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80064c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <USB_EPStartXfer+0x182c>
 80064cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10d      	bne.n	80064f4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80064dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 81db 	bne.w	800689c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 81d4 	bne.w	800689c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80064f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800651e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006522:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	441a      	add	r2, r3
 8006538:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800653c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]
 8006550:	e1a4      	b.n	800689c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	78db      	ldrb	r3, [r3, #3]
 800655e:	2b01      	cmp	r3, #1
 8006560:	f040 819a 	bne.w	8006898 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d917      	bls.n	80065b0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a0:	1ad2      	subs	r2, r2, r3
 80065a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	619a      	str	r2, [r3, #24]
 80065ae:	e00e      	b.n	80065ce <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80065c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2200      	movs	r2, #0
 80065cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d178      	bne.n	80066d0 <USB_EPStartXfer+0x1a24>
 80065de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006602:	4413      	add	r3, r2
 8006604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800661a:	4413      	add	r3, r2
 800661c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006620:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d116      	bne.n	800665a <USB_EPStartXfer+0x19ae>
 800662c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006650:	b29a      	uxth	r2, r3
 8006652:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	e06b      	b.n	8006732 <USB_EPStartXfer+0x1a86>
 800665a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665e:	2b3e      	cmp	r3, #62	; 0x3e
 8006660:	d818      	bhi.n	8006694 <USB_EPStartXfer+0x19e8>
 8006662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <USB_EPStartXfer+0x19d6>
 8006678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800667c:	3301      	adds	r3, #1
 800667e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006686:	b29b      	uxth	r3, r3
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	b29a      	uxth	r2, r3
 800668c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	e04e      	b.n	8006732 <USB_EPStartXfer+0x1a86>
 8006694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800669e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <USB_EPStartXfer+0x1a08>
 80066aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ae:	3b01      	subs	r3, #1
 80066b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	b29b      	uxth	r3, r3
 80066be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066cc:	801a      	strh	r2, [r3, #0]
 80066ce:	e030      	b.n	8006732 <USB_EPStartXfer+0x1a86>
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d128      	bne.n	8006732 <USB_EPStartXfer+0x1a86>
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	4413      	add	r3, r2
 8006706:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800670a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	011a      	lsls	r2, r3, #4
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671c:	4413      	add	r3, r2
 800671e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006722:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672a:	b29a      	uxth	r2, r3
 800672c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d178      	bne.n	8006842 <USB_EPStartXfer+0x1b96>
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800675e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676c:	b29b      	uxth	r3, r3
 800676e:	461a      	mov	r2, r3
 8006770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006774:	4413      	add	r3, r2
 8006776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800677a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	011a      	lsls	r2, r3, #4
 8006788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678c:	4413      	add	r3, r2
 800678e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d116      	bne.n	80067cc <USB_EPStartXfer+0x1b20>
 800679e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	e067      	b.n	800689c <USB_EPStartXfer+0x1bf0>
 80067cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d0:	2b3e      	cmp	r3, #62	; 0x3e
 80067d2:	d818      	bhi.n	8006806 <USB_EPStartXfer+0x1b5a>
 80067d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d8:	085b      	lsrs	r3, r3, #1
 80067da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <USB_EPStartXfer+0x1b48>
 80067ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ee:	3301      	adds	r3, #1
 80067f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	029b      	lsls	r3, r3, #10
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e04a      	b.n	800689c <USB_EPStartXfer+0x1bf0>
 8006806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <USB_EPStartXfer+0x1b7a>
 800681c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006820:	3b01      	subs	r3, #1
 8006822:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800682a:	b29b      	uxth	r3, r3
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006838:	b29a      	uxth	r2, r3
 800683a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e02c      	b.n	800689c <USB_EPStartXfer+0x1bf0>
 8006842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d124      	bne.n	800689c <USB_EPStartXfer+0x1bf0>
 8006852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006860:	b29b      	uxth	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006868:	4413      	add	r3, r2
 800686a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	011a      	lsls	r2, r3, #4
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006880:	4413      	add	r3, r2
 8006882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006886:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800688a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688e:	b29a      	uxth	r2, r3
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e001      	b.n	800689c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e03a      	b.n	8006912 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800689c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068d2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	441a      	add	r2, r3
 80068f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d020      	beq.n	8006970 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006944:	81bb      	strh	r3, [r7, #12]
 8006946:	89bb      	ldrh	r3, [r7, #12]
 8006948:	f083 0310 	eor.w	r3, r3, #16
 800694c:	81bb      	strh	r3, [r7, #12]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	441a      	add	r2, r3
 8006958:	89bb      	ldrh	r3, [r7, #12]
 800695a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696a:	b29b      	uxth	r3, r3
 800696c:	8013      	strh	r3, [r2, #0]
 800696e:	e01f      	b.n	80069b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	81fb      	strh	r3, [r7, #14]
 8006988:	89fb      	ldrh	r3, [r7, #14]
 800698a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800698e:	81fb      	strh	r3, [r7, #14]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	441a      	add	r2, r3
 800699a:	89fb      	ldrh	r3, [r7, #14]
 800699c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	7b1b      	ldrb	r3, [r3, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 809d 	bne.w	8006b0a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d04c      	beq.n	8006a72 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	823b      	strh	r3, [r7, #16]
 80069e6:	8a3b      	ldrh	r3, [r7, #16]
 80069e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01b      	beq.n	8006a28 <USB_EPClearStall+0x6c>
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	81fb      	strh	r3, [r7, #14]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	441a      	add	r2, r3
 8006a12:	89fb      	ldrh	r3, [r7, #14]
 8006a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	78db      	ldrb	r3, [r3, #3]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d06c      	beq.n	8006b0a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a46:	81bb      	strh	r3, [r7, #12]
 8006a48:	89bb      	ldrh	r3, [r7, #12]
 8006a4a:	f083 0320 	eor.w	r3, r3, #32
 8006a4e:	81bb      	strh	r3, [r7, #12]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	89bb      	ldrh	r3, [r7, #12]
 8006a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]
 8006a70:	e04b      	b.n	8006b0a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	82fb      	strh	r3, [r7, #22]
 8006a80:	8afb      	ldrh	r3, [r7, #22]
 8006a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01b      	beq.n	8006ac2 <USB_EPClearStall+0x106>
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa0:	82bb      	strh	r3, [r7, #20]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	8abb      	ldrh	r3, [r7, #20]
 8006aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad8:	827b      	strh	r3, [r7, #18]
 8006ada:	8a7b      	ldrh	r3, [r7, #18]
 8006adc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ae0:	827b      	strh	r3, [r7, #18]
 8006ae2:	8a7b      	ldrh	r3, [r7, #18]
 8006ae4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ae8:	827b      	strh	r3, [r7, #18]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	441a      	add	r2, r3
 8006af4:	8a7b      	ldrh	r3, [r7, #18]
 8006af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2280      	movs	r2, #128	; 0x80
 8006b2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr

08006b50 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b76:	68fb      	ldr	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr

08006b98 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b08d      	sub	sp, #52	; 0x34
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	80fb      	strh	r3, [r7, #6]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bae:	88bb      	ldrh	r3, [r7, #4]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	005a      	lsls	r2, r3, #1
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd0:	e01e      	b.n	8006c10 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	3301      	adds	r3, #1
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	3302      	adds	r3, #2
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	3302      	adds	r3, #2
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	3301      	adds	r3, #1
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1dd      	bne.n	8006bd2 <USB_WritePMA+0x3a>
  }
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	3734      	adds	r7, #52	; 0x34
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b08b      	sub	sp, #44	; 0x2c
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	461a      	mov	r2, r3
 8006c30:	460b      	mov	r3, r1
 8006c32:	80fb      	strh	r3, [r7, #6]
 8006c34:	4613      	mov	r3, r2
 8006c36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c38:	88bb      	ldrh	r3, [r7, #4]
 8006c3a:	085b      	lsrs	r3, r3, #1
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	005a      	lsls	r2, r3, #1
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c54:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5a:	e01b      	b.n	8006c94 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	3302      	adds	r3, #2
 8006c68:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	3301      	adds	r3, #1
 8006c76:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	3301      	adds	r3, #1
 8006c86:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	3b01      	subs	r3, #1
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e0      	bne.n	8006c5c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c9a:	88bb      	ldrh	r3, [r7, #4]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	701a      	strb	r2, [r3, #0]
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	372c      	adds	r7, #44	; 0x2c
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	2181      	movs	r1, #129	; 0x81
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fd67 	bl	80087aa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 fd5e 	bl	80087aa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006cf6:	2054      	movs	r0, #84	; 0x54
 8006cf8:	f001 fe6c 	bl	80089d4 <USBD_static_malloc>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	73fb      	strb	r3, [r7, #15]
 8006d12:	e012      	b.n	8006d3a <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	2340      	movs	r3, #64	; 0x40
 8006d32:	2101      	movs	r1, #1
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fe29 	bl	800898c <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006d50:	2181      	movs	r1, #129	; 0x81
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fd4f 	bl	80087f6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006d5e:	2101      	movs	r1, #1
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fd48 	bl	80087f6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00e      	beq.n	8006d96 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fe2f 	bl	80089ec <USBD_static_free>
    pdev->pClassData = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d051      	beq.n	8006e72 <USBD_CUSTOM_HID_Setup+0xd2>
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	f040 80d8 	bne.w	8006f84 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	3b02      	subs	r3, #2
 8006dda:	2b09      	cmp	r3, #9
 8006ddc:	d841      	bhi.n	8006e62 <USBD_CUSTOM_HID_Setup+0xc2>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <USBD_CUSTOM_HID_Setup+0x44>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e3d 	.word	0x08006e3d
 8006de8:	08006e1b 	.word	0x08006e1b
 8006dec:	08006e63 	.word	0x08006e63
 8006df0:	08006e63 	.word	0x08006e63
 8006df4:	08006e63 	.word	0x08006e63
 8006df8:	08006e63 	.word	0x08006e63
 8006dfc:	08006e63 	.word	0x08006e63
 8006e00:	08006e4d 	.word	0x08006e4d
 8006e04:	08006e2b 	.word	0x08006e2b
 8006e08:	08006e0d 	.word	0x08006e0d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	885b      	ldrh	r3, [r3, #2]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006e18:	e02a      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3340      	adds	r3, #64	; 0x40
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f999 	bl	800815a <USBD_CtlSendData>
          break;
 8006e28:	e022      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	885b      	ldrh	r3, [r3, #2]
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8006e3a:	e019      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	3344      	adds	r3, #68	; 0x44
 8006e40:	2201      	movs	r2, #1
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f988 	bl	800815a <USBD_CtlSendData>
          break;
 8006e4a:	e011      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006e52:	6939      	ldr	r1, [r7, #16]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	88db      	ldrh	r3, [r3, #6]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 f9ab 	bl	80081b6 <USBD_CtlPrepareRx>
          break;
 8006e60:	e006      	b.n	8006e70 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f90e 	bl	8008086 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e6e:	bf00      	nop
      }
      break;
 8006e70:	e08f      	b.n	8006f92 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	2b0b      	cmp	r3, #11
 8006e78:	d87c      	bhi.n	8006f74 <USBD_CUSTOM_HID_Setup+0x1d4>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <USBD_CUSTOM_HID_Setup+0xe0>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006f75 	.word	0x08006f75
 8006e88:	08006f75 	.word	0x08006f75
 8006e8c:	08006f75 	.word	0x08006f75
 8006e90:	08006f75 	.word	0x08006f75
 8006e94:	08006f75 	.word	0x08006f75
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006f75 	.word	0x08006f75
 8006ea0:	08006f75 	.word	0x08006f75
 8006ea4:	08006f75 	.word	0x08006f75
 8006ea8:	08006f27 	.word	0x08006f27
 8006eac:	08006f4f 	.word	0x08006f4f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d107      	bne.n	8006eca <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006eba:	f107 030e 	add.w	r3, r7, #14
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 f949 	bl	800815a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ec8:	e05b      	b.n	8006f82 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 f8da 	bl	8008086 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ed6:	e054      	b.n	8006f82 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	885b      	ldrh	r3, [r3, #2]
 8006edc:	0a1b      	lsrs	r3, r3, #8
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b22      	cmp	r3, #34	; 0x22
 8006ee2:	d10b      	bne.n	8006efc <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	2b36      	cmp	r3, #54	; 0x36
 8006eea:	bf28      	it	cs
 8006eec:	2336      	movcs	r3, #54	; 0x36
 8006eee:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	e00d      	b.n	8006f18 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	885b      	ldrh	r3, [r3, #2]
 8006f00:	0a1b      	lsrs	r3, r3, #8
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2b21      	cmp	r3, #33	; 0x21
 8006f06:	d107      	bne.n	8006f18 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006f08:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <USBD_CUSTOM_HID_Setup+0x1fc>)
 8006f0a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	88db      	ldrh	r3, [r3, #6]
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	bf28      	it	cs
 8006f14:	2309      	movcs	r3, #9
 8006f16:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8006f18:	8bfb      	ldrh	r3, [r7, #30]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	69b9      	ldr	r1, [r7, #24]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 f91b 	bl	800815a <USBD_CtlSendData>
          break;
 8006f24:	e02d      	b.n	8006f82 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d107      	bne.n	8006f40 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	3348      	adds	r3, #72	; 0x48
 8006f34:	2201      	movs	r2, #1
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 f90e 	bl	800815a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f3e:	e020      	b.n	8006f82 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 f89f 	bl	8008086 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f4c:	e019      	b.n	8006f82 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d106      	bne.n	8006f66 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	885b      	ldrh	r3, [r3, #2]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f64:	e00d      	b.n	8006f82 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f88c 	bl	8008086 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	75fb      	strb	r3, [r7, #23]
          break;
 8006f72:	e006      	b.n	8006f82 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 f885 	bl	8008086 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	75fb      	strb	r3, [r7, #23]
          break;
 8006f80:	bf00      	nop
      }
      break;
 8006f82:	e006      	b.n	8006f92 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f87d 	bl	8008086 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f90:	bf00      	nop
  }
  return ret;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3720      	adds	r7, #32
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	200000d0 	.word	0x200000d0

08006fa0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d111      	bne.n	8006fe4 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	2181      	movs	r1, #129	; 0x81
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f001 fcb4 	bl	8008946 <USBD_LL_Transmit>
 8006fde:	e001      	b.n	8006fe4 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2229      	movs	r2, #41	; 0x29
 8006ffc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8006ffe:	4b03      	ldr	r3, [pc, #12]	; (800700c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	2000004c 	.word	0x2000004c

08007010 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2229      	movs	r2, #41	; 0x29
 800701c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000078 	.word	0x20000078

08007030 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2229      	movs	r2, #41	; 0x29
 800703c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800703e:	4b03      	ldr	r3, [pc, #12]	; (800704c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	200000a4 	.word	0x200000a4

08007050 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4610      	mov	r0, r2
 8007094:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	2101      	movs	r1, #1
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fc75 	bl	800898c <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ba:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d109      	bne.n	80070d8 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4610      	mov	r0, r2
 80070d0:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	220a      	movs	r2, #10
 80070f0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80070f2:	4b03      	ldr	r3, [pc, #12]	; (8007100 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	200000dc 	.word	0x200000dc

08007104 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800710e:	2302      	movs	r3, #2
 8007110:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	bc80      	pop	{r7}
 800712e:	4770      	bx	lr

08007130 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007144:	2302      	movs	r3, #2
 8007146:	e01a      	b.n	800717e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	79fa      	ldrb	r2, [r7, #7]
 8007174:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f001 faac 	bl	80086d4 <USBD_LL_Init>

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d006      	beq.n	80071a8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
 80071a6:	e001      	b.n	80071ac <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071a8:	2302      	movs	r3, #2
 80071aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr

080071b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fad7 	bl	8008774 <USBD_LL_Start>

  return USBD_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071f0:	2302      	movs	r3, #2
 80071f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00c      	beq.n	8007218 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	78fa      	ldrb	r2, [r7, #3]
 8007208:	4611      	mov	r1, r2
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	4611      	mov	r1, r2
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3

  return USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fed7 	bl	800800e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2b02      	cmp	r3, #2
 8007282:	d016      	beq.n	80072b2 <USBD_LL_SetupStage+0x6a>
 8007284:	2b02      	cmp	r3, #2
 8007286:	d81c      	bhi.n	80072c2 <USBD_LL_SetupStage+0x7a>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <USBD_LL_SetupStage+0x4a>
 800728c:	2b01      	cmp	r3, #1
 800728e:	d008      	beq.n	80072a2 <USBD_LL_SetupStage+0x5a>
 8007290:	e017      	b.n	80072c2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9ca 	bl	8007634 <USBD_StdDevReq>
      break;
 80072a0:	e01a      	b.n	80072d8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa2c 	bl	8007708 <USBD_StdItfReq>
      break;
 80072b0:	e012      	b.n	80072d8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa6c 	bl	8007798 <USBD_StdEPReq>
      break;
 80072c0:	e00a      	b.n	80072d8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 faaf 	bl	8008834 <USBD_LL_StallEP>
      break;
 80072d6:	bf00      	nop
  }

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	460b      	mov	r3, r1
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d14b      	bne.n	800738e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007304:	2b03      	cmp	r3, #3
 8007306:	d134      	bne.n	8007372 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	429a      	cmp	r2, r3
 8007312:	d919      	bls.n	8007348 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	1ad2      	subs	r2, r2, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800732a:	429a      	cmp	r2, r3
 800732c:	d203      	bcs.n	8007336 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007332:	b29b      	uxth	r3, r3
 8007334:	e002      	b.n	800733c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800733a:	b29b      	uxth	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 ff56 	bl	80081f2 <USBD_CtlContinueRx>
 8007346:	e038      	b.n	80073ba <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800735a:	2b03      	cmp	r3, #3
 800735c:	d105      	bne.n	800736a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 ff53 	bl	8008216 <USBD_CtlSendStatus>
 8007370:	e023      	b.n	80073ba <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007378:	2b05      	cmp	r3, #5
 800737a:	d11e      	bne.n	80073ba <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007384:	2100      	movs	r1, #0
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 fa54 	bl	8008834 <USBD_LL_StallEP>
 800738c:	e015      	b.n	80073ba <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d108      	bne.n	80073b6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	7afa      	ldrb	r2, [r7, #11]
 80073ae:	4611      	mov	r1, r2
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	4798      	blx	r3
 80073b4:	e001      	b.n	80073ba <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073b6:	2302      	movs	r3, #2
 80073b8:	e000      	b.n	80073bc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	460b      	mov	r3, r1
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d17f      	bne.n	80074d8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3314      	adds	r3, #20
 80073dc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d15c      	bne.n	80074a2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d915      	bls.n	8007420 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	1ad2      	subs	r2, r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	b29b      	uxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fec0 	bl	8008192 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007412:	2300      	movs	r3, #0
 8007414:	2200      	movs	r2, #0
 8007416:	2100      	movs	r1, #0
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f001 fab7 	bl	800898c <USBD_LL_PrepareReceive>
 800741e:	e04e      	b.n	80074be <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	6912      	ldr	r2, [r2, #16]
 8007428:	fbb3 f1f2 	udiv	r1, r3, r2
 800742c:	fb01 f202 	mul.w	r2, r1, r2
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d11c      	bne.n	8007470 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800743e:	429a      	cmp	r2, r3
 8007440:	d316      	bcc.n	8007470 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800744c:	429a      	cmp	r2, r3
 800744e:	d20f      	bcs.n	8007470 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007450:	2200      	movs	r2, #0
 8007452:	2100      	movs	r1, #0
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fe9c 	bl	8008192 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007462:	2300      	movs	r3, #0
 8007464:	2200      	movs	r2, #0
 8007466:	2100      	movs	r1, #0
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f001 fa8f 	bl	800898c <USBD_LL_PrepareReceive>
 800746e:	e026      	b.n	80074be <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007482:	2b03      	cmp	r3, #3
 8007484:	d105      	bne.n	8007492 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007492:	2180      	movs	r1, #128	; 0x80
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f001 f9cd 	bl	8008834 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fece 	bl	800823c <USBD_CtlReceiveStatus>
 80074a0:	e00d      	b.n	80074be <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d004      	beq.n	80074b6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d103      	bne.n	80074be <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 f9bb 	bl	8008834 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d11d      	bne.n	8007504 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff fe81 	bl	80071d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074d6:	e015      	b.n	8007504 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00d      	beq.n	8007500 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d108      	bne.n	8007500 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	7afa      	ldrb	r2, [r7, #11]
 80074f8:	4611      	mov	r1, r2
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	4798      	blx	r3
 80074fe:	e001      	b.n	8007504 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007500:	2302      	movs	r3, #2
 8007502:	e000      	b.n	8007506 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007516:	2340      	movs	r3, #64	; 0x40
 8007518:	2200      	movs	r2, #0
 800751a:	2100      	movs	r1, #0
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f944 	bl	80087aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2240      	movs	r2, #64	; 0x40
 800752e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007532:	2340      	movs	r3, #64	; 0x40
 8007534:	2200      	movs	r2, #0
 8007536:	2180      	movs	r1, #128	; 0x80
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f936 	bl	80087aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2240      	movs	r2, #64	; 0x40
 8007548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6852      	ldr	r2, [r2, #4]
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	4611      	mov	r1, r2
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
  }

  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	78fa      	ldrb	r2, [r7, #3]
 80075a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr

080075ae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2204      	movs	r2, #4
 80075c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr

080075d6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d105      	bne.n	80075f4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bc80      	pop	{r7}
 80075fe:	4770      	bx	lr

08007600 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760e:	2b03      	cmp	r3, #3
 8007610:	d10b      	bne.n	800762a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800764a:	2b40      	cmp	r3, #64	; 0x40
 800764c:	d005      	beq.n	800765a <USBD_StdDevReq+0x26>
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d84f      	bhi.n	80076f2 <USBD_StdDevReq+0xbe>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <USBD_StdDevReq+0x36>
 8007656:	2b20      	cmp	r3, #32
 8007658:	d14b      	bne.n	80076f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	4798      	blx	r3
      break;
 8007668:	e048      	b.n	80076fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b09      	cmp	r3, #9
 8007670:	d839      	bhi.n	80076e6 <USBD_StdDevReq+0xb2>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <USBD_StdDevReq+0x44>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	080076c9 	.word	0x080076c9
 800767c:	080076dd 	.word	0x080076dd
 8007680:	080076e7 	.word	0x080076e7
 8007684:	080076d3 	.word	0x080076d3
 8007688:	080076e7 	.word	0x080076e7
 800768c:	080076ab 	.word	0x080076ab
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076e7 	.word	0x080076e7
 8007698:	080076bf 	.word	0x080076bf
 800769c:	080076b5 	.word	0x080076b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f9dc 	bl	8007a60 <USBD_GetDescriptor>
          break;
 80076a8:	e022      	b.n	80076f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fb3f 	bl	8007d30 <USBD_SetAddress>
          break;
 80076b2:	e01d      	b.n	80076f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fb7e 	bl	8007db8 <USBD_SetConfig>
          break;
 80076bc:	e018      	b.n	80076f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fc07 	bl	8007ed4 <USBD_GetConfig>
          break;
 80076c6:	e013      	b.n	80076f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fc37 	bl	8007f3e <USBD_GetStatus>
          break;
 80076d0:	e00e      	b.n	80076f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fc65 	bl	8007fa4 <USBD_SetFeature>
          break;
 80076da:	e009      	b.n	80076f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fc74 	bl	8007fcc <USBD_ClrFeature>
          break;
 80076e4:	e004      	b.n	80076f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fccc 	bl	8008086 <USBD_CtlError>
          break;
 80076ee:	bf00      	nop
      }
      break;
 80076f0:	e004      	b.n	80076fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fcc6 	bl	8008086 <USBD_CtlError>
      break;
 80076fa:	bf00      	nop
  }

  return ret;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop

08007708 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d005      	beq.n	800772e <USBD_StdItfReq+0x26>
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d82e      	bhi.n	8007784 <USBD_StdItfReq+0x7c>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <USBD_StdItfReq+0x26>
 800772a:	2b20      	cmp	r3, #32
 800772c:	d12a      	bne.n	8007784 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007734:	3b01      	subs	r3, #1
 8007736:	2b02      	cmp	r3, #2
 8007738:	d81d      	bhi.n	8007776 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	889b      	ldrh	r3, [r3, #4]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	d813      	bhi.n	800776c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
 8007752:	4603      	mov	r3, r0
 8007754:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	88db      	ldrh	r3, [r3, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d110      	bne.n	8007780 <USBD_StdItfReq+0x78>
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10d      	bne.n	8007780 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fd56 	bl	8008216 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800776a:	e009      	b.n	8007780 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc89 	bl	8008086 <USBD_CtlError>
          break;
 8007774:	e004      	b.n	8007780 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc84 	bl	8008086 <USBD_CtlError>
          break;
 800777e:	e000      	b.n	8007782 <USBD_StdItfReq+0x7a>
          break;
 8007780:	bf00      	nop
      }
      break;
 8007782:	e004      	b.n	800778e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fc7d 	bl	8008086 <USBD_CtlError>
      break;
 800778c:	bf00      	nop
  }

  return USBD_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	889b      	ldrh	r3, [r3, #4]
 80077aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	d007      	beq.n	80077c8 <USBD_StdEPReq+0x30>
 80077b8:	2b40      	cmp	r3, #64	; 0x40
 80077ba:	f200 8146 	bhi.w	8007a4a <USBD_StdEPReq+0x2b2>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <USBD_StdEPReq+0x40>
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	f040 8141 	bne.w	8007a4a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
      break;
 80077d6:	e13d      	b.n	8007a54 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d10a      	bne.n	80077fa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
 80077f8:	e12d      	b.n	8007a56 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	785b      	ldrb	r3, [r3, #1]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d007      	beq.n	8007812 <USBD_StdEPReq+0x7a>
 8007802:	2b03      	cmp	r3, #3
 8007804:	f300 811b 	bgt.w	8007a3e <USBD_StdEPReq+0x2a6>
 8007808:	2b00      	cmp	r3, #0
 800780a:	d072      	beq.n	80078f2 <USBD_StdEPReq+0x15a>
 800780c:	2b01      	cmp	r3, #1
 800780e:	d03a      	beq.n	8007886 <USBD_StdEPReq+0xee>
 8007810:	e115      	b.n	8007a3e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007818:	2b02      	cmp	r3, #2
 800781a:	d002      	beq.n	8007822 <USBD_StdEPReq+0x8a>
 800781c:	2b03      	cmp	r3, #3
 800781e:	d015      	beq.n	800784c <USBD_StdEPReq+0xb4>
 8007820:	e02b      	b.n	800787a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00c      	beq.n	8007842 <USBD_StdEPReq+0xaa>
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	2b80      	cmp	r3, #128	; 0x80
 800782c:	d009      	beq.n	8007842 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fffe 	bl	8008834 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007838:	2180      	movs	r1, #128	; 0x80
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fffa 	bl	8008834 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007840:	e020      	b.n	8007884 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc1e 	bl	8008086 <USBD_CtlError>
              break;
 800784a:	e01b      	b.n	8007884 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	885b      	ldrh	r3, [r3, #2]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10e      	bne.n	8007872 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00b      	beq.n	8007872 <USBD_StdEPReq+0xda>
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b80      	cmp	r3, #128	; 0x80
 800785e:	d008      	beq.n	8007872 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	88db      	ldrh	r3, [r3, #6]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 ffe1 	bl	8008834 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fccf 	bl	8008216 <USBD_CtlSendStatus>

              break;
 8007878:	e004      	b.n	8007884 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc02 	bl	8008086 <USBD_CtlError>
              break;
 8007882:	bf00      	nop
          }
          break;
 8007884:	e0e0      	b.n	8007a48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	2b02      	cmp	r3, #2
 800788e:	d002      	beq.n	8007896 <USBD_StdEPReq+0xfe>
 8007890:	2b03      	cmp	r3, #3
 8007892:	d015      	beq.n	80078c0 <USBD_StdEPReq+0x128>
 8007894:	e026      	b.n	80078e4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00c      	beq.n	80078b6 <USBD_StdEPReq+0x11e>
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b80      	cmp	r3, #128	; 0x80
 80078a0:	d009      	beq.n	80078b6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 ffc4 	bl	8008834 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078ac:	2180      	movs	r1, #128	; 0x80
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 ffc0 	bl	8008834 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078b4:	e01c      	b.n	80078f0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fbe4 	bl	8008086 <USBD_CtlError>
              break;
 80078be:	e017      	b.n	80078f0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	885b      	ldrh	r3, [r3, #2]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d112      	bne.n	80078ee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d004      	beq.n	80078dc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 ffcb 	bl	8008872 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fc9a 	bl	8008216 <USBD_CtlSendStatus>
              }
              break;
 80078e2:	e004      	b.n	80078ee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fbcd 	bl	8008086 <USBD_CtlError>
              break;
 80078ec:	e000      	b.n	80078f0 <USBD_StdEPReq+0x158>
              break;
 80078ee:	bf00      	nop
          }
          break;
 80078f0:	e0aa      	b.n	8007a48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d002      	beq.n	8007902 <USBD_StdEPReq+0x16a>
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d032      	beq.n	8007966 <USBD_StdEPReq+0x1ce>
 8007900:	e097      	b.n	8007a32 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d007      	beq.n	8007918 <USBD_StdEPReq+0x180>
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b80      	cmp	r3, #128	; 0x80
 800790c:	d004      	beq.n	8007918 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fbb8 	bl	8008086 <USBD_CtlError>
                break;
 8007916:	e091      	b.n	8007a3c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800791c:	2b00      	cmp	r3, #0
 800791e:	da0b      	bge.n	8007938 <USBD_StdEPReq+0x1a0>
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	3310      	adds	r3, #16
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	3304      	adds	r3, #4
 8007936:	e00b      	b.n	8007950 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	3304      	adds	r3, #4
 8007950:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2202      	movs	r2, #2
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fbfb 	bl	800815a <USBD_CtlSendData>
              break;
 8007964:	e06a      	b.n	8007a3c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800796a:	2b00      	cmp	r3, #0
 800796c:	da11      	bge.n	8007992 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	f003 020f 	and.w	r2, r3, #15
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	3318      	adds	r3, #24
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d117      	bne.n	80079b8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fb7b 	bl	8008086 <USBD_CtlError>
                  break;
 8007990:	e054      	b.n	8007a3c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	f003 020f 	and.w	r2, r3, #15
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	4613      	mov	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fb68 	bl	8008086 <USBD_CtlError>
                  break;
 80079b6:	e041      	b.n	8007a3c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da0b      	bge.n	80079d8 <USBD_StdEPReq+0x240>
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	3310      	adds	r3, #16
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	4413      	add	r3, r2
 80079d4:	3304      	adds	r3, #4
 80079d6:	e00b      	b.n	80079f0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	3304      	adds	r3, #4
 80079f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <USBD_StdEPReq+0x266>
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	2b80      	cmp	r3, #128	; 0x80
 80079fc:	d103      	bne.n	8007a06 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	e00e      	b.n	8007a24 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 ff50 	bl	80088b0 <USBD_LL_IsStallEP>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	e002      	b.n	8007a24 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2202      	movs	r2, #2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fb95 	bl	800815a <USBD_CtlSendData>
              break;
 8007a30:	e004      	b.n	8007a3c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fb26 	bl	8008086 <USBD_CtlError>
              break;
 8007a3a:	bf00      	nop
          }
          break;
 8007a3c:	e004      	b.n	8007a48 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fb20 	bl	8008086 <USBD_CtlError>
          break;
 8007a46:	bf00      	nop
      }
      break;
 8007a48:	e004      	b.n	8007a54 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fb1a 	bl	8008086 <USBD_CtlError>
      break;
 8007a52:	bf00      	nop
  }

  return ret;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	f200 8128 	bhi.w	8007cd6 <USBD_GetDescriptor+0x276>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <USBD_GetDescriptor+0x2c>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	08007ac1 	.word	0x08007ac1
 8007a94:	08007b01 	.word	0x08007b01
 8007a98:	08007cd7 	.word	0x08007cd7
 8007a9c:	08007cd7 	.word	0x08007cd7
 8007aa0:	08007c77 	.word	0x08007c77
 8007aa4:	08007ca3 	.word	0x08007ca3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7c12      	ldrb	r2, [r2, #16]
 8007ab4:	f107 0108 	add.w	r1, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
      break;
 8007abe:	e112      	b.n	8007ce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7c1b      	ldrb	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10d      	bne.n	8007ae4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	f107 0208 	add.w	r2, r7, #8
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3301      	adds	r3, #1
 8007ade:	2202      	movs	r2, #2
 8007ae0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ae2:	e100      	b.n	8007ce6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	f107 0208 	add.w	r2, r7, #8
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	2202      	movs	r2, #2
 8007afc:	701a      	strb	r2, [r3, #0]
      break;
 8007afe:	e0f2      	b.n	8007ce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	885b      	ldrh	r3, [r3, #2]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	f200 80ac 	bhi.w	8007c64 <USBD_GetDescriptor+0x204>
 8007b0c:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <USBD_GetDescriptor+0xb4>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b2d 	.word	0x08007b2d
 8007b18:	08007b61 	.word	0x08007b61
 8007b1c:	08007b95 	.word	0x08007b95
 8007b20:	08007bc9 	.word	0x08007bc9
 8007b24:	08007bfd 	.word	0x08007bfd
 8007b28:	08007c31 	.word	0x08007c31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00b      	beq.n	8007b50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7c12      	ldrb	r2, [r2, #16]
 8007b44:	f107 0108 	add.w	r1, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4e:	e091      	b.n	8007c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa97 	bl	8008086 <USBD_CtlError>
            err++;
 8007b58:	7afb      	ldrb	r3, [r7, #11]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5e:	e089      	b.n	8007c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7c12      	ldrb	r2, [r2, #16]
 8007b78:	f107 0108 	add.w	r1, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b82:	e077      	b.n	8007c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa7d 	bl	8008086 <USBD_CtlError>
            err++;
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	72fb      	strb	r3, [r7, #11]
          break;
 8007b92:	e06f      	b.n	8007c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	7c12      	ldrb	r2, [r2, #16]
 8007bac:	f107 0108 	add.w	r1, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb6:	e05d      	b.n	8007c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa63 	bl	8008086 <USBD_CtlError>
            err++;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc6:	e055      	b.n	8007c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 0108 	add.w	r1, r7, #8
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bea:	e043      	b.n	8007c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa49 	bl	8008086 <USBD_CtlError>
            err++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfa:	e03b      	b.n	8007c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1e:	e029      	b.n	8007c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa2f 	bl	8008086 <USBD_CtlError>
            err++;
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2e:	e021      	b.n	8007c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00b      	beq.n	8007c54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7c12      	ldrb	r2, [r2, #16]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c52:	e00f      	b.n	8007c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa15 	bl	8008086 <USBD_CtlError>
            err++;
 8007c5c:	7afb      	ldrb	r3, [r7, #11]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	72fb      	strb	r3, [r7, #11]
          break;
 8007c62:	e007      	b.n	8007c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa0d 	bl	8008086 <USBD_CtlError>
          err++;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c72:	e038      	b.n	8007ce6 <USBD_GetDescriptor+0x286>
 8007c74:	e037      	b.n	8007ce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	7c1b      	ldrb	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c86:	f107 0208 	add.w	r2, r7, #8
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	4798      	blx	r3
 8007c8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c90:	e029      	b.n	8007ce6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f9f6 	bl	8008086 <USBD_CtlError>
        err++;
 8007c9a:	7afb      	ldrb	r3, [r7, #11]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007ca0:	e021      	b.n	8007ce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7c1b      	ldrb	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10d      	bne.n	8007cc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	f107 0208 	add.w	r2, r7, #8
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4798      	blx	r3
 8007cba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cc4:	e00f      	b.n	8007ce6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f9dc 	bl	8008086 <USBD_CtlError>
        err++;
 8007cce:	7afb      	ldrb	r3, [r7, #11]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd4:	e007      	b.n	8007ce6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f9d4 	bl	8008086 <USBD_CtlError>
      err++;
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ce4:	bf00      	nop
  }

  if (err != 0U)
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d11c      	bne.n	8007d26 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007cec:	893b      	ldrh	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d011      	beq.n	8007d16 <USBD_GetDescriptor+0x2b6>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	88db      	ldrh	r3, [r3, #6]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00d      	beq.n	8007d16 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88da      	ldrh	r2, [r3, #6]
 8007cfe:	893b      	ldrh	r3, [r7, #8]
 8007d00:	4293      	cmp	r3, r2
 8007d02:	bf28      	it	cs
 8007d04:	4613      	movcs	r3, r2
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d0a:	893b      	ldrh	r3, [r7, #8]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	68f9      	ldr	r1, [r7, #12]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fa22 	bl	800815a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	88db      	ldrh	r3, [r3, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa79 	bl	8008216 <USBD_CtlSendStatus>
 8007d24:	e000      	b.n	8007d28 <USBD_GetDescriptor+0x2c8>
    return;
 8007d26:	bf00      	nop
    }
  }
}
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop

08007d30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	889b      	ldrh	r3, [r3, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d130      	bne.n	8007da4 <USBD_SetAddress+0x74>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	88db      	ldrh	r3, [r3, #6]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d12c      	bne.n	8007da4 <USBD_SetAddress+0x74>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	885b      	ldrh	r3, [r3, #2]
 8007d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d50:	d828      	bhi.n	8007da4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	885b      	ldrh	r3, [r3, #2]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d104      	bne.n	8007d72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f98b 	bl	8008086 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d70:	e01d      	b.n	8007dae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	7bfa      	ldrb	r2, [r7, #15]
 8007d76:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fdc2 	bl	8008908 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa46 	bl	8008216 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d98:	e009      	b.n	8007dae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da2:	e004      	b.n	8007dae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f96d 	bl	8008086 <USBD_CtlError>
  }
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	4b41      	ldr	r3, [pc, #260]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007dca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007dcc:	4b40      	ldr	r3, [pc, #256]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d904      	bls.n	8007dde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f955 	bl	8008086 <USBD_CtlError>
 8007ddc:	e075      	b.n	8007eca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d002      	beq.n	8007dee <USBD_SetConfig+0x36>
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d023      	beq.n	8007e34 <USBD_SetConfig+0x7c>
 8007dec:	e062      	b.n	8007eb4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007dee:	4b38      	ldr	r3, [pc, #224]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01a      	beq.n	8007e2c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007df6:	4b36      	ldr	r3, [pc, #216]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2203      	movs	r2, #3
 8007e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e08:	4b31      	ldr	r3, [pc, #196]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff f9e8 	bl	80071e4 <USBD_SetClassConfig>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d104      	bne.n	8007e24 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f932 	bl	8008086 <USBD_CtlError>
            return;
 8007e22:	e052      	b.n	8007eca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f9f6 	bl	8008216 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e2a:	e04e      	b.n	8007eca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f9f2 	bl	8008216 <USBD_CtlSendStatus>
        break;
 8007e32:	e04a      	b.n	8007eca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e34:	4b26      	ldr	r3, [pc, #152]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d112      	bne.n	8007e62 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e44:	4b22      	ldr	r3, [pc, #136]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e4e:	4b20      	ldr	r3, [pc, #128]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff f9e4 	bl	8007222 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f9db 	bl	8008216 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e60:	e033      	b.n	8007eca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e62:	4b1b      	ldr	r3, [pc, #108]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d01d      	beq.n	8007eac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff f9d2 	bl	8007222 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e7e:	4b14      	ldr	r3, [pc, #80]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e88:	4b11      	ldr	r3, [pc, #68]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff f9a8 	bl	80071e4 <USBD_SetClassConfig>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d104      	bne.n	8007ea4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f8f2 	bl	8008086 <USBD_CtlError>
            return;
 8007ea2:	e012      	b.n	8007eca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f9b6 	bl	8008216 <USBD_CtlSendStatus>
        break;
 8007eaa:	e00e      	b.n	8007eca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f9b2 	bl	8008216 <USBD_CtlSendStatus>
        break;
 8007eb2:	e00a      	b.n	8007eca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8e5 	bl	8008086 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ebc:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <USBD_SetConfig+0x118>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff f9ad 	bl	8007222 <USBD_ClrClassConfig>
        break;
 8007ec8:	bf00      	nop
    }
  }
}
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	200002c8 	.word	0x200002c8

08007ed4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	88db      	ldrh	r3, [r3, #6]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d004      	beq.n	8007ef0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f8cc 	bl	8008086 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007eee:	e022      	b.n	8007f36 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	dc02      	bgt.n	8007f00 <USBD_GetConfig+0x2c>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	dc03      	bgt.n	8007f06 <USBD_GetConfig+0x32>
 8007efe:	e015      	b.n	8007f2c <USBD_GetConfig+0x58>
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d00b      	beq.n	8007f1c <USBD_GetConfig+0x48>
 8007f04:	e012      	b.n	8007f2c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	2201      	movs	r2, #1
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f920 	bl	800815a <USBD_CtlSendData>
        break;
 8007f1a:	e00c      	b.n	8007f36 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	2201      	movs	r2, #1
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f918 	bl	800815a <USBD_CtlSendData>
        break;
 8007f2a:	e004      	b.n	8007f36 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f8a9 	bl	8008086 <USBD_CtlError>
        break;
 8007f34:	bf00      	nop
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d81e      	bhi.n	8007f92 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	88db      	ldrh	r3, [r3, #6]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d004      	beq.n	8007f66 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f891 	bl	8008086 <USBD_CtlError>
        break;
 8007f64:	e01a      	b.n	8007f9c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f043 0202 	orr.w	r2, r3, #2
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	330c      	adds	r3, #12
 8007f86:	2202      	movs	r2, #2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f8e5 	bl	800815a <USBD_CtlSendData>
      break;
 8007f90:	e004      	b.n	8007f9c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f876 	bl	8008086 <USBD_CtlError>
      break;
 8007f9a:	bf00      	nop
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	885b      	ldrh	r3, [r3, #2]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d106      	bne.n	8007fc4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f929 	bl	8008216 <USBD_CtlSendStatus>
  }
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d80b      	bhi.n	8007ffa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	885b      	ldrh	r3, [r3, #2]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d10c      	bne.n	8008004 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f90f 	bl	8008216 <USBD_CtlSendStatus>
      }
      break;
 8007ff8:	e004      	b.n	8008004 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f842 	bl	8008086 <USBD_CtlError>
      break;
 8008002:	e000      	b.n	8008006 <USBD_ClrFeature+0x3a>
      break;
 8008004:	bf00      	nop
  }
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781a      	ldrb	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	785a      	ldrb	r2, [r3, #1]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	3302      	adds	r3, #2
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b29a      	uxth	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	3303      	adds	r3, #3
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	b29b      	uxth	r3, r3
 800803c:	4413      	add	r3, r2
 800803e:	b29a      	uxth	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	3304      	adds	r3, #4
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	b29a      	uxth	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	3305      	adds	r3, #5
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	b29b      	uxth	r3, r3
 8008058:	4413      	add	r3, r2
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	3306      	adds	r3, #6
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	3307      	adds	r3, #7
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b29b      	uxth	r3, r3
 8008074:	4413      	add	r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	80da      	strh	r2, [r3, #6]

}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	bc80      	pop	{r7}
 8008084:	4770      	bx	lr

08008086 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008090:	2180      	movs	r1, #128	; 0x80
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fbce 	bl	8008834 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008098:	2100      	movs	r1, #0
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fbca 	bl	8008834 <USBD_LL_StallEP>
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d032      	beq.n	8008124 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f834 	bl	800812c <USBD_GetLen>
 80080c4:	4603      	mov	r3, r0
 80080c6:	3301      	adds	r3, #1
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	75fa      	strb	r2, [r7, #23]
 80080d8:	461a      	mov	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4413      	add	r3, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	75fa      	strb	r2, [r7, #23]
 80080ea:	461a      	mov	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4413      	add	r3, r2
 80080f0:	2203      	movs	r2, #3
 80080f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80080f4:	e012      	b.n	800811c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	60fa      	str	r2, [r7, #12]
 80080fc:	7dfa      	ldrb	r2, [r7, #23]
 80080fe:	1c51      	adds	r1, r2, #1
 8008100:	75f9      	strb	r1, [r7, #23]
 8008102:	4611      	mov	r1, r2
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	440a      	add	r2, r1
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	75fa      	strb	r2, [r7, #23]
 8008112:	461a      	mov	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4413      	add	r3, r2
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e8      	bne.n	80080f6 <USBD_GetString+0x4e>
    }
  }
}
 8008124:	bf00      	nop
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008138:	e005      	b.n	8008146 <USBD_GetLen+0x1a>
  {
    len++;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	3301      	adds	r3, #1
 800813e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3301      	adds	r3, #1
 8008144:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f5      	bne.n	800813a <USBD_GetLen+0xe>
  }

  return len;
 800814e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	bc80      	pop	{r7}
 8008158:	4770      	bx	lr

0800815a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	4613      	mov	r3, r2
 8008166:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2202      	movs	r2, #2
 800816c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008170:	88fa      	ldrh	r2, [r7, #6]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008176:	88fa      	ldrh	r2, [r7, #6]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	2100      	movs	r1, #0
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 fbdf 	bl	8008946 <USBD_LL_Transmit>

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	4613      	mov	r3, r2
 800819e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fbcd 	bl	8008946 <USBD_LL_Transmit>

  return USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	4613      	mov	r3, r2
 80081c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2203      	movs	r2, #3
 80081c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081cc:	88fa      	ldrh	r2, [r7, #6]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	2100      	movs	r1, #0
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 fbd2 	bl	800898c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	4613      	mov	r3, r2
 80081fe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008200:	88fb      	ldrh	r3, [r7, #6]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	2100      	movs	r1, #0
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 fbc0 	bl	800898c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2204      	movs	r2, #4
 8008222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008226:	2300      	movs	r3, #0
 8008228:	2200      	movs	r2, #0
 800822a:	2100      	movs	r1, #0
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fb8a 	bl	8008946 <USBD_LL_Transmit>

  return USBD_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2205      	movs	r2, #5
 8008248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800824c:	2300      	movs	r3, #0
 800824e:	2200      	movs	r2, #0
 8008250:	2100      	movs	r1, #0
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fb9a 	bl	800898c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008268:	2200      	movs	r2, #0
 800826a:	4912      	ldr	r1, [pc, #72]	; (80082b4 <MX_USB_DEVICE_Init+0x50>)
 800826c:	4812      	ldr	r0, [pc, #72]	; (80082b8 <MX_USB_DEVICE_Init+0x54>)
 800826e:	f7fe ff5f 	bl	8007130 <USBD_Init>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008278:	f7f8 f9a2 	bl	80005c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800827c:	490f      	ldr	r1, [pc, #60]	; (80082bc <MX_USB_DEVICE_Init+0x58>)
 800827e:	480e      	ldr	r0, [pc, #56]	; (80082b8 <MX_USB_DEVICE_Init+0x54>)
 8008280:	f7fe ff81 	bl	8007186 <USBD_RegisterClass>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800828a:	f7f8 f999 	bl	80005c0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800828e:	490c      	ldr	r1, [pc, #48]	; (80082c0 <MX_USB_DEVICE_Init+0x5c>)
 8008290:	4809      	ldr	r0, [pc, #36]	; (80082b8 <MX_USB_DEVICE_Init+0x54>)
 8008292:	f7fe ff37 	bl	8007104 <USBD_CUSTOM_HID_RegisterInterface>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800829c:	f7f8 f990 	bl	80005c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082a0:	4805      	ldr	r0, [pc, #20]	; (80082b8 <MX_USB_DEVICE_Init+0x54>)
 80082a2:	f7fe ff89 	bl	80071b8 <USBD_Start>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082ac:	f7f8 f988 	bl	80005c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082b0:	bf00      	nop
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000130 	.word	0x20000130
 80082b8:	200002cc 	.word	0x200002cc
 80082bc:	20000014 	.word	0x20000014
 80082c0:	20000120 	.word	0x20000120

080082c4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr

080082d2 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80082d2:	b480      	push	{r7}
 80082d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80082d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082d8:	4618      	mov	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	bc80      	pop	{r7}
 80082de:	4770      	bx	lr

080082e0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 80082e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e2:	b093      	sub	sp, #76	; 0x4c
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	uint8_t buffer[0x40];
	memcpy(buffer, state, 0x40);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	461c      	mov	r4, r3
 80082ec:	f107 0608 	add.w	r6, r7, #8
 80082f0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80082f4:	4635      	mov	r5, r6
 80082f6:	4623      	mov	r3, r4
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	6859      	ldr	r1, [r3, #4]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008302:	3410      	adds	r4, #16
 8008304:	3610      	adds	r6, #16
 8008306:	4564      	cmp	r4, ip
 8008308:	d1f4      	bne.n	80082f4 <CUSTOM_HID_OutEvent_FS+0x14>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800830a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800830e:	4807      	ldr	r0, [pc, #28]	; (800832c <CUSTOM_HID_OutEvent_FS+0x4c>)
 8008310:	f7f9 fbbc 	bl	8001a8c <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, 0x40, 100);
 8008314:	f107 0108 	add.w	r1, r7, #8
 8008318:	2364      	movs	r3, #100	; 0x64
 800831a:	2240      	movs	r2, #64	; 0x40
 800831c:	4804      	ldr	r0, [pc, #16]	; (8008330 <CUSTOM_HID_OutEvent_FS+0x50>)
 800831e:	f7fb fd98 	bl	8003e52 <HAL_UART_Transmit>

  return (USBD_OK);
 8008322:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008324:	4618      	mov	r0, r3
 8008326:	374c      	adds	r7, #76	; 0x4c
 8008328:	46bd      	mov	sp, r7
 800832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832c:	40011000 	.word	0x40011000
 8008330:	20000274 	.word	0x20000274

08008334 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	6039      	str	r1, [r7, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2212      	movs	r2, #18
 8008344:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008346:	4b03      	ldr	r3, [pc, #12]	; (8008354 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	2000014c 	.word	0x2000014c

08008358 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	6039      	str	r1, [r7, #0]
 8008362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2204      	movs	r2, #4
 8008368:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800836a:	4b03      	ldr	r3, [pc, #12]	; (8008378 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	bc80      	pop	{r7}
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20000160 	.word	0x20000160

0800837c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4907      	ldr	r1, [pc, #28]	; (80083b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008392:	4808      	ldr	r0, [pc, #32]	; (80083b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008394:	f7ff fe88 	bl	80080a8 <USBD_GetString>
 8008398:	e004      	b.n	80083a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	4904      	ldr	r1, [pc, #16]	; (80083b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80083a0:	f7ff fe82 	bl	80080a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000590 	.word	0x20000590
 80083b4:	08009420 	.word	0x08009420

080083b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	4904      	ldr	r1, [pc, #16]	; (80083d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083c8:	4804      	ldr	r0, [pc, #16]	; (80083dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083ca:	f7ff fe6d 	bl	80080a8 <USBD_GetString>
  return USBD_StrDesc;
 80083ce:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20000590 	.word	0x20000590
 80083dc:	08009434 	.word	0x08009434

080083e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	6039      	str	r1, [r7, #0]
 80083ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	221a      	movs	r2, #26
 80083f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083f2:	f000 f843 	bl	800847c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083f6:	4b02      	ldr	r3, [pc, #8]	; (8008400 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000164 	.word	0x20000164

08008404 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d105      	bne.n	8008422 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	4907      	ldr	r1, [pc, #28]	; (8008438 <USBD_FS_ConfigStrDescriptor+0x34>)
 800841a:	4808      	ldr	r0, [pc, #32]	; (800843c <USBD_FS_ConfigStrDescriptor+0x38>)
 800841c:	f7ff fe44 	bl	80080a8 <USBD_GetString>
 8008420:	e004      	b.n	800842c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	4904      	ldr	r1, [pc, #16]	; (8008438 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008426:	4805      	ldr	r0, [pc, #20]	; (800843c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008428:	f7ff fe3e 	bl	80080a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000590 	.word	0x20000590
 800843c:	08009444 	.word	0x08009444

08008440 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	6039      	str	r1, [r7, #0]
 800844a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d105      	bne.n	800845e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	4907      	ldr	r1, [pc, #28]	; (8008474 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008456:	4808      	ldr	r0, [pc, #32]	; (8008478 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008458:	f7ff fe26 	bl	80080a8 <USBD_GetString>
 800845c:	e004      	b.n	8008468 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4904      	ldr	r1, [pc, #16]	; (8008474 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008462:	4805      	ldr	r0, [pc, #20]	; (8008478 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008464:	f7ff fe20 	bl	80080a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000590 	.word	0x20000590
 8008478:	08009450 	.word	0x08009450

0800847c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <Get_SerialNum+0x44>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008488:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <Get_SerialNum+0x48>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <Get_SerialNum+0x4c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4413      	add	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d009      	beq.n	80084b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084a2:	2208      	movs	r2, #8
 80084a4:	4909      	ldr	r1, [pc, #36]	; (80084cc <Get_SerialNum+0x50>)
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 f814 	bl	80084d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084ac:	2204      	movs	r2, #4
 80084ae:	4908      	ldr	r1, [pc, #32]	; (80084d0 <Get_SerialNum+0x54>)
 80084b0:	68b8      	ldr	r0, [r7, #8]
 80084b2:	f000 f80f 	bl	80084d4 <IntToUnicode>
  }
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	1ffff7e8 	.word	0x1ffff7e8
 80084c4:	1ffff7ec 	.word	0x1ffff7ec
 80084c8:	1ffff7f0 	.word	0x1ffff7f0
 80084cc:	20000166 	.word	0x20000166
 80084d0:	20000176 	.word	0x20000176

080084d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]
 80084ea:	e027      	b.n	800853c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	0f1b      	lsrs	r3, r3, #28
 80084f0:	2b09      	cmp	r3, #9
 80084f2:	d80b      	bhi.n	800850c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	0f1b      	lsrs	r3, r3, #28
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	4619      	mov	r1, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	440b      	add	r3, r1
 8008504:	3230      	adds	r2, #48	; 0x30
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	e00a      	b.n	8008522 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	0f1b      	lsrs	r3, r3, #28
 8008510:	b2da      	uxtb	r2, r3
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	4619      	mov	r1, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	440b      	add	r3, r1
 800851c:	3237      	adds	r2, #55	; 0x37
 800851e:	b2d2      	uxtb	r2, r2
 8008520:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	3301      	adds	r3, #1
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	4413      	add	r3, r2
 8008532:	2200      	movs	r2, #0
 8008534:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	3301      	adds	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
 800853c:	7dfa      	ldrb	r2, [r7, #23]
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	429a      	cmp	r2, r3
 8008542:	d3d3      	bcc.n	80084ec <IntToUnicode+0x18>
  }
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr

08008550 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0d      	ldr	r2, [pc, #52]	; (8008594 <HAL_PCD_MspInit+0x44>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d113      	bne.n	800858a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <HAL_PCD_MspInit+0x48>)
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <HAL_PCD_MspInit+0x48>)
 8008568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800856c:	61d3      	str	r3, [r2, #28]
 800856e:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <HAL_PCD_MspInit+0x48>)
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	2014      	movs	r0, #20
 8008580:	f7f8 fec3 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008584:	2014      	movs	r0, #20
 8008586:	f7f8 fedc 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800858a:	bf00      	nop
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40005c00 	.word	0x40005c00
 8008598:	40021000 	.word	0x40021000

0800859c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f7fe fe48 	bl	8007248 <USBD_LL_SetupStage>
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80085d2:	78fa      	ldrb	r2, [r7, #3]
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	440b      	add	r3, r1
 80085e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	4619      	mov	r1, r3
 80085ea:	f7fe fe7a 	bl	80072e2 <USBD_LL_DataOutStage>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	440b      	add	r3, r1
 8008616:	333c      	adds	r3, #60	; 0x3c
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	4619      	mov	r1, r3
 800861e:	f7fe fed1 	bl	80073c4 <USBD_LL_DataInStage>
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe ffe1 	bl	8007600 <USBD_LL_SOF>
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800864e:	2301      	movs	r3, #1
 8008650:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d001      	beq.n	800865e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800865a:	f7f7 ffb1 	bl	80005c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008664:	7bfa      	ldrb	r2, [r7, #15]
 8008666:	4611      	mov	r1, r2
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe ff91 	bl	8007590 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008674:	4618      	mov	r0, r3
 8008676:	f7fe ff4a 	bl	800750e <USBD_LL_Reset>
}
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe ff8b 	bl	80075ae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <HAL_PCD_SuspendCallback+0x30>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	4a03      	ldr	r2, [pc, #12]	; (80086b4 <HAL_PCD_SuspendCallback+0x30>)
 80086a6:	f043 0306 	orr.w	r3, r3, #6
 80086aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	e000ed00 	.word	0xe000ed00

080086b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe ff85 	bl	80075d6 <USBD_LL_Resume>
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80086dc:	4a23      	ldr	r2, [pc, #140]	; (800876c <USBD_LL_Init+0x98>)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a21      	ldr	r2, [pc, #132]	; (800876c <USBD_LL_Init+0x98>)
 80086e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80086ec:	4b1f      	ldr	r3, [pc, #124]	; (800876c <USBD_LL_Init+0x98>)
 80086ee:	4a20      	ldr	r2, [pc, #128]	; (8008770 <USBD_LL_Init+0x9c>)
 80086f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80086f2:	4b1e      	ldr	r3, [pc, #120]	; (800876c <USBD_LL_Init+0x98>)
 80086f4:	2208      	movs	r2, #8
 80086f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80086f8:	4b1c      	ldr	r3, [pc, #112]	; (800876c <USBD_LL_Init+0x98>)
 80086fa:	2202      	movs	r2, #2
 80086fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80086fe:	4b1b      	ldr	r3, [pc, #108]	; (800876c <USBD_LL_Init+0x98>)
 8008700:	2200      	movs	r2, #0
 8008702:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008704:	4b19      	ldr	r3, [pc, #100]	; (800876c <USBD_LL_Init+0x98>)
 8008706:	2200      	movs	r2, #0
 8008708:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800870a:	4b18      	ldr	r3, [pc, #96]	; (800876c <USBD_LL_Init+0x98>)
 800870c:	2200      	movs	r2, #0
 800870e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008710:	4816      	ldr	r0, [pc, #88]	; (800876c <USBD_LL_Init+0x98>)
 8008712:	f7f9 f9d4 	bl	8001abe <HAL_PCD_Init>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800871c:	f7f7 ff50 	bl	80005c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008726:	2318      	movs	r3, #24
 8008728:	2200      	movs	r2, #0
 800872a:	2100      	movs	r1, #0
 800872c:	f7fa fe31 	bl	8003392 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008736:	2358      	movs	r3, #88	; 0x58
 8008738:	2200      	movs	r2, #0
 800873a:	2180      	movs	r1, #128	; 0x80
 800873c:	f7fa fe29 	bl	8003392 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008746:	2398      	movs	r3, #152	; 0x98
 8008748:	2200      	movs	r2, #0
 800874a:	2181      	movs	r1, #129	; 0x81
 800874c:	f7fa fe21 	bl	8003392 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008756:	23d8      	movs	r3, #216	; 0xd8
 8008758:	2200      	movs	r2, #0
 800875a:	2101      	movs	r1, #1
 800875c:	f7fa fe19 	bl	8003392 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000790 	.word	0x20000790
 8008770:	40005c00 	.word	0x40005c00

08008774 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800878a:	4618      	mov	r0, r3
 800878c:	f7f9 faa2 	bl	8001cd4 <HAL_PCD_Start>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f93c 	bl	8008a14 <USBD_Get_USB_Status>
 800879c:	4603      	mov	r3, r0
 800879e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	4608      	mov	r0, r1
 80087b4:	4611      	mov	r1, r2
 80087b6:	461a      	mov	r2, r3
 80087b8:	4603      	mov	r3, r0
 80087ba:	70fb      	strb	r3, [r7, #3]
 80087bc:	460b      	mov	r3, r1
 80087be:	70bb      	strb	r3, [r7, #2]
 80087c0:	4613      	mov	r3, r2
 80087c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087d2:	78bb      	ldrb	r3, [r7, #2]
 80087d4:	883a      	ldrh	r2, [r7, #0]
 80087d6:	78f9      	ldrb	r1, [r7, #3]
 80087d8:	f7f9 fc1a 	bl	8002010 <HAL_PCD_EP_Open>
 80087dc:	4603      	mov	r3, r0
 80087de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 f916 	bl	8008a14 <USBD_Get_USB_Status>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	460b      	mov	r3, r1
 8008800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008810:	78fa      	ldrb	r2, [r7, #3]
 8008812:	4611      	mov	r1, r2
 8008814:	4618      	mov	r0, r3
 8008816:	f7f9 fc61 	bl	80020dc <HAL_PCD_EP_Close>
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f8f7 	bl	8008a14 <USBD_Get_USB_Status>
 8008826:	4603      	mov	r3, r0
 8008828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882a:	7bbb      	ldrb	r3, [r7, #14]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	4611      	mov	r1, r2
 8008852:	4618      	mov	r0, r3
 8008854:	f7f9 fd0a 	bl	800226c <HAL_PCD_EP_SetStall>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 f8d8 	bl	8008a14 <USBD_Get_USB_Status>
 8008864:	4603      	mov	r3, r0
 8008866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008868:	7bbb      	ldrb	r3, [r7, #14]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800888c:	78fa      	ldrb	r2, [r7, #3]
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f7f9 fd4b 	bl	800232c <HAL_PCD_EP_ClrStall>
 8008896:	4603      	mov	r3, r0
 8008898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	4618      	mov	r0, r3
 800889e:	f000 f8b9 	bl	8008a14 <USBD_Get_USB_Status>
 80088a2:	4603      	mov	r3, r0
 80088a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	da0c      	bge.n	80088e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d2:	68f9      	ldr	r1, [r7, #12]
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	440b      	add	r3, r1
 80088e0:	3302      	adds	r3, #2
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	e00b      	b.n	80088fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ec:	68f9      	ldr	r1, [r7, #12]
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	440b      	add	r3, r1
 80088f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80088fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	4611      	mov	r1, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f7f9 fb4d 	bl	8001fc6 <HAL_PCD_SetAddress>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f86e 	bl	8008a14 <USBD_Get_USB_Status>
 8008938:	4603      	mov	r3, r0
 800893a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800893c:	7bbb      	ldrb	r3, [r7, #14]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b086      	sub	sp, #24
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	461a      	mov	r2, r3
 8008952:	460b      	mov	r3, r1
 8008954:	72fb      	strb	r3, [r7, #11]
 8008956:	4613      	mov	r3, r2
 8008958:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008968:	893b      	ldrh	r3, [r7, #8]
 800896a:	7af9      	ldrb	r1, [r7, #11]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	f7f9 fc3a 	bl	80021e6 <HAL_PCD_EP_Transmit>
 8008972:	4603      	mov	r3, r0
 8008974:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f84b 	bl	8008a14 <USBD_Get_USB_Status>
 800897e:	4603      	mov	r3, r0
 8008980:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008982:	7dbb      	ldrb	r3, [r7, #22]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	461a      	mov	r2, r3
 8008998:	460b      	mov	r3, r1
 800899a:	72fb      	strb	r3, [r7, #11]
 800899c:	4613      	mov	r3, r2
 800899e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ae:	893b      	ldrh	r3, [r7, #8]
 80089b0:	7af9      	ldrb	r1, [r7, #11]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	f7f9 fbda 	bl	800216c <HAL_PCD_EP_Receive>
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f828 	bl	8008a14 <USBD_Get_USB_Status>
 80089c4:	4603      	mov	r3, r0
 80089c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80089dc:	4b02      	ldr	r3, [pc, #8]	; (80089e8 <USBD_static_malloc+0x14>)
}
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bc80      	pop	{r7}
 80089e6:	4770      	bx	lr
 80089e8:	20000a7c 	.word	0x20000a7c

080089ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]

}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr

080089fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc80      	pop	{r7}
 8008a12:	4770      	bx	lr

08008a14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d817      	bhi.n	8008a58 <USBD_Get_USB_Status+0x44>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <USBD_Get_USB_Status+0x1c>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a47 	.word	0x08008a47
 8008a38:	08008a4d 	.word	0x08008a4d
 8008a3c:	08008a53 	.word	0x08008a53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
    break;
 8008a44:	e00b      	b.n	8008a5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a46:	2302      	movs	r3, #2
 8008a48:	73fb      	strb	r3, [r7, #15]
    break;
 8008a4a:	e008      	b.n	8008a5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a50:	e005      	b.n	8008a5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a52:	2302      	movs	r3, #2
 8008a54:	73fb      	strb	r3, [r7, #15]
    break;
 8008a56:	e002      	b.n	8008a5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5c:	bf00      	nop
  }
  return usb_status;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop

08008a6c <__errno>:
 8008a6c:	4b01      	ldr	r3, [pc, #4]	; (8008a74 <__errno+0x8>)
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000180 	.word	0x20000180

08008a78 <__libc_init_array>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	4d0c      	ldr	r5, [pc, #48]	; (8008ab0 <__libc_init_array+0x38>)
 8008a7e:	4c0d      	ldr	r4, [pc, #52]	; (8008ab4 <__libc_init_array+0x3c>)
 8008a80:	1b64      	subs	r4, r4, r5
 8008a82:	10a4      	asrs	r4, r4, #2
 8008a84:	42a6      	cmp	r6, r4
 8008a86:	d109      	bne.n	8008a9c <__libc_init_array+0x24>
 8008a88:	f000 fc9c 	bl	80093c4 <_init>
 8008a8c:	2600      	movs	r6, #0
 8008a8e:	4d0a      	ldr	r5, [pc, #40]	; (8008ab8 <__libc_init_array+0x40>)
 8008a90:	4c0a      	ldr	r4, [pc, #40]	; (8008abc <__libc_init_array+0x44>)
 8008a92:	1b64      	subs	r4, r4, r5
 8008a94:	10a4      	asrs	r4, r4, #2
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	d105      	bne.n	8008aa6 <__libc_init_array+0x2e>
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa0:	4798      	blx	r3
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	e7ee      	b.n	8008a84 <__libc_init_array+0xc>
 8008aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aaa:	4798      	blx	r3
 8008aac:	3601      	adds	r6, #1
 8008aae:	e7f2      	b.n	8008a96 <__libc_init_array+0x1e>
 8008ab0:	080094b0 	.word	0x080094b0
 8008ab4:	080094b0 	.word	0x080094b0
 8008ab8:	080094b0 	.word	0x080094b0
 8008abc:	080094b4 	.word	0x080094b4

08008ac0 <memset>:
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	4402      	add	r2, r0
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d100      	bne.n	8008aca <memset+0xa>
 8008ac8:	4770      	bx	lr
 8008aca:	f803 1b01 	strb.w	r1, [r3], #1
 8008ace:	e7f9      	b.n	8008ac4 <memset+0x4>

08008ad0 <siprintf>:
 8008ad0:	b40e      	push	{r1, r2, r3}
 8008ad2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ad6:	b500      	push	{lr}
 8008ad8:	b09c      	sub	sp, #112	; 0x70
 8008ada:	ab1d      	add	r3, sp, #116	; 0x74
 8008adc:	9002      	str	r0, [sp, #8]
 8008ade:	9006      	str	r0, [sp, #24]
 8008ae0:	9107      	str	r1, [sp, #28]
 8008ae2:	9104      	str	r1, [sp, #16]
 8008ae4:	4808      	ldr	r0, [pc, #32]	; (8008b08 <siprintf+0x38>)
 8008ae6:	4909      	ldr	r1, [pc, #36]	; (8008b0c <siprintf+0x3c>)
 8008ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aec:	9105      	str	r1, [sp, #20]
 8008aee:	6800      	ldr	r0, [r0, #0]
 8008af0:	a902      	add	r1, sp, #8
 8008af2:	9301      	str	r3, [sp, #4]
 8008af4:	f000 f868 	bl	8008bc8 <_svfiprintf_r>
 8008af8:	2200      	movs	r2, #0
 8008afa:	9b02      	ldr	r3, [sp, #8]
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	b01c      	add	sp, #112	; 0x70
 8008b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b04:	b003      	add	sp, #12
 8008b06:	4770      	bx	lr
 8008b08:	20000180 	.word	0x20000180
 8008b0c:	ffff0208 	.word	0xffff0208

08008b10 <__ssputs_r>:
 8008b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	688e      	ldr	r6, [r1, #8]
 8008b16:	4682      	mov	sl, r0
 8008b18:	429e      	cmp	r6, r3
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	4690      	mov	r8, r2
 8008b1e:	461f      	mov	r7, r3
 8008b20:	d838      	bhi.n	8008b94 <__ssputs_r+0x84>
 8008b22:	898a      	ldrh	r2, [r1, #12]
 8008b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b28:	d032      	beq.n	8008b90 <__ssputs_r+0x80>
 8008b2a:	6825      	ldr	r5, [r4, #0]
 8008b2c:	6909      	ldr	r1, [r1, #16]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	eba5 0901 	sub.w	r9, r5, r1
 8008b34:	6965      	ldr	r5, [r4, #20]
 8008b36:	444b      	add	r3, r9
 8008b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b40:	106d      	asrs	r5, r5, #1
 8008b42:	429d      	cmp	r5, r3
 8008b44:	bf38      	it	cc
 8008b46:	461d      	movcc	r5, r3
 8008b48:	0553      	lsls	r3, r2, #21
 8008b4a:	d531      	bpl.n	8008bb0 <__ssputs_r+0xa0>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	f000 fb6f 	bl	8009230 <_malloc_r>
 8008b52:	4606      	mov	r6, r0
 8008b54:	b950      	cbnz	r0, 8008b6c <__ssputs_r+0x5c>
 8008b56:	230c      	movs	r3, #12
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	f8ca 3000 	str.w	r3, [sl]
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6c:	464a      	mov	r2, r9
 8008b6e:	6921      	ldr	r1, [r4, #16]
 8008b70:	f000 face 	bl	8009110 <memcpy>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	6126      	str	r6, [r4, #16]
 8008b82:	444e      	add	r6, r9
 8008b84:	6026      	str	r6, [r4, #0]
 8008b86:	463e      	mov	r6, r7
 8008b88:	6165      	str	r5, [r4, #20]
 8008b8a:	eba5 0509 	sub.w	r5, r5, r9
 8008b8e:	60a5      	str	r5, [r4, #8]
 8008b90:	42be      	cmp	r6, r7
 8008b92:	d900      	bls.n	8008b96 <__ssputs_r+0x86>
 8008b94:	463e      	mov	r6, r7
 8008b96:	4632      	mov	r2, r6
 8008b98:	4641      	mov	r1, r8
 8008b9a:	6820      	ldr	r0, [r4, #0]
 8008b9c:	f000 fac6 	bl	800912c <memmove>
 8008ba0:	68a3      	ldr	r3, [r4, #8]
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	1b9b      	subs	r3, r3, r6
 8008ba6:	60a3      	str	r3, [r4, #8]
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	4433      	add	r3, r6
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	e7db      	b.n	8008b68 <__ssputs_r+0x58>
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	f000 fbb1 	bl	8009318 <_realloc_r>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1e1      	bne.n	8008b80 <__ssputs_r+0x70>
 8008bbc:	4650      	mov	r0, sl
 8008bbe:	6921      	ldr	r1, [r4, #16]
 8008bc0:	f000 face 	bl	8009160 <_free_r>
 8008bc4:	e7c7      	b.n	8008b56 <__ssputs_r+0x46>
	...

08008bc8 <_svfiprintf_r>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	4698      	mov	r8, r3
 8008bce:	898b      	ldrh	r3, [r1, #12]
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	061b      	lsls	r3, r3, #24
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	b09d      	sub	sp, #116	; 0x74
 8008bda:	d50e      	bpl.n	8008bfa <_svfiprintf_r+0x32>
 8008bdc:	690b      	ldr	r3, [r1, #16]
 8008bde:	b963      	cbnz	r3, 8008bfa <_svfiprintf_r+0x32>
 8008be0:	2140      	movs	r1, #64	; 0x40
 8008be2:	f000 fb25 	bl	8009230 <_malloc_r>
 8008be6:	6028      	str	r0, [r5, #0]
 8008be8:	6128      	str	r0, [r5, #16]
 8008bea:	b920      	cbnz	r0, 8008bf6 <_svfiprintf_r+0x2e>
 8008bec:	230c      	movs	r3, #12
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e0d1      	b.n	8008d9a <_svfiprintf_r+0x1d2>
 8008bf6:	2340      	movs	r3, #64	; 0x40
 8008bf8:	616b      	str	r3, [r5, #20]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfe:	2320      	movs	r3, #32
 8008c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c04:	2330      	movs	r3, #48	; 0x30
 8008c06:	f04f 0901 	mov.w	r9, #1
 8008c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008db4 <_svfiprintf_r+0x1ec>
 8008c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c16:	4623      	mov	r3, r4
 8008c18:	469a      	mov	sl, r3
 8008c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c1e:	b10a      	cbz	r2, 8008c24 <_svfiprintf_r+0x5c>
 8008c20:	2a25      	cmp	r2, #37	; 0x25
 8008c22:	d1f9      	bne.n	8008c18 <_svfiprintf_r+0x50>
 8008c24:	ebba 0b04 	subs.w	fp, sl, r4
 8008c28:	d00b      	beq.n	8008c42 <_svfiprintf_r+0x7a>
 8008c2a:	465b      	mov	r3, fp
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4638      	mov	r0, r7
 8008c32:	f7ff ff6d 	bl	8008b10 <__ssputs_r>
 8008c36:	3001      	adds	r0, #1
 8008c38:	f000 80aa 	beq.w	8008d90 <_svfiprintf_r+0x1c8>
 8008c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c3e:	445a      	add	r2, fp
 8008c40:	9209      	str	r2, [sp, #36]	; 0x24
 8008c42:	f89a 3000 	ldrb.w	r3, [sl]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 80a2 	beq.w	8008d90 <_svfiprintf_r+0x1c8>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c56:	f10a 0a01 	add.w	sl, sl, #1
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	9307      	str	r3, [sp, #28]
 8008c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c62:	931a      	str	r3, [sp, #104]	; 0x68
 8008c64:	4654      	mov	r4, sl
 8008c66:	2205      	movs	r2, #5
 8008c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c6c:	4851      	ldr	r0, [pc, #324]	; (8008db4 <_svfiprintf_r+0x1ec>)
 8008c6e:	f000 fa41 	bl	80090f4 <memchr>
 8008c72:	9a04      	ldr	r2, [sp, #16]
 8008c74:	b9d8      	cbnz	r0, 8008cae <_svfiprintf_r+0xe6>
 8008c76:	06d0      	lsls	r0, r2, #27
 8008c78:	bf44      	itt	mi
 8008c7a:	2320      	movmi	r3, #32
 8008c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c80:	0711      	lsls	r1, r2, #28
 8008c82:	bf44      	itt	mi
 8008c84:	232b      	movmi	r3, #43	; 0x2b
 8008c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c90:	d015      	beq.n	8008cbe <_svfiprintf_r+0xf6>
 8008c92:	4654      	mov	r4, sl
 8008c94:	2000      	movs	r0, #0
 8008c96:	f04f 0c0a 	mov.w	ip, #10
 8008c9a:	9a07      	ldr	r2, [sp, #28]
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ca2:	3b30      	subs	r3, #48	; 0x30
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d94e      	bls.n	8008d46 <_svfiprintf_r+0x17e>
 8008ca8:	b1b0      	cbz	r0, 8008cd8 <_svfiprintf_r+0x110>
 8008caa:	9207      	str	r2, [sp, #28]
 8008cac:	e014      	b.n	8008cd8 <_svfiprintf_r+0x110>
 8008cae:	eba0 0308 	sub.w	r3, r0, r8
 8008cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	46a2      	mov	sl, r4
 8008cba:	9304      	str	r3, [sp, #16]
 8008cbc:	e7d2      	b.n	8008c64 <_svfiprintf_r+0x9c>
 8008cbe:	9b03      	ldr	r3, [sp, #12]
 8008cc0:	1d19      	adds	r1, r3, #4
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	9103      	str	r1, [sp, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	bfbb      	ittet	lt
 8008cca:	425b      	neglt	r3, r3
 8008ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8008cd0:	9307      	strge	r3, [sp, #28]
 8008cd2:	9307      	strlt	r3, [sp, #28]
 8008cd4:	bfb8      	it	lt
 8008cd6:	9204      	strlt	r2, [sp, #16]
 8008cd8:	7823      	ldrb	r3, [r4, #0]
 8008cda:	2b2e      	cmp	r3, #46	; 0x2e
 8008cdc:	d10c      	bne.n	8008cf8 <_svfiprintf_r+0x130>
 8008cde:	7863      	ldrb	r3, [r4, #1]
 8008ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce2:	d135      	bne.n	8008d50 <_svfiprintf_r+0x188>
 8008ce4:	9b03      	ldr	r3, [sp, #12]
 8008ce6:	3402      	adds	r4, #2
 8008ce8:	1d1a      	adds	r2, r3, #4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	9203      	str	r2, [sp, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bfb8      	it	lt
 8008cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cf6:	9305      	str	r3, [sp, #20]
 8008cf8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008db8 <_svfiprintf_r+0x1f0>
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	4650      	mov	r0, sl
 8008d00:	7821      	ldrb	r1, [r4, #0]
 8008d02:	f000 f9f7 	bl	80090f4 <memchr>
 8008d06:	b140      	cbz	r0, 8008d1a <_svfiprintf_r+0x152>
 8008d08:	2340      	movs	r3, #64	; 0x40
 8008d0a:	eba0 000a 	sub.w	r0, r0, sl
 8008d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d12:	9b04      	ldr	r3, [sp, #16]
 8008d14:	3401      	adds	r4, #1
 8008d16:	4303      	orrs	r3, r0
 8008d18:	9304      	str	r3, [sp, #16]
 8008d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1e:	2206      	movs	r2, #6
 8008d20:	4826      	ldr	r0, [pc, #152]	; (8008dbc <_svfiprintf_r+0x1f4>)
 8008d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d26:	f000 f9e5 	bl	80090f4 <memchr>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d038      	beq.n	8008da0 <_svfiprintf_r+0x1d8>
 8008d2e:	4b24      	ldr	r3, [pc, #144]	; (8008dc0 <_svfiprintf_r+0x1f8>)
 8008d30:	bb1b      	cbnz	r3, 8008d7a <_svfiprintf_r+0x1b2>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	3307      	adds	r3, #7
 8008d36:	f023 0307 	bic.w	r3, r3, #7
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	9303      	str	r3, [sp, #12]
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	4433      	add	r3, r6
 8008d42:	9309      	str	r3, [sp, #36]	; 0x24
 8008d44:	e767      	b.n	8008c16 <_svfiprintf_r+0x4e>
 8008d46:	460c      	mov	r4, r1
 8008d48:	2001      	movs	r0, #1
 8008d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d4e:	e7a5      	b.n	8008c9c <_svfiprintf_r+0xd4>
 8008d50:	2300      	movs	r3, #0
 8008d52:	f04f 0c0a 	mov.w	ip, #10
 8008d56:	4619      	mov	r1, r3
 8008d58:	3401      	adds	r4, #1
 8008d5a:	9305      	str	r3, [sp, #20]
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d62:	3a30      	subs	r2, #48	; 0x30
 8008d64:	2a09      	cmp	r2, #9
 8008d66:	d903      	bls.n	8008d70 <_svfiprintf_r+0x1a8>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0c5      	beq.n	8008cf8 <_svfiprintf_r+0x130>
 8008d6c:	9105      	str	r1, [sp, #20]
 8008d6e:	e7c3      	b.n	8008cf8 <_svfiprintf_r+0x130>
 8008d70:	4604      	mov	r4, r0
 8008d72:	2301      	movs	r3, #1
 8008d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d78:	e7f0      	b.n	8008d5c <_svfiprintf_r+0x194>
 8008d7a:	ab03      	add	r3, sp, #12
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	462a      	mov	r2, r5
 8008d80:	4638      	mov	r0, r7
 8008d82:	4b10      	ldr	r3, [pc, #64]	; (8008dc4 <_svfiprintf_r+0x1fc>)
 8008d84:	a904      	add	r1, sp, #16
 8008d86:	f3af 8000 	nop.w
 8008d8a:	1c42      	adds	r2, r0, #1
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	d1d6      	bne.n	8008d3e <_svfiprintf_r+0x176>
 8008d90:	89ab      	ldrh	r3, [r5, #12]
 8008d92:	065b      	lsls	r3, r3, #25
 8008d94:	f53f af2c 	bmi.w	8008bf0 <_svfiprintf_r+0x28>
 8008d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d9a:	b01d      	add	sp, #116	; 0x74
 8008d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da0:	ab03      	add	r3, sp, #12
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	462a      	mov	r2, r5
 8008da6:	4638      	mov	r0, r7
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <_svfiprintf_r+0x1fc>)
 8008daa:	a904      	add	r1, sp, #16
 8008dac:	f000 f87c 	bl	8008ea8 <_printf_i>
 8008db0:	e7eb      	b.n	8008d8a <_svfiprintf_r+0x1c2>
 8008db2:	bf00      	nop
 8008db4:	0800947c 	.word	0x0800947c
 8008db8:	08009482 	.word	0x08009482
 8008dbc:	08009486 	.word	0x08009486
 8008dc0:	00000000 	.word	0x00000000
 8008dc4:	08008b11 	.word	0x08008b11

08008dc8 <_printf_common>:
 8008dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dcc:	4616      	mov	r6, r2
 8008dce:	4699      	mov	r9, r3
 8008dd0:	688a      	ldr	r2, [r1, #8]
 8008dd2:	690b      	ldr	r3, [r1, #16]
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	bfb8      	it	lt
 8008dda:	4613      	movlt	r3, r2
 8008ddc:	6033      	str	r3, [r6, #0]
 8008dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008de2:	460c      	mov	r4, r1
 8008de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008de8:	b10a      	cbz	r2, 8008dee <_printf_common+0x26>
 8008dea:	3301      	adds	r3, #1
 8008dec:	6033      	str	r3, [r6, #0]
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	0699      	lsls	r1, r3, #26
 8008df2:	bf42      	ittt	mi
 8008df4:	6833      	ldrmi	r3, [r6, #0]
 8008df6:	3302      	addmi	r3, #2
 8008df8:	6033      	strmi	r3, [r6, #0]
 8008dfa:	6825      	ldr	r5, [r4, #0]
 8008dfc:	f015 0506 	ands.w	r5, r5, #6
 8008e00:	d106      	bne.n	8008e10 <_printf_common+0x48>
 8008e02:	f104 0a19 	add.w	sl, r4, #25
 8008e06:	68e3      	ldr	r3, [r4, #12]
 8008e08:	6832      	ldr	r2, [r6, #0]
 8008e0a:	1a9b      	subs	r3, r3, r2
 8008e0c:	42ab      	cmp	r3, r5
 8008e0e:	dc28      	bgt.n	8008e62 <_printf_common+0x9a>
 8008e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e14:	1e13      	subs	r3, r2, #0
 8008e16:	6822      	ldr	r2, [r4, #0]
 8008e18:	bf18      	it	ne
 8008e1a:	2301      	movne	r3, #1
 8008e1c:	0692      	lsls	r2, r2, #26
 8008e1e:	d42d      	bmi.n	8008e7c <_printf_common+0xb4>
 8008e20:	4649      	mov	r1, r9
 8008e22:	4638      	mov	r0, r7
 8008e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e28:	47c0      	blx	r8
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	d020      	beq.n	8008e70 <_printf_common+0xa8>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	68e5      	ldr	r5, [r4, #12]
 8008e32:	f003 0306 	and.w	r3, r3, #6
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	bf18      	it	ne
 8008e3a:	2500      	movne	r5, #0
 8008e3c:	6832      	ldr	r2, [r6, #0]
 8008e3e:	f04f 0600 	mov.w	r6, #0
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	bf08      	it	eq
 8008e46:	1aad      	subeq	r5, r5, r2
 8008e48:	6922      	ldr	r2, [r4, #16]
 8008e4a:	bf08      	it	eq
 8008e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e50:	4293      	cmp	r3, r2
 8008e52:	bfc4      	itt	gt
 8008e54:	1a9b      	subgt	r3, r3, r2
 8008e56:	18ed      	addgt	r5, r5, r3
 8008e58:	341a      	adds	r4, #26
 8008e5a:	42b5      	cmp	r5, r6
 8008e5c:	d11a      	bne.n	8008e94 <_printf_common+0xcc>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e008      	b.n	8008e74 <_printf_common+0xac>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4652      	mov	r2, sl
 8008e66:	4649      	mov	r1, r9
 8008e68:	4638      	mov	r0, r7
 8008e6a:	47c0      	blx	r8
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d103      	bne.n	8008e78 <_printf_common+0xb0>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	3501      	adds	r5, #1
 8008e7a:	e7c4      	b.n	8008e06 <_printf_common+0x3e>
 8008e7c:	2030      	movs	r0, #48	; 0x30
 8008e7e:	18e1      	adds	r1, r4, r3
 8008e80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e8a:	4422      	add	r2, r4
 8008e8c:	3302      	adds	r3, #2
 8008e8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e92:	e7c5      	b.n	8008e20 <_printf_common+0x58>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4622      	mov	r2, r4
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c0      	blx	r8
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d0e6      	beq.n	8008e70 <_printf_common+0xa8>
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7d9      	b.n	8008e5a <_printf_common+0x92>
	...

08008ea8 <_printf_i>:
 8008ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	7e0f      	ldrb	r7, [r1, #24]
 8008eae:	4691      	mov	r9, r2
 8008eb0:	2f78      	cmp	r7, #120	; 0x78
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	469a      	mov	sl, r3
 8008eb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ebe:	d807      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ec0:	2f62      	cmp	r7, #98	; 0x62
 8008ec2:	d80a      	bhi.n	8008eda <_printf_i+0x32>
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	f000 80d9 	beq.w	800907c <_printf_i+0x1d4>
 8008eca:	2f58      	cmp	r7, #88	; 0x58
 8008ecc:	f000 80a4 	beq.w	8009018 <_printf_i+0x170>
 8008ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ed8:	e03a      	b.n	8008f50 <_printf_i+0xa8>
 8008eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ede:	2b15      	cmp	r3, #21
 8008ee0:	d8f6      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ee2:	a101      	add	r1, pc, #4	; (adr r1, 8008ee8 <_printf_i+0x40>)
 8008ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ee8:	08008f41 	.word	0x08008f41
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008ed1 	.word	0x08008ed1
 8008ef4:	08008ed1 	.word	0x08008ed1
 8008ef8:	08008ed1 	.word	0x08008ed1
 8008efc:	08008ed1 	.word	0x08008ed1
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008ed1 	.word	0x08008ed1
 8008f08:	08008ed1 	.word	0x08008ed1
 8008f0c:	08008ed1 	.word	0x08008ed1
 8008f10:	08008ed1 	.word	0x08008ed1
 8008f14:	08009063 	.word	0x08009063
 8008f18:	08008f85 	.word	0x08008f85
 8008f1c:	08009045 	.word	0x08009045
 8008f20:	08008ed1 	.word	0x08008ed1
 8008f24:	08008ed1 	.word	0x08008ed1
 8008f28:	08009085 	.word	0x08009085
 8008f2c:	08008ed1 	.word	0x08008ed1
 8008f30:	08008f85 	.word	0x08008f85
 8008f34:	08008ed1 	.word	0x08008ed1
 8008f38:	08008ed1 	.word	0x08008ed1
 8008f3c:	0800904d 	.word	0x0800904d
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	602a      	str	r2, [r5, #0]
 8008f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f50:	2301      	movs	r3, #1
 8008f52:	e0a4      	b.n	800909e <_printf_i+0x1f6>
 8008f54:	6820      	ldr	r0, [r4, #0]
 8008f56:	6829      	ldr	r1, [r5, #0]
 8008f58:	0606      	lsls	r6, r0, #24
 8008f5a:	f101 0304 	add.w	r3, r1, #4
 8008f5e:	d50a      	bpl.n	8008f76 <_printf_i+0xce>
 8008f60:	680e      	ldr	r6, [r1, #0]
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	2e00      	cmp	r6, #0
 8008f66:	da03      	bge.n	8008f70 <_printf_i+0xc8>
 8008f68:	232d      	movs	r3, #45	; 0x2d
 8008f6a:	4276      	negs	r6, r6
 8008f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f70:	230a      	movs	r3, #10
 8008f72:	485e      	ldr	r0, [pc, #376]	; (80090ec <_printf_i+0x244>)
 8008f74:	e019      	b.n	8008faa <_printf_i+0x102>
 8008f76:	680e      	ldr	r6, [r1, #0]
 8008f78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	bf18      	it	ne
 8008f80:	b236      	sxthne	r6, r6
 8008f82:	e7ef      	b.n	8008f64 <_printf_i+0xbc>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	6820      	ldr	r0, [r4, #0]
 8008f88:	1d19      	adds	r1, r3, #4
 8008f8a:	6029      	str	r1, [r5, #0]
 8008f8c:	0601      	lsls	r1, r0, #24
 8008f8e:	d501      	bpl.n	8008f94 <_printf_i+0xec>
 8008f90:	681e      	ldr	r6, [r3, #0]
 8008f92:	e002      	b.n	8008f9a <_printf_i+0xf2>
 8008f94:	0646      	lsls	r6, r0, #25
 8008f96:	d5fb      	bpl.n	8008f90 <_printf_i+0xe8>
 8008f98:	881e      	ldrh	r6, [r3, #0]
 8008f9a:	2f6f      	cmp	r7, #111	; 0x6f
 8008f9c:	bf0c      	ite	eq
 8008f9e:	2308      	moveq	r3, #8
 8008fa0:	230a      	movne	r3, #10
 8008fa2:	4852      	ldr	r0, [pc, #328]	; (80090ec <_printf_i+0x244>)
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008faa:	6865      	ldr	r5, [r4, #4]
 8008fac:	2d00      	cmp	r5, #0
 8008fae:	bfa8      	it	ge
 8008fb0:	6821      	ldrge	r1, [r4, #0]
 8008fb2:	60a5      	str	r5, [r4, #8]
 8008fb4:	bfa4      	itt	ge
 8008fb6:	f021 0104 	bicge.w	r1, r1, #4
 8008fba:	6021      	strge	r1, [r4, #0]
 8008fbc:	b90e      	cbnz	r6, 8008fc2 <_printf_i+0x11a>
 8008fbe:	2d00      	cmp	r5, #0
 8008fc0:	d04d      	beq.n	800905e <_printf_i+0x1b6>
 8008fc2:	4615      	mov	r5, r2
 8008fc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fc8:	fb03 6711 	mls	r7, r3, r1, r6
 8008fcc:	5dc7      	ldrb	r7, [r0, r7]
 8008fce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fd2:	4637      	mov	r7, r6
 8008fd4:	42bb      	cmp	r3, r7
 8008fd6:	460e      	mov	r6, r1
 8008fd8:	d9f4      	bls.n	8008fc4 <_printf_i+0x11c>
 8008fda:	2b08      	cmp	r3, #8
 8008fdc:	d10b      	bne.n	8008ff6 <_printf_i+0x14e>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	07de      	lsls	r6, r3, #31
 8008fe2:	d508      	bpl.n	8008ff6 <_printf_i+0x14e>
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	6861      	ldr	r1, [r4, #4]
 8008fe8:	4299      	cmp	r1, r3
 8008fea:	bfde      	ittt	le
 8008fec:	2330      	movle	r3, #48	; 0x30
 8008fee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ff2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ff6:	1b52      	subs	r2, r2, r5
 8008ff8:	6122      	str	r2, [r4, #16]
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	4640      	mov	r0, r8
 8009000:	f8cd a000 	str.w	sl, [sp]
 8009004:	aa03      	add	r2, sp, #12
 8009006:	f7ff fedf 	bl	8008dc8 <_printf_common>
 800900a:	3001      	adds	r0, #1
 800900c:	d14c      	bne.n	80090a8 <_printf_i+0x200>
 800900e:	f04f 30ff 	mov.w	r0, #4294967295
 8009012:	b004      	add	sp, #16
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	4834      	ldr	r0, [pc, #208]	; (80090ec <_printf_i+0x244>)
 800901a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800901e:	6829      	ldr	r1, [r5, #0]
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	f851 6b04 	ldr.w	r6, [r1], #4
 8009026:	6029      	str	r1, [r5, #0]
 8009028:	061d      	lsls	r5, r3, #24
 800902a:	d514      	bpl.n	8009056 <_printf_i+0x1ae>
 800902c:	07df      	lsls	r7, r3, #31
 800902e:	bf44      	itt	mi
 8009030:	f043 0320 	orrmi.w	r3, r3, #32
 8009034:	6023      	strmi	r3, [r4, #0]
 8009036:	b91e      	cbnz	r6, 8009040 <_printf_i+0x198>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	f023 0320 	bic.w	r3, r3, #32
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	2310      	movs	r3, #16
 8009042:	e7af      	b.n	8008fa4 <_printf_i+0xfc>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	f043 0320 	orr.w	r3, r3, #32
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	2378      	movs	r3, #120	; 0x78
 800904e:	4828      	ldr	r0, [pc, #160]	; (80090f0 <_printf_i+0x248>)
 8009050:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009054:	e7e3      	b.n	800901e <_printf_i+0x176>
 8009056:	0659      	lsls	r1, r3, #25
 8009058:	bf48      	it	mi
 800905a:	b2b6      	uxthmi	r6, r6
 800905c:	e7e6      	b.n	800902c <_printf_i+0x184>
 800905e:	4615      	mov	r5, r2
 8009060:	e7bb      	b.n	8008fda <_printf_i+0x132>
 8009062:	682b      	ldr	r3, [r5, #0]
 8009064:	6826      	ldr	r6, [r4, #0]
 8009066:	1d18      	adds	r0, r3, #4
 8009068:	6961      	ldr	r1, [r4, #20]
 800906a:	6028      	str	r0, [r5, #0]
 800906c:	0635      	lsls	r5, r6, #24
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	d501      	bpl.n	8009076 <_printf_i+0x1ce>
 8009072:	6019      	str	r1, [r3, #0]
 8009074:	e002      	b.n	800907c <_printf_i+0x1d4>
 8009076:	0670      	lsls	r0, r6, #25
 8009078:	d5fb      	bpl.n	8009072 <_printf_i+0x1ca>
 800907a:	8019      	strh	r1, [r3, #0]
 800907c:	2300      	movs	r3, #0
 800907e:	4615      	mov	r5, r2
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	e7ba      	b.n	8008ffa <_printf_i+0x152>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	2100      	movs	r1, #0
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	602a      	str	r2, [r5, #0]
 800908c:	681d      	ldr	r5, [r3, #0]
 800908e:	6862      	ldr	r2, [r4, #4]
 8009090:	4628      	mov	r0, r5
 8009092:	f000 f82f 	bl	80090f4 <memchr>
 8009096:	b108      	cbz	r0, 800909c <_printf_i+0x1f4>
 8009098:	1b40      	subs	r0, r0, r5
 800909a:	6060      	str	r0, [r4, #4]
 800909c:	6863      	ldr	r3, [r4, #4]
 800909e:	6123      	str	r3, [r4, #16]
 80090a0:	2300      	movs	r3, #0
 80090a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a6:	e7a8      	b.n	8008ffa <_printf_i+0x152>
 80090a8:	462a      	mov	r2, r5
 80090aa:	4649      	mov	r1, r9
 80090ac:	4640      	mov	r0, r8
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	47d0      	blx	sl
 80090b2:	3001      	adds	r0, #1
 80090b4:	d0ab      	beq.n	800900e <_printf_i+0x166>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	079b      	lsls	r3, r3, #30
 80090ba:	d413      	bmi.n	80090e4 <_printf_i+0x23c>
 80090bc:	68e0      	ldr	r0, [r4, #12]
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	4298      	cmp	r0, r3
 80090c2:	bfb8      	it	lt
 80090c4:	4618      	movlt	r0, r3
 80090c6:	e7a4      	b.n	8009012 <_printf_i+0x16a>
 80090c8:	2301      	movs	r3, #1
 80090ca:	4632      	mov	r2, r6
 80090cc:	4649      	mov	r1, r9
 80090ce:	4640      	mov	r0, r8
 80090d0:	47d0      	blx	sl
 80090d2:	3001      	adds	r0, #1
 80090d4:	d09b      	beq.n	800900e <_printf_i+0x166>
 80090d6:	3501      	adds	r5, #1
 80090d8:	68e3      	ldr	r3, [r4, #12]
 80090da:	9903      	ldr	r1, [sp, #12]
 80090dc:	1a5b      	subs	r3, r3, r1
 80090de:	42ab      	cmp	r3, r5
 80090e0:	dcf2      	bgt.n	80090c8 <_printf_i+0x220>
 80090e2:	e7eb      	b.n	80090bc <_printf_i+0x214>
 80090e4:	2500      	movs	r5, #0
 80090e6:	f104 0619 	add.w	r6, r4, #25
 80090ea:	e7f5      	b.n	80090d8 <_printf_i+0x230>
 80090ec:	0800948d 	.word	0x0800948d
 80090f0:	0800949e 	.word	0x0800949e

080090f4 <memchr>:
 80090f4:	4603      	mov	r3, r0
 80090f6:	b510      	push	{r4, lr}
 80090f8:	b2c9      	uxtb	r1, r1
 80090fa:	4402      	add	r2, r0
 80090fc:	4293      	cmp	r3, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	d101      	bne.n	8009106 <memchr+0x12>
 8009102:	2000      	movs	r0, #0
 8009104:	e003      	b.n	800910e <memchr+0x1a>
 8009106:	7804      	ldrb	r4, [r0, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	428c      	cmp	r4, r1
 800910c:	d1f6      	bne.n	80090fc <memchr+0x8>
 800910e:	bd10      	pop	{r4, pc}

08009110 <memcpy>:
 8009110:	440a      	add	r2, r1
 8009112:	4291      	cmp	r1, r2
 8009114:	f100 33ff 	add.w	r3, r0, #4294967295
 8009118:	d100      	bne.n	800911c <memcpy+0xc>
 800911a:	4770      	bx	lr
 800911c:	b510      	push	{r4, lr}
 800911e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009122:	4291      	cmp	r1, r2
 8009124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009128:	d1f9      	bne.n	800911e <memcpy+0xe>
 800912a:	bd10      	pop	{r4, pc}

0800912c <memmove>:
 800912c:	4288      	cmp	r0, r1
 800912e:	b510      	push	{r4, lr}
 8009130:	eb01 0402 	add.w	r4, r1, r2
 8009134:	d902      	bls.n	800913c <memmove+0x10>
 8009136:	4284      	cmp	r4, r0
 8009138:	4623      	mov	r3, r4
 800913a:	d807      	bhi.n	800914c <memmove+0x20>
 800913c:	1e43      	subs	r3, r0, #1
 800913e:	42a1      	cmp	r1, r4
 8009140:	d008      	beq.n	8009154 <memmove+0x28>
 8009142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800914a:	e7f8      	b.n	800913e <memmove+0x12>
 800914c:	4601      	mov	r1, r0
 800914e:	4402      	add	r2, r0
 8009150:	428a      	cmp	r2, r1
 8009152:	d100      	bne.n	8009156 <memmove+0x2a>
 8009154:	bd10      	pop	{r4, pc}
 8009156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800915a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800915e:	e7f7      	b.n	8009150 <memmove+0x24>

08009160 <_free_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4605      	mov	r5, r0
 8009164:	2900      	cmp	r1, #0
 8009166:	d040      	beq.n	80091ea <_free_r+0x8a>
 8009168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800916c:	1f0c      	subs	r4, r1, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	bfb8      	it	lt
 8009172:	18e4      	addlt	r4, r4, r3
 8009174:	f000 f910 	bl	8009398 <__malloc_lock>
 8009178:	4a1c      	ldr	r2, [pc, #112]	; (80091ec <_free_r+0x8c>)
 800917a:	6813      	ldr	r3, [r2, #0]
 800917c:	b933      	cbnz	r3, 800918c <_free_r+0x2c>
 800917e:	6063      	str	r3, [r4, #4]
 8009180:	6014      	str	r4, [r2, #0]
 8009182:	4628      	mov	r0, r5
 8009184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009188:	f000 b90c 	b.w	80093a4 <__malloc_unlock>
 800918c:	42a3      	cmp	r3, r4
 800918e:	d908      	bls.n	80091a2 <_free_r+0x42>
 8009190:	6820      	ldr	r0, [r4, #0]
 8009192:	1821      	adds	r1, r4, r0
 8009194:	428b      	cmp	r3, r1
 8009196:	bf01      	itttt	eq
 8009198:	6819      	ldreq	r1, [r3, #0]
 800919a:	685b      	ldreq	r3, [r3, #4]
 800919c:	1809      	addeq	r1, r1, r0
 800919e:	6021      	streq	r1, [r4, #0]
 80091a0:	e7ed      	b.n	800917e <_free_r+0x1e>
 80091a2:	461a      	mov	r2, r3
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	b10b      	cbz	r3, 80091ac <_free_r+0x4c>
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	d9fa      	bls.n	80091a2 <_free_r+0x42>
 80091ac:	6811      	ldr	r1, [r2, #0]
 80091ae:	1850      	adds	r0, r2, r1
 80091b0:	42a0      	cmp	r0, r4
 80091b2:	d10b      	bne.n	80091cc <_free_r+0x6c>
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	4401      	add	r1, r0
 80091b8:	1850      	adds	r0, r2, r1
 80091ba:	4283      	cmp	r3, r0
 80091bc:	6011      	str	r1, [r2, #0]
 80091be:	d1e0      	bne.n	8009182 <_free_r+0x22>
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	4401      	add	r1, r0
 80091c6:	6011      	str	r1, [r2, #0]
 80091c8:	6053      	str	r3, [r2, #4]
 80091ca:	e7da      	b.n	8009182 <_free_r+0x22>
 80091cc:	d902      	bls.n	80091d4 <_free_r+0x74>
 80091ce:	230c      	movs	r3, #12
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	e7d6      	b.n	8009182 <_free_r+0x22>
 80091d4:	6820      	ldr	r0, [r4, #0]
 80091d6:	1821      	adds	r1, r4, r0
 80091d8:	428b      	cmp	r3, r1
 80091da:	bf01      	itttt	eq
 80091dc:	6819      	ldreq	r1, [r3, #0]
 80091de:	685b      	ldreq	r3, [r3, #4]
 80091e0:	1809      	addeq	r1, r1, r0
 80091e2:	6021      	streq	r1, [r4, #0]
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6054      	str	r4, [r2, #4]
 80091e8:	e7cb      	b.n	8009182 <_free_r+0x22>
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20000ad4 	.word	0x20000ad4

080091f0 <sbrk_aligned>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	4e0e      	ldr	r6, [pc, #56]	; (800922c <sbrk_aligned+0x3c>)
 80091f4:	460c      	mov	r4, r1
 80091f6:	6831      	ldr	r1, [r6, #0]
 80091f8:	4605      	mov	r5, r0
 80091fa:	b911      	cbnz	r1, 8009202 <sbrk_aligned+0x12>
 80091fc:	f000 f8bc 	bl	8009378 <_sbrk_r>
 8009200:	6030      	str	r0, [r6, #0]
 8009202:	4621      	mov	r1, r4
 8009204:	4628      	mov	r0, r5
 8009206:	f000 f8b7 	bl	8009378 <_sbrk_r>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	d00a      	beq.n	8009224 <sbrk_aligned+0x34>
 800920e:	1cc4      	adds	r4, r0, #3
 8009210:	f024 0403 	bic.w	r4, r4, #3
 8009214:	42a0      	cmp	r0, r4
 8009216:	d007      	beq.n	8009228 <sbrk_aligned+0x38>
 8009218:	1a21      	subs	r1, r4, r0
 800921a:	4628      	mov	r0, r5
 800921c:	f000 f8ac 	bl	8009378 <_sbrk_r>
 8009220:	3001      	adds	r0, #1
 8009222:	d101      	bne.n	8009228 <sbrk_aligned+0x38>
 8009224:	f04f 34ff 	mov.w	r4, #4294967295
 8009228:	4620      	mov	r0, r4
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	20000ad8 	.word	0x20000ad8

08009230 <_malloc_r>:
 8009230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009234:	1ccd      	adds	r5, r1, #3
 8009236:	f025 0503 	bic.w	r5, r5, #3
 800923a:	3508      	adds	r5, #8
 800923c:	2d0c      	cmp	r5, #12
 800923e:	bf38      	it	cc
 8009240:	250c      	movcc	r5, #12
 8009242:	2d00      	cmp	r5, #0
 8009244:	4607      	mov	r7, r0
 8009246:	db01      	blt.n	800924c <_malloc_r+0x1c>
 8009248:	42a9      	cmp	r1, r5
 800924a:	d905      	bls.n	8009258 <_malloc_r+0x28>
 800924c:	230c      	movs	r3, #12
 800924e:	2600      	movs	r6, #0
 8009250:	603b      	str	r3, [r7, #0]
 8009252:	4630      	mov	r0, r6
 8009254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009258:	4e2e      	ldr	r6, [pc, #184]	; (8009314 <_malloc_r+0xe4>)
 800925a:	f000 f89d 	bl	8009398 <__malloc_lock>
 800925e:	6833      	ldr	r3, [r6, #0]
 8009260:	461c      	mov	r4, r3
 8009262:	bb34      	cbnz	r4, 80092b2 <_malloc_r+0x82>
 8009264:	4629      	mov	r1, r5
 8009266:	4638      	mov	r0, r7
 8009268:	f7ff ffc2 	bl	80091f0 <sbrk_aligned>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	4604      	mov	r4, r0
 8009270:	d14d      	bne.n	800930e <_malloc_r+0xde>
 8009272:	6834      	ldr	r4, [r6, #0]
 8009274:	4626      	mov	r6, r4
 8009276:	2e00      	cmp	r6, #0
 8009278:	d140      	bne.n	80092fc <_malloc_r+0xcc>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	4631      	mov	r1, r6
 800927e:	4638      	mov	r0, r7
 8009280:	eb04 0803 	add.w	r8, r4, r3
 8009284:	f000 f878 	bl	8009378 <_sbrk_r>
 8009288:	4580      	cmp	r8, r0
 800928a:	d13a      	bne.n	8009302 <_malloc_r+0xd2>
 800928c:	6821      	ldr	r1, [r4, #0]
 800928e:	3503      	adds	r5, #3
 8009290:	1a6d      	subs	r5, r5, r1
 8009292:	f025 0503 	bic.w	r5, r5, #3
 8009296:	3508      	adds	r5, #8
 8009298:	2d0c      	cmp	r5, #12
 800929a:	bf38      	it	cc
 800929c:	250c      	movcc	r5, #12
 800929e:	4638      	mov	r0, r7
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7ff ffa5 	bl	80091f0 <sbrk_aligned>
 80092a6:	3001      	adds	r0, #1
 80092a8:	d02b      	beq.n	8009302 <_malloc_r+0xd2>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	442b      	add	r3, r5
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	e00e      	b.n	80092d0 <_malloc_r+0xa0>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	1b52      	subs	r2, r2, r5
 80092b6:	d41e      	bmi.n	80092f6 <_malloc_r+0xc6>
 80092b8:	2a0b      	cmp	r2, #11
 80092ba:	d916      	bls.n	80092ea <_malloc_r+0xba>
 80092bc:	1961      	adds	r1, r4, r5
 80092be:	42a3      	cmp	r3, r4
 80092c0:	6025      	str	r5, [r4, #0]
 80092c2:	bf18      	it	ne
 80092c4:	6059      	strne	r1, [r3, #4]
 80092c6:	6863      	ldr	r3, [r4, #4]
 80092c8:	bf08      	it	eq
 80092ca:	6031      	streq	r1, [r6, #0]
 80092cc:	5162      	str	r2, [r4, r5]
 80092ce:	604b      	str	r3, [r1, #4]
 80092d0:	4638      	mov	r0, r7
 80092d2:	f104 060b 	add.w	r6, r4, #11
 80092d6:	f000 f865 	bl	80093a4 <__malloc_unlock>
 80092da:	f026 0607 	bic.w	r6, r6, #7
 80092de:	1d23      	adds	r3, r4, #4
 80092e0:	1af2      	subs	r2, r6, r3
 80092e2:	d0b6      	beq.n	8009252 <_malloc_r+0x22>
 80092e4:	1b9b      	subs	r3, r3, r6
 80092e6:	50a3      	str	r3, [r4, r2]
 80092e8:	e7b3      	b.n	8009252 <_malloc_r+0x22>
 80092ea:	6862      	ldr	r2, [r4, #4]
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	bf0c      	ite	eq
 80092f0:	6032      	streq	r2, [r6, #0]
 80092f2:	605a      	strne	r2, [r3, #4]
 80092f4:	e7ec      	b.n	80092d0 <_malloc_r+0xa0>
 80092f6:	4623      	mov	r3, r4
 80092f8:	6864      	ldr	r4, [r4, #4]
 80092fa:	e7b2      	b.n	8009262 <_malloc_r+0x32>
 80092fc:	4634      	mov	r4, r6
 80092fe:	6876      	ldr	r6, [r6, #4]
 8009300:	e7b9      	b.n	8009276 <_malloc_r+0x46>
 8009302:	230c      	movs	r3, #12
 8009304:	4638      	mov	r0, r7
 8009306:	603b      	str	r3, [r7, #0]
 8009308:	f000 f84c 	bl	80093a4 <__malloc_unlock>
 800930c:	e7a1      	b.n	8009252 <_malloc_r+0x22>
 800930e:	6025      	str	r5, [r4, #0]
 8009310:	e7de      	b.n	80092d0 <_malloc_r+0xa0>
 8009312:	bf00      	nop
 8009314:	20000ad4 	.word	0x20000ad4

08009318 <_realloc_r>:
 8009318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931c:	4680      	mov	r8, r0
 800931e:	4614      	mov	r4, r2
 8009320:	460e      	mov	r6, r1
 8009322:	b921      	cbnz	r1, 800932e <_realloc_r+0x16>
 8009324:	4611      	mov	r1, r2
 8009326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	f7ff bf81 	b.w	8009230 <_malloc_r>
 800932e:	b92a      	cbnz	r2, 800933c <_realloc_r+0x24>
 8009330:	f7ff ff16 	bl	8009160 <_free_r>
 8009334:	4625      	mov	r5, r4
 8009336:	4628      	mov	r0, r5
 8009338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800933c:	f000 f838 	bl	80093b0 <_malloc_usable_size_r>
 8009340:	4284      	cmp	r4, r0
 8009342:	4607      	mov	r7, r0
 8009344:	d802      	bhi.n	800934c <_realloc_r+0x34>
 8009346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800934a:	d812      	bhi.n	8009372 <_realloc_r+0x5a>
 800934c:	4621      	mov	r1, r4
 800934e:	4640      	mov	r0, r8
 8009350:	f7ff ff6e 	bl	8009230 <_malloc_r>
 8009354:	4605      	mov	r5, r0
 8009356:	2800      	cmp	r0, #0
 8009358:	d0ed      	beq.n	8009336 <_realloc_r+0x1e>
 800935a:	42bc      	cmp	r4, r7
 800935c:	4622      	mov	r2, r4
 800935e:	4631      	mov	r1, r6
 8009360:	bf28      	it	cs
 8009362:	463a      	movcs	r2, r7
 8009364:	f7ff fed4 	bl	8009110 <memcpy>
 8009368:	4631      	mov	r1, r6
 800936a:	4640      	mov	r0, r8
 800936c:	f7ff fef8 	bl	8009160 <_free_r>
 8009370:	e7e1      	b.n	8009336 <_realloc_r+0x1e>
 8009372:	4635      	mov	r5, r6
 8009374:	e7df      	b.n	8009336 <_realloc_r+0x1e>
	...

08009378 <_sbrk_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	2300      	movs	r3, #0
 800937c:	4d05      	ldr	r5, [pc, #20]	; (8009394 <_sbrk_r+0x1c>)
 800937e:	4604      	mov	r4, r0
 8009380:	4608      	mov	r0, r1
 8009382:	602b      	str	r3, [r5, #0]
 8009384:	f7f7 fa36 	bl	80007f4 <_sbrk>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d102      	bne.n	8009392 <_sbrk_r+0x1a>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b103      	cbz	r3, 8009392 <_sbrk_r+0x1a>
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	20000adc 	.word	0x20000adc

08009398 <__malloc_lock>:
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <__malloc_lock+0x8>)
 800939a:	f000 b811 	b.w	80093c0 <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	20000ae0 	.word	0x20000ae0

080093a4 <__malloc_unlock>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__malloc_unlock+0x8>)
 80093a6:	f000 b80c 	b.w	80093c2 <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	20000ae0 	.word	0x20000ae0

080093b0 <_malloc_usable_size_r>:
 80093b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093b4:	1f18      	subs	r0, r3, #4
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bfbc      	itt	lt
 80093ba:	580b      	ldrlt	r3, [r1, r0]
 80093bc:	18c0      	addlt	r0, r0, r3
 80093be:	4770      	bx	lr

080093c0 <__retarget_lock_acquire_recursive>:
 80093c0:	4770      	bx	lr

080093c2 <__retarget_lock_release_recursive>:
 80093c2:	4770      	bx	lr

080093c4 <_init>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

080093d0 <_fini>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr

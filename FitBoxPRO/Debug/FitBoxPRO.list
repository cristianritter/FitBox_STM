
FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a59c  0800a59c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a59c  0800a59c  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a59c  0800a59c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a59c  0800a59c  0001a59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  2000020c  0800a7b0  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800a7b0  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001088c  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311f  00000000  00000000  00030ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00033be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00034a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8f1  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122dd  00000000  00000000  0004ffd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c602  00000000  00000000  000622b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee8b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f04  00000000  00000000  000ee908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a4b0 	.word	0x0800a4b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800a4b0 	.word	0x0800a4b0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2uiz>:
 8000f58:	0042      	lsls	r2, r0, #1
 8000f5a:	d20e      	bcs.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30b      	bcc.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d409      	bmi.n	8000f80 <__aeabi_f2uiz+0x28>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr
 8000f80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f84:	d101      	bne.n	8000f8a <__aeabi_f2uiz+0x32>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d102      	bne.n	8000f90 <__aeabi_f2uiz+0x38>
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	4770      	bx	lr
 8000f90:	f04f 0000 	mov.w	r0, #0
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <interpolacao_linear>:
		};

uint8_t inverter_config[3] = {0, 0, 0};


float interpolacao_linear(float x, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
 8000f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	70fb      	strb	r3, [r7, #3]
 8000faa:	460b      	mov	r3, r1
 8000fac:	70bb      	strb	r3, [r7, #2]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	707b      	strb	r3, [r7, #1]
	//"""Realiza a interpolação de x sobre uma reta dada por [(x0,y0),(x1,y1)] e retorna o valor em y"""
	float y;
	y = (float)y0 + ((float)y1 - (float)y0) * (x-(float)x0)/((float)x1-(float)x0);
 8000fb2:	78bb      	ldrb	r3, [r7, #2]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe27 	bl	8000c08 <__aeabi_ui2f>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fe21 	bl	8000c08 <__aeabi_ui2f>
 8000fc6:	4605      	mov	r5, r0
 8000fc8:	78bb      	ldrb	r3, [r7, #2]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe1c 	bl	8000c08 <__aeabi_ui2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f7ff fd65 	bl	8000aa4 <__aeabi_fsub>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461d      	mov	r5, r3
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe11 	bl	8000c08 <__aeabi_ui2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fd5a 	bl	8000aa4 <__aeabi_fsub>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f7ff fe5f 	bl	8000cb8 <__aeabi_fmul>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461e      	mov	r6, r3
 8000ffe:	787b      	ldrb	r3, [r7, #1]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe01 	bl	8000c08 <__aeabi_ui2f>
 8001006:	4605      	mov	r5, r0
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fdfc 	bl	8000c08 <__aeabi_ui2f>
 8001010:	4603      	mov	r3, r0
 8001012:	4619      	mov	r1, r3
 8001014:	4628      	mov	r0, r5
 8001016:	f7ff fd45 	bl	8000aa4 <__aeabi_fsub>
 800101a:	4603      	mov	r3, r0
 800101c:	4619      	mov	r1, r3
 800101e:	4630      	mov	r0, r6
 8001020:	f7ff fefe 	bl	8000e20 <__aeabi_fdiv>
 8001024:	4603      	mov	r3, r0
 8001026:	4619      	mov	r1, r3
 8001028:	4620      	mov	r0, r4
 800102a:	f7ff fd3d 	bl	8000aa8 <__addsf3>
 800102e:	4603      	mov	r3, r0
 8001030:	60fb      	str	r3, [r7, #12]
	return y;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800103c <ret_x0_y0_x1_y1>:

uint8_t * ret_x0_y0_x1_y1(double x, uint8_t * x_array, uint8_t * y_array){
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
    //a funcao retorna o conjunto de pontos [(xa,ya),(xb,yb)] que formam uma reta
    //na qual o ponto x possa ser interpolado.\n
    //Os pontos precisam estar alistados em ordem crescente, e as listas de x e y precisam ter o mesmo tamanho."""
	static uint8_t x0y0x1y1array[4] = {0, 0, 0, 0};

	for (int i=0; i<6; i++){
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e02d      	b.n	80010ac <ret_x0_y0_x1_y1+0x70>
		if (x < (double)x_array[i]){
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f9bb 	bl	80003d4 <__aeabi_ui2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001066:	f7ff fca1 	bl	80009ac <__aeabi_dcmplt>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01a      	beq.n	80010a6 <ret_x0_y0_x1_y1+0x6a>
			x0y0x1y1array[0] = x_array[i-1];
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3b01      	subs	r3, #1
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <ret_x0_y0_x1_y1+0x80>)
 800107c:	701a      	strb	r2, [r3, #0]
			x0y0x1y1array[1] = y_array[i-1];
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3b01      	subs	r3, #1
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	4413      	add	r3, r2
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <ret_x0_y0_x1_y1+0x80>)
 800108a:	705a      	strb	r2, [r3, #1]
			x0y0x1y1array[2] = x_array[i];
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <ret_x0_y0_x1_y1+0x80>)
 8001096:	709a      	strb	r2, [r3, #2]
			x0y0x1y1array[3] = y_array[i];
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <ret_x0_y0_x1_y1+0x80>)
 80010a2:	70da      	strb	r2, [r3, #3]
			break;
 80010a4:	e005      	b.n	80010b2 <ret_x0_y0_x1_y1+0x76>
	for (int i=0; i<6; i++){
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	ddce      	ble.n	8001050 <ret_x0_y0_x1_y1+0x14>
		}
	}
	return x0y0x1y1array;
 80010b2:	4b02      	ldr	r3, [pc, #8]	; (80010bc <ret_x0_y0_x1_y1+0x80>)
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002f4 	.word	0x200002f4

080010c0 <set_output>:

uint16_t* set_output(uint16_t * valor_entrada, uint8_t (*sliders_data)[6], uint8_t (*range_x_data)[6], uint8_t * inverter_config){
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
	//"""Método que calcula e atualiza o valor de saída de acordo com o valor da entrada"""

	static uint16_t valor_saida[3] = {10, 20, 30};
	double entrada_invertida[3] = {0, 0, 0};
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	e9c7 2308 	strd	r2, r3, [r7, #32]

	for (int i=0; i<3; i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010f6:	e0c7      	b.n	8001288 <set_output+0x1c8>
		entrada_invertida[i] = ((double)valor_entrada[i])*100/4095;		//converte o valor de entrada de 12bits para um range de 0,0 a 100,0
 80010f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f966 	bl	80003d4 <__aeabi_ui2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <set_output+0x1e8>)
 800110e:	f7ff f9db 	bl	80004c8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	a361      	add	r3, pc, #388	; (adr r3, 80012a0 <set_output+0x1e0>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fafc 	bl	800071c <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	3130      	adds	r1, #48	; 0x30
 800112e:	4439      	add	r1, r7
 8001130:	3920      	subs	r1, #32
 8001132:	e9c1 2300 	strd	r2, r3, [r1]

		if (inverter_config[i] == 1){
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d114      	bne.n	800116c <set_output+0xac>
			entrada_invertida[i] = 100 - entrada_invertida[i];		// inverte a entrada caso o bit de inversao esteja ligado
 8001142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	3330      	adds	r3, #48	; 0x30
 8001148:	443b      	add	r3, r7
 800114a:	3b20      	subs	r3, #32
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4954      	ldr	r1, [pc, #336]	; (80012a8 <set_output+0x1e8>)
 8001156:	f7fe ffff 	bl	8000158 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001160:	00c9      	lsls	r1, r1, #3
 8001162:	3130      	adds	r1, #48	; 0x30
 8001164:	4439      	add	r1, r7
 8001166:	3920      	subs	r1, #32
 8001168:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (entrada_invertida[i] <= range_x_data[i][0]){			// caso entrada esteja abaixa da calibracao minima
 800116c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f938 	bl	80003f4 <__aeabi_i2d>
			//valor_saida[i] = sliders_data[i][0];
			//continue;
		}
		if (entrada_invertida[i] >= range_x_data[i][5]){			// caso a entrada esteja acima da calibracao maxima
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	3330      	adds	r3, #48	; 0x30
 800118a:	443b      	add	r3, r7
 800118c:	3b20      	subs	r3, #32
 800118e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	795b      	ldrb	r3, [r3, #5]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f925 	bl	80003f4 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff fc0f 	bl	80009d4 <__aeabi_dcmpge>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00e      	beq.n	80011da <set_output+0x11a>
			valor_saida[i] = sliders_data[i][5];
 80011bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	461a      	mov	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4413      	add	r3, r2
 80011cc:	795b      	ldrb	r3, [r3, #5]
 80011ce:	b299      	uxth	r1, r3
 80011d0:	4a36      	ldr	r2, [pc, #216]	; (80012ac <set_output+0x1ec>)
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			continue;
 80011d8:	e053      	b.n	8001282 <set_output+0x1c2>
		}
		uint8_t * x0y0x1y1_list = ret_x0_y0_x1_y1(entrada_invertida[i], range_x_data[i], sliders_data[i]);
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	3330      	adds	r3, #48	; 0x30
 80011e0:	443b      	add	r3, r7
 80011e2:	3b20      	subs	r3, #32
 80011e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	189c      	adds	r4, r3, r2
 80011f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	461a      	mov	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4413      	add	r3, r2
 8001208:	4622      	mov	r2, r4
 800120a:	f7ff ff17 	bl	800103c <ret_x0_y0_x1_y1>
 800120e:	62b8      	str	r0, [r7, #40]	; 0x28

		valor_saida[i] = interpolacao_linear(entrada_invertida[i], x0y0x1y1_list[0], x0y0x1y1_list[1], x0y0x1y1_list[2], x0y0x1y1_list[3]);
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	3330      	adds	r3, #48	; 0x30
 8001216:	443b      	add	r3, r7
 8001218:	3b20      	subs	r3, #32
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fbeb 	bl	80009fc <__aeabi_d2f>
 8001226:	4604      	mov	r4, r0
 8001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	3301      	adds	r3, #1
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	3302      	adds	r3, #2
 8001236:	7818      	ldrb	r0, [r3, #0]
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	3303      	adds	r3, #3
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	4603      	mov	r3, r0
 8001242:	4620      	mov	r0, r4
 8001244:	f7ff fea8 	bl	8000f98 <interpolacao_linear>
 8001248:	4603      	mov	r3, r0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fe84 	bl	8000f58 <__aeabi_f2uiz>
 8001250:	4603      	mov	r3, r0
 8001252:	b299      	uxth	r1, r3
 8001254:	4a15      	ldr	r2, [pc, #84]	; (80012ac <set_output+0x1ec>)
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//valor_saida[i] = 100;
		valor_saida[i] = valor_saida[i]*4095/100;
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <set_output+0x1ec>)
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	461a      	mov	r2, r3
 8001266:	4613      	mov	r3, r2
 8001268:	031b      	lsls	r3, r3, #12
 800126a:	1a9b      	subs	r3, r3, r2
 800126c:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <set_output+0x1f0>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	1152      	asrs	r2, r2, #5
 8001274:	17db      	asrs	r3, r3, #31
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b299      	uxth	r1, r3
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <set_output+0x1ec>)
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<3; i++){
 8001282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001284:	3301      	adds	r3, #1
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	2b02      	cmp	r3, #2
 800128c:	f77f af34 	ble.w	80010f8 <set_output+0x38>
	}
	return valor_saida;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <set_output+0x1ec>)
}
 8001292:	4618      	mov	r0, r3
 8001294:	3730      	adds	r7, #48	; 0x30
 8001296:	46bd      	mov	sp, r7
 8001298:	bdb0      	pop	{r4, r5, r7, pc}
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40affe00 	.word	0x40affe00
 80012a8:	40590000 	.word	0x40590000
 80012ac:	20000028 	.word	0x20000028
 80012b0:	51eb851f 	.word	0x51eb851f

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b5b0      	push	{r4, r5, r7, lr}
 80012b6:	b090      	sub	sp, #64	; 0x40
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ba:	f000 fb73 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012be:	f000 f8a7 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c2:	f000 f9a7 	bl	8001614 <MX_GPIO_Init>
  MX_DMA_Init();
 80012c6:	f000 f987 	bl	80015d8 <MX_DMA_Init>
  MX_ADC1_Init();
 80012ca:	f000 f8ff 	bl	80014cc <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80012ce:	f008 f83f 	bl	8009350 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80012d2:	f000 f957 	bl	8001584 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 80012d6:	2203      	movs	r2, #3
 80012d8:	4942      	ldr	r1, [pc, #264]	; (80013e4 <main+0x130>)
 80012da:	4843      	ldr	r0, [pc, #268]	; (80013e8 <main+0x134>)
 80012dc:	f000 fcc0 	bl	8001c60 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t * OutputValue = set_output(ADCValue, sliders_data, range_x_data, inverter_config);
 80012e0:	4b42      	ldr	r3, [pc, #264]	; (80013ec <main+0x138>)
 80012e2:	4a43      	ldr	r2, [pc, #268]	; (80013f0 <main+0x13c>)
 80012e4:	4943      	ldr	r1, [pc, #268]	; (80013f4 <main+0x140>)
 80012e6:	483f      	ldr	r0, [pc, #252]	; (80013e4 <main+0x130>)
 80012e8:	f7ff feea 	bl	80010c0 <set_output>
 80012ec:	63f8      	str	r0, [r7, #60]	; 0x3c
	  joystickhid.rx_8lsb = (OutputValue[0]);
 80012ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <main+0x144>)
 80012f6:	701a      	strb	r2, [r3, #0]
	  joystickhid.ry_4lsb_rx_4msb = ((OutputValue[1] & 0xf) << 4 | OutputValue[0] >> 8);
 80012f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012fa:	3302      	adds	r3, #2
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	b25a      	sxtb	r2, r3
 8001302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b29b      	uxth	r3, r3
 800130a:	b25b      	sxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b25b      	sxtb	r3, r3
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <main+0x144>)
 8001314:	705a      	strb	r2, [r3, #1]
	  joystickhid.ry_8msb = OutputValue[1] >> 4;
 8001316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001318:	3302      	adds	r3, #2
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	b29b      	uxth	r3, r3
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <main+0x144>)
 8001324:	709a      	strb	r2, [r3, #2]
	  joystickhid.rz_8lsb = OutputValue[2];
 8001326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001328:	3304      	adds	r3, #4
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b32      	ldr	r3, [pc, #200]	; (80013f8 <main+0x144>)
 8001330:	70da      	strb	r2, [r3, #3]
	  joystickhid.rz_4msb = OutputValue[2] >> 8;
 8001332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001334:	3304      	adds	r3, #4
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	b29b      	uxth	r3, r3
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <main+0x144>)
 8001340:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(1);
 8001342:	2001      	movs	r0, #1
 8001344:	f000 fb90 	bl	8001a68 <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Valores inicio !!!\r\n"; //Data to send
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <main+0x148>)
 800134a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800134e:	461d      	mov	r5, r3
 8001350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001354:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001358:	6020      	str	r0, [r4, #0]
 800135a:	3404      	adds	r4, #4
 800135c:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 800135e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001362:	230a      	movs	r3, #10
 8001364:	2215      	movs	r2, #21
 8001366:	4826      	ldr	r0, [pc, #152]	; (8001400 <main+0x14c>)
 8001368:	f003 fde9 	bl	8004f3e <HAL_UART_Transmit>

	  char buffer[6];
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", ADCValue[0]), 100);
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <main+0x130>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4923      	ldr	r1, [pc, #140]	; (8001404 <main+0x150>)
 8001378:	4618      	mov	r0, r3
 800137a:	f008 fc1f 	bl	8009bbc <siprintf>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f107 011c 	add.w	r1, r7, #28
 8001386:	2364      	movs	r3, #100	; 0x64
 8001388:	481d      	ldr	r0, [pc, #116]	; (8001400 <main+0x14c>)
 800138a:	f003 fdd8 	bl	8004f3e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", OutputValue[0]), 100);
 800138e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	491a      	ldr	r1, [pc, #104]	; (8001404 <main+0x150>)
 800139a:	4618      	mov	r0, r3
 800139c:	f008 fc0e 	bl	8009bbc <siprintf>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f107 011c 	add.w	r1, r7, #28
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <main+0x14c>)
 80013ac:	f003 fdc7 	bl	8004f3e <HAL_UART_Transmit>


	  uint8_t Test2[] = "\r\n Valores fim !!!\r\n"; //Data to send
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <main+0x154>)
 80013b2:	1d3c      	adds	r4, r7, #4
 80013b4:	461d      	mov	r5, r3
 80013b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013be:	6020      	str	r0, [r4, #0]
 80013c0:	3404      	adds	r4, #4
 80013c2:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart1,Test2,sizeof(Test),10);// Sending in normal mode
 80013c4:	1d39      	adds	r1, r7, #4
 80013c6:	230a      	movs	r3, #10
 80013c8:	2215      	movs	r2, #21
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <main+0x14c>)
 80013cc:	f003 fdb7 	bl	8004f3e <HAL_UART_Transmit>
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80013d0:	2208      	movs	r2, #8
 80013d2:	4909      	ldr	r1, [pc, #36]	; (80013f8 <main+0x144>)
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <main+0x158>)
 80013d6:	f006 fe59 	bl	800808c <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(1);
 80013da:	2001      	movs	r0, #1
 80013dc:	f000 fb44 	bl	8001a68 <HAL_Delay>
  {
 80013e0:	e77e      	b.n	80012e0 <main+0x2c>
 80013e2:	bf00      	nop
 80013e4:	200002e8 	.word	0x200002e8
 80013e8:	20000228 	.word	0x20000228
 80013ec:	200002f0 	.word	0x200002f0
 80013f0:	20000014 	.word	0x20000014
 80013f4:	20000000 	.word	0x20000000
 80013f8:	200002e0 	.word	0x200002e0
 80013fc:	0800a4cc 	.word	0x0800a4cc
 8001400:	2000029c 	.word	0x2000029c
 8001404:	0800a4c8 	.word	0x0800a4c8
 8001408:	0800a4e4 	.word	0x0800a4e4
 800140c:	20000304 	.word	0x20000304

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	; 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141a:	2228      	movs	r2, #40	; 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f008 fbc4 	bl	8009bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144e:	2301      	movs	r3, #1
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800145c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001466:	4618      	mov	r0, r3
 8001468:	f003 f84c 	bl	8004504 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001472:	f000 f91b 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001486:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fab8 	bl	8004a08 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800149e:	f000 f905 	bl	80016ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80014a2:	2312      	movs	r3, #18
 80014a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80014a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80014ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fc3f 	bl	8004d38 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014c0:	f000 f8f4 	bl	80016ac <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3750      	adds	r7, #80	; 0x50
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <MX_ADC1_Init+0xb0>)
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <MX_ADC1_Init+0xb4>)
 80014e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_ADC1_Init+0xb0>)
 80014e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <MX_ADC1_Init+0xb0>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_ADC1_Init+0xb0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_ADC1_Init+0xb0>)
 80014f8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_ADC1_Init+0xb0>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_ADC1_Init+0xb0>)
 8001506:	2203      	movs	r2, #3
 8001508:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800150a:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_ADC1_Init+0xb0>)
 800150c:	f000 fad0 	bl	8001ab0 <HAL_ADC_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001516:	f000 f8c9 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151e:	2301      	movs	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001522:	2306      	movs	r3, #6
 8001524:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4814      	ldr	r0, [pc, #80]	; (800157c <MX_ADC1_Init+0xb0>)
 800152c:	f000 fc92 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001536:	f000 f8b9 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800153a:	2301      	movs	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800153e:	2302      	movs	r3, #2
 8001540:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_ADC1_Init+0xb0>)
 8001548:	f000 fc84 	bl	8001e54 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001552:	f000 f8ab 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001556:	2302      	movs	r3, #2
 8001558:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800155a:	2303      	movs	r3, #3
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_ADC1_Init+0xb0>)
 8001564:	f000 fc76 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800156e:	f000 f89d 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000228 	.word	0x20000228
 8001580:	40012400 	.word	0x40012400

08001584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_USART1_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART1_UART_Init+0x4c>)
 80015bc:	f003 fc72 	bl	8004ea4 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 f871 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000029c 	.word	0x2000029c
 80015d4:	40013800 	.word	0x40013800

080015d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_DMA_Init+0x38>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <MX_DMA_Init+0x38>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_DMA_Init+0x38>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200b      	movs	r0, #11
 80015fc:	f000 fefb 	bl	80023f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001600:	200b      	movs	r0, #11
 8001602:	f000 ff14 	bl	800242e <HAL_NVIC_EnableIRQ>

}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_GPIO_Init+0x90>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <MX_GPIO_Init+0x90>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_GPIO_Init+0x90>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_GPIO_Init+0x90>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <MX_GPIO_Init+0x90>)
 8001646:	f043 0320 	orr.w	r3, r3, #32
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_GPIO_Init+0x90>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_GPIO_Init+0x90>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <MX_GPIO_Init+0x90>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_GPIO_Init+0x90>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_GPIO_Init+0x94>)
 8001678:	f001 fa66 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2302      	movs	r3, #2
 800168c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4619      	mov	r1, r3
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_GPIO_Init+0x94>)
 8001696:	f001 f8d3 	bl	8002840 <HAL_GPIO_Init>

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40011000 	.word	0x40011000

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_MspInit+0x40>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <HAL_MspInit+0x40>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6193      	str	r3, [r2, #24]
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_MspInit+0x40>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_MspInit+0x40>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_MspInit+0x40>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_MspInit+0x40>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000

080016fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a29      	ldr	r2, [pc, #164]	; (80017bc <HAL_ADC_MspInit+0xc0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d14a      	bne.n	80017b2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_ADC_MspInit+0xc4>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_ADC_MspInit+0xc4>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_ADC_MspInit+0xc4>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_ADC_MspInit+0xc4>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <HAL_ADC_MspInit+0xc4>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_ADC_MspInit+0xc4>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800174c:	2307      	movs	r3, #7
 800174e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001750:	2303      	movs	r3, #3
 8001752:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4619      	mov	r1, r3
 800175a:	481a      	ldr	r0, [pc, #104]	; (80017c4 <HAL_ADC_MspInit+0xc8>)
 800175c:	f001 f870 	bl	8002840 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 8001762:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_ADC_MspInit+0xd0>)
 8001764:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 800177a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 8001782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001786:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 800178a:	2220      	movs	r2, #32
 800178c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 8001790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001794:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001796:	480c      	ldr	r0, [pc, #48]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 8001798:	f000 fe64 	bl	8002464 <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80017a2:	f7ff ff83 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 80017aa:	621a      	str	r2, [r3, #32]
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_ADC_MspInit+0xcc>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40012400 	.word	0x40012400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010800 	.word	0x40010800
 80017c8:	20000258 	.word	0x20000258
 80017cc:	40020008 	.word	0x40020008

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <HAL_UART_MspInit+0x8c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d131      	bne.n	8001854 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_UART_MspInit+0x90>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_UART_MspInit+0x90>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_UART_MspInit+0x90>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_UART_MspInit+0x90>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_UART_MspInit+0x90>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_UART_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_UART_MspInit+0x94>)
 8001836:	f001 f803 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_UART_MspInit+0x94>)
 8001850:	f000 fff6 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013800 	.word	0x40013800
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ae:	f000 f8bf 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <DMA1_Channel1_IRQHandler+0x10>)
 80018be:	f000 fe8b 	bl	80025d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000258 	.word	0x20000258

080018cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018d2:	f001 fa9b 	bl	8002e0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200007c8 	.word	0x200007c8

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f008 f922 	bl	8009b58 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20005000 	.word	0x20005000
 8001940:	00000400 	.word	0x00000400
 8001944:	200002f8 	.word	0x200002f8
 8001948:	20000b20 	.word	0x20000b20

0800194c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	; (8001990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	; (800199c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800197e:	f7ff ffe5 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f008 f8ef 	bl	8009b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff fc95 	bl	80012b4 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001994:	0800a5a4 	.word	0x0800a5a4
  ldr r2, =_sbss
 8001998:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800199c:	20000b1c 	.word	0x20000b1c

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x28>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 fd13 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fe7a 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fd2b 	bl	800244a <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 fcf3 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000030 	.word	0x20000030
 8001a28:	20000038 	.word	0x20000038
 8001a2c:	20000034 	.word	0x20000034

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_IncTick+0x20>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000038 	.word	0x20000038
 8001a50:	200002fc 	.word	0x200002fc

08001a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	200002fc 	.word	0x200002fc

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffe0 	bl	8001a54 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000038 	.word	0x20000038

08001ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0be      	b.n	8001c50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fe04 	bl	80016fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 faff 	bl	80020f8 <ADC_ConversionStop_Disable>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8099 	bne.w	8001c3e <HAL_ADC_Init+0x18e>
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8095 	bne.w	8001c3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	f043 0202 	orr.w	r2, r3, #2
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7b1b      	ldrb	r3, [r3, #12]
 8001b36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b48:	d003      	beq.n	8001b52 <HAL_ADC_Init+0xa2>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_ADC_Init+0xa8>
 8001b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_Init+0xaa>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7d1b      	ldrb	r3, [r3, #20]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d119      	bne.n	8001b9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7b1b      	ldrb	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	035a      	lsls	r2, r3, #13
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	e00b      	b.n	8001b9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_ADC_Init+0x1a8>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bcc:	d003      	beq.n	8001bd6 <HAL_ADC_Init+0x126>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d104      	bne.n	8001be0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	051b      	lsls	r3, r3, #20
 8001bde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_ADC_Init+0x1ac>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c1a:	e018      	b.n	8001c4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f023 0312 	bic.w	r3, r3, #18
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c3c:	e007      	b.n	8001c4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	ffe1f7fd 	.word	0xffe1f7fd
 8001c5c:	ff1f0efe 	.word	0xff1f0efe

08001c60 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a64      	ldr	r2, [pc, #400]	; (8001e08 <HAL_ADC_Start_DMA+0x1a8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_ADC_Start_DMA+0x24>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a63      	ldr	r2, [pc, #396]	; (8001e0c <HAL_ADC_Start_DMA+0x1ac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d106      	bne.n	8001c92 <HAL_ADC_Start_DMA+0x32>
 8001c84:	4b60      	ldr	r3, [pc, #384]	; (8001e08 <HAL_ADC_Start_DMA+0x1a8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 80b3 	bne.w	8001df8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_Start_DMA+0x40>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e0ae      	b.n	8001dfe <HAL_ADC_Start_DMA+0x19e>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f9cb 	bl	8002044 <ADC_Enable>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 809a 	bne.w	8001dee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4e      	ldr	r2, [pc, #312]	; (8001e0c <HAL_ADC_Start_DMA+0x1ac>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d105      	bne.n	8001ce4 <HAL_ADC_Start_DMA+0x84>
 8001cd8:	4b4b      	ldr	r3, [pc, #300]	; (8001e08 <HAL_ADC_Start_DMA+0x1a8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d115      	bne.n	8001d10 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d026      	beq.n	8001d4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d0e:	e01d      	b.n	8001d4c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a39      	ldr	r2, [pc, #228]	; (8001e08 <HAL_ADC_Start_DMA+0x1a8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_ADC_Start_DMA+0xd0>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <HAL_ADC_Start_DMA+0x1ac>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d10d      	bne.n	8001d4c <HAL_ADC_Start_DMA+0xec>
 8001d30:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <HAL_ADC_Start_DMA+0x1a8>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	f023 0206 	bic.w	r2, r3, #6
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <HAL_ADC_Start_DMA+0x1b0>)
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_ADC_Start_DMA+0x1b4>)
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_ADC_Start_DMA+0x1b8>)
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0202 	mvn.w	r2, #2
 8001d94:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a18      	ldr	r0, [r3, #32]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	334c      	adds	r3, #76	; 0x4c
 8001db0:	4619      	mov	r1, r3
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f000 fbaf 	bl	8002518 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dc4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dc8:	d108      	bne.n	8001ddc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001dd8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001dda:	e00f      	b.n	8001dfc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001dec:	e006      	b.n	8001dfc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001df6:	e001      	b.n	8001dfc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40012400 	.word	0x40012400
 8001e0c:	40012800 	.word	0x40012800
 8001e10:	0800217b 	.word	0x0800217b
 8001e14:	080021f7 	.word	0x080021f7
 8001e18:	08002213 	.word	0x08002213

08001e1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x20>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e0dc      	b.n	800202e <HAL_ADC_ConfigChannel+0x1da>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d81c      	bhi.n	8001ebe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	3b05      	subs	r3, #5
 8001e96:	221f      	movs	r2, #31
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4019      	ands	r1, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b05      	subs	r3, #5
 8001eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34
 8001ebc:	e03c      	b.n	8001f38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d81c      	bhi.n	8001f00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b23      	subs	r3, #35	; 0x23
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4019      	ands	r1, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b23      	subs	r3, #35	; 0x23
 8001ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
 8001efe:	e01b      	b.n	8001f38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b41      	subs	r3, #65	; 0x41
 8001f12:	221f      	movs	r2, #31
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	4019      	ands	r1, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b41      	subs	r3, #65	; 0x41
 8001f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	d91c      	bls.n	8001f7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68d9      	ldr	r1, [r3, #12]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4019      	ands	r1, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b1e      	subs	r3, #30
 8001f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	e019      	b.n	8001fae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6919      	ldr	r1, [r3, #16]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4019      	ands	r1, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6898      	ldr	r0, [r3, #8]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d003      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fba:	2b11      	cmp	r3, #17
 8001fbc:	d132      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d125      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d126      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fe4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d11a      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9a      	lsrs	r2, r3, #18
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002004:	e002      	b.n	800200c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3b01      	subs	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x1b2>
 8002012:	e007      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40012400 	.word	0x40012400
 800203c:	20000030 	.word	0x20000030
 8002040:	431bde83 	.word	0x431bde83

08002044 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d040      	beq.n	80020e4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <ADC_Enable+0xac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <ADC_Enable+0xb0>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	0c9b      	lsrs	r3, r3, #18
 800207e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002080:	e002      	b.n	8002088 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	3b01      	subs	r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f9      	bne.n	8002082 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800208e:	f7ff fce1 	bl	8001a54 <HAL_GetTick>
 8002092:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002094:	e01f      	b.n	80020d6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002096:	f7ff fcdd 	bl	8001a54 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d918      	bls.n	80020d6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d011      	beq.n	80020d6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	f043 0210 	orr.w	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e007      	b.n	80020e6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d1d8      	bne.n	8002096 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000030 	.word	0x20000030
 80020f4:	431bde83 	.word	0x431bde83

080020f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d12e      	bne.n	8002170 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002122:	f7ff fc97 	bl	8001a54 <HAL_GetTick>
 8002126:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002128:	e01b      	b.n	8002162 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800212a:	f7ff fc93 	bl	8001a54 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d914      	bls.n	8002162 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10d      	bne.n	8002162 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e007      	b.n	8002172 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d0dc      	beq.n	800212a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002190:	2b00      	cmp	r3, #0
 8002192:	d127      	bne.n	80021e4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021ae:	d115      	bne.n	80021dc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d111      	bne.n	80021dc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff fe1d 	bl	8001e1c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021e2:	e004      	b.n	80021ee <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fe12 	bl	8001e2e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	f043 0204 	orr.w	r2, r3, #4
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff fe01 	bl	8001e40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4906      	ldr	r1, [pc, #24]	; (80022e0 <__NVIC_EnableIRQ+0x34>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff90 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff2d 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff42 	bl	8002290 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff90 	bl	8002338 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5f 	bl	80022e4 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff35 	bl	80022ac <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e043      	b.n	8002502 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_DMA_Init+0xa8>)
 8002482:	4413      	add	r3, r2
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_Init+0xac>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	009a      	lsls	r2, r3, #2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_DMA_Init+0xb0>)
 8002496:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	bffdfff8 	.word	0xbffdfff8
 8002510:	cccccccd 	.word	0xcccccccd
 8002514:	40020000 	.word	0x40020000

08002518 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_DMA_Start_IT+0x20>
 8002534:	2302      	movs	r3, #2
 8002536:	e04a      	b.n	80025ce <HAL_DMA_Start_IT+0xb6>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002546:	2b01      	cmp	r3, #1
 8002548:	d13a      	bne.n	80025c0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2202      	movs	r2, #2
 800254e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f938 	bl	80027e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 020e 	orr.w	r2, r2, #14
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e00f      	b.n	80025ae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0204 	bic.w	r2, r2, #4
 800259c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 020a 	orr.w	r2, r2, #10
 80025ac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e005      	b.n	80025cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
 80025ca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2204      	movs	r2, #4
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d04f      	beq.n	80026a0 <HAL_DMA_IRQHandler+0xc8>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d04a      	beq.n	80026a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a66      	ldr	r2, [pc, #408]	; (80027c8 <HAL_DMA_IRQHandler+0x1f0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d029      	beq.n	8002686 <HAL_DMA_IRQHandler+0xae>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_DMA_IRQHandler+0x1f4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d022      	beq.n	8002682 <HAL_DMA_IRQHandler+0xaa>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a63      	ldr	r2, [pc, #396]	; (80027d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01a      	beq.n	800267c <HAL_DMA_IRQHandler+0xa4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a62      	ldr	r2, [pc, #392]	; (80027d4 <HAL_DMA_IRQHandler+0x1fc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d012      	beq.n	8002676 <HAL_DMA_IRQHandler+0x9e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a60      	ldr	r2, [pc, #384]	; (80027d8 <HAL_DMA_IRQHandler+0x200>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00a      	beq.n	8002670 <HAL_DMA_IRQHandler+0x98>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5f      	ldr	r2, [pc, #380]	; (80027dc <HAL_DMA_IRQHandler+0x204>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d102      	bne.n	800266a <HAL_DMA_IRQHandler+0x92>
 8002664:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002668:	e00e      	b.n	8002688 <HAL_DMA_IRQHandler+0xb0>
 800266a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800266e:	e00b      	b.n	8002688 <HAL_DMA_IRQHandler+0xb0>
 8002670:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002674:	e008      	b.n	8002688 <HAL_DMA_IRQHandler+0xb0>
 8002676:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800267a:	e005      	b.n	8002688 <HAL_DMA_IRQHandler+0xb0>
 800267c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002680:	e002      	b.n	8002688 <HAL_DMA_IRQHandler+0xb0>
 8002682:	2340      	movs	r3, #64	; 0x40
 8002684:	e000      	b.n	8002688 <HAL_DMA_IRQHandler+0xb0>
 8002686:	2304      	movs	r3, #4
 8002688:	4a55      	ldr	r2, [pc, #340]	; (80027e0 <HAL_DMA_IRQHandler+0x208>)
 800268a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8094 	beq.w	80027be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800269e:	e08e      	b.n	80027be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	2202      	movs	r2, #2
 80026a6:	409a      	lsls	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d056      	beq.n	800275e <HAL_DMA_IRQHandler+0x186>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d051      	beq.n	800275e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 020a 	bic.w	r2, r2, #10
 80026d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <HAL_DMA_IRQHandler+0x1f0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d029      	beq.n	800273e <HAL_DMA_IRQHandler+0x166>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a37      	ldr	r2, [pc, #220]	; (80027cc <HAL_DMA_IRQHandler+0x1f4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <HAL_DMA_IRQHandler+0x162>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a35      	ldr	r2, [pc, #212]	; (80027d0 <HAL_DMA_IRQHandler+0x1f8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01a      	beq.n	8002734 <HAL_DMA_IRQHandler+0x15c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a34      	ldr	r2, [pc, #208]	; (80027d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d012      	beq.n	800272e <HAL_DMA_IRQHandler+0x156>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a32      	ldr	r2, [pc, #200]	; (80027d8 <HAL_DMA_IRQHandler+0x200>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00a      	beq.n	8002728 <HAL_DMA_IRQHandler+0x150>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_DMA_IRQHandler+0x204>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d102      	bne.n	8002722 <HAL_DMA_IRQHandler+0x14a>
 800271c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002720:	e00e      	b.n	8002740 <HAL_DMA_IRQHandler+0x168>
 8002722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002726:	e00b      	b.n	8002740 <HAL_DMA_IRQHandler+0x168>
 8002728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800272c:	e008      	b.n	8002740 <HAL_DMA_IRQHandler+0x168>
 800272e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002732:	e005      	b.n	8002740 <HAL_DMA_IRQHandler+0x168>
 8002734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002738:	e002      	b.n	8002740 <HAL_DMA_IRQHandler+0x168>
 800273a:	2320      	movs	r3, #32
 800273c:	e000      	b.n	8002740 <HAL_DMA_IRQHandler+0x168>
 800273e:	2302      	movs	r3, #2
 8002740:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_DMA_IRQHandler+0x208>)
 8002742:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d034      	beq.n	80027be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800275c:	e02f      	b.n	80027be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2208      	movs	r2, #8
 8002764:	409a      	lsls	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d028      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x1e8>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 020e 	bic.w	r2, r2, #14
 8002786:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
    }
  }
  return;
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
}
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40020008 	.word	0x40020008
 80027cc:	4002001c 	.word	0x4002001c
 80027d0:	40020030 	.word	0x40020030
 80027d4:	40020044 	.word	0x40020044
 80027d8:	40020058 	.word	0x40020058
 80027dc:	4002006c 	.word	0x4002006c
 80027e0:	40020000 	.word	0x40020000

080027e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b10      	cmp	r3, #16
 8002810:	d108      	bne.n	8002824 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002822:	e007      	b.n	8002834 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
	...

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002852:	e169      	b.n	8002b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002854:	2201      	movs	r2, #1
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8158 	bne.w	8002b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a9a      	ldr	r2, [pc, #616]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d05e      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 800287c:	4a98      	ldr	r2, [pc, #608]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d875      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 8002882:	4a98      	ldr	r2, [pc, #608]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d058      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 8002888:	4a96      	ldr	r2, [pc, #600]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d86f      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 800288e:	4a96      	ldr	r2, [pc, #600]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d052      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 8002894:	4a94      	ldr	r2, [pc, #592]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d869      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 800289a:	4a94      	ldr	r2, [pc, #592]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d04c      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 80028a0:	4a92      	ldr	r2, [pc, #584]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d863      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028a6:	4a92      	ldr	r2, [pc, #584]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d046      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 80028ac:	4a90      	ldr	r2, [pc, #576]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d85d      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d82a      	bhi.n	800290c <HAL_GPIO_Init+0xcc>
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d859      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_GPIO_Init+0x80>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	0800293b 	.word	0x0800293b
 80028c4:	08002915 	.word	0x08002915
 80028c8:	08002927 	.word	0x08002927
 80028cc:	08002969 	.word	0x08002969
 80028d0:	0800296f 	.word	0x0800296f
 80028d4:	0800296f 	.word	0x0800296f
 80028d8:	0800296f 	.word	0x0800296f
 80028dc:	0800296f 	.word	0x0800296f
 80028e0:	0800296f 	.word	0x0800296f
 80028e4:	0800296f 	.word	0x0800296f
 80028e8:	0800296f 	.word	0x0800296f
 80028ec:	0800296f 	.word	0x0800296f
 80028f0:	0800296f 	.word	0x0800296f
 80028f4:	0800296f 	.word	0x0800296f
 80028f8:	0800296f 	.word	0x0800296f
 80028fc:	0800296f 	.word	0x0800296f
 8002900:	0800296f 	.word	0x0800296f
 8002904:	0800291d 	.word	0x0800291d
 8002908:	08002931 	.word	0x08002931
 800290c:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <HAL_GPIO_Init+0x2b4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002912:	e02c      	b.n	800296e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	623b      	str	r3, [r7, #32]
          break;
 800291a:	e029      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	3304      	adds	r3, #4
 8002922:	623b      	str	r3, [r7, #32]
          break;
 8002924:	e024      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	3308      	adds	r3, #8
 800292c:	623b      	str	r3, [r7, #32]
          break;
 800292e:	e01f      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	330c      	adds	r3, #12
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e01a      	b.n	8002970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002942:	2304      	movs	r3, #4
 8002944:	623b      	str	r3, [r7, #32]
          break;
 8002946:	e013      	b.n	8002970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002950:	2308      	movs	r3, #8
 8002952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	611a      	str	r2, [r3, #16]
          break;
 800295a:	e009      	b.n	8002970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800295c:	2308      	movs	r3, #8
 800295e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	615a      	str	r2, [r3, #20]
          break;
 8002966:	e003      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
          break;
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x130>
          break;
 800296e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	d801      	bhi.n	800297a <HAL_GPIO_Init+0x13a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	e001      	b.n	800297e <HAL_GPIO_Init+0x13e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d802      	bhi.n	800298c <HAL_GPIO_Init+0x14c>
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	e002      	b.n	8002992 <HAL_GPIO_Init+0x152>
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	3b08      	subs	r3, #8
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	210f      	movs	r1, #15
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	431a      	orrs	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80b1 	beq.w	8002b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029c0:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_GPIO_Init+0x2bc>)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <HAL_GPIO_Init+0x2c0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <HAL_GPIO_Init+0x1ec>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3f      	ldr	r2, [pc, #252]	; (8002b04 <HAL_GPIO_Init+0x2c4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00d      	beq.n	8002a28 <HAL_GPIO_Init+0x1e8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3e      	ldr	r2, [pc, #248]	; (8002b08 <HAL_GPIO_Init+0x2c8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_Init+0x1e4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <HAL_GPIO_Init+0x2cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_GPIO_Init+0x1e0>
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e004      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4093      	lsls	r3, r2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a3e:	492f      	ldr	r1, [pc, #188]	; (8002afc <HAL_GPIO_Init+0x2bc>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	492c      	ldr	r1, [pc, #176]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4928      	ldr	r1, [pc, #160]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4922      	ldr	r1, [pc, #136]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	491e      	ldr	r1, [pc, #120]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4918      	ldr	r1, [pc, #96]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4914      	ldr	r1, [pc, #80]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d021      	beq.n	8002b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
 8002adc:	e021      	b.n	8002b22 <HAL_GPIO_Init+0x2e2>
 8002ade:	bf00      	nop
 8002ae0:	10320000 	.word	0x10320000
 8002ae4:	10310000 	.word	0x10310000
 8002ae8:	10220000 	.word	0x10220000
 8002aec:	10210000 	.word	0x10210000
 8002af0:	10120000 	.word	0x10120000
 8002af4:	10110000 	.word	0x10110000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40010800 	.word	0x40010800
 8002b04:	40010c00 	.word	0x40010c00
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40011400 	.word	0x40011400
 8002b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4909      	ldr	r1, [pc, #36]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f ae8e 	bne.w	8002854 <HAL_GPIO_Init+0x14>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	372c      	adds	r7, #44	; 0x2c
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43d9      	mvns	r1, r3
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	400b      	ands	r3, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	611a      	str	r2, [r3, #16]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bac:	b08b      	sub	sp, #44	; 0x2c
 8002bae:	af06      	add	r7, sp, #24
 8002bb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0fd      	b.n	8002db8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d106      	bne.n	8002bd6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f006 fd33 	bl	800963c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 fb3c 	bl	8005260 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	687e      	ldr	r6, [r7, #4]
 8002bf0:	466d      	mov	r5, sp
 8002bf2:	f106 0410 	add.w	r4, r6, #16
 8002bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	602b      	str	r3, [r5, #0]
 8002bfe:	1d33      	adds	r3, r6, #4
 8002c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c02:	6838      	ldr	r0, [r7, #0]
 8002c04:	f002 fb06 	bl	8005214 <USB_CoreInit>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e0ce      	b.n	8002db8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 fb37 	bl	8005294 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	e04c      	b.n	8002cc6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	b298      	uxth	r0, r3
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	3336      	adds	r3, #54	; 0x36
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3303      	adds	r3, #3
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3338      	adds	r3, #56	; 0x38
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	333c      	adds	r3, #60	; 0x3c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3340      	adds	r3, #64	; 0x40
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d3ad      	bcc.n	8002c2c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e044      	b.n	8002d60 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d3b5      	bcc.n	8002cd6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	687e      	ldr	r6, [r7, #4]
 8002d72:	466d      	mov	r5, sp
 8002d74:	f106 0410 	add.w	r4, r6, #16
 8002d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	1d33      	adds	r3, r6, #4
 8002d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d84:	6838      	ldr	r0, [r7, #0]
 8002d86:	f002 fa91 	bl	80052ac <USB_DevInit>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e00d      	b.n	8002db8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 ff43 	bl	8007c3c <USB_DevDisconnect>

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_Start+0x16>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e016      	b.n	8002e04 <HAL_PCD_Start+0x44>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 fa26 	bl	8005234 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002de8:	2101      	movs	r1, #1
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f006 fe7d 	bl	8009aea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 ff17 	bl	8007c28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 ff19 	bl	8007c50 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e28:	d102      	bne.n	8002e30 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fb48 	bl	80034c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 ff0b 	bl	8007c50 <USB_ReadInterrupts>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e44:	d112      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f006 fc67 	bl	8009732 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e64:	2100      	movs	r1, #0
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f923 	bl	80030b2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 feed 	bl	8007c50 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e80:	d10b      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e94:	b292      	uxth	r2, r2
 8002e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 fed6 	bl	8007c50 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d10b      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 febf 	bl	8007c50 <USB_ReadInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002edc:	d126      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0204 	bic.w	r2, r2, #4
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0208 	bic.w	r2, r2, #8
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f006 fc48 	bl	80097a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f26:	b292      	uxth	r2, r2
 8002f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 fe8d 	bl	8007c50 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f40:	f040 8082 	bne.w	8003048 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e010      	b.n	8002f6c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	7ffb      	ldrb	r3, [r7, #31]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	7ffb      	ldrb	r3, [r7, #31]
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	3320      	adds	r3, #32
 8002f60:	443b      	add	r3, r7
 8002f62:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	7ffb      	ldrb	r3, [r7, #31]
 8002f6e:	2b07      	cmp	r3, #7
 8002f70:	d9eb      	bls.n	8002f4a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	b292      	uxth	r2, r2
 8002f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002fa2:	bf00      	nop
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f6      	beq.n	8002fa4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e00f      	b.n	8002ff4 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	7ffa      	ldrb	r2, [r7, #31]
 8002fde:	0092      	lsls	r2, r2, #2
 8002fe0:	440a      	add	r2, r1
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	3320      	adds	r3, #32
 8002fe6:	443b      	add	r3, r7
 8002fe8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002fec:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
 8002ff6:	2b07      	cmp	r3, #7
 8002ff8:	d9ec      	bls.n	8002fd4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0208 	orr.w	r2, r2, #8
 800300c:	b292      	uxth	r2, r2
 800300e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800301a:	b29a      	uxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003024:	b292      	uxth	r2, r2
 8003026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0204 	orr.w	r2, r2, #4
 800303c:	b292      	uxth	r2, r2
 800303e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f006 fb94 	bl	8009770 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f004 fdff 	bl	8007c50 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305c:	d10e      	bne.n	800307c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003070:	b292      	uxth	r2, r2
 8003072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f006 fb4d 	bl	8009716 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f004 fde5 	bl	8007c50 <USB_ReadInterrupts>
 8003086:	4603      	mov	r3, r0
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003090:	d10b      	bne.n	80030aa <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800309a:	b29a      	uxth	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a4:	b292      	uxth	r2, r2
 80030a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80030aa:	bf00      	nop
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_PCD_SetAddress+0x1a>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e013      	b.n	80030f4 <HAL_PCD_SetAddress+0x42>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 fd8c 	bl	8007c02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	4608      	mov	r0, r1
 8003106:	4611      	mov	r1, r2
 8003108:	461a      	mov	r2, r3
 800310a:	4603      	mov	r3, r0
 800310c:	70fb      	strb	r3, [r7, #3]
 800310e:	460b      	mov	r3, r1
 8003110:	803b      	strh	r3, [r7, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800311a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800311e:	2b00      	cmp	r3, #0
 8003120:	da0e      	bge.n	8003140 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	705a      	strb	r2, [r3, #1]
 800313e:	e00e      	b.n	800315e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800316a:	883a      	ldrh	r2, [r7, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	78ba      	ldrb	r2, [r7, #2]
 8003174:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	785b      	ldrb	r3, [r3, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003188:	78bb      	ldrb	r3, [r7, #2]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d102      	bne.n	8003194 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_PCD_EP_Open+0xa6>
 800319e:	2302      	movs	r3, #2
 80031a0:	e00e      	b.n	80031c0 <HAL_PCD_EP_Open+0xc4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f002 f89b 	bl	80052ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80031be:	7afb      	ldrb	r3, [r7, #11]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	da0e      	bge.n	80031fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	705a      	strb	r2, [r3, #1]
 80031f8:	e00e      	b.n	8003218 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 0207 	and.w	r2, r3, #7
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_PCD_EP_Close+0x6a>
 800322e:	2302      	movs	r3, #2
 8003230:	e00e      	b.n	8003250 <HAL_PCD_EP_Close+0x88>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68f9      	ldr	r1, [r7, #12]
 8003240:	4618      	mov	r0, r3
 8003242:	f002 fbbd 	bl	80059c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	460b      	mov	r3, r1
 8003266:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003268:	7afb      	ldrb	r3, [r7, #11]
 800326a:	f003 0207 	and.w	r2, r3, #7
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003298:	7afb      	ldrb	r3, [r7, #11]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a4:	7afb      	ldrb	r3, [r7, #11]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6979      	ldr	r1, [r7, #20]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 fd6f 	bl	8005d98 <USB_EPStartXfer>
 80032ba:	e005      	b.n	80032c8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6979      	ldr	r1, [r7, #20]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fd68 	bl	8005d98 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	460b      	mov	r3, r1
 80032e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2201      	movs	r2, #1
 800331c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	b2da      	uxtb	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800332a:	7afb      	ldrb	r3, [r7, #11]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6979      	ldr	r1, [r7, #20]
 800333a:	4618      	mov	r0, r3
 800333c:	f002 fd2c 	bl	8005d98 <USB_EPStartXfer>
 8003340:	e005      	b.n	800334e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6979      	ldr	r1, [r7, #20]
 8003348:	4618      	mov	r0, r3
 800334a:	f002 fd25 	bl	8005d98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 0207 	and.w	r2, r3, #7
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d901      	bls.n	8003376 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e04c      	b.n	8003410 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800337a:	2b00      	cmp	r3, #0
 800337c:	da0e      	bge.n	800339c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	705a      	strb	r2, [r3, #1]
 800339a:	e00c      	b.n	80033b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_PCD_EP_SetStall+0x7e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e01c      	b.n	8003410 <HAL_PCD_EP_SetStall+0xb8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 fb0f 	bl	8007a08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d108      	bne.n	8003406 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f004 fc34 	bl	8007c6e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	d901      	bls.n	8003436 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e040      	b.n	80034b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800343a:	2b00      	cmp	r3, #0
 800343c:	da0e      	bge.n	800345c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	705a      	strb	r2, [r3, #1]
 800345a:	e00e      	b.n	800347a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 0207 	and.w	r2, r3, #7
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_PCD_EP_ClrStall+0x82>
 8003496:	2302      	movs	r3, #2
 8003498:	e00e      	b.n	80034b8 <HAL_PCD_EP_ClrStall+0xa0>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68f9      	ldr	r1, [r7, #12]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 fafd 	bl	8007aa8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	; 0x38
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034c8:	e2ec      	b.n	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80034d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80034e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 8161 	bne.w	80037ac <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d152      	bne.n	800359a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003504:	81fb      	strh	r3, [r7, #14]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003514:	b29b      	uxth	r3, r3
 8003516:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3328      	adds	r3, #40	; 0x28
 800351c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	3302      	adds	r3, #2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	441a      	add	r2, r3
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003558:	2100      	movs	r1, #0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f006 f8c1 	bl	80096e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 829b 	beq.w	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8296 	bne.w	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003584:	b2da      	uxtb	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b292      	uxth	r2, r2
 800358c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003598:	e284      	b.n	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80035aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d034      	beq.n	800361e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035bc:	b29b      	uxth	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	3306      	adds	r3, #6
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f004 fb8b 	bl	8007d0e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29a      	uxth	r2, r3
 8003600:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003604:	4013      	ands	r3, r2
 8003606:	823b      	strh	r3, [r7, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	8a3a      	ldrh	r2, [r7, #16]
 800360e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003612:	b292      	uxth	r2, r2
 8003614:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f006 f836 	bl	8009688 <HAL_PCD_SetupStageCallback>
 800361c:	e242      	b.n	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800361e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003622:	2b00      	cmp	r3, #0
 8003624:	f280 823e 	bge.w	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29a      	uxth	r2, r3
 8003630:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003634:	4013      	ands	r3, r2
 8003636:	83bb      	strh	r3, [r7, #28]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	8bba      	ldrh	r2, [r7, #28]
 800363e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003642:	b292      	uxth	r2, r2
 8003644:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800364e:	b29b      	uxth	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	3306      	adds	r3, #6
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <PCD_EP_ISR_Handler+0x1ee>
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d015      	beq.n	80036ae <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	6959      	ldr	r1, [r3, #20]
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003692:	b29b      	uxth	r3, r3
 8003694:	f004 fb3b 	bl	8007d0e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	441a      	add	r2, r3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80036a6:	2100      	movs	r1, #0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f005 ffff 	bl	80096ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 81f2 	bne.w	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4413      	add	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d112      	bne.n	800370e <PCD_EP_ISR_Handler+0x24e>
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003706:	b29a      	uxth	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	e02f      	b.n	800376e <PCD_EP_ISR_Handler+0x2ae>
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b3e      	cmp	r3, #62	; 0x3e
 8003714:	d813      	bhi.n	800373e <PCD_EP_ISR_Handler+0x27e>
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	633b      	str	r3, [r7, #48]	; 0x30
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <PCD_EP_ISR_Handler+0x270>
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	3301      	adds	r3, #1
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	b29b      	uxth	r3, r3
 8003734:	029b      	lsls	r3, r3, #10
 8003736:	b29a      	uxth	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	801a      	strh	r2, [r3, #0]
 800373c:	e017      	b.n	800376e <PCD_EP_ISR_Handler+0x2ae>
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <PCD_EP_ISR_Handler+0x298>
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	3b01      	subs	r3, #1
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	b29b      	uxth	r3, r3
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	b29b      	uxth	r3, r3
 8003760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003768:	b29a      	uxth	r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	827b      	strh	r3, [r7, #18]
 8003780:	8a7b      	ldrh	r3, [r7, #18]
 8003782:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003786:	827b      	strh	r3, [r7, #18]
 8003788:	8a7b      	ldrh	r3, [r7, #18]
 800378a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800378e:	827b      	strh	r3, [r7, #18]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	8a7b      	ldrh	r3, [r7, #18]
 8003796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]
 80037aa:	e17b      	b.n	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f280 80ea 	bge.w	800399c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037de:	4013      	ands	r3, r2
 80037e0:	853b      	strh	r3, [r7, #40]	; 0x28
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80037f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f6:	b292      	uxth	r2, r2
 80037f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	7b1b      	ldrb	r3, [r3, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d122      	bne.n	800385e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	3306      	adds	r3, #6
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003840:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003842:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8087 	beq.w	8003958 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	6959      	ldr	r1, [r3, #20]
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	88da      	ldrh	r2, [r3, #6]
 8003856:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003858:	f004 fa59 	bl	8007d0e <USB_ReadPMA>
 800385c:	e07c      	b.n	8003958 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	78db      	ldrb	r3, [r3, #3]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d108      	bne.n	8003878 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003866:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003868:	461a      	mov	r2, r3
 800386a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f927 	bl	8003ac0 <HAL_PCD_EP_DB_Receive>
 8003872:	4603      	mov	r3, r0
 8003874:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003876:	e06f      	b.n	8003958 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	847b      	strh	r3, [r7, #34]	; 0x22
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d021      	beq.n	8003916 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	3302      	adds	r3, #2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038fa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80038fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02a      	beq.n	8003958 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	6959      	ldr	r1, [r3, #20]
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	891a      	ldrh	r2, [r3, #8]
 800390e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003910:	f004 f9fd 	bl	8007d0e <USB_ReadPMA>
 8003914:	e020      	b.n	8003958 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800391e:	b29b      	uxth	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	3306      	adds	r3, #6
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800393e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	6959      	ldr	r1, [r3, #20]
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	895a      	ldrh	r2, [r3, #10]
 8003952:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003954:	f004 f9db 	bl	8007d0e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800395e:	441a      	add	r2, r3
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800396a:	441a      	add	r2, r3
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <PCD_EP_ISR_Handler+0x4c2>
 8003978:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d206      	bcs.n	8003990 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f005 fe8f 	bl	80096ac <HAL_PCD_DataOutStageCallback>
 800398e:	e005      	b.n	800399c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003996:	4618      	mov	r0, r3
 8003998:	f002 f9fe 	bl	8005d98 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800399c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d07e      	beq.n	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80039a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d4:	843b      	strh	r3, [r7, #32]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	441a      	add	r2, r3
 80039e4:	8c3b      	ldrh	r3, [r7, #32]
 80039e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	78db      	ldrb	r3, [r3, #3]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d00c      	beq.n	8003a14 <PCD_EP_ISR_Handler+0x554>
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	78db      	ldrb	r3, [r3, #3]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d146      	bne.n	8003a98 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d141      	bne.n	8003a98 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	3302      	adds	r3, #2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	8bfb      	ldrh	r3, [r7, #30]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d906      	bls.n	8003a56 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	8bfb      	ldrh	r3, [r7, #30]
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	619a      	str	r2, [r3, #24]
 8003a54:	e002      	b.n	8003a5c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2200      	movs	r2, #0
 8003a5a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f005 fe39 	bl	80096e2 <HAL_PCD_DataInStageCallback>
 8003a70:	e018      	b.n	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	8bfb      	ldrh	r3, [r7, #30]
 8003a78:	441a      	add	r2, r3
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	8bfb      	ldrh	r3, [r7, #30]
 8003a84:	441a      	add	r2, r3
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 f981 	bl	8005d98 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003a96:	e005      	b.n	8003aa4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f91b 	bl	8003cda <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b21b      	sxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f6ff ad0a 	blt.w	80034ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3738      	adds	r7, #56	; 0x38
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d07e      	beq.n	8003bd6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	3302      	adds	r3, #2
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	8b7b      	ldrh	r3, [r7, #26]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d306      	bcc.n	8003b1a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	8b7b      	ldrh	r3, [r7, #26]
 8003b12:	1ad2      	subs	r2, r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	619a      	str	r2, [r3, #24]
 8003b18:	e002      	b.n	8003b20 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d123      	bne.n	8003b70 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	833b      	strh	r3, [r7, #24]
 8003b44:	8b3b      	ldrh	r3, [r7, #24]
 8003b46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b4a:	833b      	strh	r3, [r7, #24]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	8b3b      	ldrh	r3, [r7, #24]
 8003b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01f      	beq.n	8003bba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b94:	82fb      	strh	r3, [r7, #22]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	8afb      	ldrh	r3, [r7, #22]
 8003ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bba:	8b7b      	ldrh	r3, [r7, #26]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8087 	beq.w	8003cd0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6959      	ldr	r1, [r3, #20]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	891a      	ldrh	r2, [r3, #8]
 8003bce:	8b7b      	ldrh	r3, [r7, #26]
 8003bd0:	f004 f89d 	bl	8007d0e <USB_ReadPMA>
 8003bd4:	e07c      	b.n	8003cd0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	3306      	adds	r3, #6
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	8b7b      	ldrh	r3, [r7, #26]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d306      	bcc.n	8003c18 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	8b7b      	ldrh	r3, [r7, #26]
 8003c10:	1ad2      	subs	r2, r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	619a      	str	r2, [r3, #24]
 8003c16:	e002      	b.n	8003c1e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d123      	bne.n	8003c6e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	83fb      	strh	r3, [r7, #30]
 8003c42:	8bfb      	ldrh	r3, [r7, #30]
 8003c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c48:	83fb      	strh	r3, [r7, #30]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	8bfb      	ldrh	r3, [r7, #30]
 8003c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11f      	bne.n	8003cb8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	83bb      	strh	r3, [r7, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	8bbb      	ldrh	r3, [r7, #28]
 8003ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cb8:	8b7b      	ldrh	r3, [r7, #26]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6959      	ldr	r1, [r3, #20]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	895a      	ldrh	r2, [r3, #10]
 8003cca:	8b7b      	ldrh	r3, [r7, #26]
 8003ccc:	f004 f81f 	bl	8007d0e <USB_ReadPMA>
    }
  }

  return count;
 8003cd0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b0a2      	sub	sp, #136	; 0x88
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 81c7 	beq.w	8004082 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	3302      	adds	r3, #2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d907      	bls.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d34:	1ad2      	subs	r2, r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	619a      	str	r2, [r3, #24]
 8003d3a:	e002      	b.n	8003d42 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 80b9 	bne.w	8003ebe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d126      	bne.n	8003da2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	4413      	add	r3, r2
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	011a      	lsls	r2, r3, #4
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	4413      	add	r3, r2
 8003d76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	801a      	strh	r2, [r3, #0]
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	801a      	strh	r2, [r3, #0]
 8003da0:	e01a      	b.n	8003dd8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d116      	bne.n	8003dd8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	633b      	str	r3, [r7, #48]	; 0x30
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	4413      	add	r3, r2
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	011a      	lsls	r2, r3, #4
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	4413      	add	r3, r2
 8003dcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	623b      	str	r3, [r7, #32]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d126      	bne.n	8003e34 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	011a      	lsls	r2, r3, #4
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	4413      	add	r3, r2
 8003e08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	801a      	strh	r2, [r3, #0]
 8003e32:	e017      	b.n	8003e64 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d113      	bne.n	8003e64 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	623b      	str	r3, [r7, #32]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	011a      	lsls	r2, r3, #4
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	4413      	add	r3, r2
 8003e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2200      	movs	r2, #0
 8003e62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f005 fc39 	bl	80096e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 82d4 	beq.w	8004424 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	827b      	strh	r3, [r7, #18]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	8a7b      	ldrh	r3, [r7, #18]
 8003ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8013      	strh	r3, [r2, #0]
 8003ebc:	e2b2      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d021      	beq.n	8003f0c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	441a      	add	r2, r3
 8003ef4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	f040 8286 	bne.w	8004424 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f20:	441a      	add	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f2e:	441a      	add	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d309      	bcc.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4c:	1ad2      	subs	r2, r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	621a      	str	r2, [r3, #32]
 8003f52:	e015      	b.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003f5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f6a:	e009      	b.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	785b      	ldrb	r3, [r3, #1]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d155      	bne.n	8004034 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	4413      	add	r3, r2
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	011a      	lsls	r2, r3, #4
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	4413      	add	r3, r2
 8003faa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d112      	bne.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x302>
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc4:	801a      	strh	r2, [r3, #0]
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e047      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x392>
 8003fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fde:	2b3e      	cmp	r3, #62	; 0x3e
 8003fe0:	d811      	bhi.n	8004006 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	029b      	lsls	r3, r3, #10
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e032      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x392>
 8004006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
 800400c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <HAL_PCD_EP_DB_Transmit+0x342>
 8004016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004018:	3b01      	subs	r3, #1
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
 800401c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401e:	b29b      	uxth	r3, r3
 8004020:	029b      	lsls	r3, r3, #10
 8004022:	b29b      	uxth	r3, r3
 8004024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402c:	b29a      	uxth	r2, r3
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	e01b      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x392>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d117      	bne.n	800406c <HAL_PCD_EP_DB_Transmit+0x392>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	643b      	str	r3, [r7, #64]	; 0x40
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004050:	4413      	add	r3, r2
 8004052:	643b      	str	r3, [r7, #64]	; 0x40
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	011a      	lsls	r2, r3, #4
 800405a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405c:	4413      	add	r3, r2
 800405e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004066:	b29a      	uxth	r2, r3
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6959      	ldr	r1, [r3, #20]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	891a      	ldrh	r2, [r3, #8]
 8004078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	f003 fe02 	bl	8007c84 <USB_WritePMA>
 8004080:	e1d0      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	3306      	adds	r3, #6
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d307      	bcc.n	80040ca <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040c2:	1ad2      	subs	r2, r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	619a      	str	r2, [r3, #24]
 80040c8:	e002      	b.n	80040d0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 80c4 	bne.w	8004262 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d126      	bne.n	8004130 <HAL_PCD_EP_DB_Transmit+0x456>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	4413      	add	r3, r2
 80040f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	011a      	lsls	r2, r3, #4
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	4413      	add	r3, r2
 8004104:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004108:	66bb      	str	r3, [r7, #104]	; 0x68
 800410a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004114:	b29a      	uxth	r2, r3
 8004116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004128:	b29a      	uxth	r2, r3
 800412a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	e01a      	b.n	8004166 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d116      	bne.n	8004166 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	677b      	str	r3, [r7, #116]	; 0x74
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004146:	b29b      	uxth	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	4413      	add	r3, r2
 800414e:	677b      	str	r3, [r7, #116]	; 0x74
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	011a      	lsls	r2, r3, #4
 8004156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004158:	4413      	add	r3, r2
 800415a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800415e:	673b      	str	r3, [r7, #112]	; 0x70
 8004160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004162:	2200      	movs	r2, #0
 8004164:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	67bb      	str	r3, [r7, #120]	; 0x78
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d12f      	bne.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004184:	b29b      	uxth	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800418c:	4413      	add	r3, r2
 800418e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	011a      	lsls	r2, r3, #4
 8004198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800419c:	4413      	add	r3, r2
 800419e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041d0:	801a      	strh	r2, [r3, #0]
 80041d2:	e017      	b.n	8004204 <HAL_PCD_EP_DB_Transmit+0x52a>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d113      	bne.n	8004204 <HAL_PCD_EP_DB_Transmit+0x52a>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ea:	4413      	add	r3, r2
 80041ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	011a      	lsls	r2, r3, #4
 80041f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f6:	4413      	add	r3, r2
 80041f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004200:	2200      	movs	r2, #0
 8004202:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	4619      	mov	r1, r3
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f005 fa69 	bl	80096e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 8104 	bne.w	8004424 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800424c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425c:	b29b      	uxth	r3, r3
 800425e:	8013      	strh	r3, [r2, #0]
 8004260:	e0e0      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d121      	bne.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	f040 80b4 	bne.w	8004424 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042c4:	441a      	add	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042d2:	441a      	add	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d309      	bcc.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6a1a      	ldr	r2, [r3, #32]
 80042ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f0:	1ad2      	subs	r2, r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	621a      	str	r2, [r3, #32]
 80042f6:	e015      	b.n	8004324 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004300:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004304:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800430e:	e009      	b.n	8004324 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	667b      	str	r3, [r7, #100]	; 0x64
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d155      	bne.n	80043de <HAL_PCD_EP_DB_Transmit+0x704>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004346:	4413      	add	r3, r2
 8004348:	65fb      	str	r3, [r7, #92]	; 0x5c
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	011a      	lsls	r2, r3, #4
 8004350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004352:	4413      	add	r3, r2
 8004354:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004358:	65bb      	str	r3, [r7, #88]	; 0x58
 800435a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435c:	2b00      	cmp	r3, #0
 800435e:	d112      	bne.n	8004386 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800436a:	b29a      	uxth	r2, r3
 800436c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437e:	b29a      	uxth	r2, r3
 8004380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	e044      	b.n	8004410 <HAL_PCD_EP_DB_Transmit+0x736>
 8004386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004388:	2b3e      	cmp	r3, #62	; 0x3e
 800438a:	d811      	bhi.n	80043b0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800438c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	657b      	str	r3, [r7, #84]	; 0x54
 8004392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800439c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439e:	3301      	adds	r3, #1
 80043a0:	657b      	str	r3, [r7, #84]	; 0x54
 80043a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	029b      	lsls	r3, r3, #10
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	e02f      	b.n	8004410 <HAL_PCD_EP_DB_Transmit+0x736>
 80043b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	657b      	str	r3, [r7, #84]	; 0x54
 80043b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80043c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c2:	3b01      	subs	r3, #1
 80043c4:	657b      	str	r3, [r7, #84]	; 0x54
 80043c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	029b      	lsls	r3, r3, #10
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043da:	801a      	strh	r2, [r3, #0]
 80043dc:	e018      	b.n	8004410 <HAL_PCD_EP_DB_Transmit+0x736>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d114      	bne.n	8004410 <HAL_PCD_EP_DB_Transmit+0x736>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f4:	4413      	add	r3, r2
 80043f6:	667b      	str	r3, [r7, #100]	; 0x64
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004400:	4413      	add	r3, r2
 8004402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004406:	663b      	str	r3, [r7, #96]	; 0x60
 8004408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440a:	b29a      	uxth	r2, r3
 800440c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6959      	ldr	r1, [r3, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	895a      	ldrh	r2, [r3, #10]
 800441c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441e:	b29b      	uxth	r3, r3
 8004420:	f003 fc30 	bl	8007c84 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443e:	823b      	strh	r3, [r7, #16]
 8004440:	8a3b      	ldrh	r3, [r7, #16]
 8004442:	f083 0310 	eor.w	r3, r3, #16
 8004446:	823b      	strh	r3, [r7, #16]
 8004448:	8a3b      	ldrh	r3, [r7, #16]
 800444a:	f083 0320 	eor.w	r3, r3, #32
 800444e:	823b      	strh	r3, [r7, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	441a      	add	r2, r3
 800445e:	8a3b      	ldrh	r3, [r7, #16]
 8004460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004470:	b29b      	uxth	r3, r3
 8004472:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3788      	adds	r7, #136	; 0x88
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800447e:	b480      	push	{r7}
 8004480:	b087      	sub	sp, #28
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	817b      	strh	r3, [r7, #10]
 800448c:	4613      	mov	r3, r2
 800448e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004490:	897b      	ldrh	r3, [r7, #10]
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800449c:	897b      	ldrh	r3, [r7, #10]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e009      	b.n	80044c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044b4:	897a      	ldrh	r2, [r7, #10]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044c8:	893b      	ldrh	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	80da      	strh	r2, [r3, #6]
 80044dc:	e00b      	b.n	80044f6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2201      	movs	r2, #1
 80044e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
	...

08004504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e272      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8087 	beq.w	8004632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004524:	4b92      	ldr	r3, [pc, #584]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b04      	cmp	r3, #4
 800452e:	d00c      	beq.n	800454a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004530:	4b8f      	ldr	r3, [pc, #572]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d112      	bne.n	8004562 <HAL_RCC_OscConfig+0x5e>
 800453c:	4b8c      	ldr	r3, [pc, #560]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004548:	d10b      	bne.n	8004562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454a:	4b89      	ldr	r3, [pc, #548]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d06c      	beq.n	8004630 <HAL_RCC_OscConfig+0x12c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d168      	bne.n	8004630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e24c      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x76>
 800456c:	4b80      	ldr	r3, [pc, #512]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a7f      	ldr	r2, [pc, #508]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	e02e      	b.n	80045d8 <HAL_RCC_OscConfig+0xd4>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x98>
 8004582:	4b7b      	ldr	r3, [pc, #492]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a7a      	ldr	r2, [pc, #488]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4b78      	ldr	r3, [pc, #480]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a77      	ldr	r2, [pc, #476]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e01d      	b.n	80045d8 <HAL_RCC_OscConfig+0xd4>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0xbc>
 80045a6:	4b72      	ldr	r3, [pc, #456]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a71      	ldr	r2, [pc, #452]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b6f      	ldr	r3, [pc, #444]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0xd4>
 80045c0:	4b6b      	ldr	r3, [pc, #428]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a6a      	ldr	r2, [pc, #424]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b68      	ldr	r3, [pc, #416]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a67      	ldr	r2, [pc, #412]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fd fa38 	bl	8001a54 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fd fa34 	bl	8001a54 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e200      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b5d      	ldr	r3, [pc, #372]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0xe4>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fd fa24 	bl	8001a54 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd fa20 	bl	8001a54 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1ec      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004622:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x10c>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d063      	beq.n	8004706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800463e:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800464a:	4b49      	ldr	r3, [pc, #292]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b08      	cmp	r3, #8
 8004654:	d11c      	bne.n	8004690 <HAL_RCC_OscConfig+0x18c>
 8004656:	4b46      	ldr	r3, [pc, #280]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d116      	bne.n	8004690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004662:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCC_OscConfig+0x176>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e1c0      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4939      	ldr	r1, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	e03a      	b.n	8004706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fd f9d9 	bl	8001a54 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fd f9d5 	bl	8001a54 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1a1      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b8:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4927      	ldr	r1, [pc, #156]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	e015      	b.n	8004706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b26      	ldr	r3, [pc, #152]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fd f9b8 	bl	8001a54 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e8:	f7fd f9b4 	bl	8001a54 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e180      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03a      	beq.n	8004788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d019      	beq.n	800474e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_RCC_OscConfig+0x274>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004720:	f7fd f998 	bl	8001a54 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004728:	f7fd f994 	bl	8001a54 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e160      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <HAL_RCC_OscConfig+0x26c>)
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004746:	2001      	movs	r0, #1
 8004748:	f000 fad8 	bl	8004cfc <RCC_Delay>
 800474c:	e01c      	b.n	8004788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RCC_OscConfig+0x274>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004754:	f7fd f97e 	bl	8001a54 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475a:	e00f      	b.n	800477c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475c:	f7fd f97a 	bl	8001a54 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d908      	bls.n	800477c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e146      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	42420000 	.word	0x42420000
 8004778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	4b92      	ldr	r3, [pc, #584]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e9      	bne.n	800475c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80a6 	beq.w	80048e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b8b      	ldr	r3, [pc, #556]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10d      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4a87      	ldr	r2, [pc, #540]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	61d3      	str	r3, [r2, #28]
 80047b2:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c2:	4b82      	ldr	r3, [pc, #520]	; (80049cc <HAL_RCC_OscConfig+0x4c8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d118      	bne.n	8004800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ce:	4b7f      	ldr	r3, [pc, #508]	; (80049cc <HAL_RCC_OscConfig+0x4c8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7e      	ldr	r2, [pc, #504]	; (80049cc <HAL_RCC_OscConfig+0x4c8>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047da:	f7fd f93b 	bl	8001a54 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fd f937 	bl	8001a54 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b64      	cmp	r3, #100	; 0x64
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e103      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	4b75      	ldr	r3, [pc, #468]	; (80049cc <HAL_RCC_OscConfig+0x4c8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d106      	bne.n	8004816 <HAL_RCC_OscConfig+0x312>
 8004808:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6213      	str	r3, [r2, #32]
 8004814:	e02d      	b.n	8004872 <HAL_RCC_OscConfig+0x36e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x334>
 800481e:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4a69      	ldr	r2, [pc, #420]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	6213      	str	r3, [r2, #32]
 800482a:	4b67      	ldr	r3, [pc, #412]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	4a66      	ldr	r2, [pc, #408]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	6213      	str	r3, [r2, #32]
 8004836:	e01c      	b.n	8004872 <HAL_RCC_OscConfig+0x36e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b05      	cmp	r3, #5
 800483e:	d10c      	bne.n	800485a <HAL_RCC_OscConfig+0x356>
 8004840:	4b61      	ldr	r3, [pc, #388]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4a60      	ldr	r2, [pc, #384]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004846:	f043 0304 	orr.w	r3, r3, #4
 800484a:	6213      	str	r3, [r2, #32]
 800484c:	4b5e      	ldr	r3, [pc, #376]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	4a5d      	ldr	r2, [pc, #372]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6213      	str	r3, [r2, #32]
 8004858:	e00b      	b.n	8004872 <HAL_RCC_OscConfig+0x36e>
 800485a:	4b5b      	ldr	r3, [pc, #364]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	4a5a      	ldr	r2, [pc, #360]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	6213      	str	r3, [r2, #32]
 8004866:	4b58      	ldr	r3, [pc, #352]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4a57      	ldr	r2, [pc, #348]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d015      	beq.n	80048a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487a:	f7fd f8eb 	bl	8001a54 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	e00a      	b.n	8004898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004882:	f7fd f8e7 	bl	8001a54 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004890:	4293      	cmp	r3, r2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0b1      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004898:	4b4b      	ldr	r3, [pc, #300]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0ee      	beq.n	8004882 <HAL_RCC_OscConfig+0x37e>
 80048a4:	e014      	b.n	80048d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fd f8d5 	bl	8001a54 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fd f8d1 	bl	8001a54 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e09b      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c4:	4b40      	ldr	r3, [pc, #256]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ee      	bne.n	80048ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d6:	4b3c      	ldr	r3, [pc, #240]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8087 	beq.w	80049fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ec:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d061      	beq.n	80049bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d146      	bne.n	800498e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004900:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <HAL_RCC_OscConfig+0x4cc>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fd f8a5 	bl	8001a54 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490e:	f7fd f8a1 	bl	8001a54 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e06d      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004920:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	d108      	bne.n	8004948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4921      	ldr	r1, [pc, #132]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004948:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a19      	ldr	r1, [r3, #32]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	430b      	orrs	r3, r1
 800495a:	491b      	ldr	r1, [pc, #108]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x4cc>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fd f875 	bl	8001a54 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496e:	f7fd f871 	bl	8001a54 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e03d      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x46a>
 800498c:	e035      	b.n	80049fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_OscConfig+0x4cc>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fd f85e 	bl	8001a54 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499c:	f7fd f85a 	bl	8001a54 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e026      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_OscConfig+0x4c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x498>
 80049ba:	e01e      	b.n	80049fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e019      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40007000 	.word	0x40007000
 80049d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_OscConfig+0x500>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d106      	bne.n	80049f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000

08004a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0d0      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d910      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 0207 	bic.w	r2, r3, #7
 8004a32:	4965      	ldr	r1, [pc, #404]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b63      	ldr	r3, [pc, #396]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0b8      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d020      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4a58      	ldr	r2, [pc, #352]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a88:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	494d      	ldr	r1, [pc, #308]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d040      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d115      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e07f      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	4b41      	ldr	r3, [pc, #260]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e073      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	4b3d      	ldr	r3, [pc, #244]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06b      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f023 0203 	bic.w	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4936      	ldr	r1, [pc, #216]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af8:	f7fc ffac 	bl	8001a54 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fc ffa8 	bl	8001a54 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e053      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 020c 	and.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d1eb      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d210      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 0207 	bic.w	r2, r3, #7
 8004b3e:	4922      	ldr	r1, [pc, #136]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e032      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4916      	ldr	r1, [pc, #88]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	490e      	ldr	r1, [pc, #56]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b96:	f000 f821 	bl	8004bdc <HAL_RCC_GetSysClockFreq>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	490a      	ldr	r1, [pc, #40]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	5ccb      	ldrb	r3, [r1, r3]
 8004baa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8004bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fc ff0a 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40022000 	.word	0x40022000
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	0800a550 	.word	0x0800a550
 8004bd4:	20000030 	.word	0x20000030
 8004bd8:	20000034 	.word	0x20000034

08004bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bdc:	b490      	push	{r4, r7}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xac>)
 8004be4:	1d3c      	adds	r4, r7, #4
 8004be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004bec:	f240 2301 	movw	r3, #513	; 0x201
 8004bf0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c06:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d002      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x40>
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d003      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x46>
 8004c1a:	e02b      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c1c:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c1e:	623b      	str	r3, [r7, #32]
      break;
 8004c20:	e02b      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	0c9b      	lsrs	r3, r3, #18
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	3328      	adds	r3, #40	; 0x28
 8004c2c:	443b      	add	r3, r7
 8004c2e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c32:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d012      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	0c5b      	lsrs	r3, r3, #17
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	3328      	adds	r3, #40	; 0x28
 8004c4a:	443b      	add	r3, r7
 8004c4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c56:	fb03 f202 	mul.w	r2, r3, r2
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
 8004c62:	e004      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	623b      	str	r3, [r7, #32]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c76:	623b      	str	r3, [r7, #32]
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3728      	adds	r7, #40	; 0x28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc90      	pop	{r4, r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	0800a4fc 	.word	0x0800a4fc
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	007a1200 	.word	0x007a1200
 8004c94:	003d0900 	.word	0x003d0900

08004c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c9c:	4b02      	ldr	r3, [pc, #8]	; (8004ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	20000030 	.word	0x20000030

08004cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb0:	f7ff fff2 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	0800a560 	.word	0x0800a560

08004cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd8:	f7ff ffde 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	0adb      	lsrs	r3, r3, #11
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	; (8004cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	0800a560 	.word	0x0800a560

08004cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <RCC_Delay+0x34>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <RCC_Delay+0x38>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0a5b      	lsrs	r3, r3, #9
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d18:	bf00      	nop
  }
  while (Delay --);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1e5a      	subs	r2, r3, #1
 8004d1e:	60fa      	str	r2, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f9      	bne.n	8004d18 <RCC_Delay+0x1c>
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr
 8004d30:	20000030 	.word	0x20000030
 8004d34:	10624dd3 	.word	0x10624dd3

08004d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d07d      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d54:	2300      	movs	r3, #0
 8004d56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d58:	4b4f      	ldr	r3, [pc, #316]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10d      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d64:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	4a4b      	ldr	r2, [pc, #300]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	61d3      	str	r3, [r2, #28]
 8004d70:	4b49      	ldr	r3, [pc, #292]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	4b46      	ldr	r3, [pc, #280]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d118      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d8c:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a42      	ldr	r2, [pc, #264]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d98:	f7fc fe5c 	bl	8001a54 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9e:	e008      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da0:	f7fc fe58 	bl	8001a54 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e06d      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db2:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02e      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d027      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ddc:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004de6:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dec:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004df2:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d014      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e02:	f7fc fe27 	bl	8001a54 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e08:	e00a      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fc fe23 	bl	8001a54 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e036      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ee      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4917      	ldr	r1, [pc, #92]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d105      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e44:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	490b      	ldr	r1, [pc, #44]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	4904      	ldr	r1, [pc, #16]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40007000 	.word	0x40007000
 8004ea0:	42420440 	.word	0x42420440

08004ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e03f      	b.n	8004f36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fc fc80 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	; 0x24
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f905 	bl	80050f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b08a      	sub	sp, #40	; 0x28
 8004f42:	af02      	add	r7, sp, #8
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d17c      	bne.n	8005058 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_UART_Transmit+0x2c>
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e075      	b.n	800505a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_UART_Transmit+0x3e>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e06e      	b.n	800505a <HAL_UART_Transmit+0x11c>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2221      	movs	r2, #33	; 0x21
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f92:	f7fc fd5f 	bl	8001a54 <HAL_GetTick>
 8004f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	88fa      	ldrh	r2, [r7, #6]
 8004f9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fac:	d108      	bne.n	8004fc0 <HAL_UART_Transmit+0x82>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	e003      	b.n	8004fc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fd0:	e02a      	b.n	8005028 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2180      	movs	r1, #128	; 0x80
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f840 	bl	8005062 <UART_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e036      	b.n	800505a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005000:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	3302      	adds	r3, #2
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e007      	b.n	800501a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	3301      	adds	r3, #1
 8005018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1cf      	bne.n	8004fd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2200      	movs	r2, #0
 800503a:	2140      	movs	r1, #64	; 0x40
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f810 	bl	8005062 <UART_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e006      	b.n	800505a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	603b      	str	r3, [r7, #0]
 800506e:	4613      	mov	r3, r2
 8005070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005072:	e02c      	b.n	80050ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d028      	beq.n	80050ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <UART_WaitOnFlagUntilTimeout+0x30>
 8005082:	f7fc fce7 	bl	8001a54 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	429a      	cmp	r2, r3
 8005090:	d21d      	bcs.n	80050ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0201 	bic.w	r2, r2, #1
 80050b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e00f      	b.n	80050ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4013      	ands	r3, r2
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	bf0c      	ite	eq
 80050de:	2301      	moveq	r3, #1
 80050e0:	2300      	movne	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d0c3      	beq.n	8005074 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005132:	f023 030c 	bic.w	r3, r3, #12
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	430b      	orrs	r3, r1
 800513e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a2c      	ldr	r2, [pc, #176]	; (800520c <UART_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d103      	bne.n	8005168 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005160:	f7ff fdb8 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	e002      	b.n	800516e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005168:	f7ff fda0 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 800516c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009a      	lsls	r2, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	4a22      	ldr	r2, [pc, #136]	; (8005210 <UART_SetConfig+0x118>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	0119      	lsls	r1, r3, #4
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009a      	lsls	r2, r3, #2
 8005198:	441a      	add	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <UART_SetConfig+0x118>)
 80051a6:	fba3 0302 	umull	r0, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2064      	movs	r0, #100	; 0x64
 80051ae:	fb00 f303 	mul.w	r3, r0, r3
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	3332      	adds	r3, #50	; 0x32
 80051b8:	4a15      	ldr	r2, [pc, #84]	; (8005210 <UART_SetConfig+0x118>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c4:	4419      	add	r1, r3
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009a      	lsls	r2, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <UART_SetConfig+0x118>)
 80051de:	fba3 0302 	umull	r0, r3, r3, r2
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2064      	movs	r0, #100	; 0x64
 80051e6:	fb00 f303 	mul.w	r3, r0, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	3332      	adds	r3, #50	; 0x32
 80051f0:	4a07      	ldr	r2, [pc, #28]	; (8005210 <UART_SetConfig+0x118>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	f003 020f 	and.w	r2, r3, #15
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	440a      	add	r2, r1
 8005202:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40013800 	.word	0x40013800
 8005210:	51eb851f 	.word	0x51eb851f

08005214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005214:	b084      	sub	sp, #16
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	f107 0014 	add.w	r0, r7, #20
 8005222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	b004      	add	sp, #16
 8005232:	4770      	bx	lr

08005234 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005244:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005248:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005268:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800526c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	b29b      	uxth	r3, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	b29b      	uxth	r3, r3
 800527e:	4013      	ands	r3, r2
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052ac:	b084      	sub	sp, #16
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	f107 0014 	add.w	r0, r7, #20
 80052ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	b004      	add	sp, #16
 80052ea:	4770      	bx	lr

080052ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b09b      	sub	sp, #108	; 0x6c
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	78db      	ldrb	r3, [r3, #3]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d81f      	bhi.n	800535e <USB_ActivateEndpoint+0x72>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <USB_ActivateEndpoint+0x38>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005335 	.word	0x08005335
 8005328:	08005351 	.word	0x08005351
 800532c:	08005367 	.word	0x08005367
 8005330:	08005343 	.word	0x08005343
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005334:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005340:	e012      	b.n	8005368 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005342:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005346:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800534a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800534e:	e00b      	b.n	8005368 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005350:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005358:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800535c:	e004      	b.n	8005368 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005364:	e000      	b.n	8005368 <USB_ActivateEndpoint+0x7c>
      break;
 8005366:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005386:	b29b      	uxth	r3, r3
 8005388:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80053bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	7b1b      	ldrb	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f040 8149 	bne.w	800566c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8084 	beq.w	80054ec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	011a      	lsls	r2, r3, #4
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	88db      	ldrh	r3, [r3, #6]
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	81fb      	strh	r3, [r7, #14]
 8005426:	89fb      	ldrh	r3, [r7, #14]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01b      	beq.n	8005468 <USB_ActivateEndpoint+0x17c>
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	81bb      	strh	r3, [r7, #12]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	89bb      	ldrh	r3, [r7, #12]
 8005454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005464:	b29b      	uxth	r3, r3
 8005466:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d020      	beq.n	80054b2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005486:	813b      	strh	r3, [r7, #8]
 8005488:	893b      	ldrh	r3, [r7, #8]
 800548a:	f083 0320 	eor.w	r3, r3, #32
 800548e:	813b      	strh	r3, [r7, #8]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	893b      	ldrh	r3, [r7, #8]
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]
 80054b0:	e27f      	b.n	80059b2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	897b      	ldrh	r3, [r7, #10]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]
 80054ea:	e262      	b.n	80059b2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	4413      	add	r3, r2
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	011a      	lsls	r2, r3, #4
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	4413      	add	r3, r2
 800550a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	88db      	ldrh	r3, [r3, #6]
 8005514:	085b      	lsrs	r3, r3, #1
 8005516:	b29b      	uxth	r3, r3
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552a:	b29b      	uxth	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	4413      	add	r3, r2
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	011a      	lsls	r2, r3, #4
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	4413      	add	r3, r2
 800553e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d112      	bne.n	8005572 <USB_ActivateEndpoint+0x286>
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005556:	b29a      	uxth	r2, r3
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556a:	b29a      	uxth	r2, r3
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	e02f      	b.n	80055d2 <USB_ActivateEndpoint+0x2e6>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b3e      	cmp	r3, #62	; 0x3e
 8005578:	d813      	bhi.n	80055a2 <USB_ActivateEndpoint+0x2b6>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	663b      	str	r3, [r7, #96]	; 0x60
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <USB_ActivateEndpoint+0x2a8>
 800558e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005590:	3301      	adds	r3, #1
 8005592:	663b      	str	r3, [r7, #96]	; 0x60
 8005594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005596:	b29b      	uxth	r3, r3
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	b29a      	uxth	r2, r3
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	801a      	strh	r2, [r3, #0]
 80055a0:	e017      	b.n	80055d2 <USB_ActivateEndpoint+0x2e6>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	663b      	str	r3, [r7, #96]	; 0x60
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <USB_ActivateEndpoint+0x2d0>
 80055b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b8:	3b01      	subs	r3, #1
 80055ba:	663b      	str	r3, [r7, #96]	; 0x60
 80055bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055be:	b29b      	uxth	r3, r3
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	83fb      	strh	r3, [r7, #30]
 80055e0:	8bfb      	ldrh	r3, [r7, #30]
 80055e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01b      	beq.n	8005622 <USB_ActivateEndpoint+0x336>
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	83bb      	strh	r3, [r7, #28]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	8bbb      	ldrh	r3, [r7, #28]
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005638:	837b      	strh	r3, [r7, #26]
 800563a:	8b7b      	ldrh	r3, [r7, #26]
 800563c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005640:	837b      	strh	r3, [r7, #26]
 8005642:	8b7b      	ldrh	r3, [r7, #26]
 8005644:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005648:	837b      	strh	r3, [r7, #26]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	8b7b      	ldrh	r3, [r7, #26]
 8005656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005666:	b29b      	uxth	r3, r3
 8005668:	8013      	strh	r3, [r2, #0]
 800566a:	e1a2      	b.n	80059b2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b8:	4413      	add	r3, r2
 80056ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	011a      	lsls	r2, r3, #4
 80056c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ca:	657b      	str	r3, [r7, #84]	; 0x54
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	891b      	ldrh	r3, [r3, #8]
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056da:	801a      	strh	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	653b      	str	r3, [r7, #80]	; 0x50
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ec:	4413      	add	r3, r2
 80056ee:	653b      	str	r3, [r7, #80]	; 0x50
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	895b      	ldrh	r3, [r3, #10]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	b29b      	uxth	r3, r3
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f040 8091 	bne.w	800583c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005728:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800572a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01b      	beq.n	800576a <USB_ActivateEndpoint+0x47e>
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005748:	877b      	strh	r3, [r7, #58]	; 0x3a
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	441a      	add	r2, r3
 8005754:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	873b      	strh	r3, [r7, #56]	; 0x38
 8005778:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01b      	beq.n	80057ba <USB_ActivateEndpoint+0x4ce>
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005798:	86fb      	strh	r3, [r7, #54]	; 0x36
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	441a      	add	r2, r3
 80057a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80057d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80057d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80057da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80057dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005818:	867b      	strh	r3, [r7, #50]	; 0x32
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	441a      	add	r2, r3
 8005824:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005836:	b29b      	uxth	r3, r3
 8005838:	8013      	strh	r3, [r2, #0]
 800583a:	e0ba      	b.n	80059b2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800584c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01d      	beq.n	8005894 <USB_ActivateEndpoint+0x5a8>
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	441a      	add	r2, r3
 800587c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005890:	b29b      	uxth	r3, r3
 8005892:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80058a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01d      	beq.n	80058ec <USB_ActivateEndpoint+0x600>
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	78db      	ldrb	r3, [r3, #3]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d024      	beq.n	800593e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800590e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005912:	f083 0320 	eor.w	r3, r3, #32
 8005916:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	441a      	add	r2, r3
 8005924:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005938:	b29b      	uxth	r3, r3
 800593a:	8013      	strh	r3, [r2, #0]
 800593c:	e01d      	b.n	800597a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005954:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80059b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	376c      	adds	r7, #108	; 0x6c
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b08d      	sub	sp, #52	; 0x34
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	7b1b      	ldrb	r3, [r3, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 808e 	bne.w	8005af0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d044      	beq.n	8005a66 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	81bb      	strh	r3, [r7, #12]
 80059ea:	89bb      	ldrh	r3, [r7, #12]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <USB_DeactivateEndpoint+0x6c>
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	817b      	strh	r3, [r7, #10]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	897b      	ldrh	r3, [r7, #10]
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	813b      	strh	r3, [r7, #8]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	441a      	add	r2, r3
 8005a4e:	893b      	ldrh	r3, [r7, #8]
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
 8005a64:	e192      	b.n	8005d8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	827b      	strh	r3, [r7, #18]
 8005a74:	8a7b      	ldrh	r3, [r7, #18]
 8005a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01b      	beq.n	8005ab6 <USB_DeactivateEndpoint+0xf6>
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	823b      	strh	r3, [r7, #16]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	8a3b      	ldrh	r3, [r7, #16]
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005acc:	81fb      	strh	r3, [r7, #14]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	441a      	add	r2, r3
 8005ad8:	89fb      	ldrh	r3, [r7, #14]
 8005ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	8013      	strh	r3, [r2, #0]
 8005aee:	e14d      	b.n	8005d8c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f040 80a5 	bne.w	8005c44 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	843b      	strh	r3, [r7, #32]
 8005b08:	8c3b      	ldrh	r3, [r7, #32]
 8005b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d01b      	beq.n	8005b4a <USB_DeactivateEndpoint+0x18a>
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b28:	83fb      	strh	r3, [r7, #30]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	8bfb      	ldrh	r3, [r7, #30]
 8005b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	83bb      	strh	r3, [r7, #28]
 8005b58:	8bbb      	ldrh	r3, [r7, #28]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01b      	beq.n	8005b9a <USB_DeactivateEndpoint+0x1da>
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b78:	837b      	strh	r3, [r7, #26]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	8b7b      	ldrh	r3, [r7, #26]
 8005b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	833b      	strh	r3, [r7, #24]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	8b3b      	ldrh	r3, [r7, #24]
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	82fb      	strh	r3, [r7, #22]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	8afb      	ldrh	r3, [r7, #22]
 8005bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c20:	82bb      	strh	r3, [r7, #20]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	8abb      	ldrh	r3, [r7, #20]
 8005c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	8013      	strh	r3, [r2, #0]
 8005c42:	e0a3      	b.n	8005d8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005c52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01b      	beq.n	8005c94 <USB_DeactivateEndpoint+0x2d4>
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ca2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01b      	beq.n	8005ce4 <USB_DeactivateEndpoint+0x324>
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	441a      	add	r2, r3
 8005cce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	441a      	add	r2, r3
 8005d06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	441a      	add	r2, r3
 8005d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3734      	adds	r7, #52	; 0x34
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b0cc      	sub	sp, #304	; 0x130
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005da6:	6018      	str	r0, [r3, #0]
 8005da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	f041 817d 	bne.w	80070be <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d908      	bls.n	8005df2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005df0:	e007      	b.n	8005e02 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	7b1b      	ldrb	r3, [r3, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d152      	bne.n	8005eb8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6959      	ldr	r1, [r3, #20]
 8005e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	88da      	ldrh	r2, [r3, #6]
 8005e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e34:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e38:	6800      	ldr	r0, [r0, #0]
 8005e3a:	f001 ff23 	bl	8007c84 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e4a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	4619      	mov	r1, r3
 8005e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e70:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	440a      	add	r2, r1
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	011a      	lsls	r2, r3, #4
 8005e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4413      	add	r3, r2
 8005e94:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	f001 b8b5 	b.w	8007022 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	78db      	ldrb	r3, [r3, #3]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	f040 84c6 	bne.w	8006856 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1a      	ldr	r2, [r3, #32]
 8005ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	f240 8443 	bls.w	800676e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	441a      	add	r2, r3
 8005f2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f38:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 823e 	beq.w	8006406 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f96:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 809a 	bne.w	80060e4 <USB_EPStartXfer+0x34c>
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fbc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fe2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	440a      	add	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	011a      	lsls	r2, r3, #4
 8005ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4413      	add	r3, r2
 8006006:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800600a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d122      	bne.n	8006062 <USB_EPStartXfer+0x2ca>
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800602e:	b29a      	uxth	r2, r3
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006040:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006052:	b29a      	uxth	r2, r3
 8006054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006058:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e079      	b.n	8006156 <USB_EPStartXfer+0x3be>
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	2b3e      	cmp	r3, #62	; 0x3e
 8006068:	d81b      	bhi.n	80060a2 <USB_EPStartXfer+0x30a>
 800606a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <USB_EPStartXfer+0x2f2>
 8006080:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006084:	3301      	adds	r3, #1
 8006086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800608a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800608e:	b29b      	uxth	r3, r3
 8006090:	029b      	lsls	r3, r3, #10
 8006092:	b29a      	uxth	r2, r3
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	801a      	strh	r2, [r3, #0]
 80060a0:	e059      	b.n	8006156 <USB_EPStartXfer+0x3be>
 80060a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80060ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <USB_EPStartXfer+0x32a>
 80060b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060bc:	3b01      	subs	r3, #1
 80060be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80060c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	029b      	lsls	r3, r3, #10
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e038      	b.n	8006156 <USB_EPStartXfer+0x3be>
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d130      	bne.n	8006156 <USB_EPStartXfer+0x3be>
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006102:	b29b      	uxth	r3, r3
 8006104:	4619      	mov	r1, r3
 8006106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800610e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006112:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	440a      	add	r2, r1
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	011a      	lsls	r2, r3, #4
 800612a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4413      	add	r3, r2
 8006136:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006148:	b29a      	uxth	r2, r3
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	895b      	ldrh	r3, [r3, #10]
 8006162:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6959      	ldr	r1, [r3, #20]
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006176:	b29b      	uxth	r3, r3
 8006178:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800617c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006180:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006184:	6800      	ldr	r0, [r0, #0]
 8006186:	f001 fd7d 	bl	8007c84 <USB_WritePMA>
            ep->xfer_buff += len;
 800618a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619a:	441a      	add	r2, r3
 800619c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d90f      	bls.n	80061e4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80061c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6a1a      	ldr	r2, [r3, #32]
 80061d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d4:	1ad2      	subs	r2, r2, r3
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	621a      	str	r2, [r3, #32]
 80061e2:	e00e      	b.n	8006202 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80061e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f040 809a 	bne.w	8006348 <USB_EPStartXfer+0x5b0>
 8006214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006218:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800621c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006220:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006236:	b29b      	uxth	r3, r3
 8006238:	4619      	mov	r1, r3
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006242:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006246:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	440a      	add	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	011a      	lsls	r2, r3, #4
 800625e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006262:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4413      	add	r3, r2
 800626a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800626e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006272:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d122      	bne.n	80062c6 <USB_EPStartXfer+0x52e>
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006292:	b29a      	uxth	r2, r3
 8006294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006298:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	e083      	b.n	80063ce <USB_EPStartXfer+0x636>
 80062c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ca:	2b3e      	cmp	r3, #62	; 0x3e
 80062cc:	d81b      	bhi.n	8006306 <USB_EPStartXfer+0x56e>
 80062ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80062d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <USB_EPStartXfer+0x556>
 80062e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062e8:	3301      	adds	r3, #1
 80062ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80062ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	e063      	b.n	80063ce <USB_EPStartXfer+0x636>
 8006306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <USB_EPStartXfer+0x58e>
 800631c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006320:	3b01      	subs	r3, #1
 8006322:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006326:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800632a:	b29b      	uxth	r3, r3
 800632c:	029b      	lsls	r3, r3, #10
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006338:	b29a      	uxth	r2, r3
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	e042      	b.n	80063ce <USB_EPStartXfer+0x636>
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d13a      	bne.n	80063ce <USB_EPStartXfer+0x636>
 8006358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006360:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006364:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637a:	b29b      	uxth	r3, r3
 800637c:	4619      	mov	r1, r3
 800637e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006382:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006386:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800638a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	440a      	add	r2, r1
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	011a      	lsls	r2, r3, #4
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	891b      	ldrh	r3, [r3, #8]
 80063da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6959      	ldr	r1, [r3, #20]
 80063ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80063fc:	6800      	ldr	r0, [r0, #0]
 80063fe:	f001 fc41 	bl	8007c84 <USB_WritePMA>
 8006402:	f000 be0e 	b.w	8007022 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d16d      	bne.n	80064f2 <USB_EPStartXfer+0x75a>
 8006416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	64bb      	str	r3, [r7, #72]	; 0x48
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006430:	b29b      	uxth	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006436:	4413      	add	r3, r2
 8006438:	64bb      	str	r3, [r7, #72]	; 0x48
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	011a      	lsls	r2, r3, #4
 8006448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644a:	4413      	add	r3, r2
 800644c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006450:	647b      	str	r3, [r7, #68]	; 0x44
 8006452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d112      	bne.n	8006480 <USB_EPStartXfer+0x6e8>
 800645a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006464:	b29a      	uxth	r2, r3
 8006466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006478:	b29a      	uxth	r2, r3
 800647a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e063      	b.n	8006548 <USB_EPStartXfer+0x7b0>
 8006480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006484:	2b3e      	cmp	r3, #62	; 0x3e
 8006486:	d817      	bhi.n	80064b8 <USB_EPStartXfer+0x720>
 8006488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <USB_EPStartXfer+0x710>
 800649e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80064a2:	3301      	adds	r3, #1
 80064a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80064a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	029b      	lsls	r3, r3, #10
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e047      	b.n	8006548 <USB_EPStartXfer+0x7b0>
 80064b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80064c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <USB_EPStartXfer+0x740>
 80064ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80064d2:	3b01      	subs	r3, #1
 80064d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80064d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e02a      	b.n	8006548 <USB_EPStartXfer+0x7b0>
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d122      	bne.n	8006548 <USB_EPStartXfer+0x7b0>
 8006502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	653b      	str	r3, [r7, #80]	; 0x50
 800650e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651c:	b29b      	uxth	r3, r3
 800651e:	461a      	mov	r2, r3
 8006520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006522:	4413      	add	r3, r2
 8006524:	653b      	str	r3, [r7, #80]	; 0x50
 8006526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	011a      	lsls	r2, r3, #4
 8006534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006536:	4413      	add	r3, r2
 8006538:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800653c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006542:	b29a      	uxth	r2, r3
 8006544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006546:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	891b      	ldrh	r3, [r3, #8]
 8006554:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6959      	ldr	r1, [r3, #20]
 8006564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006568:	b29b      	uxth	r3, r3
 800656a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800656e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006572:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006576:	6800      	ldr	r0, [r0, #0]
 8006578:	f001 fb84 	bl	8007c84 <USB_WritePMA>
            ep->xfer_buff += len;
 800657c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695a      	ldr	r2, [r3, #20]
 8006588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658c:	441a      	add	r2, r3
 800658e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d90f      	bls.n	80065d6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	621a      	str	r2, [r3, #32]
 80065d4:	e00e      	b.n	80065f4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80065d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80065e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2200      	movs	r2, #0
 80065f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d16d      	bne.n	80066ec <USB_EPStartXfer+0x954>
 8006610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	63bb      	str	r3, [r7, #56]	; 0x38
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	4413      	add	r3, r2
 8006632:	63bb      	str	r3, [r7, #56]	; 0x38
 8006634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	011a      	lsls	r2, r3, #4
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	4413      	add	r3, r2
 8006646:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
 800664c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d112      	bne.n	800667a <USB_EPStartXfer+0x8e2>
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800665e:	b29a      	uxth	r2, r3
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006672:	b29a      	uxth	r2, r3
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e05d      	b.n	8006736 <USB_EPStartXfer+0x99e>
 800667a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667e:	2b3e      	cmp	r3, #62	; 0x3e
 8006680:	d817      	bhi.n	80066b2 <USB_EPStartXfer+0x91a>
 8006682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800668c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <USB_EPStartXfer+0x90a>
 8006698:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800669c:	3301      	adds	r3, #1
 800669e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80066a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	e041      	b.n	8006736 <USB_EPStartXfer+0x99e>
 80066b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80066bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <USB_EPStartXfer+0x93a>
 80066c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066cc:	3b01      	subs	r3, #1
 80066ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80066d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	029b      	lsls	r3, r3, #10
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e024      	b.n	8006736 <USB_EPStartXfer+0x99e>
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d11c      	bne.n	8006736 <USB_EPStartXfer+0x99e>
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006710:	4413      	add	r3, r2
 8006712:	643b      	str	r3, [r7, #64]	; 0x40
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	011a      	lsls	r2, r3, #4
 8006722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006724:	4413      	add	r3, r2
 8006726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	b29a      	uxth	r2, r3
 8006732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006734:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	895b      	ldrh	r3, [r3, #10]
 8006742:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6959      	ldr	r1, [r3, #20]
 8006752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006756:	b29b      	uxth	r3, r3
 8006758:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800675c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006760:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006764:	6800      	ldr	r0, [r0, #0]
 8006766:	f001 fa8d 	bl	8007c84 <USB_WritePMA>
 800676a:	f000 bc5a 	b.w	8007022 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800676e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067fa:	4413      	add	r3, r2
 80067fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	011a      	lsls	r2, r3, #4
 800680c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800680e:	4413      	add	r3, r2
 8006810:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006814:	65bb      	str	r3, [r7, #88]	; 0x58
 8006816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800681a:	b29a      	uxth	r2, r3
 800681c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800681e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	891b      	ldrh	r3, [r3, #8]
 800682c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6959      	ldr	r1, [r3, #20]
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	b29b      	uxth	r3, r3
 8006842:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006846:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800684a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	f001 fa18 	bl	8007c84 <USB_WritePMA>
 8006854:	e3e5      	b.n	8007022 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80068b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6a1a      	ldr	r2, [r3, #32]
 80068be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 81bc 	beq.w	8006c70 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d16d      	bne.n	80069f2 <USB_EPStartXfer+0xc5a>
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	67bb      	str	r3, [r7, #120]	; 0x78
 8006922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006930:	b29b      	uxth	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006936:	4413      	add	r3, r2
 8006938:	67bb      	str	r3, [r7, #120]	; 0x78
 800693a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	011a      	lsls	r2, r3, #4
 8006948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694a:	4413      	add	r3, r2
 800694c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006950:	677b      	str	r3, [r7, #116]	; 0x74
 8006952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d112      	bne.n	8006980 <USB_EPStartXfer+0xbe8>
 800695a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006964:	b29a      	uxth	r2, r3
 8006966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006978:	b29a      	uxth	r2, r3
 800697a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	e060      	b.n	8006a42 <USB_EPStartXfer+0xcaa>
 8006980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006984:	2b3e      	cmp	r3, #62	; 0x3e
 8006986:	d817      	bhi.n	80069b8 <USB_EPStartXfer+0xc20>
 8006988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <USB_EPStartXfer+0xc10>
 800699e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069a2:	3301      	adds	r3, #1
 80069a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80069a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	029b      	lsls	r3, r3, #10
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b4:	801a      	strh	r2, [r3, #0]
 80069b6:	e044      	b.n	8006a42 <USB_EPStartXfer+0xcaa>
 80069b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80069c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <USB_EPStartXfer+0xc40>
 80069ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069d2:	3b01      	subs	r3, #1
 80069d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80069d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069dc:	b29b      	uxth	r3, r3
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	e027      	b.n	8006a42 <USB_EPStartXfer+0xcaa>
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d11f      	bne.n	8006a42 <USB_EPStartXfer+0xcaa>
 8006a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a18:	4413      	add	r3, r2
 8006a1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	011a      	lsls	r2, r3, #4
 8006a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a30:	4413      	add	r3, r2
 8006a32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	895b      	ldrh	r3, [r3, #10]
 8006a4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6959      	ldr	r1, [r3, #20]
 8006a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a70:	6800      	ldr	r0, [r0, #0]
 8006a72:	f001 f907 	bl	8007c84 <USB_WritePMA>
          ep->xfer_buff += len;
 8006a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695a      	ldr	r2, [r3, #20]
 8006a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a86:	441a      	add	r2, r3
 8006a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d90f      	bls.n	8006ad0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac0:	1ad2      	subs	r2, r2, r3
 8006ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	621a      	str	r2, [r3, #32]
 8006ace:	e00e      	b.n	8006aee <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8295 	beq.w	8007022 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d16d      	bne.n	8006be4 <USB_EPStartXfer+0xe4c>
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b28:	4413      	add	r3, r2
 8006b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	011a      	lsls	r2, r3, #4
 8006b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b42:	667b      	str	r3, [r7, #100]	; 0x64
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d112      	bne.n	8006b72 <USB_EPStartXfer+0xdda>
 8006b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	e063      	b.n	8006c3a <USB_EPStartXfer+0xea2>
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	2b3e      	cmp	r3, #62	; 0x3e
 8006b78:	d817      	bhi.n	8006baa <USB_EPStartXfer+0xe12>
 8006b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <USB_EPStartXfer+0xe02>
 8006b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b94:	3301      	adds	r3, #1
 8006b96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	029b      	lsls	r3, r3, #10
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e047      	b.n	8006c3a <USB_EPStartXfer+0xea2>
 8006baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <USB_EPStartXfer+0xe32>
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e02a      	b.n	8006c3a <USB_EPStartXfer+0xea2>
 8006be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d122      	bne.n	8006c3a <USB_EPStartXfer+0xea2>
 8006bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8006c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c14:	4413      	add	r3, r2
 8006c16:	673b      	str	r3, [r7, #112]	; 0x70
 8006c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	011a      	lsls	r2, r3, #4
 8006c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	891b      	ldrh	r3, [r3, #8]
 8006c46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6959      	ldr	r1, [r3, #20]
 8006c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c60:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c64:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c68:	6800      	ldr	r0, [r0, #0]
 8006c6a:	f001 f80b 	bl	8007c84 <USB_WritePMA>
 8006c6e:	e1d8      	b.n	8007022 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d178      	bne.n	8006d72 <USB_EPStartXfer+0xfda>
 8006c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	011a      	lsls	r2, r3, #4
 8006cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d116      	bne.n	8006cfc <USB_EPStartXfer+0xf64>
 8006cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	e06b      	b.n	8006dd4 <USB_EPStartXfer+0x103c>
 8006cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d00:	2b3e      	cmp	r3, #62	; 0x3e
 8006d02:	d818      	bhi.n	8006d36 <USB_EPStartXfer+0xf9e>
 8006d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <USB_EPStartXfer+0xf8c>
 8006d1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d1e:	3301      	adds	r3, #1
 8006d20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006d24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	029b      	lsls	r3, r3, #10
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	e04e      	b.n	8006dd4 <USB_EPStartXfer+0x103c>
 8006d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d44:	f003 031f 	and.w	r3, r3, #31
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <USB_EPStartXfer+0xfbe>
 8006d4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d50:	3b01      	subs	r3, #1
 8006d52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006d56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d6e:	801a      	strh	r2, [r3, #0]
 8006d70:	e030      	b.n	8006dd4 <USB_EPStartXfer+0x103c>
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d128      	bne.n	8006dd4 <USB_EPStartXfer+0x103c>
 8006d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006da6:	4413      	add	r3, r2
 8006da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	011a      	lsls	r2, r3, #4
 8006dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dd2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	891b      	ldrh	r3, [r3, #8]
 8006de0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6959      	ldr	r1, [r3, #20]
 8006df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dfa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006dfe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e02:	6800      	ldr	r0, [r0, #0]
 8006e04:	f000 ff3e 	bl	8007c84 <USB_WritePMA>
          ep->xfer_buff += len;
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695a      	ldr	r2, [r3, #20]
 8006e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e18:	441a      	add	r2, r3
 8006e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a1a      	ldr	r2, [r3, #32]
 8006e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d90f      	bls.n	8006e62 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e52:	1ad2      	subs	r2, r2, r3
 8006e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	621a      	str	r2, [r3, #32]
 8006e60:	e00e      	b.n	8006e80 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80cc 	beq.w	8007022 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d178      	bne.n	8006f9a <USB_EPStartXfer+0x1202>
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ecc:	4413      	add	r3, r2
 8006ece:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	011a      	lsls	r2, r3, #4
 8006ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d116      	bne.n	8006f24 <USB_EPStartXfer+0x118c>
 8006ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f08:	801a      	strh	r2, [r3, #0]
 8006f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e064      	b.n	8006fee <USB_EPStartXfer+0x1256>
 8006f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f28:	2b3e      	cmp	r3, #62	; 0x3e
 8006f2a:	d818      	bhi.n	8006f5e <USB_EPStartXfer+0x11c6>
 8006f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <USB_EPStartXfer+0x11b4>
 8006f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f46:	3301      	adds	r3, #1
 8006f48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	029b      	lsls	r3, r3, #10
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	e047      	b.n	8006fee <USB_EPStartXfer+0x1256>
 8006f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <USB_EPStartXfer+0x11e6>
 8006f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	029b      	lsls	r3, r3, #10
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f96:	801a      	strh	r2, [r3, #0]
 8006f98:	e029      	b.n	8006fee <USB_EPStartXfer+0x1256>
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d121      	bne.n	8006fee <USB_EPStartXfer+0x1256>
 8006faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	011a      	lsls	r2, r3, #4
 8006fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd8:	4413      	add	r3, r2
 8006fda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	895b      	ldrh	r3, [r3, #10]
 8006ffa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6959      	ldr	r1, [r3, #20]
 800700a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700e:	b29b      	uxth	r3, r3
 8007010:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007014:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007018:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f000 fe31 	bl	8007c84 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007044:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007050:	8013      	strh	r3, [r2, #0]
 8007052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007056:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800705a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800705e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007062:	8812      	ldrh	r2, [r2, #0]
 8007064:	f082 0210 	eor.w	r2, r2, #16
 8007068:	801a      	strh	r2, [r3, #0]
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007072:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007076:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800707a:	8812      	ldrh	r2, [r2, #0]
 800707c:	f082 0220 	eor.w	r2, r2, #32
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	441a      	add	r2, r3
 800709c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	8013      	strh	r3, [r2, #0]
 80070ba:	f000 bc9f 	b.w	80079fc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	7b1b      	ldrb	r3, [r3, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 80ae 	bne.w	800722c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d917      	bls.n	800711c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	1ad2      	subs	r2, r2, r3
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	619a      	str	r2, [r3, #24]
 800711a:	e00e      	b.n	800713a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800711c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800712c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2200      	movs	r2, #0
 8007138:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800715e:	4413      	add	r3, r2
 8007160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	011a      	lsls	r2, r3, #4
 8007172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007176:	4413      	add	r3, r2
 8007178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800717c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d116      	bne.n	80071b6 <USB_EPStartXfer+0x141e>
 8007188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	e3e8      	b.n	8007988 <USB_EPStartXfer+0x1bf0>
 80071b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ba:	2b3e      	cmp	r3, #62	; 0x3e
 80071bc:	d818      	bhi.n	80071f0 <USB_EPStartXfer+0x1458>
 80071be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <USB_EPStartXfer+0x1446>
 80071d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071d8:	3301      	adds	r3, #1
 80071da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	029b      	lsls	r3, r3, #10
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	e3cb      	b.n	8007988 <USB_EPStartXfer+0x1bf0>
 80071f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	2b00      	cmp	r3, #0
 8007204:	d104      	bne.n	8007210 <USB_EPStartXfer+0x1478>
 8007206:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800720a:	3b01      	subs	r3, #1
 800720c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007210:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007214:	b29b      	uxth	r3, r3
 8007216:	029b      	lsls	r3, r3, #10
 8007218:	b29b      	uxth	r3, r3
 800721a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007222:	b29a      	uxth	r2, r3
 8007224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e3ad      	b.n	8007988 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800722c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	78db      	ldrb	r3, [r3, #3]
 8007238:	2b02      	cmp	r3, #2
 800723a:	f040 8200 	bne.w	800763e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f040 8091 	bne.w	8007372 <USB_EPStartXfer+0x15da>
 8007250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800725e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726c:	b29b      	uxth	r3, r3
 800726e:	461a      	mov	r2, r3
 8007270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007274:	4413      	add	r3, r2
 8007276:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800727a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	011a      	lsls	r2, r3, #4
 8007288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800728c:	4413      	add	r3, r2
 800728e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d116      	bne.n	80072d4 <USB_EPStartXfer+0x153c>
 80072a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	e083      	b.n	80073dc <USB_EPStartXfer+0x1644>
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b3e      	cmp	r3, #62	; 0x3e
 80072e2:	d820      	bhi.n	8007326 <USB_EPStartXfer+0x158e>
 80072e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <USB_EPStartXfer+0x157c>
 800730a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730e:	3301      	adds	r3, #1
 8007310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007318:	b29b      	uxth	r3, r3
 800731a:	029b      	lsls	r3, r3, #10
 800731c:	b29a      	uxth	r2, r3
 800731e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e05a      	b.n	80073dc <USB_EPStartXfer+0x1644>
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	2b00      	cmp	r3, #0
 800734a:	d104      	bne.n	8007356 <USB_EPStartXfer+0x15be>
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007350:	3b01      	subs	r3, #1
 8007352:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735a:	b29b      	uxth	r3, r3
 800735c:	029b      	lsls	r3, r3, #10
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	e034      	b.n	80073dc <USB_EPStartXfer+0x1644>
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d12c      	bne.n	80073dc <USB_EPStartXfer+0x1644>
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073a6:	4413      	add	r3, r2
 80073a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	011a      	lsls	r2, r3, #4
 80073ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073be:	4413      	add	r3, r2
 80073c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	785b      	ldrb	r3, [r3, #1]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f040 8091 	bne.w	800751e <USB_EPStartXfer+0x1786>
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800740a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007418:	b29b      	uxth	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007420:	4413      	add	r3, r2
 8007422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	011a      	lsls	r2, r3, #4
 8007434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007438:	4413      	add	r3, r2
 800743a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800743e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d116      	bne.n	8007480 <USB_EPStartXfer+0x16e8>
 8007452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800745e:	b29a      	uxth	r2, r3
 8007460:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29b      	uxth	r3, r3
 800746e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007476:	b29a      	uxth	r2, r3
 8007478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	e07c      	b.n	800757a <USB_EPStartXfer+0x17e2>
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b3e      	cmp	r3, #62	; 0x3e
 800748e:	d820      	bhi.n	80074d2 <USB_EPStartXfer+0x173a>
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80074a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d004      	beq.n	80074c0 <USB_EPStartXfer+0x1728>
 80074b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80074ba:	3301      	adds	r3, #1
 80074bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80074c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	029b      	lsls	r3, r3, #10
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074ce:	801a      	strh	r2, [r3, #0]
 80074d0:	e053      	b.n	800757a <USB_EPStartXfer+0x17e2>
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80074e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <USB_EPStartXfer+0x176a>
 80074f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80074fc:	3b01      	subs	r3, #1
 80074fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007502:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007506:	b29b      	uxth	r3, r3
 8007508:	029b      	lsls	r3, r3, #10
 800750a:	b29b      	uxth	r3, r3
 800750c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e02d      	b.n	800757a <USB_EPStartXfer+0x17e2>
 800751e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	785b      	ldrb	r3, [r3, #1]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d125      	bne.n	800757a <USB_EPStartXfer+0x17e2>
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800753c:	b29b      	uxth	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007544:	4413      	add	r3, r2
 8007546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	011a      	lsls	r2, r3, #4
 8007558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800755c:	4413      	add	r3, r2
 800755e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	b29a      	uxth	r2, r3
 8007574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007578:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 81fe 	beq.w	8007988 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800758c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80075b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <USB_EPStartXfer+0x182c>
 80075b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10d      	bne.n	80075e0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80075c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f040 81db 	bne.w	8007988 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f040 81d4 	bne.w	8007988 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80075e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800760a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	441a      	add	r2, r3
 8007624:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800762c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007638:	b29b      	uxth	r3, r3
 800763a:	8013      	strh	r3, [r2, #0]
 800763c:	e1a4      	b.n	8007988 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800763e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	78db      	ldrb	r3, [r3, #3]
 800764a:	2b01      	cmp	r3, #1
 800764c:	f040 819a 	bne.w	8007984 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699a      	ldr	r2, [r3, #24]
 800765c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	429a      	cmp	r2, r3
 800766a:	d917      	bls.n	800769c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800766c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800767c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768c:	1ad2      	subs	r2, r2, r3
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	619a      	str	r2, [r3, #24]
 800769a:	e00e      	b.n	80076ba <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800769c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80076ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2200      	movs	r2, #0
 80076b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d178      	bne.n	80077bc <USB_EPStartXfer+0x1a24>
 80076ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076ee:	4413      	add	r3, r2
 80076f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	011a      	lsls	r2, r3, #4
 8007702:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007706:	4413      	add	r3, r2
 8007708:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800770c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d116      	bne.n	8007746 <USB_EPStartXfer+0x19ae>
 8007718:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007724:	b29a      	uxth	r2, r3
 8007726:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	e06b      	b.n	800781e <USB_EPStartXfer+0x1a86>
 8007746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774a:	2b3e      	cmp	r3, #62	; 0x3e
 800774c:	d818      	bhi.n	8007780 <USB_EPStartXfer+0x19e8>
 800774e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <USB_EPStartXfer+0x19d6>
 8007764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007768:	3301      	adds	r3, #1
 800776a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800776e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007772:	b29b      	uxth	r3, r3
 8007774:	029b      	lsls	r3, r3, #10
 8007776:	b29a      	uxth	r2, r3
 8007778:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e04e      	b.n	800781e <USB_EPStartXfer+0x1a86>
 8007780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800778a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	2b00      	cmp	r3, #0
 8007794:	d104      	bne.n	80077a0 <USB_EPStartXfer+0x1a08>
 8007796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800779a:	3b01      	subs	r3, #1
 800779c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	029b      	lsls	r3, r3, #10
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077b8:	801a      	strh	r2, [r3, #0]
 80077ba:	e030      	b.n	800781e <USB_EPStartXfer+0x1a86>
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	785b      	ldrb	r3, [r3, #1]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d128      	bne.n	800781e <USB_EPStartXfer+0x1a86>
 80077cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	4413      	add	r3, r2
 80077f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	011a      	lsls	r2, r3, #4
 8007804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007808:	4413      	add	r3, r2
 800780a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800780e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007816:	b29a      	uxth	r2, r3
 8007818:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800782c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d178      	bne.n	800792e <USB_EPStartXfer+0x1b96>
 800783c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800784a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007860:	4413      	add	r3, r2
 8007862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	011a      	lsls	r2, r3, #4
 8007874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007878:	4413      	add	r3, r2
 800787a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800787e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d116      	bne.n	80078b8 <USB_EPStartXfer+0x1b20>
 800788a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007896:	b29a      	uxth	r2, r3
 8007898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800789c:	801a      	strh	r2, [r3, #0]
 800789e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	e067      	b.n	8007988 <USB_EPStartXfer+0x1bf0>
 80078b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078bc:	2b3e      	cmp	r3, #62	; 0x3e
 80078be:	d818      	bhi.n	80078f2 <USB_EPStartXfer+0x1b5a>
 80078c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c4:	085b      	lsrs	r3, r3, #1
 80078c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d004      	beq.n	80078e0 <USB_EPStartXfer+0x1b48>
 80078d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078da:	3301      	adds	r3, #1
 80078dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	e04a      	b.n	8007988 <USB_EPStartXfer+0x1bf0>
 80078f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <USB_EPStartXfer+0x1b7a>
 8007908:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800790c:	3b01      	subs	r3, #1
 800790e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007916:	b29b      	uxth	r3, r3
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	b29b      	uxth	r3, r3
 800791c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007924:	b29a      	uxth	r2, r3
 8007926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	e02c      	b.n	8007988 <USB_EPStartXfer+0x1bf0>
 800792e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	785b      	ldrb	r3, [r3, #1]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d124      	bne.n	8007988 <USB_EPStartXfer+0x1bf0>
 800793e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007942:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	4413      	add	r3, r2
 8007956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800795a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	011a      	lsls	r2, r3, #4
 8007968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796c:	4413      	add	r3, r2
 800796e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007972:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797a:	b29a      	uxth	r2, r3
 800797c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	e001      	b.n	8007988 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e03a      	b.n	80079fe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80079b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80079b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80079be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80079c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80079ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	441a      	add	r2, r3
 80079e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80079e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d020      	beq.n	8007a5c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a30:	81bb      	strh	r3, [r7, #12]
 8007a32:	89bb      	ldrh	r3, [r7, #12]
 8007a34:	f083 0310 	eor.w	r3, r3, #16
 8007a38:	81bb      	strh	r3, [r7, #12]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	441a      	add	r2, r3
 8007a44:	89bb      	ldrh	r3, [r7, #12]
 8007a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	8013      	strh	r3, [r2, #0]
 8007a5a:	e01f      	b.n	8007a9c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a72:	81fb      	strh	r3, [r7, #14]
 8007a74:	89fb      	ldrh	r3, [r7, #14]
 8007a76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a7a:	81fb      	strh	r3, [r7, #14]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	441a      	add	r2, r3
 8007a86:	89fb      	ldrh	r3, [r7, #14]
 8007a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	7b1b      	ldrb	r3, [r3, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f040 809d 	bne.w	8007bf6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d04c      	beq.n	8007b5e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	823b      	strh	r3, [r7, #16]
 8007ad2:	8a3b      	ldrh	r3, [r7, #16]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01b      	beq.n	8007b14 <USB_EPClearStall+0x6c>
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af2:	81fb      	strh	r3, [r7, #14]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	441a      	add	r2, r3
 8007afe:	89fb      	ldrh	r3, [r7, #14]
 8007b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	78db      	ldrb	r3, [r3, #3]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d06c      	beq.n	8007bf6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b32:	81bb      	strh	r3, [r7, #12]
 8007b34:	89bb      	ldrh	r3, [r7, #12]
 8007b36:	f083 0320 	eor.w	r3, r3, #32
 8007b3a:	81bb      	strh	r3, [r7, #12]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	441a      	add	r2, r3
 8007b46:	89bb      	ldrh	r3, [r7, #12]
 8007b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	8013      	strh	r3, [r2, #0]
 8007b5c:	e04b      	b.n	8007bf6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	82fb      	strh	r3, [r7, #22]
 8007b6c:	8afb      	ldrh	r3, [r7, #22]
 8007b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01b      	beq.n	8007bae <USB_EPClearStall+0x106>
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8c:	82bb      	strh	r3, [r7, #20]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	441a      	add	r2, r3
 8007b98:	8abb      	ldrh	r3, [r7, #20]
 8007b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc4:	827b      	strh	r3, [r7, #18]
 8007bc6:	8a7b      	ldrh	r3, [r7, #18]
 8007bc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bcc:	827b      	strh	r3, [r7, #18]
 8007bce:	8a7b      	ldrh	r3, [r7, #18]
 8007bd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bd4:	827b      	strh	r3, [r7, #18]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	441a      	add	r2, r3
 8007be0:	8a7b      	ldrh	r3, [r7, #18]
 8007be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr

08007c02 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d103      	bne.n	8007c1c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2280      	movs	r2, #128	; 0x80
 8007c18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr

08007c50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c62:	68fb      	ldr	r3, [r7, #12]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr

08007c6e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b08d      	sub	sp, #52	; 0x34
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	460b      	mov	r3, r1
 8007c94:	80fb      	strh	r3, [r7, #6]
 8007c96:	4613      	mov	r3, r2
 8007c98:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c9a:	88bb      	ldrh	r3, [r7, #4]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	085b      	lsrs	r3, r3, #1
 8007ca0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	005a      	lsls	r2, r3, #1
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cbc:	e01e      	b.n	8007cfc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	3302      	adds	r3, #2
 8007ce8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	3302      	adds	r3, #2
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1dd      	bne.n	8007cbe <USB_WritePMA+0x3a>
  }
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	3734      	adds	r7, #52	; 0x34
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr

08007d0e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b08b      	sub	sp, #44	; 0x2c
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	80fb      	strh	r3, [r7, #6]
 8007d20:	4613      	mov	r3, r2
 8007d22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d24:	88bb      	ldrh	r3, [r7, #4]
 8007d26:	085b      	lsrs	r3, r3, #1
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	005a      	lsls	r2, r3, #1
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d40:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
 8007d46:	e01b      	b.n	8007d80 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	3302      	adds	r3, #2
 8007d54:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	3301      	adds	r3, #1
 8007d62:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	3301      	adds	r3, #1
 8007d72:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	3302      	adds	r3, #2
 8007d78:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e0      	bne.n	8007d48 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007d86:	88bb      	ldrh	r3, [r7, #4]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	701a      	strb	r2, [r3, #0]
  }
}
 8007da2:	bf00      	nop
 8007da4:	372c      	adds	r7, #44	; 0x2c
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr

08007dac <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	2181      	movs	r1, #129	; 0x81
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fd67 	bl	8009896 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007dce:	2302      	movs	r3, #2
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fd5e 	bl	8009896 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007de2:	2054      	movs	r0, #84	; 0x54
 8007de4:	f001 fe6c 	bl	8009ac0 <USBD_static_malloc>
 8007de8:	4602      	mov	r2, r0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d102      	bne.n	8007e00 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	73fb      	strb	r3, [r7, #15]
 8007dfe:	e012      	b.n	8007e26 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e06:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	2101      	movs	r1, #1
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fe29 	bl	8009a78 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007e3c:	2181      	movs	r1, #129	; 0x81
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 fd4f 	bl	80098e2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fd48 	bl	80098e2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00e      	beq.n	8007e82 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fe2f 	bl	8009ad8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d051      	beq.n	8007f5e <USBD_CUSTOM_HID_Setup+0xd2>
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	f040 80d8 	bne.w	8008070 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	3b02      	subs	r3, #2
 8007ec6:	2b09      	cmp	r3, #9
 8007ec8:	d841      	bhi.n	8007f4e <USBD_CUSTOM_HID_Setup+0xc2>
 8007eca:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <USBD_CUSTOM_HID_Setup+0x44>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007f29 	.word	0x08007f29
 8007ed4:	08007f07 	.word	0x08007f07
 8007ed8:	08007f4f 	.word	0x08007f4f
 8007edc:	08007f4f 	.word	0x08007f4f
 8007ee0:	08007f4f 	.word	0x08007f4f
 8007ee4:	08007f4f 	.word	0x08007f4f
 8007ee8:	08007f4f 	.word	0x08007f4f
 8007eec:	08007f39 	.word	0x08007f39
 8007ef0:	08007f17 	.word	0x08007f17
 8007ef4:	08007ef9 	.word	0x08007ef9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	885b      	ldrh	r3, [r3, #2]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8007f04:	e02a      	b.n	8007f5c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	3340      	adds	r3, #64	; 0x40
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 f999 	bl	8009246 <USBD_CtlSendData>
          break;
 8007f14:	e022      	b.n	8007f5c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8007f26:	e019      	b.n	8007f5c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	3344      	adds	r3, #68	; 0x44
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f988 	bl	8009246 <USBD_CtlSendData>
          break;
 8007f36:	e011      	b.n	8007f5c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007f3e:	6939      	ldr	r1, [r7, #16]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	88db      	ldrh	r3, [r3, #6]
 8007f44:	461a      	mov	r2, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 f9ab 	bl	80092a2 <USBD_CtlPrepareRx>
          break;
 8007f4c:	e006      	b.n	8007f5c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f90e 	bl	8009172 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f56:	2302      	movs	r3, #2
 8007f58:	75fb      	strb	r3, [r7, #23]
          break;
 8007f5a:	bf00      	nop
      }
      break;
 8007f5c:	e08f      	b.n	800807e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b0b      	cmp	r3, #11
 8007f64:	d87c      	bhi.n	8008060 <USBD_CUSTOM_HID_Setup+0x1d4>
 8007f66:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <USBD_CUSTOM_HID_Setup+0xe0>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007f9d 	.word	0x08007f9d
 8007f70:	08008061 	.word	0x08008061
 8007f74:	08008061 	.word	0x08008061
 8007f78:	08008061 	.word	0x08008061
 8007f7c:	08008061 	.word	0x08008061
 8007f80:	08008061 	.word	0x08008061
 8007f84:	08007fc5 	.word	0x08007fc5
 8007f88:	08008061 	.word	0x08008061
 8007f8c:	08008061 	.word	0x08008061
 8007f90:	08008061 	.word	0x08008061
 8007f94:	08008013 	.word	0x08008013
 8007f98:	0800803b 	.word	0x0800803b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d107      	bne.n	8007fb6 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007fa6:	f107 030e 	add.w	r3, r7, #14
 8007faa:	2202      	movs	r2, #2
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 f949 	bl	8009246 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fb4:	e05b      	b.n	800806e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f8da 	bl	8009172 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007fc2:	e054      	b.n	800806e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	885b      	ldrh	r3, [r3, #2]
 8007fc8:	0a1b      	lsrs	r3, r3, #8
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b22      	cmp	r3, #34	; 0x22
 8007fce:	d10b      	bne.n	8007fe8 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	88db      	ldrh	r3, [r3, #6]
 8007fd4:	2b36      	cmp	r3, #54	; 0x36
 8007fd6:	bf28      	it	cs
 8007fd8:	2336      	movcs	r3, #54	; 0x36
 8007fda:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	61bb      	str	r3, [r7, #24]
 8007fe6:	e00d      	b.n	8008004 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	885b      	ldrh	r3, [r3, #2]
 8007fec:	0a1b      	lsrs	r3, r3, #8
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b21      	cmp	r3, #33	; 0x21
 8007ff2:	d107      	bne.n	8008004 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007ff4:	4b24      	ldr	r3, [pc, #144]	; (8008088 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8007ff6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	88db      	ldrh	r3, [r3, #6]
 8007ffc:	2b09      	cmp	r3, #9
 8007ffe:	bf28      	it	cs
 8008000:	2309      	movcs	r3, #9
 8008002:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008004:	8bfb      	ldrh	r3, [r7, #30]
 8008006:	461a      	mov	r2, r3
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 f91b 	bl	8009246 <USBD_CtlSendData>
          break;
 8008010:	e02d      	b.n	800806e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008018:	2b03      	cmp	r3, #3
 800801a:	d107      	bne.n	800802c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	3348      	adds	r3, #72	; 0x48
 8008020:	2201      	movs	r2, #1
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 f90e 	bl	8009246 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800802a:	e020      	b.n	800806e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f89f 	bl	8009172 <USBD_CtlError>
            ret = USBD_FAIL;
 8008034:	2302      	movs	r3, #2
 8008036:	75fb      	strb	r3, [r7, #23]
          break;
 8008038:	e019      	b.n	800806e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008040:	2b03      	cmp	r3, #3
 8008042:	d106      	bne.n	8008052 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	885b      	ldrh	r3, [r3, #2]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008050:	e00d      	b.n	800806e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 f88c 	bl	8009172 <USBD_CtlError>
            ret = USBD_FAIL;
 800805a:	2302      	movs	r3, #2
 800805c:	75fb      	strb	r3, [r7, #23]
          break;
 800805e:	e006      	b.n	800806e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 f885 	bl	8009172 <USBD_CtlError>
          ret = USBD_FAIL;
 8008068:	2302      	movs	r3, #2
 800806a:	75fb      	strb	r3, [r7, #23]
          break;
 800806c:	bf00      	nop
      }
      break;
 800806e:	e006      	b.n	800807e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 f87d 	bl	8009172 <USBD_CtlError>
      ret = USBD_FAIL;
 8008078:	2302      	movs	r3, #2
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	bf00      	nop
  }
  return ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	200000f8 	.word	0x200000f8

0800808c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d111      	bne.n	80080d0 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	2181      	movs	r1, #129	; 0x81
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f001 fcb4 	bl	8009a32 <USBD_LL_Transmit>
 80080ca:	e001      	b.n	80080d0 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e000      	b.n	80080d2 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2229      	movs	r2, #41	; 0x29
 80080e8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80080ea:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bc80      	pop	{r7}
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	20000074 	.word	0x20000074

080080fc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2229      	movs	r2, #41	; 0x29
 8008108:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800810a:	4b03      	ldr	r3, [pc, #12]	; (8008118 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	200000a0 	.word	0x200000a0

0800811c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2229      	movs	r2, #41	; 0x29
 8008128:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800812a:	4b03      	ldr	r3, [pc, #12]	; (8008138 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	200000cc 	.word	0x200000cc

0800813c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr

08008160 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008172:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4610      	mov	r0, r2
 8008180:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	2340      	movs	r3, #64	; 0x40
 8008186:	2101      	movs	r1, #1
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 fc75 	bl	8009a78 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a6:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d109      	bne.n	80081c4 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4610      	mov	r0, r2
 80081bc:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	220a      	movs	r2, #10
 80081dc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80081de:	4b03      	ldr	r3, [pc, #12]	; (80081ec <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000104 	.word	0x20000104

080081f0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80081fa:	2302      	movs	r3, #2
 80081fc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr

0800821c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008230:	2302      	movs	r3, #2
 8008232:	e01a      	b.n	800826a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	79fa      	ldrb	r2, [r7, #7]
 8008260:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f001 faac 	bl	80097c0 <USBD_LL_Init>

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d006      	beq.n	8008294 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
 8008292:	e001      	b.n	8008298 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008294:	2302      	movs	r3, #2
 8008296:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr

080082a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 fad7 	bl	8009860 <USBD_LL_Start>

  return USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr

080082d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082dc:	2302      	movs	r3, #2
 80082de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00c      	beq.n	8008304 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	78fa      	ldrb	r2, [r7, #3]
 80082f4:	4611      	mov	r1, r2
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	4611      	mov	r1, r2
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3

  return USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fed7 	bl	80090fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	2b02      	cmp	r3, #2
 800836e:	d016      	beq.n	800839e <USBD_LL_SetupStage+0x6a>
 8008370:	2b02      	cmp	r3, #2
 8008372:	d81c      	bhi.n	80083ae <USBD_LL_SetupStage+0x7a>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <USBD_LL_SetupStage+0x4a>
 8008378:	2b01      	cmp	r3, #1
 800837a:	d008      	beq.n	800838e <USBD_LL_SetupStage+0x5a>
 800837c:	e017      	b.n	80083ae <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f9ca 	bl	8008720 <USBD_StdDevReq>
      break;
 800838c:	e01a      	b.n	80083c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa2c 	bl	80087f4 <USBD_StdItfReq>
      break;
 800839c:	e012      	b.n	80083c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fa6c 	bl	8008884 <USBD_StdEPReq>
      break;
 80083ac:	e00a      	b.n	80083c4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 faaf 	bl	8009920 <USBD_LL_StallEP>
      break;
 80083c2:	bf00      	nop
  }

  return USBD_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b086      	sub	sp, #24
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	460b      	mov	r3, r1
 80083d8:	607a      	str	r2, [r7, #4]
 80083da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d14b      	bne.n	800847a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d134      	bne.n	800845e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	68da      	ldr	r2, [r3, #12]
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d919      	bls.n	8008434 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	1ad2      	subs	r2, r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008416:	429a      	cmp	r2, r3
 8008418:	d203      	bcs.n	8008422 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800841e:	b29b      	uxth	r3, r3
 8008420:	e002      	b.n	8008428 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008426:	b29b      	uxth	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 ff56 	bl	80092de <USBD_CtlContinueRx>
 8008432:	e038      	b.n	80084a6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008446:	2b03      	cmp	r3, #3
 8008448:	d105      	bne.n	8008456 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 ff53 	bl	8009302 <USBD_CtlSendStatus>
 800845c:	e023      	b.n	80084a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008464:	2b05      	cmp	r3, #5
 8008466:	d11e      	bne.n	80084a6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008470:	2100      	movs	r1, #0
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f001 fa54 	bl	8009920 <USBD_LL_StallEP>
 8008478:	e015      	b.n	80084a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00d      	beq.n	80084a2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800848c:	2b03      	cmp	r3, #3
 800848e:	d108      	bne.n	80084a2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	7afa      	ldrb	r2, [r7, #11]
 800849a:	4611      	mov	r1, r2
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	4798      	blx	r3
 80084a0:	e001      	b.n	80084a6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084a2:	2302      	movs	r3, #2
 80084a4:	e000      	b.n	80084a8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	460b      	mov	r3, r1
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d17f      	bne.n	80085c4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3314      	adds	r3, #20
 80084c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d15c      	bne.n	800858e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	68da      	ldr	r2, [r3, #12]
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d915      	bls.n	800850c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	1ad2      	subs	r2, r2, r3
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 fec0 	bl	800927e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084fe:	2300      	movs	r3, #0
 8008500:	2200      	movs	r2, #0
 8008502:	2100      	movs	r1, #0
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f001 fab7 	bl	8009a78 <USBD_LL_PrepareReceive>
 800850a:	e04e      	b.n	80085aa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	6912      	ldr	r2, [r2, #16]
 8008514:	fbb3 f1f2 	udiv	r1, r3, r2
 8008518:	fb01 f202 	mul.w	r2, r1, r2
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d11c      	bne.n	800855c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800852a:	429a      	cmp	r2, r3
 800852c:	d316      	bcc.n	800855c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008538:	429a      	cmp	r2, r3
 800853a:	d20f      	bcs.n	800855c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800853c:	2200      	movs	r2, #0
 800853e:	2100      	movs	r1, #0
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fe9c 	bl	800927e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800854e:	2300      	movs	r3, #0
 8008550:	2200      	movs	r2, #0
 8008552:	2100      	movs	r1, #0
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f001 fa8f 	bl	8009a78 <USBD_LL_PrepareReceive>
 800855a:	e026      	b.n	80085aa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800856e:	2b03      	cmp	r3, #3
 8008570:	d105      	bne.n	800857e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800857e:	2180      	movs	r1, #128	; 0x80
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f001 f9cd 	bl	8009920 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fece 	bl	8009328 <USBD_CtlReceiveStatus>
 800858c:	e00d      	b.n	80085aa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008594:	2b04      	cmp	r3, #4
 8008596:	d004      	beq.n	80085a2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d103      	bne.n	80085aa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085a2:	2180      	movs	r1, #128	; 0x80
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f001 f9bb 	bl	8009920 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d11d      	bne.n	80085f0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7ff fe81 	bl	80082bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085c2:	e015      	b.n	80085f0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00d      	beq.n	80085ec <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d108      	bne.n	80085ec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	7afa      	ldrb	r2, [r7, #11]
 80085e4:	4611      	mov	r1, r2
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	4798      	blx	r3
 80085ea:	e001      	b.n	80085f0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085ec:	2302      	movs	r3, #2
 80085ee:	e000      	b.n	80085f2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008602:	2340      	movs	r3, #64	; 0x40
 8008604:	2200      	movs	r2, #0
 8008606:	2100      	movs	r1, #0
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f944 	bl	8009896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2240      	movs	r2, #64	; 0x40
 800861a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800861e:	2340      	movs	r3, #64	; 0x40
 8008620:	2200      	movs	r2, #0
 8008622:	2180      	movs	r1, #128	; 0x80
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 f936 	bl	8009896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2240      	movs	r2, #64	; 0x40
 8008634:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6852      	ldr	r2, [r2, #4]
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	4611      	mov	r1, r2
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
  }

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	78fa      	ldrb	r2, [r7, #3]
 800868c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	bc80      	pop	{r7}
 8008698:	4770      	bx	lr

0800869a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2204      	movs	r2, #4
 80086b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr

080086c2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d105      	bne.n	80086e0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d10b      	bne.n	8008716 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008736:	2b40      	cmp	r3, #64	; 0x40
 8008738:	d005      	beq.n	8008746 <USBD_StdDevReq+0x26>
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d84f      	bhi.n	80087de <USBD_StdDevReq+0xbe>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d009      	beq.n	8008756 <USBD_StdDevReq+0x36>
 8008742:	2b20      	cmp	r3, #32
 8008744:	d14b      	bne.n	80087de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	4798      	blx	r3
      break;
 8008754:	e048      	b.n	80087e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	2b09      	cmp	r3, #9
 800875c:	d839      	bhi.n	80087d2 <USBD_StdDevReq+0xb2>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <USBD_StdDevReq+0x44>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	080087b5 	.word	0x080087b5
 8008768:	080087c9 	.word	0x080087c9
 800876c:	080087d3 	.word	0x080087d3
 8008770:	080087bf 	.word	0x080087bf
 8008774:	080087d3 	.word	0x080087d3
 8008778:	08008797 	.word	0x08008797
 800877c:	0800878d 	.word	0x0800878d
 8008780:	080087d3 	.word	0x080087d3
 8008784:	080087ab 	.word	0x080087ab
 8008788:	080087a1 	.word	0x080087a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f9dc 	bl	8008b4c <USBD_GetDescriptor>
          break;
 8008794:	e022      	b.n	80087dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fb3f 	bl	8008e1c <USBD_SetAddress>
          break;
 800879e:	e01d      	b.n	80087dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fb7e 	bl	8008ea4 <USBD_SetConfig>
          break;
 80087a8:	e018      	b.n	80087dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fc07 	bl	8008fc0 <USBD_GetConfig>
          break;
 80087b2:	e013      	b.n	80087dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc37 	bl	800902a <USBD_GetStatus>
          break;
 80087bc:	e00e      	b.n	80087dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fc65 	bl	8009090 <USBD_SetFeature>
          break;
 80087c6:	e009      	b.n	80087dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fc74 	bl	80090b8 <USBD_ClrFeature>
          break;
 80087d0:	e004      	b.n	80087dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fccc 	bl	8009172 <USBD_CtlError>
          break;
 80087da:	bf00      	nop
      }
      break;
 80087dc:	e004      	b.n	80087e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fcc6 	bl	8009172 <USBD_CtlError>
      break;
 80087e6:	bf00      	nop
  }

  return ret;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop

080087f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800880a:	2b40      	cmp	r3, #64	; 0x40
 800880c:	d005      	beq.n	800881a <USBD_StdItfReq+0x26>
 800880e:	2b40      	cmp	r3, #64	; 0x40
 8008810:	d82e      	bhi.n	8008870 <USBD_StdItfReq+0x7c>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <USBD_StdItfReq+0x26>
 8008816:	2b20      	cmp	r3, #32
 8008818:	d12a      	bne.n	8008870 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008820:	3b01      	subs	r3, #1
 8008822:	2b02      	cmp	r3, #2
 8008824:	d81d      	bhi.n	8008862 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	889b      	ldrh	r3, [r3, #4]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	d813      	bhi.n	8008858 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
 800883e:	4603      	mov	r3, r0
 8008840:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	88db      	ldrh	r3, [r3, #6]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d110      	bne.n	800886c <USBD_StdItfReq+0x78>
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10d      	bne.n	800886c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fd56 	bl	8009302 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008856:	e009      	b.n	800886c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fc89 	bl	8009172 <USBD_CtlError>
          break;
 8008860:	e004      	b.n	800886c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fc84 	bl	8009172 <USBD_CtlError>
          break;
 800886a:	e000      	b.n	800886e <USBD_StdItfReq+0x7a>
          break;
 800886c:	bf00      	nop
      }
      break;
 800886e:	e004      	b.n	800887a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fc7d 	bl	8009172 <USBD_CtlError>
      break;
 8008878:	bf00      	nop
  }

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	889b      	ldrh	r3, [r3, #4]
 8008896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088a0:	2b40      	cmp	r3, #64	; 0x40
 80088a2:	d007      	beq.n	80088b4 <USBD_StdEPReq+0x30>
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	f200 8146 	bhi.w	8008b36 <USBD_StdEPReq+0x2b2>
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <USBD_StdEPReq+0x40>
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	f040 8141 	bne.w	8008b36 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
      break;
 80088c2:	e13d      	b.n	8008b40 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d10a      	bne.n	80088e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	e12d      	b.n	8008b42 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d007      	beq.n	80088fe <USBD_StdEPReq+0x7a>
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	f300 811b 	bgt.w	8008b2a <USBD_StdEPReq+0x2a6>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d072      	beq.n	80089de <USBD_StdEPReq+0x15a>
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d03a      	beq.n	8008972 <USBD_StdEPReq+0xee>
 80088fc:	e115      	b.n	8008b2a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008904:	2b02      	cmp	r3, #2
 8008906:	d002      	beq.n	800890e <USBD_StdEPReq+0x8a>
 8008908:	2b03      	cmp	r3, #3
 800890a:	d015      	beq.n	8008938 <USBD_StdEPReq+0xb4>
 800890c:	e02b      	b.n	8008966 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00c      	beq.n	800892e <USBD_StdEPReq+0xaa>
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b80      	cmp	r3, #128	; 0x80
 8008918:	d009      	beq.n	800892e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fffe 	bl	8009920 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008924:	2180      	movs	r1, #128	; 0x80
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fffa 	bl	8009920 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800892c:	e020      	b.n	8008970 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fc1e 	bl	8009172 <USBD_CtlError>
              break;
 8008936:	e01b      	b.n	8008970 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	885b      	ldrh	r3, [r3, #2]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10e      	bne.n	800895e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <USBD_StdEPReq+0xda>
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	2b80      	cmp	r3, #128	; 0x80
 800894a:	d008      	beq.n	800895e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	88db      	ldrh	r3, [r3, #6]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 ffe1 	bl	8009920 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fccf 	bl	8009302 <USBD_CtlSendStatus>

              break;
 8008964:	e004      	b.n	8008970 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fc02 	bl	8009172 <USBD_CtlError>
              break;
 800896e:	bf00      	nop
          }
          break;
 8008970:	e0e0      	b.n	8008b34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008978:	2b02      	cmp	r3, #2
 800897a:	d002      	beq.n	8008982 <USBD_StdEPReq+0xfe>
 800897c:	2b03      	cmp	r3, #3
 800897e:	d015      	beq.n	80089ac <USBD_StdEPReq+0x128>
 8008980:	e026      	b.n	80089d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00c      	beq.n	80089a2 <USBD_StdEPReq+0x11e>
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	2b80      	cmp	r3, #128	; 0x80
 800898c:	d009      	beq.n	80089a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 ffc4 	bl	8009920 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 ffc0 	bl	8009920 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089a0:	e01c      	b.n	80089dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fbe4 	bl	8009172 <USBD_CtlError>
              break;
 80089aa:	e017      	b.n	80089dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	885b      	ldrh	r3, [r3, #2]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d112      	bne.n	80089da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d004      	beq.n	80089c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 ffcb 	bl	800995e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc9a 	bl	8009302 <USBD_CtlSendStatus>
              }
              break;
 80089ce:	e004      	b.n	80089da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fbcd 	bl	8009172 <USBD_CtlError>
              break;
 80089d8:	e000      	b.n	80089dc <USBD_StdEPReq+0x158>
              break;
 80089da:	bf00      	nop
          }
          break;
 80089dc:	e0aa      	b.n	8008b34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d002      	beq.n	80089ee <USBD_StdEPReq+0x16a>
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d032      	beq.n	8008a52 <USBD_StdEPReq+0x1ce>
 80089ec:	e097      	b.n	8008b1e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089ee:	7bbb      	ldrb	r3, [r7, #14]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d007      	beq.n	8008a04 <USBD_StdEPReq+0x180>
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b80      	cmp	r3, #128	; 0x80
 80089f8:	d004      	beq.n	8008a04 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fbb8 	bl	8009172 <USBD_CtlError>
                break;
 8008a02:	e091      	b.n	8008b28 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	da0b      	bge.n	8008a24 <USBD_StdEPReq+0x1a0>
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	3310      	adds	r3, #16
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	4413      	add	r3, r2
 8008a20:	3304      	adds	r3, #4
 8008a22:	e00b      	b.n	8008a3c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	4413      	add	r3, r2
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2202      	movs	r2, #2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fbfb 	bl	8009246 <USBD_CtlSendData>
              break;
 8008a50:	e06a      	b.n	8008b28 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	da11      	bge.n	8008a7e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	f003 020f 	and.w	r2, r3, #15
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	3318      	adds	r3, #24
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d117      	bne.n	8008aa4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fb7b 	bl	8009172 <USBD_CtlError>
                  break;
 8008a7c:	e054      	b.n	8008b28 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	f003 020f 	and.w	r2, r3, #15
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	440b      	add	r3, r1
 8008a90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d104      	bne.n	8008aa4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fb68 	bl	8009172 <USBD_CtlError>
                  break;
 8008aa2:	e041      	b.n	8008b28 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	da0b      	bge.n	8008ac4 <USBD_StdEPReq+0x240>
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	3310      	adds	r3, #16
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	4413      	add	r3, r2
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	e00b      	b.n	8008adc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aca:	4613      	mov	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	4413      	add	r3, r2
 8008ada:	3304      	adds	r3, #4
 8008adc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <USBD_StdEPReq+0x266>
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2b80      	cmp	r3, #128	; 0x80
 8008ae8:	d103      	bne.n	8008af2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	e00e      	b.n	8008b10 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 ff50 	bl	800999c <USBD_LL_IsStallEP>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2201      	movs	r2, #1
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	e002      	b.n	8008b10 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2202      	movs	r2, #2
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fb95 	bl	8009246 <USBD_CtlSendData>
              break;
 8008b1c:	e004      	b.n	8008b28 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fb26 	bl	8009172 <USBD_CtlError>
              break;
 8008b26:	bf00      	nop
          }
          break;
 8008b28:	e004      	b.n	8008b34 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fb20 	bl	8009172 <USBD_CtlError>
          break;
 8008b32:	bf00      	nop
      }
      break;
 8008b34:	e004      	b.n	8008b40 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fb1a 	bl	8009172 <USBD_CtlError>
      break;
 8008b3e:	bf00      	nop
  }

  return ret;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	885b      	ldrh	r3, [r3, #2]
 8008b66:	0a1b      	lsrs	r3, r3, #8
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	2b06      	cmp	r3, #6
 8008b6e:	f200 8128 	bhi.w	8008dc2 <USBD_GetDescriptor+0x276>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <USBD_GetDescriptor+0x2c>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b95 	.word	0x08008b95
 8008b7c:	08008bad 	.word	0x08008bad
 8008b80:	08008bed 	.word	0x08008bed
 8008b84:	08008dc3 	.word	0x08008dc3
 8008b88:	08008dc3 	.word	0x08008dc3
 8008b8c:	08008d63 	.word	0x08008d63
 8008b90:	08008d8f 	.word	0x08008d8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7c12      	ldrb	r2, [r2, #16]
 8008ba0:	f107 0108 	add.w	r1, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
      break;
 8008baa:	e112      	b.n	8008dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7c1b      	ldrb	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10d      	bne.n	8008bd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	f107 0208 	add.w	r2, r7, #8
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4798      	blx	r3
 8008bc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	2202      	movs	r2, #2
 8008bcc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bce:	e100      	b.n	8008dd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	f107 0208 	add.w	r2, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3301      	adds	r3, #1
 8008be6:	2202      	movs	r2, #2
 8008be8:	701a      	strb	r2, [r3, #0]
      break;
 8008bea:	e0f2      	b.n	8008dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	885b      	ldrh	r3, [r3, #2]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	f200 80ac 	bhi.w	8008d50 <USBD_GetDescriptor+0x204>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <USBD_GetDescriptor+0xb4>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c4d 	.word	0x08008c4d
 8008c08:	08008c81 	.word	0x08008c81
 8008c0c:	08008cb5 	.word	0x08008cb5
 8008c10:	08008ce9 	.word	0x08008ce9
 8008c14:	08008d1d 	.word	0x08008d1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00b      	beq.n	8008c3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	7c12      	ldrb	r2, [r2, #16]
 8008c30:	f107 0108 	add.w	r1, r7, #8
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c3a:	e091      	b.n	8008d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fa97 	bl	8009172 <USBD_CtlError>
            err++;
 8008c44:	7afb      	ldrb	r3, [r7, #11]
 8008c46:	3301      	adds	r3, #1
 8008c48:	72fb      	strb	r3, [r7, #11]
          break;
 8008c4a:	e089      	b.n	8008d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00b      	beq.n	8008c70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	7c12      	ldrb	r2, [r2, #16]
 8008c64:	f107 0108 	add.w	r1, r7, #8
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c6e:	e077      	b.n	8008d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fa7d 	bl	8009172 <USBD_CtlError>
            err++;
 8008c78:	7afb      	ldrb	r3, [r7, #11]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c7e:	e06f      	b.n	8008d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00b      	beq.n	8008ca4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	7c12      	ldrb	r2, [r2, #16]
 8008c98:	f107 0108 	add.w	r1, r7, #8
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4798      	blx	r3
 8008ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ca2:	e05d      	b.n	8008d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa63 	bl	8009172 <USBD_CtlError>
            err++;
 8008cac:	7afb      	ldrb	r3, [r7, #11]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cb2:	e055      	b.n	8008d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00b      	beq.n	8008cd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	7c12      	ldrb	r2, [r2, #16]
 8008ccc:	f107 0108 	add.w	r1, r7, #8
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4798      	blx	r3
 8008cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cd6:	e043      	b.n	8008d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fa49 	bl	8009172 <USBD_CtlError>
            err++;
 8008ce0:	7afb      	ldrb	r3, [r7, #11]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ce6:	e03b      	b.n	8008d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00b      	beq.n	8008d0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	7c12      	ldrb	r2, [r2, #16]
 8008d00:	f107 0108 	add.w	r1, r7, #8
 8008d04:	4610      	mov	r0, r2
 8008d06:	4798      	blx	r3
 8008d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d0a:	e029      	b.n	8008d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fa2f 	bl	8009172 <USBD_CtlError>
            err++;
 8008d14:	7afb      	ldrb	r3, [r7, #11]
 8008d16:	3301      	adds	r3, #1
 8008d18:	72fb      	strb	r3, [r7, #11]
          break;
 8008d1a:	e021      	b.n	8008d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	7c12      	ldrb	r2, [r2, #16]
 8008d34:	f107 0108 	add.w	r1, r7, #8
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
 8008d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d3e:	e00f      	b.n	8008d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fa15 	bl	8009172 <USBD_CtlError>
            err++;
 8008d48:	7afb      	ldrb	r3, [r7, #11]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d4e:	e007      	b.n	8008d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fa0d 	bl	8009172 <USBD_CtlError>
          err++;
 8008d58:	7afb      	ldrb	r3, [r7, #11]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d5e:	e038      	b.n	8008dd2 <USBD_GetDescriptor+0x286>
 8008d60:	e037      	b.n	8008dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7c1b      	ldrb	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d72:	f107 0208 	add.w	r2, r7, #8
 8008d76:	4610      	mov	r0, r2
 8008d78:	4798      	blx	r3
 8008d7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d7c:	e029      	b.n	8008dd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f9f6 	bl	8009172 <USBD_CtlError>
        err++;
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d8c:	e021      	b.n	8008dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7c1b      	ldrb	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10d      	bne.n	8008db2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9e:	f107 0208 	add.w	r2, r7, #8
 8008da2:	4610      	mov	r0, r2
 8008da4:	4798      	blx	r3
 8008da6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3301      	adds	r3, #1
 8008dac:	2207      	movs	r2, #7
 8008dae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008db0:	e00f      	b.n	8008dd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f9dc 	bl	8009172 <USBD_CtlError>
        err++;
 8008dba:	7afb      	ldrb	r3, [r7, #11]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8008dc0:	e007      	b.n	8008dd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f9d4 	bl	8009172 <USBD_CtlError>
      err++;
 8008dca:	7afb      	ldrb	r3, [r7, #11]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd0:	bf00      	nop
  }

  if (err != 0U)
 8008dd2:	7afb      	ldrb	r3, [r7, #11]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11c      	bne.n	8008e12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008dd8:	893b      	ldrh	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d011      	beq.n	8008e02 <USBD_GetDescriptor+0x2b6>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	88db      	ldrh	r3, [r3, #6]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00d      	beq.n	8008e02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88da      	ldrh	r2, [r3, #6]
 8008dea:	893b      	ldrh	r3, [r7, #8]
 8008dec:	4293      	cmp	r3, r2
 8008dee:	bf28      	it	cs
 8008df0:	4613      	movcs	r3, r2
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008df6:	893b      	ldrh	r3, [r7, #8]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	68f9      	ldr	r1, [r7, #12]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fa22 	bl	8009246 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	88db      	ldrh	r3, [r3, #6]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa79 	bl	8009302 <USBD_CtlSendStatus>
 8008e10:	e000      	b.n	8008e14 <USBD_GetDescriptor+0x2c8>
    return;
 8008e12:	bf00      	nop
    }
  }
}
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop

08008e1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	889b      	ldrh	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d130      	bne.n	8008e90 <USBD_SetAddress+0x74>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	88db      	ldrh	r3, [r3, #6]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d12c      	bne.n	8008e90 <USBD_SetAddress+0x74>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e3c:	d828      	bhi.n	8008e90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d104      	bne.n	8008e5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f98b 	bl	8009172 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5c:	e01d      	b.n	8008e9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	7bfa      	ldrb	r2, [r7, #15]
 8008e62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fdc2 	bl	80099f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa46 	bl	8009302 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e84:	e009      	b.n	8008e9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	e004      	b.n	8008e9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f96d 	bl	8009172 <USBD_CtlError>
  }
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	885b      	ldrh	r3, [r3, #2]
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	4b41      	ldr	r3, [pc, #260]	; (8008fbc <USBD_SetConfig+0x118>)
 8008eb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008eb8:	4b40      	ldr	r3, [pc, #256]	; (8008fbc <USBD_SetConfig+0x118>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d904      	bls.n	8008eca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f955 	bl	8009172 <USBD_CtlError>
 8008ec8:	e075      	b.n	8008fb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d002      	beq.n	8008eda <USBD_SetConfig+0x36>
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d023      	beq.n	8008f20 <USBD_SetConfig+0x7c>
 8008ed8:	e062      	b.n	8008fa0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008eda:	4b38      	ldr	r3, [pc, #224]	; (8008fbc <USBD_SetConfig+0x118>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d01a      	beq.n	8008f18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008ee2:	4b36      	ldr	r3, [pc, #216]	; (8008fbc <USBD_SetConfig+0x118>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2203      	movs	r2, #3
 8008ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ef4:	4b31      	ldr	r3, [pc, #196]	; (8008fbc <USBD_SetConfig+0x118>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff f9e8 	bl	80082d0 <USBD_SetClassConfig>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d104      	bne.n	8008f10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f932 	bl	8009172 <USBD_CtlError>
            return;
 8008f0e:	e052      	b.n	8008fb6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f9f6 	bl	8009302 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f16:	e04e      	b.n	8008fb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f9f2 	bl	8009302 <USBD_CtlSendStatus>
        break;
 8008f1e:	e04a      	b.n	8008fb6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f20:	4b26      	ldr	r3, [pc, #152]	; (8008fbc <USBD_SetConfig+0x118>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d112      	bne.n	8008f4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008f30:	4b22      	ldr	r3, [pc, #136]	; (8008fbc <USBD_SetConfig+0x118>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f3a:	4b20      	ldr	r3, [pc, #128]	; (8008fbc <USBD_SetConfig+0x118>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff f9e4 	bl	800830e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f9db 	bl	8009302 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f4c:	e033      	b.n	8008fb6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f4e:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <USBD_SetConfig+0x118>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d01d      	beq.n	8008f98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff f9d2 	bl	800830e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f6a:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <USBD_SetConfig+0x118>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f74:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <USBD_SetConfig+0x118>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff f9a8 	bl	80082d0 <USBD_SetClassConfig>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d104      	bne.n	8008f90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f8f2 	bl	8009172 <USBD_CtlError>
            return;
 8008f8e:	e012      	b.n	8008fb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f9b6 	bl	8009302 <USBD_CtlSendStatus>
        break;
 8008f96:	e00e      	b.n	8008fb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f9b2 	bl	8009302 <USBD_CtlSendStatus>
        break;
 8008f9e:	e00a      	b.n	8008fb6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f8e5 	bl	8009172 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008fa8:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <USBD_SetConfig+0x118>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff f9ad 	bl	800830e <USBD_ClrClassConfig>
        break;
 8008fb4:	bf00      	nop
    }
  }
}
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000300 	.word	0x20000300

08008fc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	88db      	ldrh	r3, [r3, #6]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d004      	beq.n	8008fdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f8cc 	bl	8009172 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fda:	e022      	b.n	8009022 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	dc02      	bgt.n	8008fec <USBD_GetConfig+0x2c>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dc03      	bgt.n	8008ff2 <USBD_GetConfig+0x32>
 8008fea:	e015      	b.n	8009018 <USBD_GetConfig+0x58>
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d00b      	beq.n	8009008 <USBD_GetConfig+0x48>
 8008ff0:	e012      	b.n	8009018 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f920 	bl	8009246 <USBD_CtlSendData>
        break;
 8009006:	e00c      	b.n	8009022 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3304      	adds	r3, #4
 800900c:	2201      	movs	r2, #1
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f918 	bl	8009246 <USBD_CtlSendData>
        break;
 8009016:	e004      	b.n	8009022 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f8a9 	bl	8009172 <USBD_CtlError>
        break;
 8009020:	bf00      	nop
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903a:	3b01      	subs	r3, #1
 800903c:	2b02      	cmp	r3, #2
 800903e:	d81e      	bhi.n	800907e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	88db      	ldrh	r3, [r3, #6]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d004      	beq.n	8009052 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f891 	bl	8009172 <USBD_CtlError>
        break;
 8009050:	e01a      	b.n	8009088 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d005      	beq.n	800906e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f043 0202 	orr.w	r2, r3, #2
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	330c      	adds	r3, #12
 8009072:	2202      	movs	r2, #2
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f8e5 	bl	8009246 <USBD_CtlSendData>
      break;
 800907c:	e004      	b.n	8009088 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f876 	bl	8009172 <USBD_CtlError>
      break;
 8009086:	bf00      	nop
  }
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	885b      	ldrh	r3, [r3, #2]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d106      	bne.n	80090b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f929 	bl	8009302 <USBD_CtlSendStatus>
  }
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c8:	3b01      	subs	r3, #1
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d80b      	bhi.n	80090e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	885b      	ldrh	r3, [r3, #2]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d10c      	bne.n	80090f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f90f 	bl	8009302 <USBD_CtlSendStatus>
      }
      break;
 80090e4:	e004      	b.n	80090f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f842 	bl	8009172 <USBD_CtlError>
      break;
 80090ee:	e000      	b.n	80090f2 <USBD_ClrFeature+0x3a>
      break;
 80090f0:	bf00      	nop
  }
}
 80090f2:	bf00      	nop
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781a      	ldrb	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	785a      	ldrb	r2, [r3, #1]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	3302      	adds	r3, #2
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	b29a      	uxth	r2, r3
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	3303      	adds	r3, #3
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	b29b      	uxth	r3, r3
 8009124:	021b      	lsls	r3, r3, #8
 8009126:	b29b      	uxth	r3, r3
 8009128:	4413      	add	r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	3304      	adds	r3, #4
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	b29a      	uxth	r2, r3
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	3305      	adds	r3, #5
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	b29b      	uxth	r3, r3
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	b29b      	uxth	r3, r3
 8009144:	4413      	add	r3, r2
 8009146:	b29a      	uxth	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	3306      	adds	r3, #6
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	b29a      	uxth	r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	3307      	adds	r3, #7
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	b29b      	uxth	r3, r3
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	b29b      	uxth	r3, r3
 8009160:	4413      	add	r3, r2
 8009162:	b29a      	uxth	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	80da      	strh	r2, [r3, #6]

}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	bc80      	pop	{r7}
 8009170:	4770      	bx	lr

08009172 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800917c:	2180      	movs	r1, #128	; 0x80
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fbce 	bl	8009920 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009184:	2100      	movs	r1, #0
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fbca 	bl	8009920 <USBD_LL_StallEP>
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d032      	beq.n	8009210 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 f834 	bl	8009218 <USBD_GetLen>
 80091b0:	4603      	mov	r3, r0
 80091b2:	3301      	adds	r3, #1
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	75fa      	strb	r2, [r7, #23]
 80091c4:	461a      	mov	r2, r3
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	4413      	add	r3, r2
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	7812      	ldrb	r2, [r2, #0]
 80091ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	75fa      	strb	r2, [r7, #23]
 80091d6:	461a      	mov	r2, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4413      	add	r3, r2
 80091dc:	2203      	movs	r2, #3
 80091de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80091e0:	e012      	b.n	8009208 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	60fa      	str	r2, [r7, #12]
 80091e8:	7dfa      	ldrb	r2, [r7, #23]
 80091ea:	1c51      	adds	r1, r2, #1
 80091ec:	75f9      	strb	r1, [r7, #23]
 80091ee:	4611      	mov	r1, r2
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	440a      	add	r2, r1
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	75fa      	strb	r2, [r7, #23]
 80091fe:	461a      	mov	r2, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4413      	add	r3, r2
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e8      	bne.n	80091e2 <USBD_GetString+0x4e>
    }
  }
}
 8009210:	bf00      	nop
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009224:	e005      	b.n	8009232 <USBD_GetLen+0x1a>
  {
    len++;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	3301      	adds	r3, #1
 800922a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3301      	adds	r3, #1
 8009230:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1f5      	bne.n	8009226 <USBD_GetLen+0xe>
  }

  return len;
 800923a:	7bfb      	ldrb	r3, [r7, #15]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	bc80      	pop	{r7}
 8009244:	4770      	bx	lr

08009246 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	4613      	mov	r3, r2
 8009252:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2202      	movs	r2, #2
 8009258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800925c:	88fa      	ldrh	r2, [r7, #6]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009262:	88fa      	ldrh	r2, [r7, #6]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009268:	88fb      	ldrh	r3, [r7, #6]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	2100      	movs	r1, #0
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 fbdf 	bl	8009a32 <USBD_LL_Transmit>

  return USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	4613      	mov	r3, r2
 800928a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	2100      	movs	r1, #0
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 fbcd 	bl	8009a32 <USBD_LL_Transmit>

  return USBD_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	4613      	mov	r3, r2
 80092ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2203      	movs	r2, #3
 80092b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092b8:	88fa      	ldrh	r2, [r7, #6]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80092c0:	88fa      	ldrh	r2, [r7, #6]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	2100      	movs	r1, #0
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fbd2 	bl	8009a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	4613      	mov	r3, r2
 80092ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	2100      	movs	r1, #0
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fbc0 	bl	8009a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2204      	movs	r2, #4
 800930e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009312:	2300      	movs	r3, #0
 8009314:	2200      	movs	r2, #0
 8009316:	2100      	movs	r1, #0
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fb8a 	bl	8009a32 <USBD_LL_Transmit>

  return USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2205      	movs	r2, #5
 8009334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009338:	2300      	movs	r3, #0
 800933a:	2200      	movs	r2, #0
 800933c:	2100      	movs	r1, #0
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fb9a 	bl	8009a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009354:	2200      	movs	r2, #0
 8009356:	4912      	ldr	r1, [pc, #72]	; (80093a0 <MX_USB_DEVICE_Init+0x50>)
 8009358:	4812      	ldr	r0, [pc, #72]	; (80093a4 <MX_USB_DEVICE_Init+0x54>)
 800935a:	f7fe ff5f 	bl	800821c <USBD_Init>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009364:	f7f8 f9a2 	bl	80016ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009368:	490f      	ldr	r1, [pc, #60]	; (80093a8 <MX_USB_DEVICE_Init+0x58>)
 800936a:	480e      	ldr	r0, [pc, #56]	; (80093a4 <MX_USB_DEVICE_Init+0x54>)
 800936c:	f7fe ff81 	bl	8008272 <USBD_RegisterClass>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009376:	f7f8 f999 	bl	80016ac <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800937a:	490c      	ldr	r1, [pc, #48]	; (80093ac <MX_USB_DEVICE_Init+0x5c>)
 800937c:	4809      	ldr	r0, [pc, #36]	; (80093a4 <MX_USB_DEVICE_Init+0x54>)
 800937e:	f7fe ff37 	bl	80081f0 <USBD_CUSTOM_HID_RegisterInterface>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009388:	f7f8 f990 	bl	80016ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800938c:	4805      	ldr	r0, [pc, #20]	; (80093a4 <MX_USB_DEVICE_Init+0x54>)
 800938e:	f7fe ff89 	bl	80082a4 <USBD_Start>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009398:	f7f8 f988 	bl	80016ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800939c:	bf00      	nop
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	20000158 	.word	0x20000158
 80093a4:	20000304 	.word	0x20000304
 80093a8:	2000003c 	.word	0x2000003c
 80093ac:	20000148 	.word	0x20000148

080093b0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bc80      	pop	{r7}
 80093bc:	4770      	bx	lr

080093be <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80093be:	b480      	push	{r7}
 80093c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80093c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bc80      	pop	{r7}
 80093ca:	4770      	bx	lr

080093cc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 80093cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ce:	b093      	sub	sp, #76	; 0x4c
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	uint8_t buffer[0x40];
	memcpy(buffer, state, 0x40);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	461c      	mov	r4, r3
 80093d8:	f107 0608 	add.w	r6, r7, #8
 80093dc:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80093e0:	4635      	mov	r5, r6
 80093e2:	4623      	mov	r3, r4
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	6859      	ldr	r1, [r3, #4]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093ee:	3410      	adds	r4, #16
 80093f0:	3610      	adds	r6, #16
 80093f2:	4564      	cmp	r4, ip
 80093f4:	d1f4      	bne.n	80093e0 <CUSTOM_HID_OutEvent_FS+0x14>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80093f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80093fa:	4807      	ldr	r0, [pc, #28]	; (8009418 <CUSTOM_HID_OutEvent_FS+0x4c>)
 80093fc:	f7f9 fbbc 	bl	8002b78 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, 0x40, 100);
 8009400:	f107 0108 	add.w	r1, r7, #8
 8009404:	2364      	movs	r3, #100	; 0x64
 8009406:	2240      	movs	r2, #64	; 0x40
 8009408:	4804      	ldr	r0, [pc, #16]	; (800941c <CUSTOM_HID_OutEvent_FS+0x50>)
 800940a:	f7fb fd98 	bl	8004f3e <HAL_UART_Transmit>

  return (USBD_OK);
 800940e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009410:	4618      	mov	r0, r3
 8009412:	374c      	adds	r7, #76	; 0x4c
 8009414:	46bd      	mov	sp, r7
 8009416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009418:	40011000 	.word	0x40011000
 800941c:	2000029c 	.word	0x2000029c

08009420 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	6039      	str	r1, [r7, #0]
 800942a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	2212      	movs	r2, #18
 8009430:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009432:	4b03      	ldr	r3, [pc, #12]	; (8009440 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	bc80      	pop	{r7}
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	20000174 	.word	0x20000174

08009444 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2204      	movs	r2, #4
 8009454:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009456:	4b03      	ldr	r3, [pc, #12]	; (8009464 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	bc80      	pop	{r7}
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	20000188 	.word	0x20000188

08009468 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d105      	bne.n	8009486 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4907      	ldr	r1, [pc, #28]	; (800949c <USBD_FS_ProductStrDescriptor+0x34>)
 800947e:	4808      	ldr	r0, [pc, #32]	; (80094a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009480:	f7ff fe88 	bl	8009194 <USBD_GetString>
 8009484:	e004      	b.n	8009490 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	4904      	ldr	r1, [pc, #16]	; (800949c <USBD_FS_ProductStrDescriptor+0x34>)
 800948a:	4805      	ldr	r0, [pc, #20]	; (80094a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800948c:	f7ff fe82 	bl	8009194 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009490:	4b02      	ldr	r3, [pc, #8]	; (800949c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	200005c8 	.word	0x200005c8
 80094a0:	0800a50c 	.word	0x0800a50c

080094a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	6039      	str	r1, [r7, #0]
 80094ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	4904      	ldr	r1, [pc, #16]	; (80094c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094b4:	4804      	ldr	r0, [pc, #16]	; (80094c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094b6:	f7ff fe6d 	bl	8009194 <USBD_GetString>
  return USBD_StrDesc;
 80094ba:	4b02      	ldr	r3, [pc, #8]	; (80094c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	200005c8 	.word	0x200005c8
 80094c8:	0800a520 	.word	0x0800a520

080094cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	6039      	str	r1, [r7, #0]
 80094d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	221a      	movs	r2, #26
 80094dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094de:	f000 f843 	bl	8009568 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80094e2:	4b02      	ldr	r3, [pc, #8]	; (80094ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	2000018c 	.word	0x2000018c

080094f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d105      	bne.n	800950e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4907      	ldr	r1, [pc, #28]	; (8009524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009506:	4808      	ldr	r0, [pc, #32]	; (8009528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009508:	f7ff fe44 	bl	8009194 <USBD_GetString>
 800950c:	e004      	b.n	8009518 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	4904      	ldr	r1, [pc, #16]	; (8009524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009512:	4805      	ldr	r0, [pc, #20]	; (8009528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009514:	f7ff fe3e 	bl	8009194 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009518:	4b02      	ldr	r3, [pc, #8]	; (8009524 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200005c8 	.word	0x200005c8
 8009528:	0800a530 	.word	0x0800a530

0800952c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	6039      	str	r1, [r7, #0]
 8009536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	4907      	ldr	r1, [pc, #28]	; (8009560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009542:	4808      	ldr	r0, [pc, #32]	; (8009564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009544:	f7ff fe26 	bl	8009194 <USBD_GetString>
 8009548:	e004      	b.n	8009554 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800954e:	4805      	ldr	r0, [pc, #20]	; (8009564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009550:	f7ff fe20 	bl	8009194 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200005c8 	.word	0x200005c8
 8009564:	0800a53c 	.word	0x0800a53c

08009568 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <Get_SerialNum+0x44>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009574:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <Get_SerialNum+0x48>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800957a:	4b0e      	ldr	r3, [pc, #56]	; (80095b4 <Get_SerialNum+0x4c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4413      	add	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800958e:	2208      	movs	r2, #8
 8009590:	4909      	ldr	r1, [pc, #36]	; (80095b8 <Get_SerialNum+0x50>)
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 f814 	bl	80095c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009598:	2204      	movs	r2, #4
 800959a:	4908      	ldr	r1, [pc, #32]	; (80095bc <Get_SerialNum+0x54>)
 800959c:	68b8      	ldr	r0, [r7, #8]
 800959e:	f000 f80f 	bl	80095c0 <IntToUnicode>
  }
}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	1ffff7e8 	.word	0x1ffff7e8
 80095b0:	1ffff7ec 	.word	0x1ffff7ec
 80095b4:	1ffff7f0 	.word	0x1ffff7f0
 80095b8:	2000018e 	.word	0x2000018e
 80095bc:	2000019e 	.word	0x2000019e

080095c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095d2:	2300      	movs	r3, #0
 80095d4:	75fb      	strb	r3, [r7, #23]
 80095d6:	e027      	b.n	8009628 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	0f1b      	lsrs	r3, r3, #28
 80095dc:	2b09      	cmp	r3, #9
 80095de:	d80b      	bhi.n	80095f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	0f1b      	lsrs	r3, r3, #28
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	4619      	mov	r1, r3
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	440b      	add	r3, r1
 80095f0:	3230      	adds	r2, #48	; 0x30
 80095f2:	b2d2      	uxtb	r2, r2
 80095f4:	701a      	strb	r2, [r3, #0]
 80095f6:	e00a      	b.n	800960e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	0f1b      	lsrs	r3, r3, #28
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	4619      	mov	r1, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	440b      	add	r3, r1
 8009608:	3237      	adds	r2, #55	; 0x37
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009614:	7dfb      	ldrb	r3, [r7, #23]
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	3301      	adds	r3, #1
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	2200      	movs	r2, #0
 8009620:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	3301      	adds	r3, #1
 8009626:	75fb      	strb	r3, [r7, #23]
 8009628:	7dfa      	ldrb	r2, [r7, #23]
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	429a      	cmp	r2, r3
 800962e:	d3d3      	bcc.n	80095d8 <IntToUnicode+0x18>
  }
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr

0800963c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a0d      	ldr	r2, [pc, #52]	; (8009680 <HAL_PCD_MspInit+0x44>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d113      	bne.n	8009676 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800964e:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <HAL_PCD_MspInit+0x48>)
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	4a0c      	ldr	r2, [pc, #48]	; (8009684 <HAL_PCD_MspInit+0x48>)
 8009654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009658:	61d3      	str	r3, [r2, #28]
 800965a:	4b0a      	ldr	r3, [pc, #40]	; (8009684 <HAL_PCD_MspInit+0x48>)
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009666:	2200      	movs	r2, #0
 8009668:	2100      	movs	r1, #0
 800966a:	2014      	movs	r0, #20
 800966c:	f7f8 fec3 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009670:	2014      	movs	r0, #20
 8009672:	f7f8 fedc 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	40005c00 	.word	0x40005c00
 8009684:	40021000 	.word	0x40021000

08009688 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	f7fe fe48 	bl	8008334 <USBD_LL_SetupStage>
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80096be:	78fa      	ldrb	r2, [r7, #3]
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	440b      	add	r3, r1
 80096cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	4619      	mov	r1, r3
 80096d6:	f7fe fe7a 	bl	80083ce <USBD_LL_DataOutStage>
}
 80096da:	bf00      	nop
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	460b      	mov	r3, r1
 80096ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4613      	mov	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	440b      	add	r3, r1
 8009702:	333c      	adds	r3, #60	; 0x3c
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	4619      	mov	r1, r3
 800970a:	f7fe fed1 	bl	80084b0 <USBD_LL_DataInStage>
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009724:	4618      	mov	r0, r3
 8009726:	f7fe ffe1 	bl	80086ec <USBD_LL_SOF>
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800973a:	2301      	movs	r3, #1
 800973c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	2b02      	cmp	r3, #2
 8009744:	d001      	beq.n	800974a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009746:	f7f7 ffb1 	bl	80016ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009750:	7bfa      	ldrb	r2, [r7, #15]
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe ff91 	bl	800867c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe ff4a 	bl	80085fa <USBD_LL_Reset>
}
 8009766:	bf00      	nop
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe ff8b 	bl	800869a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800978c:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <HAL_PCD_SuspendCallback+0x30>)
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	4a03      	ldr	r2, [pc, #12]	; (80097a0 <HAL_PCD_SuspendCallback+0x30>)
 8009792:	f043 0306 	orr.w	r3, r3, #6
 8009796:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000ed00 	.word	0xe000ed00

080097a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe ff85 	bl	80086c2 <USBD_LL_Resume>
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80097c8:	4a23      	ldr	r2, [pc, #140]	; (8009858 <USBD_LL_Init+0x98>)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a21      	ldr	r2, [pc, #132]	; (8009858 <USBD_LL_Init+0x98>)
 80097d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80097d8:	4b1f      	ldr	r3, [pc, #124]	; (8009858 <USBD_LL_Init+0x98>)
 80097da:	4a20      	ldr	r2, [pc, #128]	; (800985c <USBD_LL_Init+0x9c>)
 80097dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097de:	4b1e      	ldr	r3, [pc, #120]	; (8009858 <USBD_LL_Init+0x98>)
 80097e0:	2208      	movs	r2, #8
 80097e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097e4:	4b1c      	ldr	r3, [pc, #112]	; (8009858 <USBD_LL_Init+0x98>)
 80097e6:	2202      	movs	r2, #2
 80097e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097ea:	4b1b      	ldr	r3, [pc, #108]	; (8009858 <USBD_LL_Init+0x98>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097f0:	4b19      	ldr	r3, [pc, #100]	; (8009858 <USBD_LL_Init+0x98>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097f6:	4b18      	ldr	r3, [pc, #96]	; (8009858 <USBD_LL_Init+0x98>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097fc:	4816      	ldr	r0, [pc, #88]	; (8009858 <USBD_LL_Init+0x98>)
 80097fe:	f7f9 f9d4 	bl	8002baa <HAL_PCD_Init>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009808:	f7f7 ff50 	bl	80016ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009812:	2318      	movs	r3, #24
 8009814:	2200      	movs	r2, #0
 8009816:	2100      	movs	r1, #0
 8009818:	f7fa fe31 	bl	800447e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009822:	2358      	movs	r3, #88	; 0x58
 8009824:	2200      	movs	r2, #0
 8009826:	2180      	movs	r1, #128	; 0x80
 8009828:	f7fa fe29 	bl	800447e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009832:	2398      	movs	r3, #152	; 0x98
 8009834:	2200      	movs	r2, #0
 8009836:	2181      	movs	r1, #129	; 0x81
 8009838:	f7fa fe21 	bl	800447e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009842:	23d8      	movs	r3, #216	; 0xd8
 8009844:	2200      	movs	r2, #0
 8009846:	2101      	movs	r1, #1
 8009848:	f7fa fe19 	bl	800447e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200007c8 	.word	0x200007c8
 800985c:	40005c00 	.word	0x40005c00

08009860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009876:	4618      	mov	r0, r3
 8009878:	f7f9 faa2 	bl	8002dc0 <HAL_PCD_Start>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f93c 	bl	8009b00 <USBD_Get_USB_Status>
 8009888:	4603      	mov	r3, r0
 800988a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988c:	7bbb      	ldrb	r3, [r7, #14]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	4608      	mov	r0, r1
 80098a0:	4611      	mov	r1, r2
 80098a2:	461a      	mov	r2, r3
 80098a4:	4603      	mov	r3, r0
 80098a6:	70fb      	strb	r3, [r7, #3]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70bb      	strb	r3, [r7, #2]
 80098ac:	4613      	mov	r3, r2
 80098ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098be:	78bb      	ldrb	r3, [r7, #2]
 80098c0:	883a      	ldrh	r2, [r7, #0]
 80098c2:	78f9      	ldrb	r1, [r7, #3]
 80098c4:	f7f9 fc1a 	bl	80030fc <HAL_PCD_EP_Open>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 f916 	bl	8009b00 <USBD_Get_USB_Status>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098fc:	78fa      	ldrb	r2, [r7, #3]
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f7f9 fc61 	bl	80031c8 <HAL_PCD_EP_Close>
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 f8f7 	bl	8009b00 <USBD_Get_USB_Status>
 8009912:	4603      	mov	r3, r0
 8009914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009916:	7bbb      	ldrb	r3, [r7, #14]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7f9 fd0a 	bl	8003358 <HAL_PCD_EP_SetStall>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	4618      	mov	r0, r3
 800994c:	f000 f8d8 	bl	8009b00 <USBD_Get_USB_Status>
 8009950:	4603      	mov	r3, r0
 8009952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009954:	7bbb      	ldrb	r3, [r7, #14]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009978:	78fa      	ldrb	r2, [r7, #3]
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f7f9 fd4b 	bl	8003418 <HAL_PCD_EP_ClrStall>
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 f8b9 	bl	8009b00 <USBD_Get_USB_Status>
 800998e:	4603      	mov	r3, r0
 8009990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009992:	7bbb      	ldrb	r3, [r7, #14]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	da0c      	bge.n	80099d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	00db      	lsls	r3, r3, #3
 80099ca:	440b      	add	r3, r1
 80099cc:	3302      	adds	r3, #2
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	e00b      	b.n	80099ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099d8:	68f9      	ldr	r1, [r7, #12]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	440b      	add	r3, r1
 80099e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bc80      	pop	{r7}
 80099f2:	4770      	bx	lr

080099f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7f9 fb4d 	bl	80030b2 <HAL_PCD_SetAddress>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f86e 	bl	8009b00 <USBD_Get_USB_Status>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b086      	sub	sp, #24
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	460b      	mov	r3, r1
 8009a40:	72fb      	strb	r3, [r7, #11]
 8009a42:	4613      	mov	r3, r2
 8009a44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a54:	893b      	ldrh	r3, [r7, #8]
 8009a56:	7af9      	ldrb	r1, [r7, #11]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	f7f9 fc3a 	bl	80032d2 <HAL_PCD_EP_Transmit>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 f84b 	bl	8009b00 <USBD_Get_USB_Status>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	607a      	str	r2, [r7, #4]
 8009a82:	461a      	mov	r2, r3
 8009a84:	460b      	mov	r3, r1
 8009a86:	72fb      	strb	r3, [r7, #11]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a9a:	893b      	ldrh	r3, [r7, #8]
 8009a9c:	7af9      	ldrb	r1, [r7, #11]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	f7f9 fbda 	bl	8003258 <HAL_PCD_EP_Receive>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 f828 	bl	8009b00 <USBD_Get_USB_Status>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ab4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009ac8:	4b02      	ldr	r3, [pc, #8]	; (8009ad4 <USBD_static_malloc+0x14>)
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bc80      	pop	{r7}
 8009ad2:	4770      	bx	lr
 8009ad4:	20000ab4 	.word	0x20000ab4

08009ad8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]

}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr

08009aea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bc80      	pop	{r7}
 8009afe:	4770      	bx	lr

08009b00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d817      	bhi.n	8009b44 <USBD_Get_USB_Status+0x44>
 8009b14:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <USBD_Get_USB_Status+0x1c>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b2d 	.word	0x08009b2d
 8009b20:	08009b33 	.word	0x08009b33
 8009b24:	08009b39 	.word	0x08009b39
 8009b28:	08009b3f 	.word	0x08009b3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b30:	e00b      	b.n	8009b4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b32:	2302      	movs	r3, #2
 8009b34:	73fb      	strb	r3, [r7, #15]
    break;
 8009b36:	e008      	b.n	8009b4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3c:	e005      	b.n	8009b4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	73fb      	strb	r3, [r7, #15]
    break;
 8009b42:	e002      	b.n	8009b4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b44:	2302      	movs	r3, #2
 8009b46:	73fb      	strb	r3, [r7, #15]
    break;
 8009b48:	bf00      	nop
  }
  return usb_status;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bc80      	pop	{r7}
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop

08009b58 <__errno>:
 8009b58:	4b01      	ldr	r3, [pc, #4]	; (8009b60 <__errno+0x8>)
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	200001a8 	.word	0x200001a8

08009b64 <__libc_init_array>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	2600      	movs	r6, #0
 8009b68:	4d0c      	ldr	r5, [pc, #48]	; (8009b9c <__libc_init_array+0x38>)
 8009b6a:	4c0d      	ldr	r4, [pc, #52]	; (8009ba0 <__libc_init_array+0x3c>)
 8009b6c:	1b64      	subs	r4, r4, r5
 8009b6e:	10a4      	asrs	r4, r4, #2
 8009b70:	42a6      	cmp	r6, r4
 8009b72:	d109      	bne.n	8009b88 <__libc_init_array+0x24>
 8009b74:	f000 fc9c 	bl	800a4b0 <_init>
 8009b78:	2600      	movs	r6, #0
 8009b7a:	4d0a      	ldr	r5, [pc, #40]	; (8009ba4 <__libc_init_array+0x40>)
 8009b7c:	4c0a      	ldr	r4, [pc, #40]	; (8009ba8 <__libc_init_array+0x44>)
 8009b7e:	1b64      	subs	r4, r4, r5
 8009b80:	10a4      	asrs	r4, r4, #2
 8009b82:	42a6      	cmp	r6, r4
 8009b84:	d105      	bne.n	8009b92 <__libc_init_array+0x2e>
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8c:	4798      	blx	r3
 8009b8e:	3601      	adds	r6, #1
 8009b90:	e7ee      	b.n	8009b70 <__libc_init_array+0xc>
 8009b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b96:	4798      	blx	r3
 8009b98:	3601      	adds	r6, #1
 8009b9a:	e7f2      	b.n	8009b82 <__libc_init_array+0x1e>
 8009b9c:	0800a59c 	.word	0x0800a59c
 8009ba0:	0800a59c 	.word	0x0800a59c
 8009ba4:	0800a59c 	.word	0x0800a59c
 8009ba8:	0800a5a0 	.word	0x0800a5a0

08009bac <memset>:
 8009bac:	4603      	mov	r3, r0
 8009bae:	4402      	add	r2, r0
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d100      	bne.n	8009bb6 <memset+0xa>
 8009bb4:	4770      	bx	lr
 8009bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009bba:	e7f9      	b.n	8009bb0 <memset+0x4>

08009bbc <siprintf>:
 8009bbc:	b40e      	push	{r1, r2, r3}
 8009bbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bc2:	b500      	push	{lr}
 8009bc4:	b09c      	sub	sp, #112	; 0x70
 8009bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8009bc8:	9002      	str	r0, [sp, #8]
 8009bca:	9006      	str	r0, [sp, #24]
 8009bcc:	9107      	str	r1, [sp, #28]
 8009bce:	9104      	str	r1, [sp, #16]
 8009bd0:	4808      	ldr	r0, [pc, #32]	; (8009bf4 <siprintf+0x38>)
 8009bd2:	4909      	ldr	r1, [pc, #36]	; (8009bf8 <siprintf+0x3c>)
 8009bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bd8:	9105      	str	r1, [sp, #20]
 8009bda:	6800      	ldr	r0, [r0, #0]
 8009bdc:	a902      	add	r1, sp, #8
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	f000 f868 	bl	8009cb4 <_svfiprintf_r>
 8009be4:	2200      	movs	r2, #0
 8009be6:	9b02      	ldr	r3, [sp, #8]
 8009be8:	701a      	strb	r2, [r3, #0]
 8009bea:	b01c      	add	sp, #112	; 0x70
 8009bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bf0:	b003      	add	sp, #12
 8009bf2:	4770      	bx	lr
 8009bf4:	200001a8 	.word	0x200001a8
 8009bf8:	ffff0208 	.word	0xffff0208

08009bfc <__ssputs_r>:
 8009bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c00:	688e      	ldr	r6, [r1, #8]
 8009c02:	4682      	mov	sl, r0
 8009c04:	429e      	cmp	r6, r3
 8009c06:	460c      	mov	r4, r1
 8009c08:	4690      	mov	r8, r2
 8009c0a:	461f      	mov	r7, r3
 8009c0c:	d838      	bhi.n	8009c80 <__ssputs_r+0x84>
 8009c0e:	898a      	ldrh	r2, [r1, #12]
 8009c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c14:	d032      	beq.n	8009c7c <__ssputs_r+0x80>
 8009c16:	6825      	ldr	r5, [r4, #0]
 8009c18:	6909      	ldr	r1, [r1, #16]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	eba5 0901 	sub.w	r9, r5, r1
 8009c20:	6965      	ldr	r5, [r4, #20]
 8009c22:	444b      	add	r3, r9
 8009c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c2c:	106d      	asrs	r5, r5, #1
 8009c2e:	429d      	cmp	r5, r3
 8009c30:	bf38      	it	cc
 8009c32:	461d      	movcc	r5, r3
 8009c34:	0553      	lsls	r3, r2, #21
 8009c36:	d531      	bpl.n	8009c9c <__ssputs_r+0xa0>
 8009c38:	4629      	mov	r1, r5
 8009c3a:	f000 fb6f 	bl	800a31c <_malloc_r>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	b950      	cbnz	r0, 8009c58 <__ssputs_r+0x5c>
 8009c42:	230c      	movs	r3, #12
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	f8ca 3000 	str.w	r3, [sl]
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	464a      	mov	r2, r9
 8009c5a:	6921      	ldr	r1, [r4, #16]
 8009c5c:	f000 face 	bl	800a1fc <memcpy>
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	6126      	str	r6, [r4, #16]
 8009c6e:	444e      	add	r6, r9
 8009c70:	6026      	str	r6, [r4, #0]
 8009c72:	463e      	mov	r6, r7
 8009c74:	6165      	str	r5, [r4, #20]
 8009c76:	eba5 0509 	sub.w	r5, r5, r9
 8009c7a:	60a5      	str	r5, [r4, #8]
 8009c7c:	42be      	cmp	r6, r7
 8009c7e:	d900      	bls.n	8009c82 <__ssputs_r+0x86>
 8009c80:	463e      	mov	r6, r7
 8009c82:	4632      	mov	r2, r6
 8009c84:	4641      	mov	r1, r8
 8009c86:	6820      	ldr	r0, [r4, #0]
 8009c88:	f000 fac6 	bl	800a218 <memmove>
 8009c8c:	68a3      	ldr	r3, [r4, #8]
 8009c8e:	2000      	movs	r0, #0
 8009c90:	1b9b      	subs	r3, r3, r6
 8009c92:	60a3      	str	r3, [r4, #8]
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	4433      	add	r3, r6
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	e7db      	b.n	8009c54 <__ssputs_r+0x58>
 8009c9c:	462a      	mov	r2, r5
 8009c9e:	f000 fbb1 	bl	800a404 <_realloc_r>
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d1e1      	bne.n	8009c6c <__ssputs_r+0x70>
 8009ca8:	4650      	mov	r0, sl
 8009caa:	6921      	ldr	r1, [r4, #16]
 8009cac:	f000 face 	bl	800a24c <_free_r>
 8009cb0:	e7c7      	b.n	8009c42 <__ssputs_r+0x46>
	...

08009cb4 <_svfiprintf_r>:
 8009cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb8:	4698      	mov	r8, r3
 8009cba:	898b      	ldrh	r3, [r1, #12]
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	061b      	lsls	r3, r3, #24
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	b09d      	sub	sp, #116	; 0x74
 8009cc6:	d50e      	bpl.n	8009ce6 <_svfiprintf_r+0x32>
 8009cc8:	690b      	ldr	r3, [r1, #16]
 8009cca:	b963      	cbnz	r3, 8009ce6 <_svfiprintf_r+0x32>
 8009ccc:	2140      	movs	r1, #64	; 0x40
 8009cce:	f000 fb25 	bl	800a31c <_malloc_r>
 8009cd2:	6028      	str	r0, [r5, #0]
 8009cd4:	6128      	str	r0, [r5, #16]
 8009cd6:	b920      	cbnz	r0, 8009ce2 <_svfiprintf_r+0x2e>
 8009cd8:	230c      	movs	r3, #12
 8009cda:	603b      	str	r3, [r7, #0]
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	e0d1      	b.n	8009e86 <_svfiprintf_r+0x1d2>
 8009ce2:	2340      	movs	r3, #64	; 0x40
 8009ce4:	616b      	str	r3, [r5, #20]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cea:	2320      	movs	r3, #32
 8009cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cf0:	2330      	movs	r3, #48	; 0x30
 8009cf2:	f04f 0901 	mov.w	r9, #1
 8009cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ea0 <_svfiprintf_r+0x1ec>
 8009cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d02:	4623      	mov	r3, r4
 8009d04:	469a      	mov	sl, r3
 8009d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d0a:	b10a      	cbz	r2, 8009d10 <_svfiprintf_r+0x5c>
 8009d0c:	2a25      	cmp	r2, #37	; 0x25
 8009d0e:	d1f9      	bne.n	8009d04 <_svfiprintf_r+0x50>
 8009d10:	ebba 0b04 	subs.w	fp, sl, r4
 8009d14:	d00b      	beq.n	8009d2e <_svfiprintf_r+0x7a>
 8009d16:	465b      	mov	r3, fp
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	f7ff ff6d 	bl	8009bfc <__ssputs_r>
 8009d22:	3001      	adds	r0, #1
 8009d24:	f000 80aa 	beq.w	8009e7c <_svfiprintf_r+0x1c8>
 8009d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d2a:	445a      	add	r2, fp
 8009d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 80a2 	beq.w	8009e7c <_svfiprintf_r+0x1c8>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d42:	f10a 0a01 	add.w	sl, sl, #1
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	9307      	str	r3, [sp, #28]
 8009d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d50:	4654      	mov	r4, sl
 8009d52:	2205      	movs	r2, #5
 8009d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d58:	4851      	ldr	r0, [pc, #324]	; (8009ea0 <_svfiprintf_r+0x1ec>)
 8009d5a:	f000 fa41 	bl	800a1e0 <memchr>
 8009d5e:	9a04      	ldr	r2, [sp, #16]
 8009d60:	b9d8      	cbnz	r0, 8009d9a <_svfiprintf_r+0xe6>
 8009d62:	06d0      	lsls	r0, r2, #27
 8009d64:	bf44      	itt	mi
 8009d66:	2320      	movmi	r3, #32
 8009d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d6c:	0711      	lsls	r1, r2, #28
 8009d6e:	bf44      	itt	mi
 8009d70:	232b      	movmi	r3, #43	; 0x2b
 8009d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d76:	f89a 3000 	ldrb.w	r3, [sl]
 8009d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d7c:	d015      	beq.n	8009daa <_svfiprintf_r+0xf6>
 8009d7e:	4654      	mov	r4, sl
 8009d80:	2000      	movs	r0, #0
 8009d82:	f04f 0c0a 	mov.w	ip, #10
 8009d86:	9a07      	ldr	r2, [sp, #28]
 8009d88:	4621      	mov	r1, r4
 8009d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8e:	3b30      	subs	r3, #48	; 0x30
 8009d90:	2b09      	cmp	r3, #9
 8009d92:	d94e      	bls.n	8009e32 <_svfiprintf_r+0x17e>
 8009d94:	b1b0      	cbz	r0, 8009dc4 <_svfiprintf_r+0x110>
 8009d96:	9207      	str	r2, [sp, #28]
 8009d98:	e014      	b.n	8009dc4 <_svfiprintf_r+0x110>
 8009d9a:	eba0 0308 	sub.w	r3, r0, r8
 8009d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009da2:	4313      	orrs	r3, r2
 8009da4:	46a2      	mov	sl, r4
 8009da6:	9304      	str	r3, [sp, #16]
 8009da8:	e7d2      	b.n	8009d50 <_svfiprintf_r+0x9c>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	1d19      	adds	r1, r3, #4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	9103      	str	r1, [sp, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	bfbb      	ittet	lt
 8009db6:	425b      	neglt	r3, r3
 8009db8:	f042 0202 	orrlt.w	r2, r2, #2
 8009dbc:	9307      	strge	r3, [sp, #28]
 8009dbe:	9307      	strlt	r3, [sp, #28]
 8009dc0:	bfb8      	it	lt
 8009dc2:	9204      	strlt	r2, [sp, #16]
 8009dc4:	7823      	ldrb	r3, [r4, #0]
 8009dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc8:	d10c      	bne.n	8009de4 <_svfiprintf_r+0x130>
 8009dca:	7863      	ldrb	r3, [r4, #1]
 8009dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dce:	d135      	bne.n	8009e3c <_svfiprintf_r+0x188>
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	3402      	adds	r4, #2
 8009dd4:	1d1a      	adds	r2, r3, #4
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	9203      	str	r2, [sp, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfb8      	it	lt
 8009dde:	f04f 33ff 	movlt.w	r3, #4294967295
 8009de2:	9305      	str	r3, [sp, #20]
 8009de4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009ea4 <_svfiprintf_r+0x1f0>
 8009de8:	2203      	movs	r2, #3
 8009dea:	4650      	mov	r0, sl
 8009dec:	7821      	ldrb	r1, [r4, #0]
 8009dee:	f000 f9f7 	bl	800a1e0 <memchr>
 8009df2:	b140      	cbz	r0, 8009e06 <_svfiprintf_r+0x152>
 8009df4:	2340      	movs	r3, #64	; 0x40
 8009df6:	eba0 000a 	sub.w	r0, r0, sl
 8009dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8009dfe:	9b04      	ldr	r3, [sp, #16]
 8009e00:	3401      	adds	r4, #1
 8009e02:	4303      	orrs	r3, r0
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0a:	2206      	movs	r2, #6
 8009e0c:	4826      	ldr	r0, [pc, #152]	; (8009ea8 <_svfiprintf_r+0x1f4>)
 8009e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e12:	f000 f9e5 	bl	800a1e0 <memchr>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d038      	beq.n	8009e8c <_svfiprintf_r+0x1d8>
 8009e1a:	4b24      	ldr	r3, [pc, #144]	; (8009eac <_svfiprintf_r+0x1f8>)
 8009e1c:	bb1b      	cbnz	r3, 8009e66 <_svfiprintf_r+0x1b2>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	3307      	adds	r3, #7
 8009e22:	f023 0307 	bic.w	r3, r3, #7
 8009e26:	3308      	adds	r3, #8
 8009e28:	9303      	str	r3, [sp, #12]
 8009e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2c:	4433      	add	r3, r6
 8009e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e30:	e767      	b.n	8009d02 <_svfiprintf_r+0x4e>
 8009e32:	460c      	mov	r4, r1
 8009e34:	2001      	movs	r0, #1
 8009e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e3a:	e7a5      	b.n	8009d88 <_svfiprintf_r+0xd4>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f04f 0c0a 	mov.w	ip, #10
 8009e42:	4619      	mov	r1, r3
 8009e44:	3401      	adds	r4, #1
 8009e46:	9305      	str	r3, [sp, #20]
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e4e:	3a30      	subs	r2, #48	; 0x30
 8009e50:	2a09      	cmp	r2, #9
 8009e52:	d903      	bls.n	8009e5c <_svfiprintf_r+0x1a8>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0c5      	beq.n	8009de4 <_svfiprintf_r+0x130>
 8009e58:	9105      	str	r1, [sp, #20]
 8009e5a:	e7c3      	b.n	8009de4 <_svfiprintf_r+0x130>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	2301      	movs	r3, #1
 8009e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e64:	e7f0      	b.n	8009e48 <_svfiprintf_r+0x194>
 8009e66:	ab03      	add	r3, sp, #12
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	462a      	mov	r2, r5
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	4b10      	ldr	r3, [pc, #64]	; (8009eb0 <_svfiprintf_r+0x1fc>)
 8009e70:	a904      	add	r1, sp, #16
 8009e72:	f3af 8000 	nop.w
 8009e76:	1c42      	adds	r2, r0, #1
 8009e78:	4606      	mov	r6, r0
 8009e7a:	d1d6      	bne.n	8009e2a <_svfiprintf_r+0x176>
 8009e7c:	89ab      	ldrh	r3, [r5, #12]
 8009e7e:	065b      	lsls	r3, r3, #25
 8009e80:	f53f af2c 	bmi.w	8009cdc <_svfiprintf_r+0x28>
 8009e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e86:	b01d      	add	sp, #116	; 0x74
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	462a      	mov	r2, r5
 8009e92:	4638      	mov	r0, r7
 8009e94:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <_svfiprintf_r+0x1fc>)
 8009e96:	a904      	add	r1, sp, #16
 8009e98:	f000 f87c 	bl	8009f94 <_printf_i>
 8009e9c:	e7eb      	b.n	8009e76 <_svfiprintf_r+0x1c2>
 8009e9e:	bf00      	nop
 8009ea0:	0800a568 	.word	0x0800a568
 8009ea4:	0800a56e 	.word	0x0800a56e
 8009ea8:	0800a572 	.word	0x0800a572
 8009eac:	00000000 	.word	0x00000000
 8009eb0:	08009bfd 	.word	0x08009bfd

08009eb4 <_printf_common>:
 8009eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	4616      	mov	r6, r2
 8009eba:	4699      	mov	r9, r3
 8009ebc:	688a      	ldr	r2, [r1, #8]
 8009ebe:	690b      	ldr	r3, [r1, #16]
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	bfb8      	it	lt
 8009ec6:	4613      	movlt	r3, r2
 8009ec8:	6033      	str	r3, [r6, #0]
 8009eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ece:	460c      	mov	r4, r1
 8009ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ed4:	b10a      	cbz	r2, 8009eda <_printf_common+0x26>
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	6033      	str	r3, [r6, #0]
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	0699      	lsls	r1, r3, #26
 8009ede:	bf42      	ittt	mi
 8009ee0:	6833      	ldrmi	r3, [r6, #0]
 8009ee2:	3302      	addmi	r3, #2
 8009ee4:	6033      	strmi	r3, [r6, #0]
 8009ee6:	6825      	ldr	r5, [r4, #0]
 8009ee8:	f015 0506 	ands.w	r5, r5, #6
 8009eec:	d106      	bne.n	8009efc <_printf_common+0x48>
 8009eee:	f104 0a19 	add.w	sl, r4, #25
 8009ef2:	68e3      	ldr	r3, [r4, #12]
 8009ef4:	6832      	ldr	r2, [r6, #0]
 8009ef6:	1a9b      	subs	r3, r3, r2
 8009ef8:	42ab      	cmp	r3, r5
 8009efa:	dc28      	bgt.n	8009f4e <_printf_common+0x9a>
 8009efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f00:	1e13      	subs	r3, r2, #0
 8009f02:	6822      	ldr	r2, [r4, #0]
 8009f04:	bf18      	it	ne
 8009f06:	2301      	movne	r3, #1
 8009f08:	0692      	lsls	r2, r2, #26
 8009f0a:	d42d      	bmi.n	8009f68 <_printf_common+0xb4>
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f14:	47c0      	blx	r8
 8009f16:	3001      	adds	r0, #1
 8009f18:	d020      	beq.n	8009f5c <_printf_common+0xa8>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	68e5      	ldr	r5, [r4, #12]
 8009f1e:	f003 0306 	and.w	r3, r3, #6
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	bf18      	it	ne
 8009f26:	2500      	movne	r5, #0
 8009f28:	6832      	ldr	r2, [r6, #0]
 8009f2a:	f04f 0600 	mov.w	r6, #0
 8009f2e:	68a3      	ldr	r3, [r4, #8]
 8009f30:	bf08      	it	eq
 8009f32:	1aad      	subeq	r5, r5, r2
 8009f34:	6922      	ldr	r2, [r4, #16]
 8009f36:	bf08      	it	eq
 8009f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	bfc4      	itt	gt
 8009f40:	1a9b      	subgt	r3, r3, r2
 8009f42:	18ed      	addgt	r5, r5, r3
 8009f44:	341a      	adds	r4, #26
 8009f46:	42b5      	cmp	r5, r6
 8009f48:	d11a      	bne.n	8009f80 <_printf_common+0xcc>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e008      	b.n	8009f60 <_printf_common+0xac>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4652      	mov	r2, sl
 8009f52:	4649      	mov	r1, r9
 8009f54:	4638      	mov	r0, r7
 8009f56:	47c0      	blx	r8
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d103      	bne.n	8009f64 <_printf_common+0xb0>
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f64:	3501      	adds	r5, #1
 8009f66:	e7c4      	b.n	8009ef2 <_printf_common+0x3e>
 8009f68:	2030      	movs	r0, #48	; 0x30
 8009f6a:	18e1      	adds	r1, r4, r3
 8009f6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f76:	4422      	add	r2, r4
 8009f78:	3302      	adds	r3, #2
 8009f7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f7e:	e7c5      	b.n	8009f0c <_printf_common+0x58>
 8009f80:	2301      	movs	r3, #1
 8009f82:	4622      	mov	r2, r4
 8009f84:	4649      	mov	r1, r9
 8009f86:	4638      	mov	r0, r7
 8009f88:	47c0      	blx	r8
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	d0e6      	beq.n	8009f5c <_printf_common+0xa8>
 8009f8e:	3601      	adds	r6, #1
 8009f90:	e7d9      	b.n	8009f46 <_printf_common+0x92>
	...

08009f94 <_printf_i>:
 8009f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	7e0f      	ldrb	r7, [r1, #24]
 8009f9a:	4691      	mov	r9, r2
 8009f9c:	2f78      	cmp	r7, #120	; 0x78
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	469a      	mov	sl, r3
 8009fa4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009faa:	d807      	bhi.n	8009fbc <_printf_i+0x28>
 8009fac:	2f62      	cmp	r7, #98	; 0x62
 8009fae:	d80a      	bhi.n	8009fc6 <_printf_i+0x32>
 8009fb0:	2f00      	cmp	r7, #0
 8009fb2:	f000 80d9 	beq.w	800a168 <_printf_i+0x1d4>
 8009fb6:	2f58      	cmp	r7, #88	; 0x58
 8009fb8:	f000 80a4 	beq.w	800a104 <_printf_i+0x170>
 8009fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fc4:	e03a      	b.n	800a03c <_printf_i+0xa8>
 8009fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fca:	2b15      	cmp	r3, #21
 8009fcc:	d8f6      	bhi.n	8009fbc <_printf_i+0x28>
 8009fce:	a101      	add	r1, pc, #4	; (adr r1, 8009fd4 <_printf_i+0x40>)
 8009fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fd4:	0800a02d 	.word	0x0800a02d
 8009fd8:	0800a041 	.word	0x0800a041
 8009fdc:	08009fbd 	.word	0x08009fbd
 8009fe0:	08009fbd 	.word	0x08009fbd
 8009fe4:	08009fbd 	.word	0x08009fbd
 8009fe8:	08009fbd 	.word	0x08009fbd
 8009fec:	0800a041 	.word	0x0800a041
 8009ff0:	08009fbd 	.word	0x08009fbd
 8009ff4:	08009fbd 	.word	0x08009fbd
 8009ff8:	08009fbd 	.word	0x08009fbd
 8009ffc:	08009fbd 	.word	0x08009fbd
 800a000:	0800a14f 	.word	0x0800a14f
 800a004:	0800a071 	.word	0x0800a071
 800a008:	0800a131 	.word	0x0800a131
 800a00c:	08009fbd 	.word	0x08009fbd
 800a010:	08009fbd 	.word	0x08009fbd
 800a014:	0800a171 	.word	0x0800a171
 800a018:	08009fbd 	.word	0x08009fbd
 800a01c:	0800a071 	.word	0x0800a071
 800a020:	08009fbd 	.word	0x08009fbd
 800a024:	08009fbd 	.word	0x08009fbd
 800a028:	0800a139 	.word	0x0800a139
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	1d1a      	adds	r2, r3, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	602a      	str	r2, [r5, #0]
 800a034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a03c:	2301      	movs	r3, #1
 800a03e:	e0a4      	b.n	800a18a <_printf_i+0x1f6>
 800a040:	6820      	ldr	r0, [r4, #0]
 800a042:	6829      	ldr	r1, [r5, #0]
 800a044:	0606      	lsls	r6, r0, #24
 800a046:	f101 0304 	add.w	r3, r1, #4
 800a04a:	d50a      	bpl.n	800a062 <_printf_i+0xce>
 800a04c:	680e      	ldr	r6, [r1, #0]
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	2e00      	cmp	r6, #0
 800a052:	da03      	bge.n	800a05c <_printf_i+0xc8>
 800a054:	232d      	movs	r3, #45	; 0x2d
 800a056:	4276      	negs	r6, r6
 800a058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a05c:	230a      	movs	r3, #10
 800a05e:	485e      	ldr	r0, [pc, #376]	; (800a1d8 <_printf_i+0x244>)
 800a060:	e019      	b.n	800a096 <_printf_i+0x102>
 800a062:	680e      	ldr	r6, [r1, #0]
 800a064:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	bf18      	it	ne
 800a06c:	b236      	sxthne	r6, r6
 800a06e:	e7ef      	b.n	800a050 <_printf_i+0xbc>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	6820      	ldr	r0, [r4, #0]
 800a074:	1d19      	adds	r1, r3, #4
 800a076:	6029      	str	r1, [r5, #0]
 800a078:	0601      	lsls	r1, r0, #24
 800a07a:	d501      	bpl.n	800a080 <_printf_i+0xec>
 800a07c:	681e      	ldr	r6, [r3, #0]
 800a07e:	e002      	b.n	800a086 <_printf_i+0xf2>
 800a080:	0646      	lsls	r6, r0, #25
 800a082:	d5fb      	bpl.n	800a07c <_printf_i+0xe8>
 800a084:	881e      	ldrh	r6, [r3, #0]
 800a086:	2f6f      	cmp	r7, #111	; 0x6f
 800a088:	bf0c      	ite	eq
 800a08a:	2308      	moveq	r3, #8
 800a08c:	230a      	movne	r3, #10
 800a08e:	4852      	ldr	r0, [pc, #328]	; (800a1d8 <_printf_i+0x244>)
 800a090:	2100      	movs	r1, #0
 800a092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a096:	6865      	ldr	r5, [r4, #4]
 800a098:	2d00      	cmp	r5, #0
 800a09a:	bfa8      	it	ge
 800a09c:	6821      	ldrge	r1, [r4, #0]
 800a09e:	60a5      	str	r5, [r4, #8]
 800a0a0:	bfa4      	itt	ge
 800a0a2:	f021 0104 	bicge.w	r1, r1, #4
 800a0a6:	6021      	strge	r1, [r4, #0]
 800a0a8:	b90e      	cbnz	r6, 800a0ae <_printf_i+0x11a>
 800a0aa:	2d00      	cmp	r5, #0
 800a0ac:	d04d      	beq.n	800a14a <_printf_i+0x1b6>
 800a0ae:	4615      	mov	r5, r2
 800a0b0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0b4:	fb03 6711 	mls	r7, r3, r1, r6
 800a0b8:	5dc7      	ldrb	r7, [r0, r7]
 800a0ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0be:	4637      	mov	r7, r6
 800a0c0:	42bb      	cmp	r3, r7
 800a0c2:	460e      	mov	r6, r1
 800a0c4:	d9f4      	bls.n	800a0b0 <_printf_i+0x11c>
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d10b      	bne.n	800a0e2 <_printf_i+0x14e>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	07de      	lsls	r6, r3, #31
 800a0ce:	d508      	bpl.n	800a0e2 <_printf_i+0x14e>
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	6861      	ldr	r1, [r4, #4]
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	bfde      	ittt	le
 800a0d8:	2330      	movle	r3, #48	; 0x30
 800a0da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0de:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0e2:	1b52      	subs	r2, r2, r5
 800a0e4:	6122      	str	r2, [r4, #16]
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	f8cd a000 	str.w	sl, [sp]
 800a0f0:	aa03      	add	r2, sp, #12
 800a0f2:	f7ff fedf 	bl	8009eb4 <_printf_common>
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d14c      	bne.n	800a194 <_printf_i+0x200>
 800a0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fe:	b004      	add	sp, #16
 800a100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a104:	4834      	ldr	r0, [pc, #208]	; (800a1d8 <_printf_i+0x244>)
 800a106:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a10a:	6829      	ldr	r1, [r5, #0]
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	f851 6b04 	ldr.w	r6, [r1], #4
 800a112:	6029      	str	r1, [r5, #0]
 800a114:	061d      	lsls	r5, r3, #24
 800a116:	d514      	bpl.n	800a142 <_printf_i+0x1ae>
 800a118:	07df      	lsls	r7, r3, #31
 800a11a:	bf44      	itt	mi
 800a11c:	f043 0320 	orrmi.w	r3, r3, #32
 800a120:	6023      	strmi	r3, [r4, #0]
 800a122:	b91e      	cbnz	r6, 800a12c <_printf_i+0x198>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	f023 0320 	bic.w	r3, r3, #32
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	2310      	movs	r3, #16
 800a12e:	e7af      	b.n	800a090 <_printf_i+0xfc>
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	f043 0320 	orr.w	r3, r3, #32
 800a136:	6023      	str	r3, [r4, #0]
 800a138:	2378      	movs	r3, #120	; 0x78
 800a13a:	4828      	ldr	r0, [pc, #160]	; (800a1dc <_printf_i+0x248>)
 800a13c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a140:	e7e3      	b.n	800a10a <_printf_i+0x176>
 800a142:	0659      	lsls	r1, r3, #25
 800a144:	bf48      	it	mi
 800a146:	b2b6      	uxthmi	r6, r6
 800a148:	e7e6      	b.n	800a118 <_printf_i+0x184>
 800a14a:	4615      	mov	r5, r2
 800a14c:	e7bb      	b.n	800a0c6 <_printf_i+0x132>
 800a14e:	682b      	ldr	r3, [r5, #0]
 800a150:	6826      	ldr	r6, [r4, #0]
 800a152:	1d18      	adds	r0, r3, #4
 800a154:	6961      	ldr	r1, [r4, #20]
 800a156:	6028      	str	r0, [r5, #0]
 800a158:	0635      	lsls	r5, r6, #24
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	d501      	bpl.n	800a162 <_printf_i+0x1ce>
 800a15e:	6019      	str	r1, [r3, #0]
 800a160:	e002      	b.n	800a168 <_printf_i+0x1d4>
 800a162:	0670      	lsls	r0, r6, #25
 800a164:	d5fb      	bpl.n	800a15e <_printf_i+0x1ca>
 800a166:	8019      	strh	r1, [r3, #0]
 800a168:	2300      	movs	r3, #0
 800a16a:	4615      	mov	r5, r2
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	e7ba      	b.n	800a0e6 <_printf_i+0x152>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	2100      	movs	r1, #0
 800a174:	1d1a      	adds	r2, r3, #4
 800a176:	602a      	str	r2, [r5, #0]
 800a178:	681d      	ldr	r5, [r3, #0]
 800a17a:	6862      	ldr	r2, [r4, #4]
 800a17c:	4628      	mov	r0, r5
 800a17e:	f000 f82f 	bl	800a1e0 <memchr>
 800a182:	b108      	cbz	r0, 800a188 <_printf_i+0x1f4>
 800a184:	1b40      	subs	r0, r0, r5
 800a186:	6060      	str	r0, [r4, #4]
 800a188:	6863      	ldr	r3, [r4, #4]
 800a18a:	6123      	str	r3, [r4, #16]
 800a18c:	2300      	movs	r3, #0
 800a18e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a192:	e7a8      	b.n	800a0e6 <_printf_i+0x152>
 800a194:	462a      	mov	r2, r5
 800a196:	4649      	mov	r1, r9
 800a198:	4640      	mov	r0, r8
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	47d0      	blx	sl
 800a19e:	3001      	adds	r0, #1
 800a1a0:	d0ab      	beq.n	800a0fa <_printf_i+0x166>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	079b      	lsls	r3, r3, #30
 800a1a6:	d413      	bmi.n	800a1d0 <_printf_i+0x23c>
 800a1a8:	68e0      	ldr	r0, [r4, #12]
 800a1aa:	9b03      	ldr	r3, [sp, #12]
 800a1ac:	4298      	cmp	r0, r3
 800a1ae:	bfb8      	it	lt
 800a1b0:	4618      	movlt	r0, r3
 800a1b2:	e7a4      	b.n	800a0fe <_printf_i+0x16a>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4632      	mov	r2, r6
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	47d0      	blx	sl
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d09b      	beq.n	800a0fa <_printf_i+0x166>
 800a1c2:	3501      	adds	r5, #1
 800a1c4:	68e3      	ldr	r3, [r4, #12]
 800a1c6:	9903      	ldr	r1, [sp, #12]
 800a1c8:	1a5b      	subs	r3, r3, r1
 800a1ca:	42ab      	cmp	r3, r5
 800a1cc:	dcf2      	bgt.n	800a1b4 <_printf_i+0x220>
 800a1ce:	e7eb      	b.n	800a1a8 <_printf_i+0x214>
 800a1d0:	2500      	movs	r5, #0
 800a1d2:	f104 0619 	add.w	r6, r4, #25
 800a1d6:	e7f5      	b.n	800a1c4 <_printf_i+0x230>
 800a1d8:	0800a579 	.word	0x0800a579
 800a1dc:	0800a58a 	.word	0x0800a58a

0800a1e0 <memchr>:
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	b2c9      	uxtb	r1, r1
 800a1e6:	4402      	add	r2, r0
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	d101      	bne.n	800a1f2 <memchr+0x12>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e003      	b.n	800a1fa <memchr+0x1a>
 800a1f2:	7804      	ldrb	r4, [r0, #0]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	428c      	cmp	r4, r1
 800a1f8:	d1f6      	bne.n	800a1e8 <memchr+0x8>
 800a1fa:	bd10      	pop	{r4, pc}

0800a1fc <memcpy>:
 800a1fc:	440a      	add	r2, r1
 800a1fe:	4291      	cmp	r1, r2
 800a200:	f100 33ff 	add.w	r3, r0, #4294967295
 800a204:	d100      	bne.n	800a208 <memcpy+0xc>
 800a206:	4770      	bx	lr
 800a208:	b510      	push	{r4, lr}
 800a20a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a20e:	4291      	cmp	r1, r2
 800a210:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a214:	d1f9      	bne.n	800a20a <memcpy+0xe>
 800a216:	bd10      	pop	{r4, pc}

0800a218 <memmove>:
 800a218:	4288      	cmp	r0, r1
 800a21a:	b510      	push	{r4, lr}
 800a21c:	eb01 0402 	add.w	r4, r1, r2
 800a220:	d902      	bls.n	800a228 <memmove+0x10>
 800a222:	4284      	cmp	r4, r0
 800a224:	4623      	mov	r3, r4
 800a226:	d807      	bhi.n	800a238 <memmove+0x20>
 800a228:	1e43      	subs	r3, r0, #1
 800a22a:	42a1      	cmp	r1, r4
 800a22c:	d008      	beq.n	800a240 <memmove+0x28>
 800a22e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a232:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a236:	e7f8      	b.n	800a22a <memmove+0x12>
 800a238:	4601      	mov	r1, r0
 800a23a:	4402      	add	r2, r0
 800a23c:	428a      	cmp	r2, r1
 800a23e:	d100      	bne.n	800a242 <memmove+0x2a>
 800a240:	bd10      	pop	{r4, pc}
 800a242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a24a:	e7f7      	b.n	800a23c <memmove+0x24>

0800a24c <_free_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4605      	mov	r5, r0
 800a250:	2900      	cmp	r1, #0
 800a252:	d040      	beq.n	800a2d6 <_free_r+0x8a>
 800a254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a258:	1f0c      	subs	r4, r1, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfb8      	it	lt
 800a25e:	18e4      	addlt	r4, r4, r3
 800a260:	f000 f910 	bl	800a484 <__malloc_lock>
 800a264:	4a1c      	ldr	r2, [pc, #112]	; (800a2d8 <_free_r+0x8c>)
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	b933      	cbnz	r3, 800a278 <_free_r+0x2c>
 800a26a:	6063      	str	r3, [r4, #4]
 800a26c:	6014      	str	r4, [r2, #0]
 800a26e:	4628      	mov	r0, r5
 800a270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a274:	f000 b90c 	b.w	800a490 <__malloc_unlock>
 800a278:	42a3      	cmp	r3, r4
 800a27a:	d908      	bls.n	800a28e <_free_r+0x42>
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	1821      	adds	r1, r4, r0
 800a280:	428b      	cmp	r3, r1
 800a282:	bf01      	itttt	eq
 800a284:	6819      	ldreq	r1, [r3, #0]
 800a286:	685b      	ldreq	r3, [r3, #4]
 800a288:	1809      	addeq	r1, r1, r0
 800a28a:	6021      	streq	r1, [r4, #0]
 800a28c:	e7ed      	b.n	800a26a <_free_r+0x1e>
 800a28e:	461a      	mov	r2, r3
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	b10b      	cbz	r3, 800a298 <_free_r+0x4c>
 800a294:	42a3      	cmp	r3, r4
 800a296:	d9fa      	bls.n	800a28e <_free_r+0x42>
 800a298:	6811      	ldr	r1, [r2, #0]
 800a29a:	1850      	adds	r0, r2, r1
 800a29c:	42a0      	cmp	r0, r4
 800a29e:	d10b      	bne.n	800a2b8 <_free_r+0x6c>
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	4401      	add	r1, r0
 800a2a4:	1850      	adds	r0, r2, r1
 800a2a6:	4283      	cmp	r3, r0
 800a2a8:	6011      	str	r1, [r2, #0]
 800a2aa:	d1e0      	bne.n	800a26e <_free_r+0x22>
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	4401      	add	r1, r0
 800a2b2:	6011      	str	r1, [r2, #0]
 800a2b4:	6053      	str	r3, [r2, #4]
 800a2b6:	e7da      	b.n	800a26e <_free_r+0x22>
 800a2b8:	d902      	bls.n	800a2c0 <_free_r+0x74>
 800a2ba:	230c      	movs	r3, #12
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	e7d6      	b.n	800a26e <_free_r+0x22>
 800a2c0:	6820      	ldr	r0, [r4, #0]
 800a2c2:	1821      	adds	r1, r4, r0
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	bf01      	itttt	eq
 800a2c8:	6819      	ldreq	r1, [r3, #0]
 800a2ca:	685b      	ldreq	r3, [r3, #4]
 800a2cc:	1809      	addeq	r1, r1, r0
 800a2ce:	6021      	streq	r1, [r4, #0]
 800a2d0:	6063      	str	r3, [r4, #4]
 800a2d2:	6054      	str	r4, [r2, #4]
 800a2d4:	e7cb      	b.n	800a26e <_free_r+0x22>
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	20000b0c 	.word	0x20000b0c

0800a2dc <sbrk_aligned>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	4e0e      	ldr	r6, [pc, #56]	; (800a318 <sbrk_aligned+0x3c>)
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	6831      	ldr	r1, [r6, #0]
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	b911      	cbnz	r1, 800a2ee <sbrk_aligned+0x12>
 800a2e8:	f000 f8bc 	bl	800a464 <_sbrk_r>
 800a2ec:	6030      	str	r0, [r6, #0]
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f000 f8b7 	bl	800a464 <_sbrk_r>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d00a      	beq.n	800a310 <sbrk_aligned+0x34>
 800a2fa:	1cc4      	adds	r4, r0, #3
 800a2fc:	f024 0403 	bic.w	r4, r4, #3
 800a300:	42a0      	cmp	r0, r4
 800a302:	d007      	beq.n	800a314 <sbrk_aligned+0x38>
 800a304:	1a21      	subs	r1, r4, r0
 800a306:	4628      	mov	r0, r5
 800a308:	f000 f8ac 	bl	800a464 <_sbrk_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	d101      	bne.n	800a314 <sbrk_aligned+0x38>
 800a310:	f04f 34ff 	mov.w	r4, #4294967295
 800a314:	4620      	mov	r0, r4
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	20000b10 	.word	0x20000b10

0800a31c <_malloc_r>:
 800a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a320:	1ccd      	adds	r5, r1, #3
 800a322:	f025 0503 	bic.w	r5, r5, #3
 800a326:	3508      	adds	r5, #8
 800a328:	2d0c      	cmp	r5, #12
 800a32a:	bf38      	it	cc
 800a32c:	250c      	movcc	r5, #12
 800a32e:	2d00      	cmp	r5, #0
 800a330:	4607      	mov	r7, r0
 800a332:	db01      	blt.n	800a338 <_malloc_r+0x1c>
 800a334:	42a9      	cmp	r1, r5
 800a336:	d905      	bls.n	800a344 <_malloc_r+0x28>
 800a338:	230c      	movs	r3, #12
 800a33a:	2600      	movs	r6, #0
 800a33c:	603b      	str	r3, [r7, #0]
 800a33e:	4630      	mov	r0, r6
 800a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a344:	4e2e      	ldr	r6, [pc, #184]	; (800a400 <_malloc_r+0xe4>)
 800a346:	f000 f89d 	bl	800a484 <__malloc_lock>
 800a34a:	6833      	ldr	r3, [r6, #0]
 800a34c:	461c      	mov	r4, r3
 800a34e:	bb34      	cbnz	r4, 800a39e <_malloc_r+0x82>
 800a350:	4629      	mov	r1, r5
 800a352:	4638      	mov	r0, r7
 800a354:	f7ff ffc2 	bl	800a2dc <sbrk_aligned>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	4604      	mov	r4, r0
 800a35c:	d14d      	bne.n	800a3fa <_malloc_r+0xde>
 800a35e:	6834      	ldr	r4, [r6, #0]
 800a360:	4626      	mov	r6, r4
 800a362:	2e00      	cmp	r6, #0
 800a364:	d140      	bne.n	800a3e8 <_malloc_r+0xcc>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	4631      	mov	r1, r6
 800a36a:	4638      	mov	r0, r7
 800a36c:	eb04 0803 	add.w	r8, r4, r3
 800a370:	f000 f878 	bl	800a464 <_sbrk_r>
 800a374:	4580      	cmp	r8, r0
 800a376:	d13a      	bne.n	800a3ee <_malloc_r+0xd2>
 800a378:	6821      	ldr	r1, [r4, #0]
 800a37a:	3503      	adds	r5, #3
 800a37c:	1a6d      	subs	r5, r5, r1
 800a37e:	f025 0503 	bic.w	r5, r5, #3
 800a382:	3508      	adds	r5, #8
 800a384:	2d0c      	cmp	r5, #12
 800a386:	bf38      	it	cc
 800a388:	250c      	movcc	r5, #12
 800a38a:	4638      	mov	r0, r7
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7ff ffa5 	bl	800a2dc <sbrk_aligned>
 800a392:	3001      	adds	r0, #1
 800a394:	d02b      	beq.n	800a3ee <_malloc_r+0xd2>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	442b      	add	r3, r5
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	e00e      	b.n	800a3bc <_malloc_r+0xa0>
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	1b52      	subs	r2, r2, r5
 800a3a2:	d41e      	bmi.n	800a3e2 <_malloc_r+0xc6>
 800a3a4:	2a0b      	cmp	r2, #11
 800a3a6:	d916      	bls.n	800a3d6 <_malloc_r+0xba>
 800a3a8:	1961      	adds	r1, r4, r5
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	6025      	str	r5, [r4, #0]
 800a3ae:	bf18      	it	ne
 800a3b0:	6059      	strne	r1, [r3, #4]
 800a3b2:	6863      	ldr	r3, [r4, #4]
 800a3b4:	bf08      	it	eq
 800a3b6:	6031      	streq	r1, [r6, #0]
 800a3b8:	5162      	str	r2, [r4, r5]
 800a3ba:	604b      	str	r3, [r1, #4]
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f104 060b 	add.w	r6, r4, #11
 800a3c2:	f000 f865 	bl	800a490 <__malloc_unlock>
 800a3c6:	f026 0607 	bic.w	r6, r6, #7
 800a3ca:	1d23      	adds	r3, r4, #4
 800a3cc:	1af2      	subs	r2, r6, r3
 800a3ce:	d0b6      	beq.n	800a33e <_malloc_r+0x22>
 800a3d0:	1b9b      	subs	r3, r3, r6
 800a3d2:	50a3      	str	r3, [r4, r2]
 800a3d4:	e7b3      	b.n	800a33e <_malloc_r+0x22>
 800a3d6:	6862      	ldr	r2, [r4, #4]
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	bf0c      	ite	eq
 800a3dc:	6032      	streq	r2, [r6, #0]
 800a3de:	605a      	strne	r2, [r3, #4]
 800a3e0:	e7ec      	b.n	800a3bc <_malloc_r+0xa0>
 800a3e2:	4623      	mov	r3, r4
 800a3e4:	6864      	ldr	r4, [r4, #4]
 800a3e6:	e7b2      	b.n	800a34e <_malloc_r+0x32>
 800a3e8:	4634      	mov	r4, r6
 800a3ea:	6876      	ldr	r6, [r6, #4]
 800a3ec:	e7b9      	b.n	800a362 <_malloc_r+0x46>
 800a3ee:	230c      	movs	r3, #12
 800a3f0:	4638      	mov	r0, r7
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	f000 f84c 	bl	800a490 <__malloc_unlock>
 800a3f8:	e7a1      	b.n	800a33e <_malloc_r+0x22>
 800a3fa:	6025      	str	r5, [r4, #0]
 800a3fc:	e7de      	b.n	800a3bc <_malloc_r+0xa0>
 800a3fe:	bf00      	nop
 800a400:	20000b0c 	.word	0x20000b0c

0800a404 <_realloc_r>:
 800a404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a408:	4680      	mov	r8, r0
 800a40a:	4614      	mov	r4, r2
 800a40c:	460e      	mov	r6, r1
 800a40e:	b921      	cbnz	r1, 800a41a <_realloc_r+0x16>
 800a410:	4611      	mov	r1, r2
 800a412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a416:	f7ff bf81 	b.w	800a31c <_malloc_r>
 800a41a:	b92a      	cbnz	r2, 800a428 <_realloc_r+0x24>
 800a41c:	f7ff ff16 	bl	800a24c <_free_r>
 800a420:	4625      	mov	r5, r4
 800a422:	4628      	mov	r0, r5
 800a424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a428:	f000 f838 	bl	800a49c <_malloc_usable_size_r>
 800a42c:	4284      	cmp	r4, r0
 800a42e:	4607      	mov	r7, r0
 800a430:	d802      	bhi.n	800a438 <_realloc_r+0x34>
 800a432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a436:	d812      	bhi.n	800a45e <_realloc_r+0x5a>
 800a438:	4621      	mov	r1, r4
 800a43a:	4640      	mov	r0, r8
 800a43c:	f7ff ff6e 	bl	800a31c <_malloc_r>
 800a440:	4605      	mov	r5, r0
 800a442:	2800      	cmp	r0, #0
 800a444:	d0ed      	beq.n	800a422 <_realloc_r+0x1e>
 800a446:	42bc      	cmp	r4, r7
 800a448:	4622      	mov	r2, r4
 800a44a:	4631      	mov	r1, r6
 800a44c:	bf28      	it	cs
 800a44e:	463a      	movcs	r2, r7
 800a450:	f7ff fed4 	bl	800a1fc <memcpy>
 800a454:	4631      	mov	r1, r6
 800a456:	4640      	mov	r0, r8
 800a458:	f7ff fef8 	bl	800a24c <_free_r>
 800a45c:	e7e1      	b.n	800a422 <_realloc_r+0x1e>
 800a45e:	4635      	mov	r5, r6
 800a460:	e7df      	b.n	800a422 <_realloc_r+0x1e>
	...

0800a464 <_sbrk_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	2300      	movs	r3, #0
 800a468:	4d05      	ldr	r5, [pc, #20]	; (800a480 <_sbrk_r+0x1c>)
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	f7f7 fa36 	bl	80018e0 <_sbrk>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d102      	bne.n	800a47e <_sbrk_r+0x1a>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	b103      	cbz	r3, 800a47e <_sbrk_r+0x1a>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	20000b14 	.word	0x20000b14

0800a484 <__malloc_lock>:
 800a484:	4801      	ldr	r0, [pc, #4]	; (800a48c <__malloc_lock+0x8>)
 800a486:	f000 b811 	b.w	800a4ac <__retarget_lock_acquire_recursive>
 800a48a:	bf00      	nop
 800a48c:	20000b18 	.word	0x20000b18

0800a490 <__malloc_unlock>:
 800a490:	4801      	ldr	r0, [pc, #4]	; (800a498 <__malloc_unlock+0x8>)
 800a492:	f000 b80c 	b.w	800a4ae <__retarget_lock_release_recursive>
 800a496:	bf00      	nop
 800a498:	20000b18 	.word	0x20000b18

0800a49c <_malloc_usable_size_r>:
 800a49c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a0:	1f18      	subs	r0, r3, #4
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bfbc      	itt	lt
 800a4a6:	580b      	ldrlt	r3, [r1, r0]
 800a4a8:	18c0      	addlt	r0, r0, r3
 800a4aa:	4770      	bx	lr

0800a4ac <__retarget_lock_acquire_recursive>:
 800a4ac:	4770      	bx	lr

0800a4ae <__retarget_lock_release_recursive>:
 800a4ae:	4770      	bx	lr

0800a4b0 <_init>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	bf00      	nop
 800a4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b6:	bc08      	pop	{r3}
 800a4b8:	469e      	mov	lr, r3
 800a4ba:	4770      	bx	lr

0800a4bc <_fini>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	bf00      	nop
 800a4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c2:	bc08      	pop	{r3}
 800a4c4:	469e      	mov	lr, r3
 800a4c6:	4770      	bx	lr

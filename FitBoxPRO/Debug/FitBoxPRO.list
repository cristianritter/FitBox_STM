
FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008ff0  08008ff0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ff0  08008ff0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  200001e4  080091dc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  080091dc  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010400  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ca  00000000  00000000  0003060d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8e5  00000000  00000000  000351a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120b9  00000000  00000000  0004fa85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c3e9  00000000  00000000  00061b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edf27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bbc  00000000  00000000  000edf78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08008f04 	.word	0x08008f04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	08008f04 	.word	0x08008f04

0800014c <LerADCS>:
} joystickHID;
joystickHID joystickhid = {0, 0, 0, 0, 0, 0, 0, 0};

uint16_t ADCValue[3] = {0, 1, 2};

void LerADCS(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//  ADCValue[0] = HAL_ADC_GetValue(&hadc1); // axis x
//  ADCValue[1] = HAL_ADC_GetValue(&hadc1); // axis y
//  ADCValue[2] = HAL_ADC_GetValue(&hadc1); // axis z
  joystickhid.rx_8lsb = (ADCValue[0]);
 8000150:	4b15      	ldr	r3, [pc, #84]	; (80001a8 <LerADCS+0x5c>)
 8000152:	881b      	ldrh	r3, [r3, #0]
 8000154:	b2da      	uxtb	r2, r3
 8000156:	4b15      	ldr	r3, [pc, #84]	; (80001ac <LerADCS+0x60>)
 8000158:	701a      	strb	r2, [r3, #0]
  joystickhid.ry_4lsb_rx_4msb = ((ADCValue[1] & 0xf) << 4 | ADCValue[0] >> 8);
 800015a:	4b13      	ldr	r3, [pc, #76]	; (80001a8 <LerADCS+0x5c>)
 800015c:	885b      	ldrh	r3, [r3, #2]
 800015e:	011b      	lsls	r3, r3, #4
 8000160:	b25a      	sxtb	r2, r3
 8000162:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <LerADCS+0x5c>)
 8000164:	881b      	ldrh	r3, [r3, #0]
 8000166:	0a1b      	lsrs	r3, r3, #8
 8000168:	b29b      	uxth	r3, r3
 800016a:	b25b      	sxtb	r3, r3
 800016c:	4313      	orrs	r3, r2
 800016e:	b25b      	sxtb	r3, r3
 8000170:	b2da      	uxtb	r2, r3
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <LerADCS+0x60>)
 8000174:	705a      	strb	r2, [r3, #1]
  joystickhid.ry_8msb = ADCValue[1] >> 4;
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <LerADCS+0x5c>)
 8000178:	885b      	ldrh	r3, [r3, #2]
 800017a:	091b      	lsrs	r3, r3, #4
 800017c:	b29b      	uxth	r3, r3
 800017e:	b2da      	uxtb	r2, r3
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <LerADCS+0x60>)
 8000182:	709a      	strb	r2, [r3, #2]
  joystickhid.rz_8lsb = ADCValue[2];
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <LerADCS+0x5c>)
 8000186:	889b      	ldrh	r3, [r3, #4]
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b08      	ldr	r3, [pc, #32]	; (80001ac <LerADCS+0x60>)
 800018c:	70da      	strb	r2, [r3, #3]
  joystickhid.rz_4msb = ADCValue[2] >> 4;
 800018e:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <LerADCS+0x5c>)
 8000190:	889b      	ldrh	r3, [r3, #4]
 8000192:	091b      	lsrs	r3, r3, #4
 8000194:	b29b      	uxth	r3, r3
 8000196:	b2da      	uxtb	r2, r3
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <LerADCS+0x60>)
 800019a:	711a      	strb	r2, [r3, #4]
  HAL_Delay(1);
 800019c:	2001      	movs	r0, #1
 800019e:	f000 fbd5 	bl	800094c <HAL_Delay>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	200002b8 	.word	0x200002b8

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b5b0      	push	{r4, r5, r7, lr}
 80001b2:	b08e      	sub	sp, #56	; 0x38
 80001b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f000 fb67 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f89d 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 f99d 	bl	80004fc <MX_GPIO_Init>
  MX_DMA_Init();
 80001c2:	f000 f97d 	bl	80004c0 <MX_DMA_Init>
  MX_ADC1_Init();
 80001c6:	f000 f8f5 	bl	80003b4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80001ca:	f007 fdeb 	bl	8007da4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80001ce:	f000 f94d 	bl	800046c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LerADCS();
 80001d2:	f7ff ffbb 	bl	800014c <LerADCS>
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80001d6:	2208      	movs	r2, #8
 80001d8:	4941      	ldr	r1, [pc, #260]	; (80002e0 <main+0x130>)
 80001da:	4842      	ldr	r0, [pc, #264]	; (80002e4 <main+0x134>)
 80001dc:	f006 fc80 	bl	8006ae0 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f000 fbb3 	bl	800094c <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Valores inicio !!!\r\n"; //Data to send
 80001e6:	4b40      	ldr	r3, [pc, #256]	; (80002e8 <main+0x138>)
 80001e8:	f107 0420 	add.w	r4, r7, #32
 80001ec:	461d      	mov	r5, r3
 80001ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001f6:	6020      	str	r0, [r4, #0]
 80001f8:	3404      	adds	r4, #4
 80001fa:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 80001fc:	f107 0120 	add.w	r1, r7, #32
 8000200:	230a      	movs	r3, #10
 8000202:	2215      	movs	r2, #21
 8000204:	4839      	ldr	r0, [pc, #228]	; (80002ec <main+0x13c>)
 8000206:	f003 fbc4 	bl	8003992 <HAL_UART_Transmit>

	  char buffer[6];
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.rx_8lsb), 100);
 800020a:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <main+0x130>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	461a      	mov	r2, r3
 8000210:	f107 0318 	add.w	r3, r7, #24
 8000214:	4936      	ldr	r1, [pc, #216]	; (80002f0 <main+0x140>)
 8000216:	4618      	mov	r0, r3
 8000218:	f008 f9fa 	bl	8008610 <siprintf>
 800021c:	4603      	mov	r3, r0
 800021e:	b29a      	uxth	r2, r3
 8000220:	f107 0118 	add.w	r1, r7, #24
 8000224:	2364      	movs	r3, #100	; 0x64
 8000226:	4831      	ldr	r0, [pc, #196]	; (80002ec <main+0x13c>)
 8000228:	f003 fbb3 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.ry_4lsb_rx_4msb), 100);
 800022c:	4b2c      	ldr	r3, [pc, #176]	; (80002e0 <main+0x130>)
 800022e:	785b      	ldrb	r3, [r3, #1]
 8000230:	461a      	mov	r2, r3
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	492e      	ldr	r1, [pc, #184]	; (80002f0 <main+0x140>)
 8000238:	4618      	mov	r0, r3
 800023a:	f008 f9e9 	bl	8008610 <siprintf>
 800023e:	4603      	mov	r3, r0
 8000240:	b29a      	uxth	r2, r3
 8000242:	f107 0118 	add.w	r1, r7, #24
 8000246:	2364      	movs	r3, #100	; 0x64
 8000248:	4828      	ldr	r0, [pc, #160]	; (80002ec <main+0x13c>)
 800024a:	f003 fba2 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.ry_8msb), 100);
 800024e:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <main+0x130>)
 8000250:	789b      	ldrb	r3, [r3, #2]
 8000252:	461a      	mov	r2, r3
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4925      	ldr	r1, [pc, #148]	; (80002f0 <main+0x140>)
 800025a:	4618      	mov	r0, r3
 800025c:	f008 f9d8 	bl	8008610 <siprintf>
 8000260:	4603      	mov	r3, r0
 8000262:	b29a      	uxth	r2, r3
 8000264:	f107 0118 	add.w	r1, r7, #24
 8000268:	2364      	movs	r3, #100	; 0x64
 800026a:	4820      	ldr	r0, [pc, #128]	; (80002ec <main+0x13c>)
 800026c:	f003 fb91 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.rz_4msb), 100);
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <main+0x130>)
 8000272:	791b      	ldrb	r3, [r3, #4]
 8000274:	461a      	mov	r2, r3
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	491d      	ldr	r1, [pc, #116]	; (80002f0 <main+0x140>)
 800027c:	4618      	mov	r0, r3
 800027e:	f008 f9c7 	bl	8008610 <siprintf>
 8000282:	4603      	mov	r3, r0
 8000284:	b29a      	uxth	r2, r3
 8000286:	f107 0118 	add.w	r1, r7, #24
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	4817      	ldr	r0, [pc, #92]	; (80002ec <main+0x13c>)
 800028e:	f003 fb80 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", joystickhid.rz_8lsb), 100);
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <main+0x130>)
 8000294:	78db      	ldrb	r3, [r3, #3]
 8000296:	461a      	mov	r2, r3
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4914      	ldr	r1, [pc, #80]	; (80002f0 <main+0x140>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f008 f9b6 	bl	8008610 <siprintf>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	f107 0118 	add.w	r1, r7, #24
 80002ac:	2364      	movs	r3, #100	; 0x64
 80002ae:	480f      	ldr	r0, [pc, #60]	; (80002ec <main+0x13c>)
 80002b0:	f003 fb6f 	bl	8003992 <HAL_UART_Transmit>

	  uint8_t Test2[] = "\r\n Valores fim !!!\r\n"; //Data to send
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <main+0x144>)
 80002b6:	463c      	mov	r4, r7
 80002b8:	461d      	mov	r5, r3
 80002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002c2:	6020      	str	r0, [r4, #0]
 80002c4:	3404      	adds	r4, #4
 80002c6:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart1,Test2,sizeof(Test),10);// Sending in normal mode
 80002c8:	4639      	mov	r1, r7
 80002ca:	230a      	movs	r3, #10
 80002cc:	2215      	movs	r2, #21
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <main+0x13c>)
 80002d0:	f003 fb5f 	bl	8003992 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80002d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d8:	f000 fb38 	bl	800094c <HAL_Delay>
  {
 80002dc:	e779      	b.n	80001d2 <main+0x22>
 80002de:	bf00      	nop
 80002e0:	200002b8 	.word	0x200002b8
 80002e4:	200002cc 	.word	0x200002cc
 80002e8:	08008f20 	.word	0x08008f20
 80002ec:	20000274 	.word	0x20000274
 80002f0:	08008f1c 	.word	0x08008f1c
 80002f4:	08008f38 	.word	0x08008f38

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b094      	sub	sp, #80	; 0x50
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f008 f97a 	bl	8008600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000328:	2301      	movs	r3, #1
 800032a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000330:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000348:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	4618      	mov	r0, r3
 8000350:	f002 fe02 	bl	8002f58 <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800035a:	f000 f91b 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000362:	2302      	movs	r3, #2
 8000364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800036e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000374:	f107 0314 	add.w	r3, r7, #20
 8000378:	2101      	movs	r1, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f003 f86e 	bl	800345c <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000386:	f000 f905 	bl	8000594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800038a:	2312      	movs	r3, #18
 800038c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800038e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000392:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000394:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000398:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4618      	mov	r0, r3
 800039e:	f003 f9f5 	bl	800378c <HAL_RCCEx_PeriphCLKConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003a8:	f000 f8f4 	bl	8000594 <Error_Handler>
  }
}
 80003ac:	bf00      	nop
 80003ae:	3750      	adds	r7, #80	; 0x50
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <MX_ADC1_Init+0xb0>)
 80003c6:	4a28      	ldr	r2, [pc, #160]	; (8000468 <MX_ADC1_Init+0xb4>)
 80003c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003ca:	4b26      	ldr	r3, [pc, #152]	; (8000464 <MX_ADC1_Init+0xb0>)
 80003cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003d2:	4b24      	ldr	r3, [pc, #144]	; (8000464 <MX_ADC1_Init+0xb0>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d8:	4b22      	ldr	r3, [pc, #136]	; (8000464 <MX_ADC1_Init+0xb0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <MX_ADC1_Init+0xb0>)
 80003e0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <MX_ADC1_Init+0xb0>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <MX_ADC1_Init+0xb0>)
 80003ee:	2203      	movs	r2, #3
 80003f0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003f2:	481c      	ldr	r0, [pc, #112]	; (8000464 <MX_ADC1_Init+0xb0>)
 80003f4:	f000 face 	bl	8000994 <HAL_ADC_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003fe:	f000 f8c9 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000406:	2301      	movs	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800040a:	2306      	movs	r3, #6
 800040c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	4814      	ldr	r0, [pc, #80]	; (8000464 <MX_ADC1_Init+0xb0>)
 8000414:	f000 fb96 	bl	8000b44 <HAL_ADC_ConfigChannel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800041e:	f000 f8b9 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000422:	2301      	movs	r3, #1
 8000424:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000426:	2302      	movs	r3, #2
 8000428:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4619      	mov	r1, r3
 800042e:	480d      	ldr	r0, [pc, #52]	; (8000464 <MX_ADC1_Init+0xb0>)
 8000430:	f000 fb88 	bl	8000b44 <HAL_ADC_ConfigChannel>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800043a:	f000 f8ab 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800043e:	2302      	movs	r3, #2
 8000440:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000442:	2303      	movs	r3, #3
 8000444:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <MX_ADC1_Init+0xb0>)
 800044c:	f000 fb7a 	bl	8000b44 <HAL_ADC_ConfigChannel>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000456:	f000 f89d 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000200 	.word	0x20000200
 8000468:	40012400 	.word	0x40012400

0800046c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <MX_USART1_UART_Init+0x50>)
 8000474:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800047c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000492:	220c      	movs	r2, #12
 8000494:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 80004a4:	f003 fa28 	bl	80038f8 <HAL_UART_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004ae:	f000 f871 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000274 	.word	0x20000274
 80004bc:	40013800 	.word	0x40013800

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_DMA_Init+0x38>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <MX_DMA_Init+0x38>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_DMA_Init+0x38>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	200b      	movs	r0, #11
 80004e4:	f000 fd3f 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004e8:	200b      	movs	r0, #11
 80004ea:	f000 fd58 	bl	8000f9e <HAL_NVIC_EnableIRQ>

}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_GPIO_Init+0x90>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a1d      	ldr	r2, [pc, #116]	; (800058c <MX_GPIO_Init+0x90>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_GPIO_Init+0x90>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <MX_GPIO_Init+0x90>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a17      	ldr	r2, [pc, #92]	; (800058c <MX_GPIO_Init+0x90>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <MX_GPIO_Init+0x90>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_GPIO_Init+0x90>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a11      	ldr	r2, [pc, #68]	; (800058c <MX_GPIO_Init+0x90>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_GPIO_Init+0x90>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	480c      	ldr	r0, [pc, #48]	; (8000590 <MX_GPIO_Init+0x94>)
 8000560:	f001 f81c 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2302      	movs	r3, #2
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_GPIO_Init+0x94>)
 800057e:	f000 fe89 	bl	8001294 <HAL_GPIO_Init>

}
 8000582:	bf00      	nop
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	40011000 	.word	0x40011000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_MspInit+0x40>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <HAL_MspInit+0x40>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_MspInit+0x40>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_MspInit+0x40>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_MspInit+0x40>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_MspInit+0x40>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <HAL_ADC_MspInit+0xbc>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d149      	bne.n	8000698 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <HAL_ADC_MspInit+0xc0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a26      	ldr	r2, [pc, #152]	; (80006a4 <HAL_ADC_MspInit+0xc0>)
 800060a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <HAL_ADC_MspInit+0xc0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <HAL_ADC_MspInit+0xc0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <HAL_ADC_MspInit+0xc0>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <HAL_ADC_MspInit+0xc0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000634:	2307      	movs	r3, #7
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000638:	2303      	movs	r3, #3
 800063a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4819      	ldr	r0, [pc, #100]	; (80006a8 <HAL_ADC_MspInit+0xc4>)
 8000644:	f000 fe26 	bl	8001294 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 800064a:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <HAL_ADC_MspInit+0xcc>)
 800064c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 8000662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000666:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 800066a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800066e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 800067e:	f000 fca9 	bl	8000fd4 <HAL_DMA_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000688:	f7ff ff84 	bl	8000594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 8000690:	621a      	str	r2, [r3, #32]
 8000692:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_ADC_MspInit+0xc8>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40012400 	.word	0x40012400
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800
 80006ac:	20000230 	.word	0x20000230
 80006b0:	40020008 	.word	0x40020008

080006b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <HAL_UART_MspInit+0x8c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d131      	bne.n	8000738 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <HAL_UART_MspInit+0x90>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <HAL_UART_MspInit+0x90>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_UART_MspInit+0x90>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_UART_MspInit+0x90>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_UART_MspInit+0x90>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_UART_MspInit+0x90>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <HAL_UART_MspInit+0x94>)
 800071a:	f000 fdbb 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800071e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <HAL_UART_MspInit+0x94>)
 8000734:	f000 fdae 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40013800 	.word	0x40013800
 8000744:	40021000 	.word	0x40021000
 8000748:	40010800 	.word	0x40010800

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <MemManage_Handler+0x4>

0800075e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <UsageFault_Handler+0x4>

0800076a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000792:	f000 f8bf 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <DMA1_Channel1_IRQHandler+0x10>)
 80007a2:	f000 fc71 	bl	8001088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000230 	.word	0x20000230

080007b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007b6:	f001 f853 	bl	8001860 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000790 	.word	0x20000790

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f007 feda 	bl	80085ac <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20005000 	.word	0x20005000
 8000824:	00000400 	.word	0x00000400
 8000828:	200002c0 	.word	0x200002c0
 800082c:	20000ae8 	.word	0x20000ae8

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000862:	f7ff ffe5 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000866:	f007 fea7 	bl	80085b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fca1 	bl	80001b0 <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000878:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 800087c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000880:	20000ae4 	.word	0x20000ae4

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 fb59 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fe7c 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fb71 	bl	8000fba <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 fb39 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000008 	.word	0x20000008
 800090c:	20000010 	.word	0x20000010
 8000910:	2000000c 	.word	0x2000000c

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000010 	.word	0x20000010
 8000934:	200002c4 	.word	0x200002c4

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	200002c4 	.word	0x200002c4

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff fff0 	bl	8000938 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffe0 	bl	8000938 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000010 	.word	0x20000010

08000994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e0be      	b.n	8000b34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d109      	bne.n	80009d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fe06 	bl	80005e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f9ab 	bl	8000d34 <ADC_ConversionStop_Disable>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 8099 	bne.w	8000b22 <HAL_ADC_Init+0x18e>
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f040 8095 	bne.w	8000b22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a00:	f023 0302 	bic.w	r3, r3, #2
 8000a04:	f043 0202 	orr.w	r2, r3, #2
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7b1b      	ldrb	r3, [r3, #12]
 8000a1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a2c:	d003      	beq.n	8000a36 <HAL_ADC_Init+0xa2>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d102      	bne.n	8000a3c <HAL_ADC_Init+0xa8>
 8000a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3a:	e000      	b.n	8000a3e <HAL_ADC_Init+0xaa>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7d1b      	ldrb	r3, [r3, #20]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d119      	bne.n	8000a80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7b1b      	ldrb	r3, [r3, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d109      	bne.n	8000a68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	035a      	lsls	r2, r3, #13
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	e00b      	b.n	8000a80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6c:	f043 0220 	orr.w	r2, r3, #32
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	f043 0201 	orr.w	r2, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <HAL_ADC_Init+0x1a8>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab0:	d003      	beq.n	8000aba <HAL_ADC_Init+0x126>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d104      	bne.n	8000ac4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	051b      	lsls	r3, r3, #20
 8000ac2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_ADC_Init+0x1ac>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d10b      	bne.n	8000b00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	f023 0303 	bic.w	r3, r3, #3
 8000af6:	f043 0201 	orr.w	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000afe:	e018      	b.n	8000b32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	f023 0312 	bic.w	r3, r3, #18
 8000b08:	f043 0210 	orr.w	r2, r3, #16
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	f043 0201 	orr.w	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b20:	e007      	b.n	8000b32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	f043 0210 	orr.w	r2, r3, #16
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b40:	ff1f0efe 	.word	0xff1f0efe

08000b44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x20>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e0dc      	b.n	8000d1e <HAL_ADC_ConfigChannel+0x1da>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d81c      	bhi.n	8000bae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	3b05      	subs	r3, #5
 8000b86:	221f      	movs	r2, #31
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4019      	ands	r1, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3b05      	subs	r3, #5
 8000ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	635a      	str	r2, [r3, #52]	; 0x34
 8000bac:	e03c      	b.n	8000c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b0c      	cmp	r3, #12
 8000bb4:	d81c      	bhi.n	8000bf0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3b23      	subs	r3, #35	; 0x23
 8000bc8:	221f      	movs	r2, #31
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4019      	ands	r1, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	3b23      	subs	r3, #35	; 0x23
 8000be2:	fa00 f203 	lsl.w	r2, r0, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
 8000bee:	e01b      	b.n	8000c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	3b41      	subs	r3, #65	; 0x41
 8000c02:	221f      	movs	r2, #31
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4019      	ands	r1, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	3b41      	subs	r3, #65	; 0x41
 8000c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b09      	cmp	r3, #9
 8000c2e:	d91c      	bls.n	8000c6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68d9      	ldr	r1, [r3, #12]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b1e      	subs	r3, #30
 8000c42:	2207      	movs	r2, #7
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6898      	ldr	r0, [r3, #8]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	3b1e      	subs	r3, #30
 8000c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	e019      	b.n	8000c9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6919      	ldr	r1, [r3, #16]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4019      	ands	r1, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6898      	ldr	r0, [r3, #8]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	fa00 f203 	lsl.w	r2, r0, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d003      	beq.n	8000cae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000caa:	2b11      	cmp	r3, #17
 8000cac:	d132      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_ADC_ConfigChannel+0x1e4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d125      	bne.n	8000d04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d126      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000cd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	d11a      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_ADC_ConfigChannel+0x1e8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9a      	lsrs	r2, r3, #18
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cf4:	e002      	b.n	8000cfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <HAL_ADC_ConfigChannel+0x1b2>
 8000d02:	e007      	b.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f043 0220 	orr.w	r2, r3, #32
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40012400 	.word	0x40012400
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d12e      	bne.n	8000dac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d5e:	f7ff fdeb 	bl	8000938 <HAL_GetTick>
 8000d62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d64:	e01b      	b.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d66:	f7ff fde7 	bl	8000938 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d914      	bls.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10d      	bne.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f043 0210 	orr.w	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e007      	b.n	8000dae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d0dc      	beq.n	8000d66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <__NVIC_EnableIRQ+0x34>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff90 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff2d 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff42 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff90 	bl	8000ea8 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5f 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff35 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e043      	b.n	8001072 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_DMA_Init+0xa8>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_DMA_Init+0xac>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <HAL_DMA_Init+0xb0>)
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2202      	movs	r2, #2
 800100c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800101e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800102c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	bffdfff8 	.word	0xbffdfff8
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	2204      	movs	r2, #4
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d04f      	beq.n	8001150 <HAL_DMA_IRQHandler+0xc8>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d04a      	beq.n	8001150 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d107      	bne.n	80010d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0204 	bic.w	r2, r2, #4
 80010d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a66      	ldr	r2, [pc, #408]	; (8001278 <HAL_DMA_IRQHandler+0x1f0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d029      	beq.n	8001136 <HAL_DMA_IRQHandler+0xae>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a65      	ldr	r2, [pc, #404]	; (800127c <HAL_DMA_IRQHandler+0x1f4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d022      	beq.n	8001132 <HAL_DMA_IRQHandler+0xaa>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a63      	ldr	r2, [pc, #396]	; (8001280 <HAL_DMA_IRQHandler+0x1f8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01a      	beq.n	800112c <HAL_DMA_IRQHandler+0xa4>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a62      	ldr	r2, [pc, #392]	; (8001284 <HAL_DMA_IRQHandler+0x1fc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d012      	beq.n	8001126 <HAL_DMA_IRQHandler+0x9e>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a60      	ldr	r2, [pc, #384]	; (8001288 <HAL_DMA_IRQHandler+0x200>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00a      	beq.n	8001120 <HAL_DMA_IRQHandler+0x98>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a5f      	ldr	r2, [pc, #380]	; (800128c <HAL_DMA_IRQHandler+0x204>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d102      	bne.n	800111a <HAL_DMA_IRQHandler+0x92>
 8001114:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001118:	e00e      	b.n	8001138 <HAL_DMA_IRQHandler+0xb0>
 800111a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800111e:	e00b      	b.n	8001138 <HAL_DMA_IRQHandler+0xb0>
 8001120:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001124:	e008      	b.n	8001138 <HAL_DMA_IRQHandler+0xb0>
 8001126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800112a:	e005      	b.n	8001138 <HAL_DMA_IRQHandler+0xb0>
 800112c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001130:	e002      	b.n	8001138 <HAL_DMA_IRQHandler+0xb0>
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	e000      	b.n	8001138 <HAL_DMA_IRQHandler+0xb0>
 8001136:	2304      	movs	r3, #4
 8001138:	4a55      	ldr	r2, [pc, #340]	; (8001290 <HAL_DMA_IRQHandler+0x208>)
 800113a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 8094 	beq.w	800126e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800114e:	e08e      	b.n	800126e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	2202      	movs	r2, #2
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d056      	beq.n	800120e <HAL_DMA_IRQHandler+0x186>
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d051      	beq.n	800120e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10b      	bne.n	8001190 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 020a 	bic.w	r2, r2, #10
 8001186:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a38      	ldr	r2, [pc, #224]	; (8001278 <HAL_DMA_IRQHandler+0x1f0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d029      	beq.n	80011ee <HAL_DMA_IRQHandler+0x166>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a37      	ldr	r2, [pc, #220]	; (800127c <HAL_DMA_IRQHandler+0x1f4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d022      	beq.n	80011ea <HAL_DMA_IRQHandler+0x162>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a35      	ldr	r2, [pc, #212]	; (8001280 <HAL_DMA_IRQHandler+0x1f8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01a      	beq.n	80011e4 <HAL_DMA_IRQHandler+0x15c>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a34      	ldr	r2, [pc, #208]	; (8001284 <HAL_DMA_IRQHandler+0x1fc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d012      	beq.n	80011de <HAL_DMA_IRQHandler+0x156>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a32      	ldr	r2, [pc, #200]	; (8001288 <HAL_DMA_IRQHandler+0x200>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00a      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x150>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a31      	ldr	r2, [pc, #196]	; (800128c <HAL_DMA_IRQHandler+0x204>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d102      	bne.n	80011d2 <HAL_DMA_IRQHandler+0x14a>
 80011cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011d0:	e00e      	b.n	80011f0 <HAL_DMA_IRQHandler+0x168>
 80011d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d6:	e00b      	b.n	80011f0 <HAL_DMA_IRQHandler+0x168>
 80011d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011dc:	e008      	b.n	80011f0 <HAL_DMA_IRQHandler+0x168>
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e2:	e005      	b.n	80011f0 <HAL_DMA_IRQHandler+0x168>
 80011e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e8:	e002      	b.n	80011f0 <HAL_DMA_IRQHandler+0x168>
 80011ea:	2320      	movs	r3, #32
 80011ec:	e000      	b.n	80011f0 <HAL_DMA_IRQHandler+0x168>
 80011ee:	2302      	movs	r3, #2
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <HAL_DMA_IRQHandler+0x208>)
 80011f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	2b00      	cmp	r3, #0
 8001202:	d034      	beq.n	800126e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800120c:	e02f      	b.n	800126e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	2208      	movs	r2, #8
 8001214:	409a      	lsls	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d028      	beq.n	8001270 <HAL_DMA_IRQHandler+0x1e8>
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	d023      	beq.n	8001270 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 020e 	bic.w	r2, r2, #14
 8001236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f202 	lsl.w	r2, r1, r2
 8001246:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
    }
  }
  return;
 800126e:	bf00      	nop
 8001270:	bf00      	nop
}
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40020008 	.word	0x40020008
 800127c:	4002001c 	.word	0x4002001c
 8001280:	40020030 	.word	0x40020030
 8001284:	40020044 	.word	0x40020044
 8001288:	40020058 	.word	0x40020058
 800128c:	4002006c 	.word	0x4002006c
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e169      	b.n	800157c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a8:	2201      	movs	r2, #1
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8158 	bne.w	8001576 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4a9a      	ldr	r2, [pc, #616]	; (8001534 <HAL_GPIO_Init+0x2a0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d05e      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 80012d0:	4a98      	ldr	r2, [pc, #608]	; (8001534 <HAL_GPIO_Init+0x2a0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d875      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 80012d6:	4a98      	ldr	r2, [pc, #608]	; (8001538 <HAL_GPIO_Init+0x2a4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d058      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 80012dc:	4a96      	ldr	r2, [pc, #600]	; (8001538 <HAL_GPIO_Init+0x2a4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d86f      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 80012e2:	4a96      	ldr	r2, [pc, #600]	; (800153c <HAL_GPIO_Init+0x2a8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d052      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 80012e8:	4a94      	ldr	r2, [pc, #592]	; (800153c <HAL_GPIO_Init+0x2a8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d869      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 80012ee:	4a94      	ldr	r2, [pc, #592]	; (8001540 <HAL_GPIO_Init+0x2ac>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d04c      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 80012f4:	4a92      	ldr	r2, [pc, #584]	; (8001540 <HAL_GPIO_Init+0x2ac>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d863      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 80012fa:	4a92      	ldr	r2, [pc, #584]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d046      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 8001300:	4a90      	ldr	r2, [pc, #576]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d85d      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 8001306:	2b12      	cmp	r3, #18
 8001308:	d82a      	bhi.n	8001360 <HAL_GPIO_Init+0xcc>
 800130a:	2b12      	cmp	r3, #18
 800130c:	d859      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <HAL_GPIO_Init+0x80>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	0800138f 	.word	0x0800138f
 8001318:	08001369 	.word	0x08001369
 800131c:	0800137b 	.word	0x0800137b
 8001320:	080013bd 	.word	0x080013bd
 8001324:	080013c3 	.word	0x080013c3
 8001328:	080013c3 	.word	0x080013c3
 800132c:	080013c3 	.word	0x080013c3
 8001330:	080013c3 	.word	0x080013c3
 8001334:	080013c3 	.word	0x080013c3
 8001338:	080013c3 	.word	0x080013c3
 800133c:	080013c3 	.word	0x080013c3
 8001340:	080013c3 	.word	0x080013c3
 8001344:	080013c3 	.word	0x080013c3
 8001348:	080013c3 	.word	0x080013c3
 800134c:	080013c3 	.word	0x080013c3
 8001350:	080013c3 	.word	0x080013c3
 8001354:	080013c3 	.word	0x080013c3
 8001358:	08001371 	.word	0x08001371
 800135c:	08001385 	.word	0x08001385
 8001360:	4a79      	ldr	r2, [pc, #484]	; (8001548 <HAL_GPIO_Init+0x2b4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001366:	e02c      	b.n	80013c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e029      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	3304      	adds	r3, #4
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e024      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	3308      	adds	r3, #8
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e01f      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	330c      	adds	r3, #12
 800138a:	623b      	str	r3, [r7, #32]
          break;
 800138c:	e01a      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001396:	2304      	movs	r3, #4
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e013      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2308      	movs	r3, #8
 80013a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	611a      	str	r2, [r3, #16]
          break;
 80013ae:	e009      	b.n	80013c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b0:	2308      	movs	r3, #8
 80013b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	615a      	str	r2, [r3, #20]
          break;
 80013ba:	e003      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          break;
 80013c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2bff      	cmp	r3, #255	; 0xff
 80013c8:	d801      	bhi.n	80013ce <HAL_GPIO_Init+0x13a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	e001      	b.n	80013d2 <HAL_GPIO_Init+0x13e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3304      	adds	r3, #4
 80013d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2bff      	cmp	r3, #255	; 0xff
 80013d8:	d802      	bhi.n	80013e0 <HAL_GPIO_Init+0x14c>
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x152>
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	3b08      	subs	r3, #8
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	210f      	movs	r1, #15
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	6a39      	ldr	r1, [r7, #32]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80b1 	beq.w	8001576 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_GPIO_Init+0x2b8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a4c      	ldr	r2, [pc, #304]	; (800154c <HAL_GPIO_Init+0x2b8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b4a      	ldr	r3, [pc, #296]	; (800154c <HAL_GPIO_Init+0x2b8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800142c:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_GPIO_Init+0x2bc>)
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a40      	ldr	r2, [pc, #256]	; (8001554 <HAL_GPIO_Init+0x2c0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d013      	beq.n	8001480 <HAL_GPIO_Init+0x1ec>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3f      	ldr	r2, [pc, #252]	; (8001558 <HAL_GPIO_Init+0x2c4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d00d      	beq.n	800147c <HAL_GPIO_Init+0x1e8>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a3e      	ldr	r2, [pc, #248]	; (800155c <HAL_GPIO_Init+0x2c8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x1e4>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a3d      	ldr	r2, [pc, #244]	; (8001560 <HAL_GPIO_Init+0x2cc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_GPIO_Init+0x1e0>
 8001470:	2303      	movs	r3, #3
 8001472:	e006      	b.n	8001482 <HAL_GPIO_Init+0x1ee>
 8001474:	2304      	movs	r3, #4
 8001476:	e004      	b.n	8001482 <HAL_GPIO_Init+0x1ee>
 8001478:	2302      	movs	r3, #2
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x1ee>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_GPIO_Init+0x1ee>
 8001480:	2300      	movs	r3, #0
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	f002 0203 	and.w	r2, r2, #3
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	4093      	lsls	r3, r2
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001492:	492f      	ldr	r1, [pc, #188]	; (8001550 <HAL_GPIO_Init+0x2bc>)
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	492c      	ldr	r1, [pc, #176]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4928      	ldr	r1, [pc, #160]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4922      	ldr	r1, [pc, #136]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	491e      	ldr	r1, [pc, #120]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	4918      	ldr	r1, [pc, #96]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	43db      	mvns	r3, r3
 8001512:	4914      	ldr	r1, [pc, #80]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001514:	4013      	ands	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d021      	beq.n	8001568 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	490e      	ldr	r1, [pc, #56]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
 8001530:	e021      	b.n	8001576 <HAL_GPIO_Init+0x2e2>
 8001532:	bf00      	nop
 8001534:	10320000 	.word	0x10320000
 8001538:	10310000 	.word	0x10310000
 800153c:	10220000 	.word	0x10220000
 8001540:	10210000 	.word	0x10210000
 8001544:	10120000 	.word	0x10120000
 8001548:	10110000 	.word	0x10110000
 800154c:	40021000 	.word	0x40021000
 8001550:	40010000 	.word	0x40010000
 8001554:	40010800 	.word	0x40010800
 8001558:	40010c00 	.word	0x40010c00
 800155c:	40011000 	.word	0x40011000
 8001560:	40011400 	.word	0x40011400
 8001564:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_GPIO_Init+0x304>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	43db      	mvns	r3, r3
 8001570:	4909      	ldr	r1, [pc, #36]	; (8001598 <HAL_GPIO_Init+0x304>)
 8001572:	4013      	ands	r3, r2
 8001574:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	3301      	adds	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f ae8e 	bne.w	80012a8 <HAL_GPIO_Init+0x14>
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	372c      	adds	r7, #44	; 0x2c
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015b8:	e003      	b.n	80015c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	041a      	lsls	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	611a      	str	r2, [r3, #16]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	041a      	lsls	r2, r3, #16
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43d9      	mvns	r1, r3
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	400b      	ands	r3, r1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	611a      	str	r2, [r3, #16]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001600:	b08b      	sub	sp, #44	; 0x2c
 8001602:	af06      	add	r7, sp, #24
 8001604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0fd      	b.n	800180c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d106      	bne.n	800162a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f006 fd33 	bl	8008090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f002 fb3c 	bl	8003cb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	687e      	ldr	r6, [r7, #4]
 8001644:	466d      	mov	r5, sp
 8001646:	f106 0410 	add.w	r4, r6, #16
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	1d33      	adds	r3, r6, #4
 8001654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001656:	6838      	ldr	r0, [r7, #0]
 8001658:	f002 fb06 	bl	8003c68 <USB_CoreInit>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0ce      	b.n	800180c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f002 fb37 	bl	8003ce8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e04c      	b.n	800171a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3301      	adds	r3, #1
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	b298      	uxth	r0, r3
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	3336      	adds	r3, #54	; 0x36
 80016be:	4602      	mov	r2, r0
 80016c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3303      	adds	r3, #3
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	3338      	adds	r3, #56	; 0x38
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	333c      	adds	r3, #60	; 0x3c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	3340      	adds	r3, #64	; 0x40
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	3301      	adds	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	d3ad      	bcc.n	8001680 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e044      	b.n	80017b4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	f203 1369 	addw	r3, r3, #361	; 0x169
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	3301      	adds	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3b5      	bcc.n	800172a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	687e      	ldr	r6, [r7, #4]
 80017c6:	466d      	mov	r5, sp
 80017c8:	f106 0410 	add.w	r4, r6, #16
 80017cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	602b      	str	r3, [r5, #0]
 80017d4:	1d33      	adds	r3, r6, #4
 80017d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f002 fa91 	bl	8003d00 <USB_DevInit>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e00d      	b.n	800180c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f004 ff43 	bl	8006690 <USB_DevDisconnect>

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001814 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_PCD_Start+0x16>
 8001826:	2302      	movs	r3, #2
 8001828:	e016      	b.n	8001858 <HAL_PCD_Start+0x44>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fa26 	bl	8003c88 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800183c:	2101      	movs	r1, #1
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f006 fe7d 	bl	800853e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f004 ff17 	bl	800667c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f004 ff19 	bl	80066a4 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800187c:	d102      	bne.n	8001884 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fb48 	bl	8001f14 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f004 ff0b 	bl	80066a4 <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001898:	d112      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ac:	b292      	uxth	r2, r2
 80018ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f006 fc67 	bl	8008186 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018b8:	2100      	movs	r1, #0
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f923 	bl	8001b06 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 feed 	bl	80066a4 <USB_ReadInterrupts>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018d4:	d10b      	bne.n	80018ee <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018e8:	b292      	uxth	r2, r2
 80018ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 fed6 	bl	80066a4 <USB_ReadInterrupts>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001902:	d10b      	bne.n	800191c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001916:	b292      	uxth	r2, r2
 8001918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f004 febf 	bl	80066a4 <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001930:	d126      	bne.n	8001980 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0204 	bic.w	r2, r2, #4
 8001944:	b292      	uxth	r2, r2
 8001946:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0208 	bic.w	r2, r2, #8
 800195c:	b292      	uxth	r2, r2
 800195e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f006 fc48 	bl	80081f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001970:	b29a      	uxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800197a:	b292      	uxth	r2, r2
 800197c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f004 fe8d 	bl	80066a4 <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001994:	f040 8082 	bne.w	8001a9c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
 800199c:	e010      	b.n	80019c0 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	7ffb      	ldrb	r3, [r7, #31]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	441a      	add	r2, r3
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	8812      	ldrh	r2, [r2, #0]
 80019ae:	b292      	uxth	r2, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	3320      	adds	r3, #32
 80019b4:	443b      	add	r3, r7
 80019b6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80019ba:	7ffb      	ldrb	r3, [r7, #31]
 80019bc:	3301      	adds	r3, #1
 80019be:	77fb      	strb	r3, [r7, #31]
 80019c0:	7ffb      	ldrb	r3, [r7, #31]
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	d9eb      	bls.n	800199e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0201 	orr.w	r2, r2, #1
 80019d8:	b292      	uxth	r2, r2
 80019da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019f6:	bf00      	nop
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f6      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1c:	b292      	uxth	r2, r2
 8001a1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	77fb      	strb	r3, [r7, #31]
 8001a26:	e00f      	b.n	8001a48 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001a28:	7ffb      	ldrb	r3, [r7, #31]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	7ffa      	ldrb	r2, [r7, #31]
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	440a      	add	r2, r1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	3320      	adds	r3, #32
 8001a3a:	443b      	add	r3, r7
 8001a3c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001a40:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	3301      	adds	r3, #1
 8001a46:	77fb      	strb	r3, [r7, #31]
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d9ec      	bls.n	8001a28 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0208 	orr.w	r2, r2, #8
 8001a60:	b292      	uxth	r2, r2
 8001a62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0204 	orr.w	r2, r2, #4
 8001a90:	b292      	uxth	r2, r2
 8001a92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f006 fb94 	bl	80081c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fdff 	bl	80066a4 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f006 fb4d 	bl	800816a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fde5 	bl	80066a4 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae4:	d10b      	bne.n	8001afe <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af8:	b292      	uxth	r2, r2
 8001afa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_SetAddress+0x1a>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e013      	b.n	8001b48 <HAL_PCD_SetAddress+0x42>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f004 fd8c 	bl	8006656 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	4608      	mov	r0, r1
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	70fb      	strb	r3, [r7, #3]
 8001b62:	460b      	mov	r3, r1
 8001b64:	803b      	strh	r3, [r7, #0]
 8001b66:	4613      	mov	r3, r2
 8001b68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da0e      	bge.n	8001b94 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	705a      	strb	r2, [r3, #1]
 8001b92:	e00e      	b.n	8001bb2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 0207 	and.w	r2, r3, #7
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bbe:	883a      	ldrh	r2, [r7, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	78ba      	ldrb	r2, [r7, #2]
 8001bc8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	785b      	ldrb	r3, [r3, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bdc:	78bb      	ldrb	r3, [r7, #2]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d102      	bne.n	8001be8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_PCD_EP_Open+0xa6>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e00e      	b.n	8001c14 <HAL_PCD_EP_Open+0xc4>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 f89b 	bl	8003d40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c12:	7afb      	ldrb	r3, [r7, #11]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da0e      	bge.n	8001c4e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	705a      	strb	r2, [r3, #1]
 8001c4c:	e00e      	b.n	8001c6c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 0207 	and.w	r2, r3, #7
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_PCD_EP_Close+0x6a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e00e      	b.n	8001ca4 <HAL_PCD_EP_Close+0x88>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68f9      	ldr	r1, [r7, #12]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 fbbd 	bl	8004414 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	f003 0207 	and.w	r2, r3, #7
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6979      	ldr	r1, [r7, #20]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 fd6f 	bl	80047ec <USB_EPStartXfer>
 8001d0e:	e005      	b.n	8001d1c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6979      	ldr	r1, [r7, #20]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 fd68 	bl	80047ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	460b      	mov	r3, r1
 8001d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6979      	ldr	r1, [r7, #20]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fd2c 	bl	80047ec <USB_EPStartXfer>
 8001d94:	e005      	b.n	8001da2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6979      	ldr	r1, [r7, #20]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fd25 	bl	80047ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 0207 	and.w	r2, r3, #7
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d901      	bls.n	8001dca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e04c      	b.n	8001e64 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da0e      	bge.n	8001df0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	705a      	strb	r2, [r3, #1]
 8001dee:	e00c      	b.n	8001e0a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_PCD_EP_SetStall+0x7e>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e01c      	b.n	8001e64 <HAL_PCD_EP_SetStall+0xb8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68f9      	ldr	r1, [r7, #12]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 fb0f 	bl	800645c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d108      	bne.n	8001e5a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f004 fc34 	bl	80066c2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d901      	bls.n	8001e8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e040      	b.n	8001f0c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da0e      	bge.n	8001eb0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	705a      	strb	r2, [r3, #1]
 8001eae:	e00e      	b.n	8001ece <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 0207 	and.w	r2, r3, #7
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_PCD_EP_ClrStall+0x82>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e00e      	b.n	8001f0c <HAL_PCD_EP_ClrStall+0xa0>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 fafd 	bl	80064fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08e      	sub	sp, #56	; 0x38
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f1c:	e2ec      	b.n	80024f8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f26:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 8161 	bne.w	8002200 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d152      	bne.n	8001fee <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f58:	81fb      	strh	r3, [r7, #14]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3328      	adds	r3, #40	; 0x28
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	3302      	adds	r3, #2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	441a      	add	r2, r3
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fac:	2100      	movs	r1, #0
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f006 f8c1 	bl	8008136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 829b 	beq.w	80024f8 <PCD_EP_ISR_Handler+0x5e4>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 8296 	bne.w	80024f8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fec:	e284      	b.n	80024f8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ffe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002004:	2b00      	cmp	r3, #0
 8002006:	d034      	beq.n	8002072 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002010:	b29b      	uxth	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	3306      	adds	r3, #6
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002046:	b29b      	uxth	r3, r3
 8002048:	f004 fb8b 	bl	8006762 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b29a      	uxth	r2, r3
 8002054:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002058:	4013      	ands	r3, r2
 800205a:	823b      	strh	r3, [r7, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	8a3a      	ldrh	r2, [r7, #16]
 8002062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002066:	b292      	uxth	r2, r2
 8002068:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f006 f836 	bl	80080dc <HAL_PCD_SetupStageCallback>
 8002070:	e242      	b.n	80024f8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002072:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002076:	2b00      	cmp	r3, #0
 8002078:	f280 823e 	bge.w	80024f8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002088:	4013      	ands	r3, r2
 800208a:	83bb      	strh	r3, [r7, #28]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	8bba      	ldrh	r2, [r7, #28]
 8002092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002096:	b292      	uxth	r2, r2
 8002098:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	3306      	adds	r3, #6
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <PCD_EP_ISR_Handler+0x1ee>
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d015      	beq.n	8002102 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	6959      	ldr	r1, [r3, #20]
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f004 fb3b 	bl	8006762 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	441a      	add	r2, r3
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f005 ffff 	bl	8008100 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 81f2 	bne.w	80024f8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4413      	add	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d112      	bne.n	8002162 <PCD_EP_ISR_Handler+0x24e>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002146:	b29a      	uxth	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	801a      	strh	r2, [r3, #0]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800215a:	b29a      	uxth	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	801a      	strh	r2, [r3, #0]
 8002160:	e02f      	b.n	80021c2 <PCD_EP_ISR_Handler+0x2ae>
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b3e      	cmp	r3, #62	; 0x3e
 8002168:	d813      	bhi.n	8002192 <PCD_EP_ISR_Handler+0x27e>
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <PCD_EP_ISR_Handler+0x270>
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	3301      	adds	r3, #1
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	b29b      	uxth	r3, r3
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	b29a      	uxth	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e017      	b.n	80021c2 <PCD_EP_ISR_Handler+0x2ae>
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <PCD_EP_ISR_Handler+0x298>
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	3b01      	subs	r3, #1
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021bc:	b29a      	uxth	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d2:	827b      	strh	r3, [r7, #18]
 80021d4:	8a7b      	ldrh	r3, [r7, #18]
 80021d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80021da:	827b      	strh	r3, [r7, #18]
 80021dc:	8a7b      	ldrh	r3, [r7, #18]
 80021de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021e2:	827b      	strh	r3, [r7, #18]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	8a7b      	ldrh	r3, [r7, #18]
 80021ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	8013      	strh	r3, [r2, #0]
 80021fe:	e17b      	b.n	80024f8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002212:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002216:	2b00      	cmp	r3, #0
 8002218:	f280 80ea 	bge.w	80023f0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	b29a      	uxth	r2, r3
 800222e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002232:	4013      	ands	r3, r2
 8002234:	853b      	strh	r3, [r7, #40]	; 0x28
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800224a:	b292      	uxth	r2, r2
 800224c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800224e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	7b1b      	ldrb	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d122      	bne.n	80022b2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	3306      	adds	r3, #6
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002294:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002296:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8087 	beq.w	80023ac <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	6959      	ldr	r1, [r3, #20]
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	88da      	ldrh	r2, [r3, #6]
 80022aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ac:	f004 fa59 	bl	8006762 <USB_ReadPMA>
 80022b0:	e07c      	b.n	80023ac <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	78db      	ldrb	r3, [r3, #3]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d108      	bne.n	80022cc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80022ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022bc:	461a      	mov	r2, r3
 80022be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f927 	bl	8002514 <HAL_PCD_EP_DB_Receive>
 80022c6:	4603      	mov	r3, r0
 80022c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022ca:	e06f      	b.n	80023ac <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	441a      	add	r2, r3
 80022f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002308:	b29b      	uxth	r3, r3
 800230a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d021      	beq.n	800236a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	3302      	adds	r3, #2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002350:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002352:	2b00      	cmp	r3, #0
 8002354:	d02a      	beq.n	80023ac <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	6959      	ldr	r1, [r3, #20]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	891a      	ldrh	r2, [r3, #8]
 8002362:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002364:	f004 f9fd 	bl	8006762 <USB_ReadPMA>
 8002368:	e020      	b.n	80023ac <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	3306      	adds	r3, #6
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002392:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	6959      	ldr	r1, [r3, #20]
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	895a      	ldrh	r2, [r3, #10]
 80023a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023a8:	f004 f9db 	bl	8006762 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023b2:	441a      	add	r2, r3
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023be:	441a      	add	r2, r3
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <PCD_EP_ISR_Handler+0x4c2>
 80023cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d206      	bcs.n	80023e4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 fe8f 	bl	8008100 <HAL_PCD_DataOutStageCallback>
 80023e2:	e005      	b.n	80023f0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 f9fe 	bl	80047ec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d07e      	beq.n	80024f8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80023fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002428:	843b      	strh	r3, [r7, #32]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	441a      	add	r2, r3
 8002438:	8c3b      	ldrh	r3, [r7, #32]
 800243a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800243e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002442:	b29b      	uxth	r3, r3
 8002444:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	78db      	ldrb	r3, [r3, #3]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d00c      	beq.n	8002468 <PCD_EP_ISR_Handler+0x554>
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	78db      	ldrb	r3, [r3, #3]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800245a:	2b02      	cmp	r3, #2
 800245c:	d146      	bne.n	80024ec <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800245e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d141      	bne.n	80024ec <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002470:	b29b      	uxth	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	3302      	adds	r3, #2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002490:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	8bfb      	ldrh	r3, [r7, #30]
 8002498:	429a      	cmp	r2, r3
 800249a:	d906      	bls.n	80024aa <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	8bfb      	ldrh	r3, [r7, #30]
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	619a      	str	r2, [r3, #24]
 80024a8:	e002      	b.n	80024b0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f005 fe39 	bl	8008136 <HAL_PCD_DataInStageCallback>
 80024c4:	e018      	b.n	80024f8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	8bfb      	ldrh	r3, [r7, #30]
 80024cc:	441a      	add	r2, r3
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	8bfb      	ldrh	r3, [r7, #30]
 80024d8:	441a      	add	r2, r3
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 f981 	bl	80047ec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80024ea:	e005      	b.n	80024f8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ee:	461a      	mov	r2, r3
 80024f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f91b 	bl	800272e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002500:	b29b      	uxth	r3, r3
 8002502:	b21b      	sxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	f6ff ad0a 	blt.w	8001f1e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3738      	adds	r7, #56	; 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d07e      	beq.n	800262a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	3302      	adds	r3, #2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002554:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	8b7b      	ldrh	r3, [r7, #26]
 800255c:	429a      	cmp	r2, r3
 800255e:	d306      	bcc.n	800256e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	8b7b      	ldrh	r3, [r7, #26]
 8002566:	1ad2      	subs	r2, r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	619a      	str	r2, [r3, #24]
 800256c:	e002      	b.n	8002574 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d123      	bne.n	80025c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002596:	833b      	strh	r3, [r7, #24]
 8002598:	8b3b      	ldrh	r3, [r7, #24]
 800259a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800259e:	833b      	strh	r3, [r7, #24]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	441a      	add	r2, r3
 80025ae:	8b3b      	ldrh	r3, [r7, #24]
 80025b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01f      	beq.n	800260e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e8:	82fb      	strh	r3, [r7, #22]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	441a      	add	r2, r3
 80025f8:	8afb      	ldrh	r3, [r7, #22]
 80025fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800260a:	b29b      	uxth	r3, r3
 800260c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800260e:	8b7b      	ldrh	r3, [r7, #26]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8087 	beq.w	8002724 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6959      	ldr	r1, [r3, #20]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	891a      	ldrh	r2, [r3, #8]
 8002622:	8b7b      	ldrh	r3, [r7, #26]
 8002624:	f004 f89d 	bl	8006762 <USB_ReadPMA>
 8002628:	e07c      	b.n	8002724 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	3306      	adds	r3, #6
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002652:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	699a      	ldr	r2, [r3, #24]
 8002658:	8b7b      	ldrh	r3, [r7, #26]
 800265a:	429a      	cmp	r2, r3
 800265c:	d306      	bcc.n	800266c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	8b7b      	ldrh	r3, [r7, #26]
 8002664:	1ad2      	subs	r2, r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	619a      	str	r2, [r3, #24]
 800266a:	e002      	b.n	8002672 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d123      	bne.n	80026c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	83fb      	strh	r3, [r7, #30]
 8002696:	8bfb      	ldrh	r3, [r7, #30]
 8002698:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800269c:	83fb      	strh	r3, [r7, #30]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	441a      	add	r2, r3
 80026ac:	8bfb      	ldrh	r3, [r7, #30]
 80026ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026be:	b29b      	uxth	r3, r3
 80026c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d11f      	bne.n	800270c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	83bb      	strh	r3, [r7, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	441a      	add	r2, r3
 80026f6:	8bbb      	ldrh	r3, [r7, #28]
 80026f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002708:	b29b      	uxth	r3, r3
 800270a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800270c:	8b7b      	ldrh	r3, [r7, #26]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6959      	ldr	r1, [r3, #20]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	895a      	ldrh	r2, [r3, #10]
 800271e:	8b7b      	ldrh	r3, [r7, #26]
 8002720:	f004 f81f 	bl	8006762 <USB_ReadPMA>
    }
  }

  return count;
 8002724:	8b7b      	ldrh	r3, [r7, #26]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b0a2      	sub	sp, #136	; 0x88
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	4613      	mov	r3, r2
 800273a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 81c7 	beq.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002750:	b29b      	uxth	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	3302      	adds	r3, #2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002770:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800277c:	429a      	cmp	r2, r3
 800277e:	d907      	bls.n	8002790 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002788:	1ad2      	subs	r2, r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	619a      	str	r2, [r3, #24]
 800278e:	e002      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80b9 	bne.w	8002912 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d126      	bne.n	80027f6 <HAL_PCD_EP_DB_Transmit+0xc8>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	4413      	add	r3, r2
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	011a      	lsls	r2, r3, #4
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	4413      	add	r3, r2
 80027ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	801a      	strh	r2, [r3, #0]
 80027f4:	e01a      	b.n	800282c <HAL_PCD_EP_DB_Transmit+0xfe>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d116      	bne.n	800282c <HAL_PCD_EP_DB_Transmit+0xfe>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	4413      	add	r3, r2
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	011a      	lsls	r2, r3, #4
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	4413      	add	r3, r2
 8002820:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	2200      	movs	r2, #0
 800282a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	623b      	str	r3, [r7, #32]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d126      	bne.n	8002888 <HAL_PCD_EP_DB_Transmit+0x15a>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4413      	add	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	011a      	lsls	r2, r3, #4
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800286c:	b29a      	uxth	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	801a      	strh	r2, [r3, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002880:	b29a      	uxth	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	e017      	b.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d113      	bne.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	4413      	add	r3, r2
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	011a      	lsls	r2, r3, #4
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	4413      	add	r3, r2
 80028ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2200      	movs	r2, #0
 80028b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f005 fc39 	bl	8008136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 82d4 	beq.w	8002e78 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	827b      	strh	r3, [r7, #18]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	441a      	add	r2, r3
 80028fa:	8a7b      	ldrh	r3, [r7, #18]
 80028fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290c:	b29b      	uxth	r3, r3
 800290e:	8013      	strh	r3, [r2, #0]
 8002910:	e2b2      	b.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d021      	beq.n	8002960 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800294c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	b29b      	uxth	r3, r3
 800295e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002966:	2b01      	cmp	r3, #1
 8002968:	f040 8286 	bne.w	8002e78 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002974:	441a      	add	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002982:	441a      	add	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	429a      	cmp	r2, r3
 8002992:	d309      	bcc.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a0:	1ad2      	subs	r2, r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	621a      	str	r2, [r3, #32]
 80029a6:	e015      	b.n	80029d4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80029b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029be:	e009      	b.n	80029d4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d155      	bne.n	8002a88 <HAL_PCD_EP_DB_Transmit+0x35a>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	4413      	add	r3, r2
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	011a      	lsls	r2, r3, #4
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	4413      	add	r3, r2
 80029fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
 8002a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d112      	bne.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x302>
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	e047      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a32:	2b3e      	cmp	r3, #62	; 0x3e
 8002a34:	d811      	bhi.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a48:	3301      	adds	r3, #1
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	029b      	lsls	r3, r3, #10
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	e032      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x342>
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	029b      	lsls	r3, r3, #10
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	e01b      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d117      	bne.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa4:	4413      	add	r3, r2
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	011a      	lsls	r2, r3, #4
 8002aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6959      	ldr	r1, [r3, #20]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	891a      	ldrh	r2, [r3, #8]
 8002acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f003 fe02 	bl	80066d8 <USB_WritePMA>
 8002ad4:	e1d0      	b.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3306      	adds	r3, #6
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d307      	bcc.n	8002b1e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b16:	1ad2      	subs	r2, r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	619a      	str	r2, [r3, #24]
 8002b1c:	e002      	b.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 80c4 	bne.w	8002cb6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d126      	bne.n	8002b84 <HAL_PCD_EP_DB_Transmit+0x456>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4a:	4413      	add	r3, r2
 8002b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	011a      	lsls	r2, r3, #4
 8002b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b56:	4413      	add	r3, r2
 8002b58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	e01a      	b.n	8002bba <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	785b      	ldrb	r3, [r3, #1]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d116      	bne.n	8002bba <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	677b      	str	r3, [r7, #116]	; 0x74
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba0:	4413      	add	r3, r2
 8002ba2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	011a      	lsls	r2, r3, #4
 8002baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bac:	4413      	add	r3, r2
 8002bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8002bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d12f      	bne.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002be0:	4413      	add	r3, r2
 8002be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	011a      	lsls	r2, r3, #4
 8002bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	e017      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d113      	bne.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c3e:	4413      	add	r3, r2
 8002c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	011a      	lsls	r2, r3, #4
 8002c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c54:	2200      	movs	r2, #0
 8002c56:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f005 fa69 	bl	8008136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8104 	bne.w	8002e78 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	8013      	strh	r3, [r2, #0]
 8002cb4:	e0e0      	b.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d121      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	441a      	add	r2, r3
 8002cec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	f040 80b4 	bne.w	8002e78 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d18:	441a      	add	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d26:	441a      	add	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	6a1a      	ldr	r2, [r3, #32]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d309      	bcc.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d44:	1ad2      	subs	r2, r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	621a      	str	r2, [r3, #32]
 8002d4a:	e015      	b.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002d54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d62:	e009      	b.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	785b      	ldrb	r3, [r3, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d155      	bne.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x704>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9a:	4413      	add	r3, r2
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	011a      	lsls	r2, r3, #4
 8002da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da6:	4413      	add	r3, r2
 8002da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d112      	bne.n	8002dda <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dd6:	801a      	strh	r2, [r3, #0]
 8002dd8:	e044      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x736>
 8002dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ddc:	2b3e      	cmp	r3, #62	; 0x3e
 8002dde:	d811      	bhi.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	657b      	str	r3, [r7, #84]	; 0x54
 8002de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df2:	3301      	adds	r3, #1
 8002df4:	657b      	str	r3, [r7, #84]	; 0x54
 8002df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	e02f      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	657b      	str	r3, [r7, #84]	; 0x54
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e16:	3b01      	subs	r3, #1
 8002e18:	657b      	str	r3, [r7, #84]	; 0x54
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2e:	801a      	strh	r2, [r3, #0]
 8002e30:	e018      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	785b      	ldrb	r3, [r3, #1]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d114      	bne.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e48:	4413      	add	r3, r2
 8002e4a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	011a      	lsls	r2, r3, #4
 8002e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e54:	4413      	add	r3, r2
 8002e56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e62:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6959      	ldr	r1, [r3, #20]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	895a      	ldrh	r2, [r3, #10]
 8002e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f003 fc30 	bl	80066d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e92:	823b      	strh	r3, [r7, #16]
 8002e94:	8a3b      	ldrh	r3, [r7, #16]
 8002e96:	f083 0310 	eor.w	r3, r3, #16
 8002e9a:	823b      	strh	r3, [r7, #16]
 8002e9c:	8a3b      	ldrh	r3, [r7, #16]
 8002e9e:	f083 0320 	eor.w	r3, r3, #32
 8002ea2:	823b      	strh	r3, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	441a      	add	r2, r3
 8002eb2:	8a3b      	ldrh	r3, [r7, #16]
 8002eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3788      	adds	r7, #136	; 0x88
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b087      	sub	sp, #28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	817b      	strh	r3, [r7, #10]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef0:	897b      	ldrh	r3, [r7, #10]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e009      	b.n	8002f1c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f08:	897a      	ldrh	r2, [r7, #10]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f1c:	893b      	ldrh	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d107      	bne.n	8002f32 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	80da      	strh	r2, [r3, #6]
 8002f30:	e00b      	b.n	8002f4a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2201      	movs	r2, #1
 8002f36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e272      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8087 	beq.w	8003086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f78:	4b92      	ldr	r3, [pc, #584]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d00c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f84:	4b8f      	ldr	r3, [pc, #572]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d112      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5e>
 8002f90:	4b8c      	ldr	r3, [pc, #560]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9e:	4b89      	ldr	r3, [pc, #548]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d06c      	beq.n	8003084 <HAL_RCC_OscConfig+0x12c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d168      	bne.n	8003084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e24c      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x76>
 8002fc0:	4b80      	ldr	r3, [pc, #512]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a7f      	ldr	r2, [pc, #508]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e02e      	b.n	800302c <HAL_RCC_OscConfig+0xd4>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x98>
 8002fd6:	4b7b      	ldr	r3, [pc, #492]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7a      	ldr	r2, [pc, #488]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b78      	ldr	r3, [pc, #480]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a77      	ldr	r2, [pc, #476]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e01d      	b.n	800302c <HAL_RCC_OscConfig+0xd4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0xbc>
 8002ffa:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a71      	ldr	r2, [pc, #452]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b6f      	ldr	r3, [pc, #444]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6e      	ldr	r2, [pc, #440]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xd4>
 8003014:	4b6b      	ldr	r3, [pc, #428]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a6a      	ldr	r2, [pc, #424]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b68      	ldr	r3, [pc, #416]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a67      	ldr	r2, [pc, #412]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fc80 	bl	8000938 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fd fc7c 	bl	8000938 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e200      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b5d      	ldr	r3, [pc, #372]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0xe4>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fd fc6c 	bl	8000938 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fd fc68 	bl	8000938 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1ec      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x10c>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d063      	beq.n	800315a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003092:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x18c>
 80030aa:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x176>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e1c0      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4939      	ldr	r1, [pc, #228]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e03a      	b.n	800315a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_RCC_OscConfig+0x270>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fd fc21 	bl	8000938 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fd fc1d 	bl	8000938 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1a1      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4927      	ldr	r1, [pc, #156]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
 800312c:	e015      	b.n	800315a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fd fc00 	bl	8000938 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313c:	f7fd fbfc 	bl	8000938 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e180      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d03a      	beq.n	80031dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d019      	beq.n	80031a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fd fbe0 	bl	8000938 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fd fbdc 	bl	8000938 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e160      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800319a:	2001      	movs	r0, #1
 800319c:	f000 fad8 	bl	8003750 <RCC_Delay>
 80031a0:	e01c      	b.n	80031dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a8:	f7fd fbc6 	bl	8000938 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ae:	e00f      	b.n	80031d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fd fbc2 	bl	8000938 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d908      	bls.n	80031d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e146      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	42420000 	.word	0x42420000
 80031cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e9      	bne.n	80031b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a6 	beq.w	8003336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ee:	4b8b      	ldr	r3, [pc, #556]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a87      	ldr	r2, [pc, #540]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	61d3      	str	r3, [r2, #28]
 8003206:	4b85      	ldr	r3, [pc, #532]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b82      	ldr	r3, [pc, #520]	; (8003420 <HAL_RCC_OscConfig+0x4c8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d118      	bne.n	8003254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003222:	4b7f      	ldr	r3, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x4c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7e      	ldr	r2, [pc, #504]	; (8003420 <HAL_RCC_OscConfig+0x4c8>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fd fb83 	bl	8000938 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003236:	f7fd fb7f 	bl	8000938 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b64      	cmp	r3, #100	; 0x64
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e103      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	4b75      	ldr	r3, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x4c8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x312>
 800325c:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	e02d      	b.n	80032c6 <HAL_RCC_OscConfig+0x36e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x334>
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a69      	ldr	r2, [pc, #420]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6213      	str	r3, [r2, #32]
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	4a66      	ldr	r2, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	6213      	str	r3, [r2, #32]
 800328a:	e01c      	b.n	80032c6 <HAL_RCC_OscConfig+0x36e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x356>
 8003294:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4a60      	ldr	r2, [pc, #384]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6213      	str	r3, [r2, #32]
 80032a0:	4b5e      	ldr	r3, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a5d      	ldr	r2, [pc, #372]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	e00b      	b.n	80032c6 <HAL_RCC_OscConfig+0x36e>
 80032ae:	4b5b      	ldr	r3, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4a5a      	ldr	r2, [pc, #360]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6213      	str	r3, [r2, #32]
 80032ba:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d015      	beq.n	80032fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7fd fb33 	bl	8000938 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd fb2f 	bl	8000938 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0b1      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ee      	beq.n	80032d6 <HAL_RCC_OscConfig+0x37e>
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7fd fb1d 	bl	8000938 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fd fb19 	bl	8000938 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e09b      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4b3c      	ldr	r3, [pc, #240]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4a3b      	ldr	r2, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8087 	beq.w	800344e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d061      	beq.n	8003410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d146      	bne.n	80033e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fd faed 	bl	8000938 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003362:	f7fd fae9 	bl	8000938 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e06d      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d108      	bne.n	800339c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	4921      	ldr	r1, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a19      	ldr	r1, [r3, #32]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	430b      	orrs	r3, r1
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fd fabd 	bl	8000938 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fd fab9 	bl	8000938 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e03d      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x46a>
 80033e0:	e035      	b.n	800344e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd faa6 	bl	8000938 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fd faa2 	bl	8000938 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e026      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x498>
 800340e:	e01e      	b.n	800344e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e019      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
 8003424:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCC_OscConfig+0x500>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	429a      	cmp	r2, r3
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000

0800345c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d0      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b67      	ldr	r3, [pc, #412]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4965      	ldr	r1, [pc, #404]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d040      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d115      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e073      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06b      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b39      	ldr	r3, [pc, #228]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4936      	ldr	r1, [pc, #216]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7fd f9f4 	bl	8000938 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fd f9f0 	bl	8000938 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e053      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d210      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0207 	bic.w	r2, r3, #7
 8003592:	4922      	ldr	r1, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1cc>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1d0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd f952 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40022000 	.word	0x40022000
 8003620:	40021000 	.word	0x40021000
 8003624:	08008fa4 	.word	0x08008fa4
 8003628:	20000008 	.word	0x20000008
 800362c:	2000000c 	.word	0x2000000c

08003630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b490      	push	{r4, r7}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003636:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_RCC_GetSysClockFreq+0xac>)
 8003638:	1d3c      	adds	r4, r7, #4
 800363a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800363c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003640:	f240 2301 	movw	r3, #513	; 0x201
 8003644:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d002      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x40>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d003      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x46>
 800366e:	e02b      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003670:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003672:	623b      	str	r3, [r7, #32]
      break;
 8003674:	e02b      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	3328      	adds	r3, #40	; 0x28
 8003680:	443b      	add	r3, r7
 8003682:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003686:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0c5b      	lsrs	r3, r3, #17
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	3328      	adds	r3, #40	; 0x28
 800369e:	443b      	add	r3, r7
 80036a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	4a0e      	ldr	r2, [pc, #56]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036aa:	fb03 f202 	mul.w	r2, r3, r2
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
 80036b6:	e004      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	623b      	str	r3, [r7, #32]
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036ca:	623b      	str	r3, [r7, #32]
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	6a3b      	ldr	r3, [r7, #32]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3728      	adds	r7, #40	; 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc90      	pop	{r4, r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	08008f50 	.word	0x08008f50
 80036e0:	40021000 	.word	0x40021000
 80036e4:	007a1200 	.word	0x007a1200
 80036e8:	003d0900 	.word	0x003d0900

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b02      	ldr	r3, [pc, #8]	; (80036fc <HAL_RCC_GetHCLKFreq+0x10>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	20000008 	.word	0x20000008

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003704:	f7ff fff2 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	08008fb4 	.word	0x08008fb4

08003728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800372c:	f7ff ffde 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	0adb      	lsrs	r3, r3, #11
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4903      	ldr	r1, [pc, #12]	; (800374c <HAL_RCC_GetPCLK2Freq+0x24>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40021000 	.word	0x40021000
 800374c:	08008fb4 	.word	0x08008fb4

08003750 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <RCC_Delay+0x34>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <RCC_Delay+0x38>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0a5b      	lsrs	r3, r3, #9
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800376c:	bf00      	nop
  }
  while (Delay --);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1e5a      	subs	r2, r3, #1
 8003772:	60fa      	str	r2, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f9      	bne.n	800376c <RCC_Delay+0x1c>
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	20000008 	.word	0x20000008
 8003788:	10624dd3 	.word	0x10624dd3

0800378c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d07d      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037a8:	2300      	movs	r3, #0
 80037aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ac:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	4a4b      	ldr	r2, [pc, #300]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c2:	61d3      	str	r3, [r2, #28]
 80037c4:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d118      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e0:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a42      	ldr	r2, [pc, #264]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ec:	f7fd f8a4 	bl	8000938 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	e008      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f4:	f7fd f8a0 	bl	8000938 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e06d      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003812:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02e      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	429a      	cmp	r2, r3
 800382e:	d027      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003830:	4b2e      	ldr	r3, [pc, #184]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003838:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383a:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003840:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003846:	4a29      	ldr	r2, [pc, #164]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d014      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003856:	f7fd f86f 	bl	8000938 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fd f86b 	bl	8000938 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e036      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ee      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4917      	ldr	r1, [pc, #92]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	4313      	orrs	r3, r2
 8003890:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b14      	ldr	r3, [pc, #80]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4a13      	ldr	r2, [pc, #76]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	490b      	ldr	r1, [pc, #44]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	4904      	ldr	r1, [pc, #16]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40007000 	.word	0x40007000
 80038f4:	42420440 	.word	0x42420440

080038f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e03f      	b.n	800398a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fc fec8 	bl	80006b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800393a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f905 	bl	8003b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b08a      	sub	sp, #40	; 0x28
 8003996:	af02      	add	r7, sp, #8
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d17c      	bne.n	8003aac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_Transmit+0x2c>
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e075      	b.n	8003aae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Transmit+0x3e>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e06e      	b.n	8003aae <HAL_UART_Transmit+0x11c>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2221      	movs	r2, #33	; 0x21
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039e6:	f7fc ffa7 	bl	8000938 <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	88fa      	ldrh	r2, [r7, #6]
 80039f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a00:	d108      	bne.n	8003a14 <HAL_UART_Transmit+0x82>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d104      	bne.n	8003a14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	e003      	b.n	8003a1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a24:	e02a      	b.n	8003a7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2180      	movs	r1, #128	; 0x80
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f840 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e036      	b.n	8003aae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10b      	bne.n	8003a5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	3302      	adds	r3, #2
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	e007      	b.n	8003a6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	781a      	ldrb	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1cf      	bne.n	8003a26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2140      	movs	r1, #64	; 0x40
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f810 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e006      	b.n	8003aae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac6:	e02c      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d028      	beq.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ad6:	f7fc ff2f 	bl	8000938 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d21d      	bcs.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003af4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e00f      	b.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	bf0c      	ite	eq
 8003b32:	2301      	moveq	r3, #1
 8003b34:	2300      	movne	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d0c3      	beq.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b86:	f023 030c 	bic.w	r3, r3, #12
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <UART_SetConfig+0x114>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d103      	bne.n	8003bbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bb4:	f7ff fdb8 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	e002      	b.n	8003bc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f7ff fda0 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 8003bc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009a      	lsls	r2, r3, #2
 8003bcc:	441a      	add	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <UART_SetConfig+0x118>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	0119      	lsls	r1, r3, #4
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	009a      	lsls	r2, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf8:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <UART_SetConfig+0x118>)
 8003bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2064      	movs	r0, #100	; 0x64
 8003c02:	fb00 f303 	mul.w	r3, r0, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	3332      	adds	r3, #50	; 0x32
 8003c0c:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <UART_SetConfig+0x118>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c18:	4419      	add	r1, r3
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <UART_SetConfig+0x118>)
 8003c32:	fba3 0302 	umull	r0, r3, r3, r2
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2064      	movs	r0, #100	; 0x64
 8003c3a:	fb00 f303 	mul.w	r3, r0, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	3332      	adds	r3, #50	; 0x32
 8003c44:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <UART_SetConfig+0x118>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	f003 020f 	and.w	r2, r3, #15
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	440a      	add	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40013800 	.word	0x40013800
 8003c64:	51eb851f 	.word	0x51eb851f

08003c68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c68:	b084      	sub	sp, #16
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	f107 0014 	add.w	r0, r7, #20
 8003c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	b004      	add	sp, #16
 8003c86:	4770      	bx	lr

08003c88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c98:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cbc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d00:	b084      	sub	sp, #16
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	f107 0014 	add.w	r0, r7, #20
 8003d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	b004      	add	sp, #16
 8003d3e:	4770      	bx	lr

08003d40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b09b      	sub	sp, #108	; 0x6c
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	78db      	ldrb	r3, [r3, #3]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d81f      	bhi.n	8003db2 <USB_ActivateEndpoint+0x72>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <USB_ActivateEndpoint+0x38>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003dbb 	.word	0x08003dbb
 8003d84:	08003d97 	.word	0x08003d97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d94:	e012      	b.n	8003dbc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003d9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003da2:	e00b      	b.n	8003dbc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003da4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003db0:	e004      	b.n	8003dbc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003db8:	e000      	b.n	8003dbc <USB_ActivateEndpoint+0x7c>
      break;
 8003dba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	7b1b      	ldrb	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f040 8149 	bne.w	80040c0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	785b      	ldrb	r3, [r3, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8084 	beq.w	8003f40 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	4413      	add	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	011a      	lsls	r2, r3, #4
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	88db      	ldrh	r3, [r3, #6]
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	81fb      	strh	r3, [r7, #14]
 8003e7a:	89fb      	ldrh	r3, [r7, #14]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <USB_ActivateEndpoint+0x17c>
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	81bb      	strh	r3, [r7, #12]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	89bb      	ldrh	r3, [r7, #12]
 8003ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	78db      	ldrb	r3, [r3, #3]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d020      	beq.n	8003f06 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eda:	813b      	strh	r3, [r7, #8]
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	f083 0320 	eor.w	r3, r3, #32
 8003ee2:	813b      	strh	r3, [r7, #8]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	893b      	ldrh	r3, [r7, #8]
 8003ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	8013      	strh	r3, [r2, #0]
 8003f04:	e27f      	b.n	8004406 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	897b      	ldrh	r3, [r7, #10]
 8003f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	8013      	strh	r3, [r2, #0]
 8003f3e:	e262      	b.n	8004406 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	4413      	add	r3, r2
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	011a      	lsls	r2, r3, #4
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	88db      	ldrh	r3, [r3, #6]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	4413      	add	r3, r2
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	011a      	lsls	r2, r3, #4
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	4413      	add	r3, r2
 8003f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f96:	623b      	str	r3, [r7, #32]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d112      	bne.n	8003fc6 <USB_ActivateEndpoint+0x286>
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	e02f      	b.n	8004026 <USB_ActivateEndpoint+0x2e6>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b3e      	cmp	r3, #62	; 0x3e
 8003fcc:	d813      	bhi.n	8003ff6 <USB_ActivateEndpoint+0x2b6>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <USB_ActivateEndpoint+0x2a8>
 8003fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	663b      	str	r3, [r7, #96]	; 0x60
 8003fe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	029b      	lsls	r3, r3, #10
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	e017      	b.n	8004026 <USB_ActivateEndpoint+0x2e6>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <USB_ActivateEndpoint+0x2d0>
 800400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400c:	3b01      	subs	r3, #1
 800400e:	663b      	str	r3, [r7, #96]	; 0x60
 8004010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004012:	b29b      	uxth	r3, r3
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	b29b      	uxth	r3, r3
 8004018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004020:	b29a      	uxth	r2, r3
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	83fb      	strh	r3, [r7, #30]
 8004034:	8bfb      	ldrh	r3, [r7, #30]
 8004036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01b      	beq.n	8004076 <USB_ActivateEndpoint+0x336>
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	83bb      	strh	r3, [r7, #28]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	441a      	add	r2, r3
 8004060:	8bbb      	ldrh	r3, [r7, #28]
 8004062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800406e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004072:	b29b      	uxth	r3, r3
 8004074:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408c:	837b      	strh	r3, [r7, #26]
 800408e:	8b7b      	ldrh	r3, [r7, #26]
 8004090:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004094:	837b      	strh	r3, [r7, #26]
 8004096:	8b7b      	ldrh	r3, [r7, #26]
 8004098:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800409c:	837b      	strh	r3, [r7, #26]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	8b7b      	ldrh	r3, [r7, #26]
 80040aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	8013      	strh	r3, [r2, #0]
 80040be:	e1a2      	b.n	8004406 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	441a      	add	r2, r3
 80040e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004106:	b29b      	uxth	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800410c:	4413      	add	r3, r2
 800410e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	011a      	lsls	r2, r3, #4
 8004116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004118:	4413      	add	r3, r2
 800411a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800411e:	657b      	str	r3, [r7, #84]	; 0x54
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	891b      	ldrh	r3, [r3, #8]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	b29b      	uxth	r3, r3
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800412e:	801a      	strh	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004140:	4413      	add	r3, r2
 8004142:	653b      	str	r3, [r7, #80]	; 0x50
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	011a      	lsls	r2, r3, #4
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	4413      	add	r3, r2
 800414e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	895b      	ldrh	r3, [r3, #10]
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	b29b      	uxth	r3, r3
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004162:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 8091 	bne.w	8004290 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800417c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800417e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01b      	beq.n	80041be <USB_ActivateEndpoint+0x47e>
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	441a      	add	r2, r3
 80041a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80041cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01b      	beq.n	800420e <USB_ActivateEndpoint+0x4ce>
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004226:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004228:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800422c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800422e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004234:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426c:	867b      	strh	r3, [r7, #50]	; 0x32
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	441a      	add	r2, r3
 8004278:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800427a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800427e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428a:	b29b      	uxth	r3, r3
 800428c:	8013      	strh	r3, [r2, #0]
 800428e:	e0ba      	b.n	8004406 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01d      	beq.n	80042e8 <USB_ActivateEndpoint+0x5a8>
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01d      	beq.n	8004340 <USB_ActivateEndpoint+0x600>
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800432c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800433c:	b29b      	uxth	r3, r3
 800433e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	78db      	ldrb	r3, [r3, #3]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d024      	beq.n	8004392 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004362:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004366:	f083 0320 	eor.w	r3, r3, #32
 800436a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800437c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438c:	b29b      	uxth	r3, r3
 800438e:	8013      	strh	r3, [r2, #0]
 8004390:	e01d      	b.n	80043ce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	441a      	add	r2, r3
 80043f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800440a:	4618      	mov	r0, r3
 800440c:	376c      	adds	r7, #108	; 0x6c
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004414:	b480      	push	{r7}
 8004416:	b08d      	sub	sp, #52	; 0x34
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	7b1b      	ldrb	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 808e 	bne.w	8004544 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d044      	beq.n	80044ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	81bb      	strh	r3, [r7, #12]
 800443e:	89bb      	ldrh	r3, [r7, #12]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <USB_DeactivateEndpoint+0x6c>
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	817b      	strh	r3, [r7, #10]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	897b      	ldrh	r3, [r7, #10]
 800446c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800447c:	b29b      	uxth	r3, r3
 800447e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004496:	813b      	strh	r3, [r7, #8]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	893b      	ldrh	r3, [r7, #8]
 80044a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	8013      	strh	r3, [r2, #0]
 80044b8:	e192      	b.n	80047e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	827b      	strh	r3, [r7, #18]
 80044c8:	8a7b      	ldrh	r3, [r7, #18]
 80044ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01b      	beq.n	800450a <USB_DeactivateEndpoint+0xf6>
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e8:	823b      	strh	r3, [r7, #16]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	8a3b      	ldrh	r3, [r7, #16]
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004520:	81fb      	strh	r3, [r7, #14]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	89fb      	ldrh	r3, [r7, #14]
 800452e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
 8004542:	e14d      	b.n	80047e0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 80a5 	bne.w	8004698 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	843b      	strh	r3, [r7, #32]
 800455c:	8c3b      	ldrh	r3, [r7, #32]
 800455e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01b      	beq.n	800459e <USB_DeactivateEndpoint+0x18a>
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	83fb      	strh	r3, [r7, #30]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8bfb      	ldrh	r3, [r7, #30]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	83bb      	strh	r3, [r7, #28]
 80045ac:	8bbb      	ldrh	r3, [r7, #28]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01b      	beq.n	80045ee <USB_DeactivateEndpoint+0x1da>
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045cc:	837b      	strh	r3, [r7, #26]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	8b7b      	ldrh	r3, [r7, #26]
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004604:	833b      	strh	r3, [r7, #24]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	8b3b      	ldrh	r3, [r7, #24]
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	82fb      	strh	r3, [r7, #22]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004674:	82bb      	strh	r3, [r7, #20]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	8abb      	ldrh	r3, [r7, #20]
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]
 8004696:	e0a3      	b.n	80047e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <USB_DeactivateEndpoint+0x2d4>
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <USB_DeactivateEndpoint+0x324>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	853b      	strh	r3, [r7, #40]	; 0x28
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800475c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	b29b      	uxth	r3, r3
 800476e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004786:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	847b      	strh	r3, [r7, #34]	; 0x22
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3734      	adds	r7, #52	; 0x34
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0cc      	sub	sp, #304	; 0x130
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047fa:	6018      	str	r0, [r3, #0]
 80047fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004804:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	2b01      	cmp	r3, #1
 8004814:	f041 817d 	bne.w	8005b12 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d908      	bls.n	8004846 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004844:	e007      	b.n	8004856 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	7b1b      	ldrb	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d152      	bne.n	800490c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6959      	ldr	r1, [r3, #20]
 8004872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	88da      	ldrh	r2, [r3, #6]
 800487e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004882:	b29b      	uxth	r3, r3
 8004884:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004888:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800488c:	6800      	ldr	r0, [r0, #0]
 800488e:	f001 ff23 	bl	80066d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004896:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800489a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800489e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4619      	mov	r1, r3
 80048b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048c4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	440a      	add	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	011a      	lsls	r2, r3, #4
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4413      	add	r3, r2
 80048e8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004900:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	801a      	strh	r2, [r3, #0]
 8004908:	f001 b8b5 	b.w	8005a76 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800490c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	78db      	ldrb	r3, [r3, #3]
 8004918:	2b02      	cmp	r3, #2
 800491a:	f040 84c6 	bne.w	80052aa <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800491e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800492e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	f240 8443 	bls.w	80051c2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800493c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800494a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	441a      	add	r2, r3
 8004980:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a1a      	ldr	r2, [r3, #32]
 80049a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a8:	1ad2      	subs	r2, r2, r3
 80049aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 823e 	beq.w	8004e5a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049ea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	785b      	ldrb	r3, [r3, #1]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f040 809a 	bne.w	8004b38 <USB_EPStartXfer+0x34c>
 8004a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a36:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	011a      	lsls	r2, r3, #4
 8004a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d122      	bne.n	8004ab6 <USB_EPStartXfer+0x2ca>
 8004a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	e079      	b.n	8004baa <USB_EPStartXfer+0x3be>
 8004ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aba:	2b3e      	cmp	r3, #62	; 0x3e
 8004abc:	d81b      	bhi.n	8004af6 <USB_EPStartXfer+0x30a>
 8004abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <USB_EPStartXfer+0x2f2>
 8004ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	029b      	lsls	r3, r3, #10
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	e059      	b.n	8004baa <USB_EPStartXfer+0x3be>
 8004af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <USB_EPStartXfer+0x32a>
 8004b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b10:	3b01      	subs	r3, #1
 8004b12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	029b      	lsls	r3, r3, #10
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	e038      	b.n	8004baa <USB_EPStartXfer+0x3be>
 8004b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d130      	bne.n	8004baa <USB_EPStartXfer+0x3be>
 8004b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b66:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	011a      	lsls	r2, r3, #4
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	895b      	ldrh	r3, [r3, #10]
 8004bb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6959      	ldr	r1, [r3, #20]
 8004bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004bd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bd8:	6800      	ldr	r0, [r0, #0]
 8004bda:	f001 fd7d 	bl	80066d8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bee:	441a      	add	r2, r3
 8004bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d90f      	bls.n	8004c38 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c28:	1ad2      	subs	r2, r2, r3
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	621a      	str	r2, [r3, #32]
 8004c36:	e00e      	b.n	8004c56 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f040 809a 	bne.w	8004d9c <USB_EPStartXfer+0x5b0>
 8004c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c74:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c92:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c9a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	011a      	lsls	r2, r3, #4
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d122      	bne.n	8004d1a <USB_EPStartXfer+0x52e>
 8004cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e083      	b.n	8004e22 <USB_EPStartXfer+0x636>
 8004d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d20:	d81b      	bhi.n	8004d5a <USB_EPStartXfer+0x56e>
 8004d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <USB_EPStartXfer+0x556>
 8004d38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	029b      	lsls	r3, r3, #10
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	e063      	b.n	8004e22 <USB_EPStartXfer+0x636>
 8004d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <USB_EPStartXfer+0x58e>
 8004d70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d74:	3b01      	subs	r3, #1
 8004d76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	e042      	b.n	8004e22 <USB_EPStartXfer+0x636>
 8004d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d13a      	bne.n	8004e22 <USB_EPStartXfer+0x636>
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004db4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004db8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dde:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	440a      	add	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	011a      	lsls	r2, r3, #4
 8004df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4413      	add	r3, r2
 8004e02:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	891b      	ldrh	r3, [r3, #8]
 8004e2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6959      	ldr	r1, [r3, #20]
 8004e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e48:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e4c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e50:	6800      	ldr	r0, [r0, #0]
 8004e52:	f001 fc41 	bl	80066d8 <USB_WritePMA>
 8004e56:	f000 be0e 	b.w	8005a76 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d16d      	bne.n	8004f46 <USB_EPStartXfer+0x75a>
 8004e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8a:	4413      	add	r3, r2
 8004e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	011a      	lsls	r2, r3, #4
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d112      	bne.n	8004ed4 <USB_EPStartXfer+0x6e8>
 8004eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	e063      	b.n	8004f9c <USB_EPStartXfer+0x7b0>
 8004ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed8:	2b3e      	cmp	r3, #62	; 0x3e
 8004eda:	d817      	bhi.n	8004f0c <USB_EPStartXfer+0x720>
 8004edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <USB_EPStartXfer+0x710>
 8004ef2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004efc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	029b      	lsls	r3, r3, #10
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	e047      	b.n	8004f9c <USB_EPStartXfer+0x7b0>
 8004f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d104      	bne.n	8004f2c <USB_EPStartXfer+0x740>
 8004f22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f26:	3b01      	subs	r3, #1
 8004f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	029b      	lsls	r3, r3, #10
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	e02a      	b.n	8004f9c <USB_EPStartXfer+0x7b0>
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d122      	bne.n	8004f9c <USB_EPStartXfer+0x7b0>
 8004f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	653b      	str	r3, [r7, #80]	; 0x50
 8004f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f76:	4413      	add	r3, r2
 8004f78:	653b      	str	r3, [r7, #80]	; 0x50
 8004f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	011a      	lsls	r2, r3, #4
 8004f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	891b      	ldrh	r3, [r3, #8]
 8004fa8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6959      	ldr	r1, [r3, #20]
 8004fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fc2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fc6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	f001 fb84 	bl	80066d8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe0:	441a      	add	r2, r3
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a1a      	ldr	r2, [r3, #32]
 8004ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	d90f      	bls.n	800502a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800500a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	621a      	str	r2, [r3, #32]
 8005028:	e00e      	b.n	8005048 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800502a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	643b      	str	r3, [r7, #64]	; 0x40
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d16d      	bne.n	8005140 <USB_EPStartXfer+0x954>
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005074:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800507e:	b29b      	uxth	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	4413      	add	r3, r2
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38
 8005088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	011a      	lsls	r2, r3, #4
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	4413      	add	r3, r2
 800509a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
 80050a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d112      	bne.n	80050ce <USB_EPStartXfer+0x8e2>
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	e05d      	b.n	800518a <USB_EPStartXfer+0x99e>
 80050ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d2:	2b3e      	cmp	r3, #62	; 0x3e
 80050d4:	d817      	bhi.n	8005106 <USB_EPStartXfer+0x91a>
 80050d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <USB_EPStartXfer+0x90a>
 80050ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050f0:	3301      	adds	r3, #1
 80050f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e041      	b.n	800518a <USB_EPStartXfer+0x99e>
 8005106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <USB_EPStartXfer+0x93a>
 800511c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005120:	3b01      	subs	r3, #1
 8005122:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005126:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800512a:	b29b      	uxth	r3, r3
 800512c:	029b      	lsls	r3, r3, #10
 800512e:	b29b      	uxth	r3, r3
 8005130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005138:	b29a      	uxth	r2, r3
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	e024      	b.n	800518a <USB_EPStartXfer+0x99e>
 8005140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d11c      	bne.n	800518a <USB_EPStartXfer+0x99e>
 8005150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515e:	b29b      	uxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005164:	4413      	add	r3, r2
 8005166:	643b      	str	r3, [r7, #64]	; 0x40
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011a      	lsls	r2, r3, #4
 8005176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005178:	4413      	add	r3, r2
 800517a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005184:	b29a      	uxth	r2, r3
 8005186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005188:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800518a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	895b      	ldrh	r3, [r3, #10]
 8005196:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800519a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6959      	ldr	r1, [r3, #20]
 80051a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051b8:	6800      	ldr	r0, [r0, #0]
 80051ba:	f001 fa8d 	bl	80066d8 <USB_WritePMA>
 80051be:	f000 bc5a 	b.w	8005a76 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80051c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80051fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800521a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800522e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005248:	b29b      	uxth	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800524e:	4413      	add	r3, r2
 8005250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	011a      	lsls	r2, r3, #4
 8005260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005262:	4413      	add	r3, r2
 8005264:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005268:	65bb      	str	r3, [r7, #88]	; 0x58
 800526a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526e:	b29a      	uxth	r2, r3
 8005270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005272:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	891b      	ldrh	r3, [r3, #8]
 8005280:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6959      	ldr	r1, [r3, #20]
 8005290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005294:	b29b      	uxth	r3, r3
 8005296:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800529a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800529e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052a2:	6800      	ldr	r0, [r0, #0]
 80052a4:	f001 fa18 	bl	80066d8 <USB_WritePMA>
 80052a8:	e3e5      	b.n	8005a76 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80052aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80052d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 81bc 	beq.w	80056c4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800534c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d16d      	bne.n	8005446 <USB_EPStartXfer+0xc5a>
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	67bb      	str	r3, [r7, #120]	; 0x78
 8005376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005384:	b29b      	uxth	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800538a:	4413      	add	r3, r2
 800538c:	67bb      	str	r3, [r7, #120]	; 0x78
 800538e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	011a      	lsls	r2, r3, #4
 800539c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539e:	4413      	add	r3, r2
 80053a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053a4:	677b      	str	r3, [r7, #116]	; 0x74
 80053a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d112      	bne.n	80053d4 <USB_EPStartXfer+0xbe8>
 80053ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e060      	b.n	8005496 <USB_EPStartXfer+0xcaa>
 80053d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d8:	2b3e      	cmp	r3, #62	; 0x3e
 80053da:	d817      	bhi.n	800540c <USB_EPStartXfer+0xc20>
 80053dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <USB_EPStartXfer+0xc10>
 80053f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053f6:	3301      	adds	r3, #1
 80053f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005400:	b29b      	uxth	r3, r3
 8005402:	029b      	lsls	r3, r3, #10
 8005404:	b29a      	uxth	r2, r3
 8005406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005408:	801a      	strh	r2, [r3, #0]
 800540a:	e044      	b.n	8005496 <USB_EPStartXfer+0xcaa>
 800540c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <USB_EPStartXfer+0xc40>
 8005422:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005426:	3b01      	subs	r3, #1
 8005428:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800542c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005430:	b29b      	uxth	r3, r3
 8005432:	029b      	lsls	r3, r3, #10
 8005434:	b29b      	uxth	r3, r3
 8005436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543e:	b29a      	uxth	r2, r3
 8005440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005442:	801a      	strh	r2, [r3, #0]
 8005444:	e027      	b.n	8005496 <USB_EPStartXfer+0xcaa>
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	785b      	ldrb	r3, [r3, #1]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d11f      	bne.n	8005496 <USB_EPStartXfer+0xcaa>
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800546c:	4413      	add	r3, r2
 800546e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	011a      	lsls	r2, r3, #4
 8005480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005484:	4413      	add	r3, r2
 8005486:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800548a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800548c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005490:	b29a      	uxth	r2, r3
 8005492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005494:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	895b      	ldrh	r3, [r3, #10]
 80054a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6959      	ldr	r1, [r3, #20]
 80054b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054c4:	6800      	ldr	r0, [r0, #0]
 80054c6:	f001 f907 	bl	80066d8 <USB_WritePMA>
          ep->xfer_buff += len;
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054da:	441a      	add	r2, r3
 80054dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80054e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a1a      	ldr	r2, [r3, #32]
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	429a      	cmp	r2, r3
 8005502:	d90f      	bls.n	8005524 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005514:	1ad2      	subs	r2, r2, r3
 8005516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	621a      	str	r2, [r3, #32]
 8005522:	e00e      	b.n	8005542 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2200      	movs	r2, #0
 8005540:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8295 	beq.w	8005a76 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d16d      	bne.n	8005638 <USB_EPStartXfer+0xe4c>
 800555c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	66bb      	str	r3, [r7, #104]	; 0x68
 8005568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800557c:	4413      	add	r3, r2
 800557e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	011a      	lsls	r2, r3, #4
 800558e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005590:	4413      	add	r3, r2
 8005592:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005596:	667b      	str	r3, [r7, #100]	; 0x64
 8005598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d112      	bne.n	80055c6 <USB_EPStartXfer+0xdda>
 80055a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e063      	b.n	800568e <USB_EPStartXfer+0xea2>
 80055c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ca:	2b3e      	cmp	r3, #62	; 0x3e
 80055cc:	d817      	bhi.n	80055fe <USB_EPStartXfer+0xe12>
 80055ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <USB_EPStartXfer+0xe02>
 80055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e8:	3301      	adds	r3, #1
 80055ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e047      	b.n	800568e <USB_EPStartXfer+0xea2>
 80055fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <USB_EPStartXfer+0xe32>
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005618:	3b01      	subs	r3, #1
 800561a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005622:	b29b      	uxth	r3, r3
 8005624:	029b      	lsls	r3, r3, #10
 8005626:	b29b      	uxth	r3, r3
 8005628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005630:	b29a      	uxth	r2, r3
 8005632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e02a      	b.n	800568e <USB_EPStartXfer+0xea2>
 8005638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d122      	bne.n	800568e <USB_EPStartXfer+0xea2>
 8005648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	673b      	str	r3, [r7, #112]	; 0x70
 8005654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005658:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005662:	b29b      	uxth	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005668:	4413      	add	r3, r2
 800566a:	673b      	str	r3, [r7, #112]	; 0x70
 800566c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	011a      	lsls	r2, r3, #4
 800567a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800567c:	4413      	add	r3, r2
 800567e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005688:	b29a      	uxth	r2, r3
 800568a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	891b      	ldrh	r3, [r3, #8]
 800569a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6959      	ldr	r1, [r3, #20]
 80056aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f001 f80b 	bl	80066d8 <USB_WritePMA>
 80056c2:	e1d8      	b.n	8005a76 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d178      	bne.n	80057c6 <USB_EPStartXfer+0xfda>
 80056d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056f8:	4413      	add	r3, r2
 80056fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	011a      	lsls	r2, r3, #4
 800570c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005710:	4413      	add	r3, r2
 8005712:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800571a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d116      	bne.n	8005750 <USB_EPStartXfer+0xf64>
 8005722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800572e:	b29a      	uxth	r2, r3
 8005730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e06b      	b.n	8005828 <USB_EPStartXfer+0x103c>
 8005750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005754:	2b3e      	cmp	r3, #62	; 0x3e
 8005756:	d818      	bhi.n	800578a <USB_EPStartXfer+0xf9e>
 8005758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <USB_EPStartXfer+0xf8c>
 800576e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005772:	3301      	adds	r3, #1
 8005774:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005778:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800577c:	b29b      	uxth	r3, r3
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	b29a      	uxth	r2, r3
 8005782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e04e      	b.n	8005828 <USB_EPStartXfer+0x103c>
 800578a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <USB_EPStartXfer+0xfbe>
 80057a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057a4:	3b01      	subs	r3, #1
 80057a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	029b      	lsls	r3, r3, #10
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057bc:	b29a      	uxth	r2, r3
 80057be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	e030      	b.n	8005828 <USB_EPStartXfer+0x103c>
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d128      	bne.n	8005828 <USB_EPStartXfer+0x103c>
 80057d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057fa:	4413      	add	r3, r2
 80057fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	011a      	lsls	r2, r3, #4
 800580e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005812:	4413      	add	r3, r2
 8005814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800581c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005820:	b29a      	uxth	r2, r3
 8005822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005826:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	891b      	ldrh	r3, [r3, #8]
 8005834:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6959      	ldr	r1, [r3, #20]
 8005844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005848:	b29b      	uxth	r3, r3
 800584a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800584e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005852:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005856:	6800      	ldr	r0, [r0, #0]
 8005858:	f000 ff3e 	bl	80066d8 <USB_WritePMA>
          ep->xfer_buff += len;
 800585c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586c:	441a      	add	r2, r3
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	429a      	cmp	r2, r3
 8005894:	d90f      	bls.n	80058b6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a6:	1ad2      	subs	r2, r2, r3
 80058a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	621a      	str	r2, [r3, #32]
 80058b4:	e00e      	b.n	80058d4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80058c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2200      	movs	r2, #0
 80058d2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80058d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80cc 	beq.w	8005a76 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d178      	bne.n	80059ee <USB_EPStartXfer+0x1202>
 80058fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005900:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005918:	b29b      	uxth	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005920:	4413      	add	r3, r2
 8005922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	011a      	lsls	r2, r3, #4
 8005934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005938:	4413      	add	r3, r2
 800593a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800593e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d116      	bne.n	8005978 <USB_EPStartXfer+0x118c>
 800594a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005956:	b29a      	uxth	r2, r3
 8005958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596e:	b29a      	uxth	r2, r3
 8005970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	e064      	b.n	8005a42 <USB_EPStartXfer+0x1256>
 8005978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597c:	2b3e      	cmp	r3, #62	; 0x3e
 800597e:	d818      	bhi.n	80059b2 <USB_EPStartXfer+0x11c6>
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800598a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <USB_EPStartXfer+0x11b4>
 8005996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800599a:	3301      	adds	r3, #1
 800599c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	029b      	lsls	r3, r3, #10
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	e047      	b.n	8005a42 <USB_EPStartXfer+0x1256>
 80059b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <USB_EPStartXfer+0x11e6>
 80059c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059cc:	3b01      	subs	r3, #1
 80059ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	b29b      	uxth	r3, r3
 80059dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e029      	b.n	8005a42 <USB_EPStartXfer+0x1256>
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d121      	bne.n	8005a42 <USB_EPStartXfer+0x1256>
 80059fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a14:	4413      	add	r3, r2
 8005a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	011a      	lsls	r2, r3, #4
 8005a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	895b      	ldrh	r3, [r3, #10]
 8005a4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6959      	ldr	r1, [r3, #20]
 8005a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a70:	6800      	ldr	r0, [r0, #0]
 8005a72:	f000 fe31 	bl	80066d8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a98:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa4:	8013      	strh	r3, [r2, #0]
 8005aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aaa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005aae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ab2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ab6:	8812      	ldrh	r2, [r2, #0]
 8005ab8:	f082 0210 	eor.w	r2, r2, #16
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ac6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aca:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ace:	8812      	ldrh	r2, [r2, #0]
 8005ad0:	f082 0220 	eor.w	r2, r2, #32
 8005ad4:	801a      	strh	r2, [r3, #0]
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8013      	strh	r3, [r2, #0]
 8005b0e:	f000 bc9f 	b.w	8006450 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	7b1b      	ldrb	r3, [r3, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 80ae 	bne.w	8005c80 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d917      	bls.n	8005b70 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	619a      	str	r2, [r3, #24]
 8005b6e:	e00e      	b.n	8005b8e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	011a      	lsls	r2, r3, #4
 8005bc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bca:	4413      	add	r3, r2
 8005bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <USB_EPStartXfer+0x141e>
 8005bdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	e3e8      	b.n	80063dc <USB_EPStartXfer+0x1bf0>
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c10:	d818      	bhi.n	8005c44 <USB_EPStartXfer+0x1458>
 8005c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <USB_EPStartXfer+0x1446>
 8005c28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e3cb      	b.n	80063dc <USB_EPStartXfer+0x1bf0>
 8005c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <USB_EPStartXfer+0x1478>
 8005c5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	e3ad      	b.n	80063dc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	78db      	ldrb	r3, [r3, #3]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	f040 8200 	bne.w	8006092 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 8091 	bne.w	8005dc6 <USB_EPStartXfer+0x15da>
 8005ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cc8:	4413      	add	r3, r2
 8005cca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	011a      	lsls	r2, r3, #4
 8005cdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d116      	bne.n	8005d28 <USB_EPStartXfer+0x153c>
 8005cfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	e083      	b.n	8005e30 <USB_EPStartXfer+0x1644>
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b3e      	cmp	r3, #62	; 0x3e
 8005d36:	d820      	bhi.n	8005d7a <USB_EPStartXfer+0x158e>
 8005d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <USB_EPStartXfer+0x157c>
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d62:	3301      	adds	r3, #1
 8005d64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	029b      	lsls	r3, r3, #10
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	e05a      	b.n	8005e30 <USB_EPStartXfer+0x1644>
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <USB_EPStartXfer+0x15be>
 8005da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da4:	3b01      	subs	r3, #1
 8005da6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	029b      	lsls	r3, r3, #10
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e034      	b.n	8005e30 <USB_EPStartXfer+0x1644>
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d12c      	bne.n	8005e30 <USB_EPStartXfer+0x1644>
 8005dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	011a      	lsls	r2, r3, #4
 8005e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 8091 	bne.w	8005f72 <USB_EPStartXfer+0x1786>
 8005e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e74:	4413      	add	r3, r2
 8005e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	011a      	lsls	r2, r3, #4
 8005e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d116      	bne.n	8005ed4 <USB_EPStartXfer+0x16e8>
 8005ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	e07c      	b.n	8005fce <USB_EPStartXfer+0x17e2>
 8005ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee2:	d820      	bhi.n	8005f26 <USB_EPStartXfer+0x173a>
 8005ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <USB_EPStartXfer+0x1728>
 8005f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	029b      	lsls	r3, r3, #10
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	e053      	b.n	8005fce <USB_EPStartXfer+0x17e2>
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <USB_EPStartXfer+0x176a>
 8005f4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f50:	3b01      	subs	r3, #1
 8005f52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	029b      	lsls	r3, r3, #10
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e02d      	b.n	8005fce <USB_EPStartXfer+0x17e2>
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d125      	bne.n	8005fce <USB_EPStartXfer+0x17e2>
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f98:	4413      	add	r3, r2
 8005f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	011a      	lsls	r2, r3, #4
 8005fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fcc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 81fe 	beq.w	80063dc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006000:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <USB_EPStartXfer+0x182c>
 800600c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006018:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800601c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 81db 	bne.w	80063dc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006026:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 81d4 	bne.w	80063dc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800605e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	441a      	add	r2, r3
 8006078:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800607c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800608c:	b29b      	uxth	r3, r3
 800608e:	8013      	strh	r3, [r2, #0]
 8006090:	e1a4      	b.n	80063dc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	78db      	ldrb	r3, [r3, #3]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	f040 819a 	bne.w	80063d8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d917      	bls.n	80060f0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80060d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e0:	1ad2      	subs	r2, r2, r3
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	619a      	str	r2, [r3, #24]
 80060ee:	e00e      	b.n	800610e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d178      	bne.n	8006210 <USB_EPStartXfer+0x1a24>
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800613a:	b29b      	uxth	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006142:	4413      	add	r3, r2
 8006144:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	011a      	lsls	r2, r3, #4
 8006156:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800615a:	4413      	add	r3, r2
 800615c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006160:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d116      	bne.n	800619a <USB_EPStartXfer+0x19ae>
 800616c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	e06b      	b.n	8006272 <USB_EPStartXfer+0x1a86>
 800619a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619e:	2b3e      	cmp	r3, #62	; 0x3e
 80061a0:	d818      	bhi.n	80061d4 <USB_EPStartXfer+0x19e8>
 80061a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <USB_EPStartXfer+0x19d6>
 80061b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061bc:	3301      	adds	r3, #1
 80061be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	029b      	lsls	r3, r3, #10
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e04e      	b.n	8006272 <USB_EPStartXfer+0x1a86>
 80061d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <USB_EPStartXfer+0x1a08>
 80061ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ee:	3b01      	subs	r3, #1
 80061f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	029b      	lsls	r3, r3, #10
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006206:	b29a      	uxth	r2, r3
 8006208:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e030      	b.n	8006272 <USB_EPStartXfer+0x1a86>
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d128      	bne.n	8006272 <USB_EPStartXfer+0x1a86>
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	4413      	add	r3, r2
 8006246:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	011a      	lsls	r2, r3, #4
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	4413      	add	r3, r2
 800625e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006262:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	b29a      	uxth	r2, r3
 800626c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d178      	bne.n	8006382 <USB_EPStartXfer+0x1b96>
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b4:	4413      	add	r3, r2
 80062b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	011a      	lsls	r2, r3, #4
 80062c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d116      	bne.n	800630c <USB_EPStartXfer+0x1b20>
 80062de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006302:	b29a      	uxth	r2, r3
 8006304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e067      	b.n	80063dc <USB_EPStartXfer+0x1bf0>
 800630c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006310:	2b3e      	cmp	r3, #62	; 0x3e
 8006312:	d818      	bhi.n	8006346 <USB_EPStartXfer+0x1b5a>
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <USB_EPStartXfer+0x1b48>
 800632a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800632e:	3301      	adds	r3, #1
 8006330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006334:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006338:	b29b      	uxth	r3, r3
 800633a:	029b      	lsls	r3, r3, #10
 800633c:	b29a      	uxth	r2, r3
 800633e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e04a      	b.n	80063dc <USB_EPStartXfer+0x1bf0>
 8006346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <USB_EPStartXfer+0x1b7a>
 800635c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006360:	3b01      	subs	r3, #1
 8006362:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006378:	b29a      	uxth	r2, r3
 800637a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e02c      	b.n	80063dc <USB_EPStartXfer+0x1bf0>
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d124      	bne.n	80063dc <USB_EPStartXfer+0x1bf0>
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a8:	4413      	add	r3, r2
 80063aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	011a      	lsls	r2, r3, #4
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	e001      	b.n	80063dc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e03a      	b.n	8006452 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006402:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006406:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800640a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800640e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006412:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006416:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800641a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800641e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800643c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644c:	b29b      	uxth	r3, r3
 800644e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d020      	beq.n	80064b0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006484:	81bb      	strh	r3, [r7, #12]
 8006486:	89bb      	ldrh	r3, [r7, #12]
 8006488:	f083 0310 	eor.w	r3, r3, #16
 800648c:	81bb      	strh	r3, [r7, #12]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	441a      	add	r2, r3
 8006498:	89bb      	ldrh	r3, [r7, #12]
 800649a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	8013      	strh	r3, [r2, #0]
 80064ae:	e01f      	b.n	80064f0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	81fb      	strh	r3, [r7, #14]
 80064c8:	89fb      	ldrh	r3, [r7, #14]
 80064ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064ce:	81fb      	strh	r3, [r7, #14]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	89fb      	ldrh	r3, [r7, #14]
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr

080064fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	7b1b      	ldrb	r3, [r3, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 809d 	bne.w	800664a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d04c      	beq.n	80065b2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	823b      	strh	r3, [r7, #16]
 8006526:	8a3b      	ldrh	r3, [r7, #16]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01b      	beq.n	8006568 <USB_EPClearStall+0x6c>
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	81fb      	strh	r3, [r7, #14]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	89fb      	ldrh	r3, [r7, #14]
 8006554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006564:	b29b      	uxth	r3, r3
 8006566:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	78db      	ldrb	r3, [r3, #3]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d06c      	beq.n	800664a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006586:	81bb      	strh	r3, [r7, #12]
 8006588:	89bb      	ldrh	r3, [r7, #12]
 800658a:	f083 0320 	eor.w	r3, r3, #32
 800658e:	81bb      	strh	r3, [r7, #12]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	89bb      	ldrh	r3, [r7, #12]
 800659c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	8013      	strh	r3, [r2, #0]
 80065b0:	e04b      	b.n	800664a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	82fb      	strh	r3, [r7, #22]
 80065c0:	8afb      	ldrh	r3, [r7, #22]
 80065c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01b      	beq.n	8006602 <USB_EPClearStall+0x106>
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e0:	82bb      	strh	r3, [r7, #20]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	441a      	add	r2, r3
 80065ec:	8abb      	ldrh	r3, [r7, #20]
 80065ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	827b      	strh	r3, [r7, #18]
 800661a:	8a7b      	ldrh	r3, [r7, #18]
 800661c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006620:	827b      	strh	r3, [r7, #18]
 8006622:	8a7b      	ldrh	r3, [r7, #18]
 8006624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006628:	827b      	strh	r3, [r7, #18]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	8a7b      	ldrh	r3, [r7, #18]
 8006636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006646:	b29b      	uxth	r3, r3
 8006648:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr

08006656 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2280      	movs	r2, #128	; 0x80
 800666c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr

08006690 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr

080066a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066b6:	68fb      	ldr	r3, [r7, #12]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr

080066c2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066d8:	b480      	push	{r7}
 80066da:	b08d      	sub	sp, #52	; 0x34
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	4611      	mov	r1, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	460b      	mov	r3, r1
 80066e8:	80fb      	strh	r3, [r7, #6]
 80066ea:	4613      	mov	r3, r2
 80066ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066ee:	88bb      	ldrh	r3, [r7, #4]
 80066f0:	3301      	adds	r3, #1
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066fe:	88fb      	ldrh	r3, [r7, #6]
 8006700:	005a      	lsls	r2, r3, #1
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006710:	e01e      	b.n	8006750 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	3301      	adds	r3, #1
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	b29a      	uxth	r2, r3
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	3302      	adds	r3, #2
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	3302      	adds	r3, #2
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	3301      	adds	r3, #1
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	3b01      	subs	r3, #1
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1dd      	bne.n	8006712 <USB_WritePMA+0x3a>
  }
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	3734      	adds	r7, #52	; 0x34
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr

08006762 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006762:	b480      	push	{r7}
 8006764:	b08b      	sub	sp, #44	; 0x2c
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	4611      	mov	r1, r2
 800676e:	461a      	mov	r2, r3
 8006770:	460b      	mov	r3, r1
 8006772:	80fb      	strh	r3, [r7, #6]
 8006774:	4613      	mov	r3, r2
 8006776:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006778:	88bb      	ldrh	r3, [r7, #4]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	b29b      	uxth	r3, r3
 800677e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	005a      	lsls	r2, r3, #1
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006794:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	e01b      	b.n	80067d4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	3302      	adds	r3, #2
 80067a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	3301      	adds	r3, #1
 80067b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	0a1b      	lsrs	r3, r3, #8
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	3301      	adds	r3, #1
 80067c6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	3302      	adds	r3, #2
 80067cc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	3b01      	subs	r3, #1
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e0      	bne.n	800679c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80067da:	88bb      	ldrh	r3, [r7, #4]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	701a      	strb	r2, [r3, #0]
  }
}
 80067f6:	bf00      	nop
 80067f8:	372c      	adds	r7, #44	; 0x2c
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	2203      	movs	r2, #3
 8006814:	2181      	movs	r1, #129	; 0x81
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fd67 	bl	80082ea <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006822:	2340      	movs	r3, #64	; 0x40
 8006824:	2203      	movs	r2, #3
 8006826:	2101      	movs	r1, #1
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fd5e 	bl	80082ea <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006836:	2054      	movs	r0, #84	; 0x54
 8006838:	f001 fe6c 	bl	8008514 <USBD_static_malloc>
 800683c:	4602      	mov	r2, r0
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800684e:	2301      	movs	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
 8006852:	e012      	b.n	800687a <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	2340      	movs	r3, #64	; 0x40
 8006872:	2101      	movs	r1, #1
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fe29 	bl	80084cc <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006890:	2181      	movs	r1, #129	; 0x81
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fd4f 	bl	8008336 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800689e:	2101      	movs	r1, #1
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fd48 	bl	8008336 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 fe2f 	bl	800852c <USBD_static_free>
    pdev->pClassData = NULL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800690a:	2b00      	cmp	r3, #0
 800690c:	d051      	beq.n	80069b2 <USBD_CUSTOM_HID_Setup+0xd2>
 800690e:	2b20      	cmp	r3, #32
 8006910:	f040 80d8 	bne.w	8006ac4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	3b02      	subs	r3, #2
 800691a:	2b09      	cmp	r3, #9
 800691c:	d841      	bhi.n	80069a2 <USBD_CUSTOM_HID_Setup+0xc2>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <USBD_CUSTOM_HID_Setup+0x44>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	0800697d 	.word	0x0800697d
 8006928:	0800695b 	.word	0x0800695b
 800692c:	080069a3 	.word	0x080069a3
 8006930:	080069a3 	.word	0x080069a3
 8006934:	080069a3 	.word	0x080069a3
 8006938:	080069a3 	.word	0x080069a3
 800693c:	080069a3 	.word	0x080069a3
 8006940:	0800698d 	.word	0x0800698d
 8006944:	0800696b 	.word	0x0800696b
 8006948:	0800694d 	.word	0x0800694d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	885b      	ldrh	r3, [r3, #2]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006958:	e02a      	b.n	80069b0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3340      	adds	r3, #64	; 0x40
 800695e:	2201      	movs	r2, #1
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f999 	bl	8007c9a <USBD_CtlSendData>
          break;
 8006968:	e022      	b.n	80069b0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	b29b      	uxth	r3, r3
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800697a:	e019      	b.n	80069b0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	3344      	adds	r3, #68	; 0x44
 8006980:	2201      	movs	r2, #1
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f988 	bl	8007c9a <USBD_CtlSendData>
          break;
 800698a:	e011      	b.n	80069b0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2201      	movs	r2, #1
 8006990:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006992:	6939      	ldr	r1, [r7, #16]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	88db      	ldrh	r3, [r3, #6]
 8006998:	461a      	mov	r2, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 f9ab 	bl	8007cf6 <USBD_CtlPrepareRx>
          break;
 80069a0:	e006      	b.n	80069b0 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 f90e 	bl	8007bc6 <USBD_CtlError>
          ret = USBD_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	75fb      	strb	r3, [r7, #23]
          break;
 80069ae:	bf00      	nop
      }
      break;
 80069b0:	e08f      	b.n	8006ad2 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b0b      	cmp	r3, #11
 80069b8:	d87c      	bhi.n	8006ab4 <USBD_CUSTOM_HID_Setup+0x1d4>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <USBD_CUSTOM_HID_Setup+0xe0>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069f1 	.word	0x080069f1
 80069c4:	08006ab5 	.word	0x08006ab5
 80069c8:	08006ab5 	.word	0x08006ab5
 80069cc:	08006ab5 	.word	0x08006ab5
 80069d0:	08006ab5 	.word	0x08006ab5
 80069d4:	08006ab5 	.word	0x08006ab5
 80069d8:	08006a19 	.word	0x08006a19
 80069dc:	08006ab5 	.word	0x08006ab5
 80069e0:	08006ab5 	.word	0x08006ab5
 80069e4:	08006ab5 	.word	0x08006ab5
 80069e8:	08006a67 	.word	0x08006a67
 80069ec:	08006a8f 	.word	0x08006a8f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d107      	bne.n	8006a0a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80069fa:	f107 030e 	add.w	r3, r7, #14
 80069fe:	2202      	movs	r2, #2
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 f949 	bl	8007c9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a08:	e05b      	b.n	8006ac2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 f8da 	bl	8007bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a12:	2302      	movs	r3, #2
 8006a14:	75fb      	strb	r3, [r7, #23]
          break;
 8006a16:	e054      	b.n	8006ac2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	885b      	ldrh	r3, [r3, #2]
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b22      	cmp	r3, #34	; 0x22
 8006a22:	d10b      	bne.n	8006a3c <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	88db      	ldrh	r3, [r3, #6]
 8006a28:	2b36      	cmp	r3, #54	; 0x36
 8006a2a:	bf28      	it	cs
 8006a2c:	2336      	movcs	r3, #54	; 0x36
 8006a2e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	e00d      	b.n	8006a58 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	885b      	ldrh	r3, [r3, #2]
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b21      	cmp	r3, #33	; 0x21
 8006a46:	d107      	bne.n	8006a58 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006a48:	4b24      	ldr	r3, [pc, #144]	; (8006adc <USBD_CUSTOM_HID_Setup+0x1fc>)
 8006a4a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	88db      	ldrh	r3, [r3, #6]
 8006a50:	2b09      	cmp	r3, #9
 8006a52:	bf28      	it	cs
 8006a54:	2309      	movcs	r3, #9
 8006a56:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8006a58:	8bfb      	ldrh	r3, [r7, #30]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	69b9      	ldr	r1, [r7, #24]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 f91b 	bl	8007c9a <USBD_CtlSendData>
          break;
 8006a64:	e02d      	b.n	8006ac2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d107      	bne.n	8006a80 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	3348      	adds	r3, #72	; 0x48
 8006a74:	2201      	movs	r2, #1
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 f90e 	bl	8007c9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a7e:	e020      	b.n	8006ac2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 f89f 	bl	8007bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a8c:	e019      	b.n	8006ac2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d106      	bne.n	8006aa6 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	885b      	ldrh	r3, [r3, #2]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aa4:	e00d      	b.n	8006ac2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 f88c 	bl	8007bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ab2:	e006      	b.n	8006ac2 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 f885 	bl	8007bc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006abc:	2302      	movs	r3, #2
 8006abe:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac0:	bf00      	nop
      }
      break;
 8006ac2:	e006      	b.n	8006ad2 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 f87d 	bl	8007bc6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006acc:	2302      	movs	r3, #2
 8006ace:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad0:	bf00      	nop
  }
  return ret;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	200000d0 	.word	0x200000d0

08006ae0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d111      	bne.n	8006b24 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	2181      	movs	r1, #129	; 0x81
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f001 fcb4 	bl	8008486 <USBD_LL_Transmit>
 8006b1e:	e001      	b.n	8006b24 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2229      	movs	r2, #41	; 0x29
 8006b3c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8006b3e:	4b03      	ldr	r3, [pc, #12]	; (8006b4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	2000004c 	.word	0x2000004c

08006b50 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2229      	movs	r2, #41	; 0x29
 8006b5c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8006b5e:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20000078 	.word	0x20000078

08006b70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2229      	movs	r2, #41	; 0x29
 8006b7c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8006b7e:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	200000a4 	.word	0x200000a4

08006b90 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr

08006bb4 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	2101      	movs	r1, #1
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fc75 	bl	80084cc <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d109      	bne.n	8006c18 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4610      	mov	r0, r2
 8006c10:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	220a      	movs	r2, #10
 8006c30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006c32:	4b03      	ldr	r3, [pc, #12]	; (8006c40 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	200000dc 	.word	0x200000dc

08006c44 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr

08006c70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c84:	2302      	movs	r3, #2
 8006c86:	e01a      	b.n	8006cbe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	79fa      	ldrb	r2, [r7, #7]
 8006cb4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 faac 	bl	8008214 <USBD_LL_Init>

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d006      	beq.n	8006ce8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
 8006ce6:	e001      	b.n	8006cec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ce8:	2302      	movs	r3, #2
 8006cea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fad7 	bl	80082b4 <USBD_LL_Start>

  return USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr

08006d24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d30:	2302      	movs	r3, #2
 8006d32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00c      	beq.n	8006d58 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3

  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fed7 	bl	8007b4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006dae:	461a      	mov	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006dbc:	f003 031f 	and.w	r3, r3, #31
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d016      	beq.n	8006df2 <USBD_LL_SetupStage+0x6a>
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d81c      	bhi.n	8006e02 <USBD_LL_SetupStage+0x7a>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <USBD_LL_SetupStage+0x4a>
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d008      	beq.n	8006de2 <USBD_LL_SetupStage+0x5a>
 8006dd0:	e017      	b.n	8006e02 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f9ca 	bl	8007174 <USBD_StdDevReq>
      break;
 8006de0:	e01a      	b.n	8006e18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa2c 	bl	8007248 <USBD_StdItfReq>
      break;
 8006df0:	e012      	b.n	8006e18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa6c 	bl	80072d8 <USBD_StdEPReq>
      break;
 8006e00:	e00a      	b.n	8006e18 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 faaf 	bl	8008374 <USBD_LL_StallEP>
      break;
 8006e16:	bf00      	nop
  }

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d14b      	bne.n	8006ece <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d134      	bne.n	8006eb2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d919      	bls.n	8006e88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	1ad2      	subs	r2, r2, r3
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d203      	bcs.n	8006e76 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	e002      	b.n	8006e7c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 ff56 	bl	8007d32 <USBD_CtlContinueRx>
 8006e86:	e038      	b.n	8006efa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d105      	bne.n	8006eaa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 ff53 	bl	8007d56 <USBD_CtlSendStatus>
 8006eb0:	e023      	b.n	8006efa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d11e      	bne.n	8006efa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f001 fa54 	bl	8008374 <USBD_LL_StallEP>
 8006ecc:	e015      	b.n	8006efa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00d      	beq.n	8006ef6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d108      	bne.n	8006ef6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	7afa      	ldrb	r2, [r7, #11]
 8006eee:	4611      	mov	r1, r2
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	4798      	blx	r3
 8006ef4:	e001      	b.n	8006efa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e000      	b.n	8006efc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d17f      	bne.n	8007018 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d15c      	bne.n	8006fe2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d915      	bls.n	8006f60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	1ad2      	subs	r2, r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fec0 	bl	8007cd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f52:	2300      	movs	r3, #0
 8006f54:	2200      	movs	r2, #0
 8006f56:	2100      	movs	r1, #0
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f001 fab7 	bl	80084cc <USBD_LL_PrepareReceive>
 8006f5e:	e04e      	b.n	8006ffe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	6912      	ldr	r2, [r2, #16]
 8006f68:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f6c:	fb01 f202 	mul.w	r2, r1, r2
 8006f70:	1a9b      	subs	r3, r3, r2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d11c      	bne.n	8006fb0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d316      	bcc.n	8006fb0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d20f      	bcs.n	8006fb0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f90:	2200      	movs	r2, #0
 8006f92:	2100      	movs	r1, #0
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fe9c 	bl	8007cd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f001 fa8f 	bl	80084cc <USBD_LL_PrepareReceive>
 8006fae:	e026      	b.n	8006ffe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d105      	bne.n	8006fd2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006fd2:	2180      	movs	r1, #128	; 0x80
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f001 f9cd 	bl	8008374 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fece 	bl	8007d7c <USBD_CtlReceiveStatus>
 8006fe0:	e00d      	b.n	8006ffe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d004      	beq.n	8006ff6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d103      	bne.n	8006ffe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006ff6:	2180      	movs	r1, #128	; 0x80
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f001 f9bb 	bl	8008374 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007004:	2b01      	cmp	r3, #1
 8007006:	d11d      	bne.n	8007044 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff fe81 	bl	8006d10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007016:	e015      	b.n	8007044 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00d      	beq.n	8007040 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800702a:	2b03      	cmp	r3, #3
 800702c:	d108      	bne.n	8007040 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	7afa      	ldrb	r2, [r7, #11]
 8007038:	4611      	mov	r1, r2
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	4798      	blx	r3
 800703e:	e001      	b.n	8007044 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007040:	2302      	movs	r3, #2
 8007042:	e000      	b.n	8007046 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007056:	2340      	movs	r3, #64	; 0x40
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f944 	bl	80082ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2240      	movs	r2, #64	; 0x40
 800706e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007072:	2340      	movs	r3, #64	; 0x40
 8007074:	2200      	movs	r2, #0
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f936 	bl	80082ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2240      	movs	r2, #64	; 0x40
 8007088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6852      	ldr	r2, [r2, #4]
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	4611      	mov	r1, r2
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
  }

  return USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2204      	movs	r2, #4
 8007106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr

08007116 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	2b04      	cmp	r3, #4
 8007126:	d105      	bne.n	8007134 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714e:	2b03      	cmp	r3, #3
 8007150:	d10b      	bne.n	800716a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d005      	beq.n	800719a <USBD_StdDevReq+0x26>
 800718e:	2b40      	cmp	r3, #64	; 0x40
 8007190:	d84f      	bhi.n	8007232 <USBD_StdDevReq+0xbe>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <USBD_StdDevReq+0x36>
 8007196:	2b20      	cmp	r3, #32
 8007198:	d14b      	bne.n	8007232 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
      break;
 80071a8:	e048      	b.n	800723c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b09      	cmp	r3, #9
 80071b0:	d839      	bhi.n	8007226 <USBD_StdDevReq+0xb2>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <USBD_StdDevReq+0x44>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	08007209 	.word	0x08007209
 80071bc:	0800721d 	.word	0x0800721d
 80071c0:	08007227 	.word	0x08007227
 80071c4:	08007213 	.word	0x08007213
 80071c8:	08007227 	.word	0x08007227
 80071cc:	080071eb 	.word	0x080071eb
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	08007227 	.word	0x08007227
 80071d8:	080071ff 	.word	0x080071ff
 80071dc:	080071f5 	.word	0x080071f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9dc 	bl	80075a0 <USBD_GetDescriptor>
          break;
 80071e8:	e022      	b.n	8007230 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fb3f 	bl	8007870 <USBD_SetAddress>
          break;
 80071f2:	e01d      	b.n	8007230 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb7e 	bl	80078f8 <USBD_SetConfig>
          break;
 80071fc:	e018      	b.n	8007230 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc07 	bl	8007a14 <USBD_GetConfig>
          break;
 8007206:	e013      	b.n	8007230 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fc37 	bl	8007a7e <USBD_GetStatus>
          break;
 8007210:	e00e      	b.n	8007230 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fc65 	bl	8007ae4 <USBD_SetFeature>
          break;
 800721a:	e009      	b.n	8007230 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fc74 	bl	8007b0c <USBD_ClrFeature>
          break;
 8007224:	e004      	b.n	8007230 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fccc 	bl	8007bc6 <USBD_CtlError>
          break;
 800722e:	bf00      	nop
      }
      break;
 8007230:	e004      	b.n	800723c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fcc6 	bl	8007bc6 <USBD_CtlError>
      break;
 800723a:	bf00      	nop
  }

  return ret;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop

08007248 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d005      	beq.n	800726e <USBD_StdItfReq+0x26>
 8007262:	2b40      	cmp	r3, #64	; 0x40
 8007264:	d82e      	bhi.n	80072c4 <USBD_StdItfReq+0x7c>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <USBD_StdItfReq+0x26>
 800726a:	2b20      	cmp	r3, #32
 800726c:	d12a      	bne.n	80072c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007274:	3b01      	subs	r3, #1
 8007276:	2b02      	cmp	r3, #2
 8007278:	d81d      	bhi.n	80072b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	889b      	ldrh	r3, [r3, #4]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d813      	bhi.n	80072ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
 8007292:	4603      	mov	r3, r0
 8007294:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	88db      	ldrh	r3, [r3, #6]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d110      	bne.n	80072c0 <USBD_StdItfReq+0x78>
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10d      	bne.n	80072c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fd56 	bl	8007d56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072aa:	e009      	b.n	80072c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fc89 	bl	8007bc6 <USBD_CtlError>
          break;
 80072b4:	e004      	b.n	80072c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc84 	bl	8007bc6 <USBD_CtlError>
          break;
 80072be:	e000      	b.n	80072c2 <USBD_StdItfReq+0x7a>
          break;
 80072c0:	bf00      	nop
      }
      break;
 80072c2:	e004      	b.n	80072ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fc7d 	bl	8007bc6 <USBD_CtlError>
      break;
 80072cc:	bf00      	nop
  }

  return USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	889b      	ldrh	r3, [r3, #4]
 80072ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072f4:	2b40      	cmp	r3, #64	; 0x40
 80072f6:	d007      	beq.n	8007308 <USBD_StdEPReq+0x30>
 80072f8:	2b40      	cmp	r3, #64	; 0x40
 80072fa:	f200 8146 	bhi.w	800758a <USBD_StdEPReq+0x2b2>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <USBD_StdEPReq+0x40>
 8007302:	2b20      	cmp	r3, #32
 8007304:	f040 8141 	bne.w	800758a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
      break;
 8007316:	e13d      	b.n	8007594 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007320:	2b20      	cmp	r3, #32
 8007322:	d10a      	bne.n	800733a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	e12d      	b.n	8007596 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d007      	beq.n	8007352 <USBD_StdEPReq+0x7a>
 8007342:	2b03      	cmp	r3, #3
 8007344:	f300 811b 	bgt.w	800757e <USBD_StdEPReq+0x2a6>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d072      	beq.n	8007432 <USBD_StdEPReq+0x15a>
 800734c:	2b01      	cmp	r3, #1
 800734e:	d03a      	beq.n	80073c6 <USBD_StdEPReq+0xee>
 8007350:	e115      	b.n	800757e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007358:	2b02      	cmp	r3, #2
 800735a:	d002      	beq.n	8007362 <USBD_StdEPReq+0x8a>
 800735c:	2b03      	cmp	r3, #3
 800735e:	d015      	beq.n	800738c <USBD_StdEPReq+0xb4>
 8007360:	e02b      	b.n	80073ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00c      	beq.n	8007382 <USBD_StdEPReq+0xaa>
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b80      	cmp	r3, #128	; 0x80
 800736c:	d009      	beq.n	8007382 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fffe 	bl	8008374 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fffa 	bl	8008374 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007380:	e020      	b.n	80073c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc1e 	bl	8007bc6 <USBD_CtlError>
              break;
 800738a:	e01b      	b.n	80073c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	885b      	ldrh	r3, [r3, #2]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10e      	bne.n	80073b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <USBD_StdEPReq+0xda>
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b80      	cmp	r3, #128	; 0x80
 800739e:	d008      	beq.n	80073b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	88db      	ldrh	r3, [r3, #6]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 ffe1 	bl	8008374 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fccf 	bl	8007d56 <USBD_CtlSendStatus>

              break;
 80073b8:	e004      	b.n	80073c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc02 	bl	8007bc6 <USBD_CtlError>
              break;
 80073c2:	bf00      	nop
          }
          break;
 80073c4:	e0e0      	b.n	8007588 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d002      	beq.n	80073d6 <USBD_StdEPReq+0xfe>
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d015      	beq.n	8007400 <USBD_StdEPReq+0x128>
 80073d4:	e026      	b.n	8007424 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00c      	beq.n	80073f6 <USBD_StdEPReq+0x11e>
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b80      	cmp	r3, #128	; 0x80
 80073e0:	d009      	beq.n	80073f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 ffc4 	bl	8008374 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073ec:	2180      	movs	r1, #128	; 0x80
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 ffc0 	bl	8008374 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073f4:	e01c      	b.n	8007430 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fbe4 	bl	8007bc6 <USBD_CtlError>
              break;
 80073fe:	e017      	b.n	8007430 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	885b      	ldrh	r3, [r3, #2]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d112      	bne.n	800742e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 ffcb 	bl	80083b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fc9a 	bl	8007d56 <USBD_CtlSendStatus>
              }
              break;
 8007422:	e004      	b.n	800742e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fbcd 	bl	8007bc6 <USBD_CtlError>
              break;
 800742c:	e000      	b.n	8007430 <USBD_StdEPReq+0x158>
              break;
 800742e:	bf00      	nop
          }
          break;
 8007430:	e0aa      	b.n	8007588 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007438:	2b02      	cmp	r3, #2
 800743a:	d002      	beq.n	8007442 <USBD_StdEPReq+0x16a>
 800743c:	2b03      	cmp	r3, #3
 800743e:	d032      	beq.n	80074a6 <USBD_StdEPReq+0x1ce>
 8007440:	e097      	b.n	8007572 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d007      	beq.n	8007458 <USBD_StdEPReq+0x180>
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	2b80      	cmp	r3, #128	; 0x80
 800744c:	d004      	beq.n	8007458 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fbb8 	bl	8007bc6 <USBD_CtlError>
                break;
 8007456:	e091      	b.n	800757c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800745c:	2b00      	cmp	r3, #0
 800745e:	da0b      	bge.n	8007478 <USBD_StdEPReq+0x1a0>
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	3310      	adds	r3, #16
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4413      	add	r3, r2
 8007474:	3304      	adds	r3, #4
 8007476:	e00b      	b.n	8007490 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	3304      	adds	r3, #4
 8007490:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2202      	movs	r2, #2
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fbfb 	bl	8007c9a <USBD_CtlSendData>
              break;
 80074a4:	e06a      	b.n	800757c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da11      	bge.n	80074d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	f003 020f 	and.w	r2, r3, #15
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	440b      	add	r3, r1
 80074c0:	3318      	adds	r3, #24
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d117      	bne.n	80074f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fb7b 	bl	8007bc6 <USBD_CtlError>
                  break;
 80074d0:	e054      	b.n	800757c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	f003 020f 	and.w	r2, r3, #15
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d104      	bne.n	80074f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb68 	bl	8007bc6 <USBD_CtlError>
                  break;
 80074f6:	e041      	b.n	800757c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da0b      	bge.n	8007518 <USBD_StdEPReq+0x240>
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	3310      	adds	r3, #16
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	4413      	add	r3, r2
 8007514:	3304      	adds	r3, #4
 8007516:	e00b      	b.n	8007530 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	3304      	adds	r3, #4
 8007530:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <USBD_StdEPReq+0x266>
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	d103      	bne.n	8007546 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e00e      	b.n	8007564 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 ff50 	bl	80083f0 <USBD_LL_IsStallEP>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2201      	movs	r2, #1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e002      	b.n	8007564 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2202      	movs	r2, #2
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fb95 	bl	8007c9a <USBD_CtlSendData>
              break;
 8007570:	e004      	b.n	800757c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fb26 	bl	8007bc6 <USBD_CtlError>
              break;
 800757a:	bf00      	nop
          }
          break;
 800757c:	e004      	b.n	8007588 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb20 	bl	8007bc6 <USBD_CtlError>
          break;
 8007586:	bf00      	nop
      }
      break;
 8007588:	e004      	b.n	8007594 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb1a 	bl	8007bc6 <USBD_CtlError>
      break;
 8007592:	bf00      	nop
  }

  return ret;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	0a1b      	lsrs	r3, r3, #8
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	2b06      	cmp	r3, #6
 80075c2:	f200 8128 	bhi.w	8007816 <USBD_GetDescriptor+0x276>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <USBD_GetDescriptor+0x2c>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075e9 	.word	0x080075e9
 80075d0:	08007601 	.word	0x08007601
 80075d4:	08007641 	.word	0x08007641
 80075d8:	08007817 	.word	0x08007817
 80075dc:	08007817 	.word	0x08007817
 80075e0:	080077b7 	.word	0x080077b7
 80075e4:	080077e3 	.word	0x080077e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	7c12      	ldrb	r2, [r2, #16]
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
      break;
 80075fe:	e112      	b.n	8007826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	7c1b      	ldrb	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10d      	bne.n	8007624 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	f107 0208 	add.w	r2, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	2202      	movs	r2, #2
 8007620:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007622:	e100      	b.n	8007826 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	f107 0208 	add.w	r2, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3301      	adds	r3, #1
 800763a:	2202      	movs	r2, #2
 800763c:	701a      	strb	r2, [r3, #0]
      break;
 800763e:	e0f2      	b.n	8007826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	885b      	ldrh	r3, [r3, #2]
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b05      	cmp	r3, #5
 8007648:	f200 80ac 	bhi.w	80077a4 <USBD_GetDescriptor+0x204>
 800764c:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <USBD_GetDescriptor+0xb4>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	0800766d 	.word	0x0800766d
 8007658:	080076a1 	.word	0x080076a1
 800765c:	080076d5 	.word	0x080076d5
 8007660:	08007709 	.word	0x08007709
 8007664:	0800773d 	.word	0x0800773d
 8007668:	08007771 	.word	0x08007771
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7c12      	ldrb	r2, [r2, #16]
 8007684:	f107 0108 	add.w	r1, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800768e:	e091      	b.n	80077b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa97 	bl	8007bc6 <USBD_CtlError>
            err++;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	3301      	adds	r3, #1
 800769c:	72fb      	strb	r3, [r7, #11]
          break;
 800769e:	e089      	b.n	80077b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	7c12      	ldrb	r2, [r2, #16]
 80076b8:	f107 0108 	add.w	r1, r7, #8
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3
 80076c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076c2:	e077      	b.n	80077b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa7d 	bl	8007bc6 <USBD_CtlError>
            err++;
 80076cc:	7afb      	ldrb	r3, [r7, #11]
 80076ce:	3301      	adds	r3, #1
 80076d0:	72fb      	strb	r3, [r7, #11]
          break;
 80076d2:	e06f      	b.n	80077b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00b      	beq.n	80076f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	7c12      	ldrb	r2, [r2, #16]
 80076ec:	f107 0108 	add.w	r1, r7, #8
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
 80076f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076f6:	e05d      	b.n	80077b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa63 	bl	8007bc6 <USBD_CtlError>
            err++;
 8007700:	7afb      	ldrb	r3, [r7, #11]
 8007702:	3301      	adds	r3, #1
 8007704:	72fb      	strb	r3, [r7, #11]
          break;
 8007706:	e055      	b.n	80077b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	7c12      	ldrb	r2, [r2, #16]
 8007720:	f107 0108 	add.w	r1, r7, #8
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
 8007728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800772a:	e043      	b.n	80077b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa49 	bl	8007bc6 <USBD_CtlError>
            err++;
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	3301      	adds	r3, #1
 8007738:	72fb      	strb	r3, [r7, #11]
          break;
 800773a:	e03b      	b.n	80077b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	7c12      	ldrb	r2, [r2, #16]
 8007754:	f107 0108 	add.w	r1, r7, #8
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
 800775c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775e:	e029      	b.n	80077b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa2f 	bl	8007bc6 <USBD_CtlError>
            err++;
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	3301      	adds	r3, #1
 800776c:	72fb      	strb	r3, [r7, #11]
          break;
 800776e:	e021      	b.n	80077b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7c12      	ldrb	r2, [r2, #16]
 8007788:	f107 0108 	add.w	r1, r7, #8
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007792:	e00f      	b.n	80077b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa15 	bl	8007bc6 <USBD_CtlError>
            err++;
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	3301      	adds	r3, #1
 80077a0:	72fb      	strb	r3, [r7, #11]
          break;
 80077a2:	e007      	b.n	80077b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa0d 	bl	8007bc6 <USBD_CtlError>
          err++;
 80077ac:	7afb      	ldrb	r3, [r7, #11]
 80077ae:	3301      	adds	r3, #1
 80077b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077b2:	e038      	b.n	8007826 <USBD_GetDescriptor+0x286>
 80077b4:	e037      	b.n	8007826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7c1b      	ldrb	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	f107 0208 	add.w	r2, r7, #8
 80077ca:	4610      	mov	r0, r2
 80077cc:	4798      	blx	r3
 80077ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077d0:	e029      	b.n	8007826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9f6 	bl	8007bc6 <USBD_CtlError>
        err++;
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	3301      	adds	r3, #1
 80077de:	72fb      	strb	r3, [r7, #11]
      break;
 80077e0:	e021      	b.n	8007826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7c1b      	ldrb	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10d      	bne.n	8007806 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	f107 0208 	add.w	r2, r7, #8
 80077f6:	4610      	mov	r0, r2
 80077f8:	4798      	blx	r3
 80077fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3301      	adds	r3, #1
 8007800:	2207      	movs	r2, #7
 8007802:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007804:	e00f      	b.n	8007826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f9dc 	bl	8007bc6 <USBD_CtlError>
        err++;
 800780e:	7afb      	ldrb	r3, [r7, #11]
 8007810:	3301      	adds	r3, #1
 8007812:	72fb      	strb	r3, [r7, #11]
      break;
 8007814:	e007      	b.n	8007826 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9d4 	bl	8007bc6 <USBD_CtlError>
      err++;
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	3301      	adds	r3, #1
 8007822:	72fb      	strb	r3, [r7, #11]
      break;
 8007824:	bf00      	nop
  }

  if (err != 0U)
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d11c      	bne.n	8007866 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800782c:	893b      	ldrh	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d011      	beq.n	8007856 <USBD_GetDescriptor+0x2b6>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	88db      	ldrh	r3, [r3, #6]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00d      	beq.n	8007856 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	88da      	ldrh	r2, [r3, #6]
 800783e:	893b      	ldrh	r3, [r7, #8]
 8007840:	4293      	cmp	r3, r2
 8007842:	bf28      	it	cs
 8007844:	4613      	movcs	r3, r2
 8007846:	b29b      	uxth	r3, r3
 8007848:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800784a:	893b      	ldrh	r3, [r7, #8]
 800784c:	461a      	mov	r2, r3
 800784e:	68f9      	ldr	r1, [r7, #12]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fa22 	bl	8007c9a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	88db      	ldrh	r3, [r3, #6]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d104      	bne.n	8007868 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa79 	bl	8007d56 <USBD_CtlSendStatus>
 8007864:	e000      	b.n	8007868 <USBD_GetDescriptor+0x2c8>
    return;
 8007866:	bf00      	nop
    }
  }
}
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop

08007870 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	889b      	ldrh	r3, [r3, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d130      	bne.n	80078e4 <USBD_SetAddress+0x74>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88db      	ldrh	r3, [r3, #6]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d12c      	bne.n	80078e4 <USBD_SetAddress+0x74>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	2b7f      	cmp	r3, #127	; 0x7f
 8007890:	d828      	bhi.n	80078e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	885b      	ldrh	r3, [r3, #2]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800789c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d104      	bne.n	80078b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f98b 	bl	8007bc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b0:	e01d      	b.n	80078ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7bfa      	ldrb	r2, [r7, #15]
 80078b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fdc2 	bl	8008448 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fa46 	bl	8007d56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d8:	e009      	b.n	80078ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e2:	e004      	b.n	80078ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f96d 	bl	8007bc6 <USBD_CtlError>
  }
}
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	885b      	ldrh	r3, [r3, #2]
 8007906:	b2da      	uxtb	r2, r3
 8007908:	4b41      	ldr	r3, [pc, #260]	; (8007a10 <USBD_SetConfig+0x118>)
 800790a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800790c:	4b40      	ldr	r3, [pc, #256]	; (8007a10 <USBD_SetConfig+0x118>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d904      	bls.n	800791e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f955 	bl	8007bc6 <USBD_CtlError>
 800791c:	e075      	b.n	8007a0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007924:	2b02      	cmp	r3, #2
 8007926:	d002      	beq.n	800792e <USBD_SetConfig+0x36>
 8007928:	2b03      	cmp	r3, #3
 800792a:	d023      	beq.n	8007974 <USBD_SetConfig+0x7c>
 800792c:	e062      	b.n	80079f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800792e:	4b38      	ldr	r3, [pc, #224]	; (8007a10 <USBD_SetConfig+0x118>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01a      	beq.n	800796c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007936:	4b36      	ldr	r3, [pc, #216]	; (8007a10 <USBD_SetConfig+0x118>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2203      	movs	r2, #3
 8007944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007948:	4b31      	ldr	r3, [pc, #196]	; (8007a10 <USBD_SetConfig+0x118>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff f9e8 	bl	8006d24 <USBD_SetClassConfig>
 8007954:	4603      	mov	r3, r0
 8007956:	2b02      	cmp	r3, #2
 8007958:	d104      	bne.n	8007964 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f932 	bl	8007bc6 <USBD_CtlError>
            return;
 8007962:	e052      	b.n	8007a0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9f6 	bl	8007d56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800796a:	e04e      	b.n	8007a0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f9f2 	bl	8007d56 <USBD_CtlSendStatus>
        break;
 8007972:	e04a      	b.n	8007a0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007974:	4b26      	ldr	r3, [pc, #152]	; (8007a10 <USBD_SetConfig+0x118>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d112      	bne.n	80079a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007984:	4b22      	ldr	r3, [pc, #136]	; (8007a10 <USBD_SetConfig+0x118>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800798e:	4b20      	ldr	r3, [pc, #128]	; (8007a10 <USBD_SetConfig+0x118>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff f9e4 	bl	8006d62 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f9db 	bl	8007d56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079a0:	e033      	b.n	8007a0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079a2:	4b1b      	ldr	r3, [pc, #108]	; (8007a10 <USBD_SetConfig+0x118>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d01d      	beq.n	80079ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff f9d2 	bl	8006d62 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079be:	4b14      	ldr	r3, [pc, #80]	; (8007a10 <USBD_SetConfig+0x118>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079c8:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <USBD_SetConfig+0x118>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff f9a8 	bl	8006d24 <USBD_SetClassConfig>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d104      	bne.n	80079e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8f2 	bl	8007bc6 <USBD_CtlError>
            return;
 80079e2:	e012      	b.n	8007a0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f9b6 	bl	8007d56 <USBD_CtlSendStatus>
        break;
 80079ea:	e00e      	b.n	8007a0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9b2 	bl	8007d56 <USBD_CtlSendStatus>
        break;
 80079f2:	e00a      	b.n	8007a0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f8e5 	bl	8007bc6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <USBD_SetConfig+0x118>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff f9ad 	bl	8006d62 <USBD_ClrClassConfig>
        break;
 8007a08:	bf00      	nop
    }
  }
}
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200002c8 	.word	0x200002c8

08007a14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	88db      	ldrh	r3, [r3, #6]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d004      	beq.n	8007a30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f8cc 	bl	8007bc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a2e:	e022      	b.n	8007a76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	dc02      	bgt.n	8007a40 <USBD_GetConfig+0x2c>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dc03      	bgt.n	8007a46 <USBD_GetConfig+0x32>
 8007a3e:	e015      	b.n	8007a6c <USBD_GetConfig+0x58>
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d00b      	beq.n	8007a5c <USBD_GetConfig+0x48>
 8007a44:	e012      	b.n	8007a6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3308      	adds	r3, #8
 8007a50:	2201      	movs	r2, #1
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f920 	bl	8007c9a <USBD_CtlSendData>
        break;
 8007a5a:	e00c      	b.n	8007a76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	2201      	movs	r2, #1
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f918 	bl	8007c9a <USBD_CtlSendData>
        break;
 8007a6a:	e004      	b.n	8007a76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f8a9 	bl	8007bc6 <USBD_CtlError>
        break;
 8007a74:	bf00      	nop
}
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d81e      	bhi.n	8007ad2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	88db      	ldrh	r3, [r3, #6]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d004      	beq.n	8007aa6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f891 	bl	8007bc6 <USBD_CtlError>
        break;
 8007aa4:	e01a      	b.n	8007adc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f043 0202 	orr.w	r2, r3, #2
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	330c      	adds	r3, #12
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f8e5 	bl	8007c9a <USBD_CtlSendData>
      break;
 8007ad0:	e004      	b.n	8007adc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f876 	bl	8007bc6 <USBD_CtlError>
      break;
 8007ada:	bf00      	nop
  }
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	885b      	ldrh	r3, [r3, #2]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d106      	bne.n	8007b04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f929 	bl	8007d56 <USBD_CtlSendStatus>
  }
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d80b      	bhi.n	8007b3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d10c      	bne.n	8007b44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f90f 	bl	8007d56 <USBD_CtlSendStatus>
      }
      break;
 8007b38:	e004      	b.n	8007b44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f842 	bl	8007bc6 <USBD_CtlError>
      break;
 8007b42:	e000      	b.n	8007b46 <USBD_ClrFeature+0x3a>
      break;
 8007b44:	bf00      	nop
  }
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781a      	ldrb	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	785a      	ldrb	r2, [r3, #1]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	3302      	adds	r3, #2
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	3303      	adds	r3, #3
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	4413      	add	r3, r2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	3304      	adds	r3, #4
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	3305      	adds	r3, #5
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	4413      	add	r3, r2
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	3306      	adds	r3, #6
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	3307      	adds	r3, #7
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	80da      	strh	r2, [r3, #6]

}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr

08007bc6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fbce 	bl	8008374 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bd8:	2100      	movs	r1, #0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fbca 	bl	8008374 <USBD_LL_StallEP>
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d032      	beq.n	8007c64 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 f834 	bl	8007c6c <USBD_GetLen>
 8007c04:	4603      	mov	r3, r0
 8007c06:	3301      	adds	r3, #1
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	75fa      	strb	r2, [r7, #23]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	75fa      	strb	r2, [r7, #23]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4413      	add	r3, r2
 8007c30:	2203      	movs	r2, #3
 8007c32:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c34:	e012      	b.n	8007c5c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	60fa      	str	r2, [r7, #12]
 8007c3c:	7dfa      	ldrb	r2, [r7, #23]
 8007c3e:	1c51      	adds	r1, r2, #1
 8007c40:	75f9      	strb	r1, [r7, #23]
 8007c42:	4611      	mov	r1, r2
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	440a      	add	r2, r1
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	75fa      	strb	r2, [r7, #23]
 8007c52:	461a      	mov	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4413      	add	r3, r2
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e8      	bne.n	8007c36 <USBD_GetString+0x4e>
    }
  }
}
 8007c64:	bf00      	nop
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c78:	e005      	b.n	8007c86 <USBD_GetLen+0x1a>
  {
    len++;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3301      	adds	r3, #1
 8007c84:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f5      	bne.n	8007c7a <USBD_GetLen+0xe>
  }

  return len;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bc80      	pop	{r7}
 8007c98:	4770      	bx	lr

08007c9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cb0:	88fa      	ldrh	r2, [r7, #6]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cb6:	88fa      	ldrh	r2, [r7, #6]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fbdf 	bl	8008486 <USBD_LL_Transmit>

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ce0:	88fb      	ldrh	r3, [r7, #6]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fbcd 	bl	8008486 <USBD_LL_Transmit>

  return USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2203      	movs	r2, #3
 8007d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d0c:	88fa      	ldrh	r2, [r7, #6]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d14:	88fa      	ldrh	r2, [r7, #6]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	2100      	movs	r1, #0
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fbd2 	bl	80084cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	2100      	movs	r1, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fbc0 	bl	80084cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2204      	movs	r2, #4
 8007d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d66:	2300      	movs	r3, #0
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fb8a 	bl	8008486 <USBD_LL_Transmit>

  return USBD_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2205      	movs	r2, #5
 8007d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fb9a 	bl	80084cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007da8:	2200      	movs	r2, #0
 8007daa:	4912      	ldr	r1, [pc, #72]	; (8007df4 <MX_USB_DEVICE_Init+0x50>)
 8007dac:	4812      	ldr	r0, [pc, #72]	; (8007df8 <MX_USB_DEVICE_Init+0x54>)
 8007dae:	f7fe ff5f 	bl	8006c70 <USBD_Init>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007db8:	f7f8 fbec 	bl	8000594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007dbc:	490f      	ldr	r1, [pc, #60]	; (8007dfc <MX_USB_DEVICE_Init+0x58>)
 8007dbe:	480e      	ldr	r0, [pc, #56]	; (8007df8 <MX_USB_DEVICE_Init+0x54>)
 8007dc0:	f7fe ff81 	bl	8006cc6 <USBD_RegisterClass>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dca:	f7f8 fbe3 	bl	8000594 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007dce:	490c      	ldr	r1, [pc, #48]	; (8007e00 <MX_USB_DEVICE_Init+0x5c>)
 8007dd0:	4809      	ldr	r0, [pc, #36]	; (8007df8 <MX_USB_DEVICE_Init+0x54>)
 8007dd2:	f7fe ff37 	bl	8006c44 <USBD_CUSTOM_HID_RegisterInterface>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ddc:	f7f8 fbda 	bl	8000594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007de0:	4805      	ldr	r0, [pc, #20]	; (8007df8 <MX_USB_DEVICE_Init+0x54>)
 8007de2:	f7fe ff89 	bl	8006cf8 <USBD_Start>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007dec:	f7f8 fbd2 	bl	8000594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007df0:	bf00      	nop
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000130 	.word	0x20000130
 8007df8:	200002cc 	.word	0x200002cc
 8007dfc:	20000014 	.word	0x20000014
 8007e00:	20000120 	.word	0x20000120

08007e04 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr

08007e12 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007e12:	b480      	push	{r7}
 8007e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007e16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 8007e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e22:	b093      	sub	sp, #76	; 0x4c
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	uint8_t buffer[0x40];
	memcpy(buffer, state, 0x40);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	461c      	mov	r4, r3
 8007e2c:	f107 0608 	add.w	r6, r7, #8
 8007e30:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8007e34:	4635      	mov	r5, r6
 8007e36:	4623      	mov	r3, r4
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e42:	3410      	adds	r4, #16
 8007e44:	3610      	adds	r6, #16
 8007e46:	4564      	cmp	r4, ip
 8007e48:	d1f4      	bne.n	8007e34 <CUSTOM_HID_OutEvent_FS+0x14>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8007e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e4e:	4807      	ldr	r0, [pc, #28]	; (8007e6c <CUSTOM_HID_OutEvent_FS+0x4c>)
 8007e50:	f7f9 fbbc 	bl	80015cc <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, 0x40, 100);
 8007e54:	f107 0108 	add.w	r1, r7, #8
 8007e58:	2364      	movs	r3, #100	; 0x64
 8007e5a:	2240      	movs	r2, #64	; 0x40
 8007e5c:	4804      	ldr	r0, [pc, #16]	; (8007e70 <CUSTOM_HID_OutEvent_FS+0x50>)
 8007e5e:	f7fb fd98 	bl	8003992 <HAL_UART_Transmit>

  return (USBD_OK);
 8007e62:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	374c      	adds	r7, #76	; 0x4c
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6c:	40011000 	.word	0x40011000
 8007e70:	20000274 	.word	0x20000274

08007e74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	6039      	str	r1, [r7, #0]
 8007e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2212      	movs	r2, #18
 8007e84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e86:	4b03      	ldr	r3, [pc, #12]	; (8007e94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	2000014c 	.word	0x2000014c

08007e98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	6039      	str	r1, [r7, #0]
 8007ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2204      	movs	r2, #4
 8007ea8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007eaa:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	20000160 	.word	0x20000160

08007ebc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6039      	str	r1, [r7, #0]
 8007ec6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d105      	bne.n	8007eda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	4907      	ldr	r1, [pc, #28]	; (8007ef0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ed2:	4808      	ldr	r0, [pc, #32]	; (8007ef4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ed4:	f7ff fe88 	bl	8007be8 <USBD_GetString>
 8007ed8:	e004      	b.n	8007ee4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	4904      	ldr	r1, [pc, #16]	; (8007ef0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ede:	4805      	ldr	r0, [pc, #20]	; (8007ef4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ee0:	f7ff fe82 	bl	8007be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee4:	4b02      	ldr	r3, [pc, #8]	; (8007ef0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000590 	.word	0x20000590
 8007ef4:	08008f60 	.word	0x08008f60

08007ef8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	6039      	str	r1, [r7, #0]
 8007f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	4904      	ldr	r1, [pc, #16]	; (8007f18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f08:	4804      	ldr	r0, [pc, #16]	; (8007f1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f0a:	f7ff fe6d 	bl	8007be8 <USBD_GetString>
  return USBD_StrDesc;
 8007f0e:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	20000590 	.word	0x20000590
 8007f1c:	08008f74 	.word	0x08008f74

08007f20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	6039      	str	r1, [r7, #0]
 8007f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	221a      	movs	r2, #26
 8007f30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f32:	f000 f843 	bl	8007fbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f36:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000164 	.word	0x20000164

08007f44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d105      	bne.n	8007f62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	4907      	ldr	r1, [pc, #28]	; (8007f78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f5a:	4808      	ldr	r0, [pc, #32]	; (8007f7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f5c:	f7ff fe44 	bl	8007be8 <USBD_GetString>
 8007f60:	e004      	b.n	8007f6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	4904      	ldr	r1, [pc, #16]	; (8007f78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f66:	4805      	ldr	r0, [pc, #20]	; (8007f7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f68:	f7ff fe3e 	bl	8007be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f6c:	4b02      	ldr	r3, [pc, #8]	; (8007f78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000590 	.word	0x20000590
 8007f7c:	08008f84 	.word	0x08008f84

08007f80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	6039      	str	r1, [r7, #0]
 8007f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d105      	bne.n	8007f9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	4907      	ldr	r1, [pc, #28]	; (8007fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f96:	4808      	ldr	r0, [pc, #32]	; (8007fb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f98:	f7ff fe26 	bl	8007be8 <USBD_GetString>
 8007f9c:	e004      	b.n	8007fa8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	4904      	ldr	r1, [pc, #16]	; (8007fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fa2:	4805      	ldr	r0, [pc, #20]	; (8007fb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fa4:	f7ff fe20 	bl	8007be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000590 	.word	0x20000590
 8007fb8:	08008f90 	.word	0x08008f90

08007fbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fc2:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <Get_SerialNum+0x44>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fc8:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <Get_SerialNum+0x48>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fce:	4b0e      	ldr	r3, [pc, #56]	; (8008008 <Get_SerialNum+0x4c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4413      	add	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d009      	beq.n	8007ff6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	4909      	ldr	r1, [pc, #36]	; (800800c <Get_SerialNum+0x50>)
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f814 	bl	8008014 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fec:	2204      	movs	r2, #4
 8007fee:	4908      	ldr	r1, [pc, #32]	; (8008010 <Get_SerialNum+0x54>)
 8007ff0:	68b8      	ldr	r0, [r7, #8]
 8007ff2:	f000 f80f 	bl	8008014 <IntToUnicode>
  }
}
 8007ff6:	bf00      	nop
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	1ffff7e8 	.word	0x1ffff7e8
 8008004:	1ffff7ec 	.word	0x1ffff7ec
 8008008:	1ffff7f0 	.word	0x1ffff7f0
 800800c:	20000166 	.word	0x20000166
 8008010:	20000176 	.word	0x20000176

08008014 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	4613      	mov	r3, r2
 8008020:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]
 800802a:	e027      	b.n	800807c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	0f1b      	lsrs	r3, r3, #28
 8008030:	2b09      	cmp	r3, #9
 8008032:	d80b      	bhi.n	800804c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0f1b      	lsrs	r3, r3, #28
 8008038:	b2da      	uxtb	r2, r3
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	4619      	mov	r1, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	440b      	add	r3, r1
 8008044:	3230      	adds	r2, #48	; 0x30
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	e00a      	b.n	8008062 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	0f1b      	lsrs	r3, r3, #28
 8008050:	b2da      	uxtb	r2, r3
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	4619      	mov	r1, r3
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	440b      	add	r3, r1
 800805c:	3237      	adds	r2, #55	; 0x37
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	3301      	adds	r3, #1
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	4413      	add	r3, r2
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	3301      	adds	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
 800807c:	7dfa      	ldrb	r2, [r7, #23]
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	429a      	cmp	r2, r3
 8008082:	d3d3      	bcc.n	800802c <IntToUnicode+0x18>
  }
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	371c      	adds	r7, #28
 800808a:	46bd      	mov	sp, r7
 800808c:	bc80      	pop	{r7}
 800808e:	4770      	bx	lr

08008090 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a0d      	ldr	r2, [pc, #52]	; (80080d4 <HAL_PCD_MspInit+0x44>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d113      	bne.n	80080ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80080a2:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <HAL_PCD_MspInit+0x48>)
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	4a0c      	ldr	r2, [pc, #48]	; (80080d8 <HAL_PCD_MspInit+0x48>)
 80080a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080ac:	61d3      	str	r3, [r2, #28]
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <HAL_PCD_MspInit+0x48>)
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80080ba:	2200      	movs	r2, #0
 80080bc:	2100      	movs	r1, #0
 80080be:	2014      	movs	r0, #20
 80080c0:	f7f8 ff51 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80080c4:	2014      	movs	r0, #20
 80080c6:	f7f8 ff6a 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40005c00 	.word	0x40005c00
 80080d8:	40021000 	.word	0x40021000

080080dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80080f0:	4619      	mov	r1, r3
 80080f2:	4610      	mov	r0, r2
 80080f4:	f7fe fe48 	bl	8006d88 <USBD_LL_SetupStage>
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	440b      	add	r3, r1
 8008120:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	4619      	mov	r1, r3
 800812a:	f7fe fe7a 	bl	8006e22 <USBD_LL_DataOutStage>
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	440b      	add	r3, r1
 8008156:	333c      	adds	r3, #60	; 0x3c
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	4619      	mov	r1, r3
 800815e:	f7fe fed1 	bl	8006f04 <USBD_LL_DataInStage>
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe ffe1 	bl	8007140 <USBD_LL_SOF>
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800818e:	2301      	movs	r3, #1
 8008190:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d001      	beq.n	800819e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800819a:	f7f8 f9fb 	bl	8000594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80081a4:	7bfa      	ldrb	r2, [r7, #15]
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe ff91 	bl	80070d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe ff4a 	bl	800704e <USBD_LL_Reset>
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe ff8b 	bl	80070ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081e0:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <HAL_PCD_SuspendCallback+0x30>)
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	4a03      	ldr	r2, [pc, #12]	; (80081f4 <HAL_PCD_SuspendCallback+0x30>)
 80081e6:	f043 0306 	orr.w	r3, r3, #6
 80081ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	e000ed00 	.word	0xe000ed00

080081f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe ff85 	bl	8007116 <USBD_LL_Resume>
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800821c:	4a23      	ldr	r2, [pc, #140]	; (80082ac <USBD_LL_Init+0x98>)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a21      	ldr	r2, [pc, #132]	; (80082ac <USBD_LL_Init+0x98>)
 8008228:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800822c:	4b1f      	ldr	r3, [pc, #124]	; (80082ac <USBD_LL_Init+0x98>)
 800822e:	4a20      	ldr	r2, [pc, #128]	; (80082b0 <USBD_LL_Init+0x9c>)
 8008230:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008232:	4b1e      	ldr	r3, [pc, #120]	; (80082ac <USBD_LL_Init+0x98>)
 8008234:	2208      	movs	r2, #8
 8008236:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008238:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <USBD_LL_Init+0x98>)
 800823a:	2202      	movs	r2, #2
 800823c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800823e:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <USBD_LL_Init+0x98>)
 8008240:	2200      	movs	r2, #0
 8008242:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008244:	4b19      	ldr	r3, [pc, #100]	; (80082ac <USBD_LL_Init+0x98>)
 8008246:	2200      	movs	r2, #0
 8008248:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800824a:	4b18      	ldr	r3, [pc, #96]	; (80082ac <USBD_LL_Init+0x98>)
 800824c:	2200      	movs	r2, #0
 800824e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008250:	4816      	ldr	r0, [pc, #88]	; (80082ac <USBD_LL_Init+0x98>)
 8008252:	f7f9 f9d4 	bl	80015fe <HAL_PCD_Init>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800825c:	f7f8 f99a 	bl	8000594 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008266:	2318      	movs	r3, #24
 8008268:	2200      	movs	r2, #0
 800826a:	2100      	movs	r1, #0
 800826c:	f7fa fe31 	bl	8002ed2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008276:	2358      	movs	r3, #88	; 0x58
 8008278:	2200      	movs	r2, #0
 800827a:	2180      	movs	r1, #128	; 0x80
 800827c:	f7fa fe29 	bl	8002ed2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008286:	2398      	movs	r3, #152	; 0x98
 8008288:	2200      	movs	r2, #0
 800828a:	2181      	movs	r1, #129	; 0x81
 800828c:	f7fa fe21 	bl	8002ed2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008296:	23d8      	movs	r3, #216	; 0xd8
 8008298:	2200      	movs	r2, #0
 800829a:	2101      	movs	r1, #1
 800829c:	f7fa fe19 	bl	8002ed2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20000790 	.word	0x20000790
 80082b0:	40005c00 	.word	0x40005c00

080082b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f9 faa2 	bl	8001814 <HAL_PCD_Start>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f93c 	bl	8008554 <USBD_Get_USB_Status>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	461a      	mov	r2, r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	70fb      	strb	r3, [r7, #3]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70bb      	strb	r3, [r7, #2]
 8008300:	4613      	mov	r3, r2
 8008302:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008312:	78bb      	ldrb	r3, [r7, #2]
 8008314:	883a      	ldrh	r2, [r7, #0]
 8008316:	78f9      	ldrb	r1, [r7, #3]
 8008318:	f7f9 fc1a 	bl	8001b50 <HAL_PCD_EP_Open>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f916 	bl	8008554 <USBD_Get_USB_Status>
 8008328:	4603      	mov	r3, r0
 800832a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800832c:	7bbb      	ldrb	r3, [r7, #14]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	4611      	mov	r1, r2
 8008354:	4618      	mov	r0, r3
 8008356:	f7f9 fc61 	bl	8001c1c <HAL_PCD_EP_Close>
 800835a:	4603      	mov	r3, r0
 800835c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 f8f7 	bl	8008554 <USBD_Get_USB_Status>
 8008366:	4603      	mov	r3, r0
 8008368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836a:	7bbb      	ldrb	r3, [r7, #14]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f7f9 fd0a 	bl	8001dac <HAL_PCD_EP_SetStall>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f8d8 	bl	8008554 <USBD_Get_USB_Status>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7f9 fd4b 	bl	8001e6c <HAL_PCD_EP_ClrStall>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f8b9 	bl	8008554 <USBD_Get_USB_Status>
 80083e2:	4603      	mov	r3, r0
 80083e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008402:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008408:	2b00      	cmp	r3, #0
 800840a:	da0c      	bge.n	8008426 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008412:	68f9      	ldr	r1, [r7, #12]
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	440b      	add	r3, r1
 8008420:	3302      	adds	r3, #2
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	e00b      	b.n	800843e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800842c:	68f9      	ldr	r1, [r7, #12]
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	440b      	add	r3, r1
 8008438:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800843c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	4611      	mov	r1, r2
 8008466:	4618      	mov	r0, r3
 8008468:	f7f9 fb4d 	bl	8001b06 <HAL_PCD_SetAddress>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f86e 	bl	8008554 <USBD_Get_USB_Status>
 8008478:	4603      	mov	r3, r0
 800847a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800847c:	7bbb      	ldrb	r3, [r7, #14]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	461a      	mov	r2, r3
 8008492:	460b      	mov	r3, r1
 8008494:	72fb      	strb	r3, [r7, #11]
 8008496:	4613      	mov	r3, r2
 8008498:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084a8:	893b      	ldrh	r3, [r7, #8]
 80084aa:	7af9      	ldrb	r1, [r7, #11]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	f7f9 fc3a 	bl	8001d26 <HAL_PCD_EP_Transmit>
 80084b2:	4603      	mov	r3, r0
 80084b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f84b 	bl	8008554 <USBD_Get_USB_Status>
 80084be:	4603      	mov	r3, r0
 80084c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	607a      	str	r2, [r7, #4]
 80084d6:	461a      	mov	r2, r3
 80084d8:	460b      	mov	r3, r1
 80084da:	72fb      	strb	r3, [r7, #11]
 80084dc:	4613      	mov	r3, r2
 80084de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084ee:	893b      	ldrh	r3, [r7, #8]
 80084f0:	7af9      	ldrb	r1, [r7, #11]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	f7f9 fbda 	bl	8001cac <HAL_PCD_EP_Receive>
 80084f8:	4603      	mov	r3, r0
 80084fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f828 	bl	8008554 <USBD_Get_USB_Status>
 8008504:	4603      	mov	r3, r0
 8008506:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008508:	7dbb      	ldrb	r3, [r7, #22]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <USBD_static_malloc+0x14>)
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr
 8008528:	20000a7c 	.word	0x20000a7c

0800852c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr

0800853e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	2b03      	cmp	r3, #3
 8008566:	d817      	bhi.n	8008598 <USBD_Get_USB_Status+0x44>
 8008568:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <USBD_Get_USB_Status+0x1c>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	08008581 	.word	0x08008581
 8008574:	08008587 	.word	0x08008587
 8008578:	0800858d 	.word	0x0800858d
 800857c:	08008593 	.word	0x08008593
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
    break;
 8008584:	e00b      	b.n	800859e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008586:	2302      	movs	r3, #2
 8008588:	73fb      	strb	r3, [r7, #15]
    break;
 800858a:	e008      	b.n	800859e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800858c:	2301      	movs	r3, #1
 800858e:	73fb      	strb	r3, [r7, #15]
    break;
 8008590:	e005      	b.n	800859e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008592:	2302      	movs	r3, #2
 8008594:	73fb      	strb	r3, [r7, #15]
    break;
 8008596:	e002      	b.n	800859e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008598:	2302      	movs	r3, #2
 800859a:	73fb      	strb	r3, [r7, #15]
    break;
 800859c:	bf00      	nop
  }
  return usb_status;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bc80      	pop	{r7}
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop

080085ac <__errno>:
 80085ac:	4b01      	ldr	r3, [pc, #4]	; (80085b4 <__errno+0x8>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20000180 	.word	0x20000180

080085b8 <__libc_init_array>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	2600      	movs	r6, #0
 80085bc:	4d0c      	ldr	r5, [pc, #48]	; (80085f0 <__libc_init_array+0x38>)
 80085be:	4c0d      	ldr	r4, [pc, #52]	; (80085f4 <__libc_init_array+0x3c>)
 80085c0:	1b64      	subs	r4, r4, r5
 80085c2:	10a4      	asrs	r4, r4, #2
 80085c4:	42a6      	cmp	r6, r4
 80085c6:	d109      	bne.n	80085dc <__libc_init_array+0x24>
 80085c8:	f000 fc9c 	bl	8008f04 <_init>
 80085cc:	2600      	movs	r6, #0
 80085ce:	4d0a      	ldr	r5, [pc, #40]	; (80085f8 <__libc_init_array+0x40>)
 80085d0:	4c0a      	ldr	r4, [pc, #40]	; (80085fc <__libc_init_array+0x44>)
 80085d2:	1b64      	subs	r4, r4, r5
 80085d4:	10a4      	asrs	r4, r4, #2
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	d105      	bne.n	80085e6 <__libc_init_array+0x2e>
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e0:	4798      	blx	r3
 80085e2:	3601      	adds	r6, #1
 80085e4:	e7ee      	b.n	80085c4 <__libc_init_array+0xc>
 80085e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ea:	4798      	blx	r3
 80085ec:	3601      	adds	r6, #1
 80085ee:	e7f2      	b.n	80085d6 <__libc_init_array+0x1e>
 80085f0:	08008ff0 	.word	0x08008ff0
 80085f4:	08008ff0 	.word	0x08008ff0
 80085f8:	08008ff0 	.word	0x08008ff0
 80085fc:	08008ff4 	.word	0x08008ff4

08008600 <memset>:
 8008600:	4603      	mov	r3, r0
 8008602:	4402      	add	r2, r0
 8008604:	4293      	cmp	r3, r2
 8008606:	d100      	bne.n	800860a <memset+0xa>
 8008608:	4770      	bx	lr
 800860a:	f803 1b01 	strb.w	r1, [r3], #1
 800860e:	e7f9      	b.n	8008604 <memset+0x4>

08008610 <siprintf>:
 8008610:	b40e      	push	{r1, r2, r3}
 8008612:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008616:	b500      	push	{lr}
 8008618:	b09c      	sub	sp, #112	; 0x70
 800861a:	ab1d      	add	r3, sp, #116	; 0x74
 800861c:	9002      	str	r0, [sp, #8]
 800861e:	9006      	str	r0, [sp, #24]
 8008620:	9107      	str	r1, [sp, #28]
 8008622:	9104      	str	r1, [sp, #16]
 8008624:	4808      	ldr	r0, [pc, #32]	; (8008648 <siprintf+0x38>)
 8008626:	4909      	ldr	r1, [pc, #36]	; (800864c <siprintf+0x3c>)
 8008628:	f853 2b04 	ldr.w	r2, [r3], #4
 800862c:	9105      	str	r1, [sp, #20]
 800862e:	6800      	ldr	r0, [r0, #0]
 8008630:	a902      	add	r1, sp, #8
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	f000 f868 	bl	8008708 <_svfiprintf_r>
 8008638:	2200      	movs	r2, #0
 800863a:	9b02      	ldr	r3, [sp, #8]
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	b01c      	add	sp, #112	; 0x70
 8008640:	f85d eb04 	ldr.w	lr, [sp], #4
 8008644:	b003      	add	sp, #12
 8008646:	4770      	bx	lr
 8008648:	20000180 	.word	0x20000180
 800864c:	ffff0208 	.word	0xffff0208

08008650 <__ssputs_r>:
 8008650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008654:	688e      	ldr	r6, [r1, #8]
 8008656:	4682      	mov	sl, r0
 8008658:	429e      	cmp	r6, r3
 800865a:	460c      	mov	r4, r1
 800865c:	4690      	mov	r8, r2
 800865e:	461f      	mov	r7, r3
 8008660:	d838      	bhi.n	80086d4 <__ssputs_r+0x84>
 8008662:	898a      	ldrh	r2, [r1, #12]
 8008664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008668:	d032      	beq.n	80086d0 <__ssputs_r+0x80>
 800866a:	6825      	ldr	r5, [r4, #0]
 800866c:	6909      	ldr	r1, [r1, #16]
 800866e:	3301      	adds	r3, #1
 8008670:	eba5 0901 	sub.w	r9, r5, r1
 8008674:	6965      	ldr	r5, [r4, #20]
 8008676:	444b      	add	r3, r9
 8008678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800867c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008680:	106d      	asrs	r5, r5, #1
 8008682:	429d      	cmp	r5, r3
 8008684:	bf38      	it	cc
 8008686:	461d      	movcc	r5, r3
 8008688:	0553      	lsls	r3, r2, #21
 800868a:	d531      	bpl.n	80086f0 <__ssputs_r+0xa0>
 800868c:	4629      	mov	r1, r5
 800868e:	f000 fb6f 	bl	8008d70 <_malloc_r>
 8008692:	4606      	mov	r6, r0
 8008694:	b950      	cbnz	r0, 80086ac <__ssputs_r+0x5c>
 8008696:	230c      	movs	r3, #12
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	f8ca 3000 	str.w	r3, [sl]
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ac:	464a      	mov	r2, r9
 80086ae:	6921      	ldr	r1, [r4, #16]
 80086b0:	f000 face 	bl	8008c50 <memcpy>
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	6126      	str	r6, [r4, #16]
 80086c2:	444e      	add	r6, r9
 80086c4:	6026      	str	r6, [r4, #0]
 80086c6:	463e      	mov	r6, r7
 80086c8:	6165      	str	r5, [r4, #20]
 80086ca:	eba5 0509 	sub.w	r5, r5, r9
 80086ce:	60a5      	str	r5, [r4, #8]
 80086d0:	42be      	cmp	r6, r7
 80086d2:	d900      	bls.n	80086d6 <__ssputs_r+0x86>
 80086d4:	463e      	mov	r6, r7
 80086d6:	4632      	mov	r2, r6
 80086d8:	4641      	mov	r1, r8
 80086da:	6820      	ldr	r0, [r4, #0]
 80086dc:	f000 fac6 	bl	8008c6c <memmove>
 80086e0:	68a3      	ldr	r3, [r4, #8]
 80086e2:	2000      	movs	r0, #0
 80086e4:	1b9b      	subs	r3, r3, r6
 80086e6:	60a3      	str	r3, [r4, #8]
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	4433      	add	r3, r6
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	e7db      	b.n	80086a8 <__ssputs_r+0x58>
 80086f0:	462a      	mov	r2, r5
 80086f2:	f000 fbb1 	bl	8008e58 <_realloc_r>
 80086f6:	4606      	mov	r6, r0
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d1e1      	bne.n	80086c0 <__ssputs_r+0x70>
 80086fc:	4650      	mov	r0, sl
 80086fe:	6921      	ldr	r1, [r4, #16]
 8008700:	f000 face 	bl	8008ca0 <_free_r>
 8008704:	e7c7      	b.n	8008696 <__ssputs_r+0x46>
	...

08008708 <_svfiprintf_r>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	4698      	mov	r8, r3
 800870e:	898b      	ldrh	r3, [r1, #12]
 8008710:	4607      	mov	r7, r0
 8008712:	061b      	lsls	r3, r3, #24
 8008714:	460d      	mov	r5, r1
 8008716:	4614      	mov	r4, r2
 8008718:	b09d      	sub	sp, #116	; 0x74
 800871a:	d50e      	bpl.n	800873a <_svfiprintf_r+0x32>
 800871c:	690b      	ldr	r3, [r1, #16]
 800871e:	b963      	cbnz	r3, 800873a <_svfiprintf_r+0x32>
 8008720:	2140      	movs	r1, #64	; 0x40
 8008722:	f000 fb25 	bl	8008d70 <_malloc_r>
 8008726:	6028      	str	r0, [r5, #0]
 8008728:	6128      	str	r0, [r5, #16]
 800872a:	b920      	cbnz	r0, 8008736 <_svfiprintf_r+0x2e>
 800872c:	230c      	movs	r3, #12
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
 8008734:	e0d1      	b.n	80088da <_svfiprintf_r+0x1d2>
 8008736:	2340      	movs	r3, #64	; 0x40
 8008738:	616b      	str	r3, [r5, #20]
 800873a:	2300      	movs	r3, #0
 800873c:	9309      	str	r3, [sp, #36]	; 0x24
 800873e:	2320      	movs	r3, #32
 8008740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008744:	2330      	movs	r3, #48	; 0x30
 8008746:	f04f 0901 	mov.w	r9, #1
 800874a:	f8cd 800c 	str.w	r8, [sp, #12]
 800874e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088f4 <_svfiprintf_r+0x1ec>
 8008752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008756:	4623      	mov	r3, r4
 8008758:	469a      	mov	sl, r3
 800875a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800875e:	b10a      	cbz	r2, 8008764 <_svfiprintf_r+0x5c>
 8008760:	2a25      	cmp	r2, #37	; 0x25
 8008762:	d1f9      	bne.n	8008758 <_svfiprintf_r+0x50>
 8008764:	ebba 0b04 	subs.w	fp, sl, r4
 8008768:	d00b      	beq.n	8008782 <_svfiprintf_r+0x7a>
 800876a:	465b      	mov	r3, fp
 800876c:	4622      	mov	r2, r4
 800876e:	4629      	mov	r1, r5
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff ff6d 	bl	8008650 <__ssputs_r>
 8008776:	3001      	adds	r0, #1
 8008778:	f000 80aa 	beq.w	80088d0 <_svfiprintf_r+0x1c8>
 800877c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800877e:	445a      	add	r2, fp
 8008780:	9209      	str	r2, [sp, #36]	; 0x24
 8008782:	f89a 3000 	ldrb.w	r3, [sl]
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 80a2 	beq.w	80088d0 <_svfiprintf_r+0x1c8>
 800878c:	2300      	movs	r3, #0
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008796:	f10a 0a01 	add.w	sl, sl, #1
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	9307      	str	r3, [sp, #28]
 800879e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087a2:	931a      	str	r3, [sp, #104]	; 0x68
 80087a4:	4654      	mov	r4, sl
 80087a6:	2205      	movs	r2, #5
 80087a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ac:	4851      	ldr	r0, [pc, #324]	; (80088f4 <_svfiprintf_r+0x1ec>)
 80087ae:	f000 fa41 	bl	8008c34 <memchr>
 80087b2:	9a04      	ldr	r2, [sp, #16]
 80087b4:	b9d8      	cbnz	r0, 80087ee <_svfiprintf_r+0xe6>
 80087b6:	06d0      	lsls	r0, r2, #27
 80087b8:	bf44      	itt	mi
 80087ba:	2320      	movmi	r3, #32
 80087bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087c0:	0711      	lsls	r1, r2, #28
 80087c2:	bf44      	itt	mi
 80087c4:	232b      	movmi	r3, #43	; 0x2b
 80087c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ca:	f89a 3000 	ldrb.w	r3, [sl]
 80087ce:	2b2a      	cmp	r3, #42	; 0x2a
 80087d0:	d015      	beq.n	80087fe <_svfiprintf_r+0xf6>
 80087d2:	4654      	mov	r4, sl
 80087d4:	2000      	movs	r0, #0
 80087d6:	f04f 0c0a 	mov.w	ip, #10
 80087da:	9a07      	ldr	r2, [sp, #28]
 80087dc:	4621      	mov	r1, r4
 80087de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087e2:	3b30      	subs	r3, #48	; 0x30
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d94e      	bls.n	8008886 <_svfiprintf_r+0x17e>
 80087e8:	b1b0      	cbz	r0, 8008818 <_svfiprintf_r+0x110>
 80087ea:	9207      	str	r2, [sp, #28]
 80087ec:	e014      	b.n	8008818 <_svfiprintf_r+0x110>
 80087ee:	eba0 0308 	sub.w	r3, r0, r8
 80087f2:	fa09 f303 	lsl.w	r3, r9, r3
 80087f6:	4313      	orrs	r3, r2
 80087f8:	46a2      	mov	sl, r4
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	e7d2      	b.n	80087a4 <_svfiprintf_r+0x9c>
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	1d19      	adds	r1, r3, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	9103      	str	r1, [sp, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	bfbb      	ittet	lt
 800880a:	425b      	neglt	r3, r3
 800880c:	f042 0202 	orrlt.w	r2, r2, #2
 8008810:	9307      	strge	r3, [sp, #28]
 8008812:	9307      	strlt	r3, [sp, #28]
 8008814:	bfb8      	it	lt
 8008816:	9204      	strlt	r2, [sp, #16]
 8008818:	7823      	ldrb	r3, [r4, #0]
 800881a:	2b2e      	cmp	r3, #46	; 0x2e
 800881c:	d10c      	bne.n	8008838 <_svfiprintf_r+0x130>
 800881e:	7863      	ldrb	r3, [r4, #1]
 8008820:	2b2a      	cmp	r3, #42	; 0x2a
 8008822:	d135      	bne.n	8008890 <_svfiprintf_r+0x188>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	3402      	adds	r4, #2
 8008828:	1d1a      	adds	r2, r3, #4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	9203      	str	r2, [sp, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfb8      	it	lt
 8008832:	f04f 33ff 	movlt.w	r3, #4294967295
 8008836:	9305      	str	r3, [sp, #20]
 8008838:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80088f8 <_svfiprintf_r+0x1f0>
 800883c:	2203      	movs	r2, #3
 800883e:	4650      	mov	r0, sl
 8008840:	7821      	ldrb	r1, [r4, #0]
 8008842:	f000 f9f7 	bl	8008c34 <memchr>
 8008846:	b140      	cbz	r0, 800885a <_svfiprintf_r+0x152>
 8008848:	2340      	movs	r3, #64	; 0x40
 800884a:	eba0 000a 	sub.w	r0, r0, sl
 800884e:	fa03 f000 	lsl.w	r0, r3, r0
 8008852:	9b04      	ldr	r3, [sp, #16]
 8008854:	3401      	adds	r4, #1
 8008856:	4303      	orrs	r3, r0
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885e:	2206      	movs	r2, #6
 8008860:	4826      	ldr	r0, [pc, #152]	; (80088fc <_svfiprintf_r+0x1f4>)
 8008862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008866:	f000 f9e5 	bl	8008c34 <memchr>
 800886a:	2800      	cmp	r0, #0
 800886c:	d038      	beq.n	80088e0 <_svfiprintf_r+0x1d8>
 800886e:	4b24      	ldr	r3, [pc, #144]	; (8008900 <_svfiprintf_r+0x1f8>)
 8008870:	bb1b      	cbnz	r3, 80088ba <_svfiprintf_r+0x1b2>
 8008872:	9b03      	ldr	r3, [sp, #12]
 8008874:	3307      	adds	r3, #7
 8008876:	f023 0307 	bic.w	r3, r3, #7
 800887a:	3308      	adds	r3, #8
 800887c:	9303      	str	r3, [sp, #12]
 800887e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008880:	4433      	add	r3, r6
 8008882:	9309      	str	r3, [sp, #36]	; 0x24
 8008884:	e767      	b.n	8008756 <_svfiprintf_r+0x4e>
 8008886:	460c      	mov	r4, r1
 8008888:	2001      	movs	r0, #1
 800888a:	fb0c 3202 	mla	r2, ip, r2, r3
 800888e:	e7a5      	b.n	80087dc <_svfiprintf_r+0xd4>
 8008890:	2300      	movs	r3, #0
 8008892:	f04f 0c0a 	mov.w	ip, #10
 8008896:	4619      	mov	r1, r3
 8008898:	3401      	adds	r4, #1
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	4620      	mov	r0, r4
 800889e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a2:	3a30      	subs	r2, #48	; 0x30
 80088a4:	2a09      	cmp	r2, #9
 80088a6:	d903      	bls.n	80088b0 <_svfiprintf_r+0x1a8>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0c5      	beq.n	8008838 <_svfiprintf_r+0x130>
 80088ac:	9105      	str	r1, [sp, #20]
 80088ae:	e7c3      	b.n	8008838 <_svfiprintf_r+0x130>
 80088b0:	4604      	mov	r4, r0
 80088b2:	2301      	movs	r3, #1
 80088b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088b8:	e7f0      	b.n	800889c <_svfiprintf_r+0x194>
 80088ba:	ab03      	add	r3, sp, #12
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	462a      	mov	r2, r5
 80088c0:	4638      	mov	r0, r7
 80088c2:	4b10      	ldr	r3, [pc, #64]	; (8008904 <_svfiprintf_r+0x1fc>)
 80088c4:	a904      	add	r1, sp, #16
 80088c6:	f3af 8000 	nop.w
 80088ca:	1c42      	adds	r2, r0, #1
 80088cc:	4606      	mov	r6, r0
 80088ce:	d1d6      	bne.n	800887e <_svfiprintf_r+0x176>
 80088d0:	89ab      	ldrh	r3, [r5, #12]
 80088d2:	065b      	lsls	r3, r3, #25
 80088d4:	f53f af2c 	bmi.w	8008730 <_svfiprintf_r+0x28>
 80088d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088da:	b01d      	add	sp, #116	; 0x74
 80088dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e0:	ab03      	add	r3, sp, #12
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	462a      	mov	r2, r5
 80088e6:	4638      	mov	r0, r7
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <_svfiprintf_r+0x1fc>)
 80088ea:	a904      	add	r1, sp, #16
 80088ec:	f000 f87c 	bl	80089e8 <_printf_i>
 80088f0:	e7eb      	b.n	80088ca <_svfiprintf_r+0x1c2>
 80088f2:	bf00      	nop
 80088f4:	08008fbc 	.word	0x08008fbc
 80088f8:	08008fc2 	.word	0x08008fc2
 80088fc:	08008fc6 	.word	0x08008fc6
 8008900:	00000000 	.word	0x00000000
 8008904:	08008651 	.word	0x08008651

08008908 <_printf_common>:
 8008908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800890c:	4616      	mov	r6, r2
 800890e:	4699      	mov	r9, r3
 8008910:	688a      	ldr	r2, [r1, #8]
 8008912:	690b      	ldr	r3, [r1, #16]
 8008914:	4607      	mov	r7, r0
 8008916:	4293      	cmp	r3, r2
 8008918:	bfb8      	it	lt
 800891a:	4613      	movlt	r3, r2
 800891c:	6033      	str	r3, [r6, #0]
 800891e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008922:	460c      	mov	r4, r1
 8008924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008928:	b10a      	cbz	r2, 800892e <_printf_common+0x26>
 800892a:	3301      	adds	r3, #1
 800892c:	6033      	str	r3, [r6, #0]
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	0699      	lsls	r1, r3, #26
 8008932:	bf42      	ittt	mi
 8008934:	6833      	ldrmi	r3, [r6, #0]
 8008936:	3302      	addmi	r3, #2
 8008938:	6033      	strmi	r3, [r6, #0]
 800893a:	6825      	ldr	r5, [r4, #0]
 800893c:	f015 0506 	ands.w	r5, r5, #6
 8008940:	d106      	bne.n	8008950 <_printf_common+0x48>
 8008942:	f104 0a19 	add.w	sl, r4, #25
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	6832      	ldr	r2, [r6, #0]
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	42ab      	cmp	r3, r5
 800894e:	dc28      	bgt.n	80089a2 <_printf_common+0x9a>
 8008950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008954:	1e13      	subs	r3, r2, #0
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	bf18      	it	ne
 800895a:	2301      	movne	r3, #1
 800895c:	0692      	lsls	r2, r2, #26
 800895e:	d42d      	bmi.n	80089bc <_printf_common+0xb4>
 8008960:	4649      	mov	r1, r9
 8008962:	4638      	mov	r0, r7
 8008964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008968:	47c0      	blx	r8
 800896a:	3001      	adds	r0, #1
 800896c:	d020      	beq.n	80089b0 <_printf_common+0xa8>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	68e5      	ldr	r5, [r4, #12]
 8008972:	f003 0306 	and.w	r3, r3, #6
 8008976:	2b04      	cmp	r3, #4
 8008978:	bf18      	it	ne
 800897a:	2500      	movne	r5, #0
 800897c:	6832      	ldr	r2, [r6, #0]
 800897e:	f04f 0600 	mov.w	r6, #0
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	bf08      	it	eq
 8008986:	1aad      	subeq	r5, r5, r2
 8008988:	6922      	ldr	r2, [r4, #16]
 800898a:	bf08      	it	eq
 800898c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008990:	4293      	cmp	r3, r2
 8008992:	bfc4      	itt	gt
 8008994:	1a9b      	subgt	r3, r3, r2
 8008996:	18ed      	addgt	r5, r5, r3
 8008998:	341a      	adds	r4, #26
 800899a:	42b5      	cmp	r5, r6
 800899c:	d11a      	bne.n	80089d4 <_printf_common+0xcc>
 800899e:	2000      	movs	r0, #0
 80089a0:	e008      	b.n	80089b4 <_printf_common+0xac>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4652      	mov	r2, sl
 80089a6:	4649      	mov	r1, r9
 80089a8:	4638      	mov	r0, r7
 80089aa:	47c0      	blx	r8
 80089ac:	3001      	adds	r0, #1
 80089ae:	d103      	bne.n	80089b8 <_printf_common+0xb0>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	3501      	adds	r5, #1
 80089ba:	e7c4      	b.n	8008946 <_printf_common+0x3e>
 80089bc:	2030      	movs	r0, #48	; 0x30
 80089be:	18e1      	adds	r1, r4, r3
 80089c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089ca:	4422      	add	r2, r4
 80089cc:	3302      	adds	r3, #2
 80089ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089d2:	e7c5      	b.n	8008960 <_printf_common+0x58>
 80089d4:	2301      	movs	r3, #1
 80089d6:	4622      	mov	r2, r4
 80089d8:	4649      	mov	r1, r9
 80089da:	4638      	mov	r0, r7
 80089dc:	47c0      	blx	r8
 80089de:	3001      	adds	r0, #1
 80089e0:	d0e6      	beq.n	80089b0 <_printf_common+0xa8>
 80089e2:	3601      	adds	r6, #1
 80089e4:	e7d9      	b.n	800899a <_printf_common+0x92>
	...

080089e8 <_printf_i>:
 80089e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089ec:	7e0f      	ldrb	r7, [r1, #24]
 80089ee:	4691      	mov	r9, r2
 80089f0:	2f78      	cmp	r7, #120	; 0x78
 80089f2:	4680      	mov	r8, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	469a      	mov	sl, r3
 80089f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089fe:	d807      	bhi.n	8008a10 <_printf_i+0x28>
 8008a00:	2f62      	cmp	r7, #98	; 0x62
 8008a02:	d80a      	bhi.n	8008a1a <_printf_i+0x32>
 8008a04:	2f00      	cmp	r7, #0
 8008a06:	f000 80d9 	beq.w	8008bbc <_printf_i+0x1d4>
 8008a0a:	2f58      	cmp	r7, #88	; 0x58
 8008a0c:	f000 80a4 	beq.w	8008b58 <_printf_i+0x170>
 8008a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a18:	e03a      	b.n	8008a90 <_printf_i+0xa8>
 8008a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a1e:	2b15      	cmp	r3, #21
 8008a20:	d8f6      	bhi.n	8008a10 <_printf_i+0x28>
 8008a22:	a101      	add	r1, pc, #4	; (adr r1, 8008a28 <_printf_i+0x40>)
 8008a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a28:	08008a81 	.word	0x08008a81
 8008a2c:	08008a95 	.word	0x08008a95
 8008a30:	08008a11 	.word	0x08008a11
 8008a34:	08008a11 	.word	0x08008a11
 8008a38:	08008a11 	.word	0x08008a11
 8008a3c:	08008a11 	.word	0x08008a11
 8008a40:	08008a95 	.word	0x08008a95
 8008a44:	08008a11 	.word	0x08008a11
 8008a48:	08008a11 	.word	0x08008a11
 8008a4c:	08008a11 	.word	0x08008a11
 8008a50:	08008a11 	.word	0x08008a11
 8008a54:	08008ba3 	.word	0x08008ba3
 8008a58:	08008ac5 	.word	0x08008ac5
 8008a5c:	08008b85 	.word	0x08008b85
 8008a60:	08008a11 	.word	0x08008a11
 8008a64:	08008a11 	.word	0x08008a11
 8008a68:	08008bc5 	.word	0x08008bc5
 8008a6c:	08008a11 	.word	0x08008a11
 8008a70:	08008ac5 	.word	0x08008ac5
 8008a74:	08008a11 	.word	0x08008a11
 8008a78:	08008a11 	.word	0x08008a11
 8008a7c:	08008b8d 	.word	0x08008b8d
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	1d1a      	adds	r2, r3, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	602a      	str	r2, [r5, #0]
 8008a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a90:	2301      	movs	r3, #1
 8008a92:	e0a4      	b.n	8008bde <_printf_i+0x1f6>
 8008a94:	6820      	ldr	r0, [r4, #0]
 8008a96:	6829      	ldr	r1, [r5, #0]
 8008a98:	0606      	lsls	r6, r0, #24
 8008a9a:	f101 0304 	add.w	r3, r1, #4
 8008a9e:	d50a      	bpl.n	8008ab6 <_printf_i+0xce>
 8008aa0:	680e      	ldr	r6, [r1, #0]
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	2e00      	cmp	r6, #0
 8008aa6:	da03      	bge.n	8008ab0 <_printf_i+0xc8>
 8008aa8:	232d      	movs	r3, #45	; 0x2d
 8008aaa:	4276      	negs	r6, r6
 8008aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab0:	230a      	movs	r3, #10
 8008ab2:	485e      	ldr	r0, [pc, #376]	; (8008c2c <_printf_i+0x244>)
 8008ab4:	e019      	b.n	8008aea <_printf_i+0x102>
 8008ab6:	680e      	ldr	r6, [r1, #0]
 8008ab8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	bf18      	it	ne
 8008ac0:	b236      	sxthne	r6, r6
 8008ac2:	e7ef      	b.n	8008aa4 <_printf_i+0xbc>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	6820      	ldr	r0, [r4, #0]
 8008ac8:	1d19      	adds	r1, r3, #4
 8008aca:	6029      	str	r1, [r5, #0]
 8008acc:	0601      	lsls	r1, r0, #24
 8008ace:	d501      	bpl.n	8008ad4 <_printf_i+0xec>
 8008ad0:	681e      	ldr	r6, [r3, #0]
 8008ad2:	e002      	b.n	8008ada <_printf_i+0xf2>
 8008ad4:	0646      	lsls	r6, r0, #25
 8008ad6:	d5fb      	bpl.n	8008ad0 <_printf_i+0xe8>
 8008ad8:	881e      	ldrh	r6, [r3, #0]
 8008ada:	2f6f      	cmp	r7, #111	; 0x6f
 8008adc:	bf0c      	ite	eq
 8008ade:	2308      	moveq	r3, #8
 8008ae0:	230a      	movne	r3, #10
 8008ae2:	4852      	ldr	r0, [pc, #328]	; (8008c2c <_printf_i+0x244>)
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aea:	6865      	ldr	r5, [r4, #4]
 8008aec:	2d00      	cmp	r5, #0
 8008aee:	bfa8      	it	ge
 8008af0:	6821      	ldrge	r1, [r4, #0]
 8008af2:	60a5      	str	r5, [r4, #8]
 8008af4:	bfa4      	itt	ge
 8008af6:	f021 0104 	bicge.w	r1, r1, #4
 8008afa:	6021      	strge	r1, [r4, #0]
 8008afc:	b90e      	cbnz	r6, 8008b02 <_printf_i+0x11a>
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	d04d      	beq.n	8008b9e <_printf_i+0x1b6>
 8008b02:	4615      	mov	r5, r2
 8008b04:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b08:	fb03 6711 	mls	r7, r3, r1, r6
 8008b0c:	5dc7      	ldrb	r7, [r0, r7]
 8008b0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b12:	4637      	mov	r7, r6
 8008b14:	42bb      	cmp	r3, r7
 8008b16:	460e      	mov	r6, r1
 8008b18:	d9f4      	bls.n	8008b04 <_printf_i+0x11c>
 8008b1a:	2b08      	cmp	r3, #8
 8008b1c:	d10b      	bne.n	8008b36 <_printf_i+0x14e>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	07de      	lsls	r6, r3, #31
 8008b22:	d508      	bpl.n	8008b36 <_printf_i+0x14e>
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	6861      	ldr	r1, [r4, #4]
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	bfde      	ittt	le
 8008b2c:	2330      	movle	r3, #48	; 0x30
 8008b2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b36:	1b52      	subs	r2, r2, r5
 8008b38:	6122      	str	r2, [r4, #16]
 8008b3a:	464b      	mov	r3, r9
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f8cd a000 	str.w	sl, [sp]
 8008b44:	aa03      	add	r2, sp, #12
 8008b46:	f7ff fedf 	bl	8008908 <_printf_common>
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	d14c      	bne.n	8008be8 <_printf_i+0x200>
 8008b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b52:	b004      	add	sp, #16
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b58:	4834      	ldr	r0, [pc, #208]	; (8008c2c <_printf_i+0x244>)
 8008b5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b5e:	6829      	ldr	r1, [r5, #0]
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b66:	6029      	str	r1, [r5, #0]
 8008b68:	061d      	lsls	r5, r3, #24
 8008b6a:	d514      	bpl.n	8008b96 <_printf_i+0x1ae>
 8008b6c:	07df      	lsls	r7, r3, #31
 8008b6e:	bf44      	itt	mi
 8008b70:	f043 0320 	orrmi.w	r3, r3, #32
 8008b74:	6023      	strmi	r3, [r4, #0]
 8008b76:	b91e      	cbnz	r6, 8008b80 <_printf_i+0x198>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	f023 0320 	bic.w	r3, r3, #32
 8008b7e:	6023      	str	r3, [r4, #0]
 8008b80:	2310      	movs	r3, #16
 8008b82:	e7af      	b.n	8008ae4 <_printf_i+0xfc>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	f043 0320 	orr.w	r3, r3, #32
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	2378      	movs	r3, #120	; 0x78
 8008b8e:	4828      	ldr	r0, [pc, #160]	; (8008c30 <_printf_i+0x248>)
 8008b90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b94:	e7e3      	b.n	8008b5e <_printf_i+0x176>
 8008b96:	0659      	lsls	r1, r3, #25
 8008b98:	bf48      	it	mi
 8008b9a:	b2b6      	uxthmi	r6, r6
 8008b9c:	e7e6      	b.n	8008b6c <_printf_i+0x184>
 8008b9e:	4615      	mov	r5, r2
 8008ba0:	e7bb      	b.n	8008b1a <_printf_i+0x132>
 8008ba2:	682b      	ldr	r3, [r5, #0]
 8008ba4:	6826      	ldr	r6, [r4, #0]
 8008ba6:	1d18      	adds	r0, r3, #4
 8008ba8:	6961      	ldr	r1, [r4, #20]
 8008baa:	6028      	str	r0, [r5, #0]
 8008bac:	0635      	lsls	r5, r6, #24
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	d501      	bpl.n	8008bb6 <_printf_i+0x1ce>
 8008bb2:	6019      	str	r1, [r3, #0]
 8008bb4:	e002      	b.n	8008bbc <_printf_i+0x1d4>
 8008bb6:	0670      	lsls	r0, r6, #25
 8008bb8:	d5fb      	bpl.n	8008bb2 <_printf_i+0x1ca>
 8008bba:	8019      	strh	r1, [r3, #0]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4615      	mov	r5, r2
 8008bc0:	6123      	str	r3, [r4, #16]
 8008bc2:	e7ba      	b.n	8008b3a <_printf_i+0x152>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	1d1a      	adds	r2, r3, #4
 8008bca:	602a      	str	r2, [r5, #0]
 8008bcc:	681d      	ldr	r5, [r3, #0]
 8008bce:	6862      	ldr	r2, [r4, #4]
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	f000 f82f 	bl	8008c34 <memchr>
 8008bd6:	b108      	cbz	r0, 8008bdc <_printf_i+0x1f4>
 8008bd8:	1b40      	subs	r0, r0, r5
 8008bda:	6060      	str	r0, [r4, #4]
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	2300      	movs	r3, #0
 8008be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be6:	e7a8      	b.n	8008b3a <_printf_i+0x152>
 8008be8:	462a      	mov	r2, r5
 8008bea:	4649      	mov	r1, r9
 8008bec:	4640      	mov	r0, r8
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	47d0      	blx	sl
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	d0ab      	beq.n	8008b4e <_printf_i+0x166>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	079b      	lsls	r3, r3, #30
 8008bfa:	d413      	bmi.n	8008c24 <_printf_i+0x23c>
 8008bfc:	68e0      	ldr	r0, [r4, #12]
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	4298      	cmp	r0, r3
 8008c02:	bfb8      	it	lt
 8008c04:	4618      	movlt	r0, r3
 8008c06:	e7a4      	b.n	8008b52 <_printf_i+0x16a>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4632      	mov	r2, r6
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	4640      	mov	r0, r8
 8008c10:	47d0      	blx	sl
 8008c12:	3001      	adds	r0, #1
 8008c14:	d09b      	beq.n	8008b4e <_printf_i+0x166>
 8008c16:	3501      	adds	r5, #1
 8008c18:	68e3      	ldr	r3, [r4, #12]
 8008c1a:	9903      	ldr	r1, [sp, #12]
 8008c1c:	1a5b      	subs	r3, r3, r1
 8008c1e:	42ab      	cmp	r3, r5
 8008c20:	dcf2      	bgt.n	8008c08 <_printf_i+0x220>
 8008c22:	e7eb      	b.n	8008bfc <_printf_i+0x214>
 8008c24:	2500      	movs	r5, #0
 8008c26:	f104 0619 	add.w	r6, r4, #25
 8008c2a:	e7f5      	b.n	8008c18 <_printf_i+0x230>
 8008c2c:	08008fcd 	.word	0x08008fcd
 8008c30:	08008fde 	.word	0x08008fde

08008c34 <memchr>:
 8008c34:	4603      	mov	r3, r0
 8008c36:	b510      	push	{r4, lr}
 8008c38:	b2c9      	uxtb	r1, r1
 8008c3a:	4402      	add	r2, r0
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	d101      	bne.n	8008c46 <memchr+0x12>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e003      	b.n	8008c4e <memchr+0x1a>
 8008c46:	7804      	ldrb	r4, [r0, #0]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	428c      	cmp	r4, r1
 8008c4c:	d1f6      	bne.n	8008c3c <memchr+0x8>
 8008c4e:	bd10      	pop	{r4, pc}

08008c50 <memcpy>:
 8008c50:	440a      	add	r2, r1
 8008c52:	4291      	cmp	r1, r2
 8008c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c58:	d100      	bne.n	8008c5c <memcpy+0xc>
 8008c5a:	4770      	bx	lr
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c62:	4291      	cmp	r1, r2
 8008c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c68:	d1f9      	bne.n	8008c5e <memcpy+0xe>
 8008c6a:	bd10      	pop	{r4, pc}

08008c6c <memmove>:
 8008c6c:	4288      	cmp	r0, r1
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	eb01 0402 	add.w	r4, r1, r2
 8008c74:	d902      	bls.n	8008c7c <memmove+0x10>
 8008c76:	4284      	cmp	r4, r0
 8008c78:	4623      	mov	r3, r4
 8008c7a:	d807      	bhi.n	8008c8c <memmove+0x20>
 8008c7c:	1e43      	subs	r3, r0, #1
 8008c7e:	42a1      	cmp	r1, r4
 8008c80:	d008      	beq.n	8008c94 <memmove+0x28>
 8008c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c8a:	e7f8      	b.n	8008c7e <memmove+0x12>
 8008c8c:	4601      	mov	r1, r0
 8008c8e:	4402      	add	r2, r0
 8008c90:	428a      	cmp	r2, r1
 8008c92:	d100      	bne.n	8008c96 <memmove+0x2a>
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c9e:	e7f7      	b.n	8008c90 <memmove+0x24>

08008ca0 <_free_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	d040      	beq.n	8008d2a <_free_r+0x8a>
 8008ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cac:	1f0c      	subs	r4, r1, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfb8      	it	lt
 8008cb2:	18e4      	addlt	r4, r4, r3
 8008cb4:	f000 f910 	bl	8008ed8 <__malloc_lock>
 8008cb8:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <_free_r+0x8c>)
 8008cba:	6813      	ldr	r3, [r2, #0]
 8008cbc:	b933      	cbnz	r3, 8008ccc <_free_r+0x2c>
 8008cbe:	6063      	str	r3, [r4, #4]
 8008cc0:	6014      	str	r4, [r2, #0]
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cc8:	f000 b90c 	b.w	8008ee4 <__malloc_unlock>
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	d908      	bls.n	8008ce2 <_free_r+0x42>
 8008cd0:	6820      	ldr	r0, [r4, #0]
 8008cd2:	1821      	adds	r1, r4, r0
 8008cd4:	428b      	cmp	r3, r1
 8008cd6:	bf01      	itttt	eq
 8008cd8:	6819      	ldreq	r1, [r3, #0]
 8008cda:	685b      	ldreq	r3, [r3, #4]
 8008cdc:	1809      	addeq	r1, r1, r0
 8008cde:	6021      	streq	r1, [r4, #0]
 8008ce0:	e7ed      	b.n	8008cbe <_free_r+0x1e>
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	b10b      	cbz	r3, 8008cec <_free_r+0x4c>
 8008ce8:	42a3      	cmp	r3, r4
 8008cea:	d9fa      	bls.n	8008ce2 <_free_r+0x42>
 8008cec:	6811      	ldr	r1, [r2, #0]
 8008cee:	1850      	adds	r0, r2, r1
 8008cf0:	42a0      	cmp	r0, r4
 8008cf2:	d10b      	bne.n	8008d0c <_free_r+0x6c>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	4401      	add	r1, r0
 8008cf8:	1850      	adds	r0, r2, r1
 8008cfa:	4283      	cmp	r3, r0
 8008cfc:	6011      	str	r1, [r2, #0]
 8008cfe:	d1e0      	bne.n	8008cc2 <_free_r+0x22>
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	4401      	add	r1, r0
 8008d06:	6011      	str	r1, [r2, #0]
 8008d08:	6053      	str	r3, [r2, #4]
 8008d0a:	e7da      	b.n	8008cc2 <_free_r+0x22>
 8008d0c:	d902      	bls.n	8008d14 <_free_r+0x74>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	e7d6      	b.n	8008cc2 <_free_r+0x22>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	1821      	adds	r1, r4, r0
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	bf01      	itttt	eq
 8008d1c:	6819      	ldreq	r1, [r3, #0]
 8008d1e:	685b      	ldreq	r3, [r3, #4]
 8008d20:	1809      	addeq	r1, r1, r0
 8008d22:	6021      	streq	r1, [r4, #0]
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	6054      	str	r4, [r2, #4]
 8008d28:	e7cb      	b.n	8008cc2 <_free_r+0x22>
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20000ad4 	.word	0x20000ad4

08008d30 <sbrk_aligned>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4e0e      	ldr	r6, [pc, #56]	; (8008d6c <sbrk_aligned+0x3c>)
 8008d34:	460c      	mov	r4, r1
 8008d36:	6831      	ldr	r1, [r6, #0]
 8008d38:	4605      	mov	r5, r0
 8008d3a:	b911      	cbnz	r1, 8008d42 <sbrk_aligned+0x12>
 8008d3c:	f000 f8bc 	bl	8008eb8 <_sbrk_r>
 8008d40:	6030      	str	r0, [r6, #0]
 8008d42:	4621      	mov	r1, r4
 8008d44:	4628      	mov	r0, r5
 8008d46:	f000 f8b7 	bl	8008eb8 <_sbrk_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	d00a      	beq.n	8008d64 <sbrk_aligned+0x34>
 8008d4e:	1cc4      	adds	r4, r0, #3
 8008d50:	f024 0403 	bic.w	r4, r4, #3
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d007      	beq.n	8008d68 <sbrk_aligned+0x38>
 8008d58:	1a21      	subs	r1, r4, r0
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 f8ac 	bl	8008eb8 <_sbrk_r>
 8008d60:	3001      	adds	r0, #1
 8008d62:	d101      	bne.n	8008d68 <sbrk_aligned+0x38>
 8008d64:	f04f 34ff 	mov.w	r4, #4294967295
 8008d68:	4620      	mov	r0, r4
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	20000ad8 	.word	0x20000ad8

08008d70 <_malloc_r>:
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	1ccd      	adds	r5, r1, #3
 8008d76:	f025 0503 	bic.w	r5, r5, #3
 8008d7a:	3508      	adds	r5, #8
 8008d7c:	2d0c      	cmp	r5, #12
 8008d7e:	bf38      	it	cc
 8008d80:	250c      	movcc	r5, #12
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	4607      	mov	r7, r0
 8008d86:	db01      	blt.n	8008d8c <_malloc_r+0x1c>
 8008d88:	42a9      	cmp	r1, r5
 8008d8a:	d905      	bls.n	8008d98 <_malloc_r+0x28>
 8008d8c:	230c      	movs	r3, #12
 8008d8e:	2600      	movs	r6, #0
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	4630      	mov	r0, r6
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d98:	4e2e      	ldr	r6, [pc, #184]	; (8008e54 <_malloc_r+0xe4>)
 8008d9a:	f000 f89d 	bl	8008ed8 <__malloc_lock>
 8008d9e:	6833      	ldr	r3, [r6, #0]
 8008da0:	461c      	mov	r4, r3
 8008da2:	bb34      	cbnz	r4, 8008df2 <_malloc_r+0x82>
 8008da4:	4629      	mov	r1, r5
 8008da6:	4638      	mov	r0, r7
 8008da8:	f7ff ffc2 	bl	8008d30 <sbrk_aligned>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	4604      	mov	r4, r0
 8008db0:	d14d      	bne.n	8008e4e <_malloc_r+0xde>
 8008db2:	6834      	ldr	r4, [r6, #0]
 8008db4:	4626      	mov	r6, r4
 8008db6:	2e00      	cmp	r6, #0
 8008db8:	d140      	bne.n	8008e3c <_malloc_r+0xcc>
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	eb04 0803 	add.w	r8, r4, r3
 8008dc4:	f000 f878 	bl	8008eb8 <_sbrk_r>
 8008dc8:	4580      	cmp	r8, r0
 8008dca:	d13a      	bne.n	8008e42 <_malloc_r+0xd2>
 8008dcc:	6821      	ldr	r1, [r4, #0]
 8008dce:	3503      	adds	r5, #3
 8008dd0:	1a6d      	subs	r5, r5, r1
 8008dd2:	f025 0503 	bic.w	r5, r5, #3
 8008dd6:	3508      	adds	r5, #8
 8008dd8:	2d0c      	cmp	r5, #12
 8008dda:	bf38      	it	cc
 8008ddc:	250c      	movcc	r5, #12
 8008dde:	4638      	mov	r0, r7
 8008de0:	4629      	mov	r1, r5
 8008de2:	f7ff ffa5 	bl	8008d30 <sbrk_aligned>
 8008de6:	3001      	adds	r0, #1
 8008de8:	d02b      	beq.n	8008e42 <_malloc_r+0xd2>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	442b      	add	r3, r5
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	e00e      	b.n	8008e10 <_malloc_r+0xa0>
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	1b52      	subs	r2, r2, r5
 8008df6:	d41e      	bmi.n	8008e36 <_malloc_r+0xc6>
 8008df8:	2a0b      	cmp	r2, #11
 8008dfa:	d916      	bls.n	8008e2a <_malloc_r+0xba>
 8008dfc:	1961      	adds	r1, r4, r5
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	6025      	str	r5, [r4, #0]
 8008e02:	bf18      	it	ne
 8008e04:	6059      	strne	r1, [r3, #4]
 8008e06:	6863      	ldr	r3, [r4, #4]
 8008e08:	bf08      	it	eq
 8008e0a:	6031      	streq	r1, [r6, #0]
 8008e0c:	5162      	str	r2, [r4, r5]
 8008e0e:	604b      	str	r3, [r1, #4]
 8008e10:	4638      	mov	r0, r7
 8008e12:	f104 060b 	add.w	r6, r4, #11
 8008e16:	f000 f865 	bl	8008ee4 <__malloc_unlock>
 8008e1a:	f026 0607 	bic.w	r6, r6, #7
 8008e1e:	1d23      	adds	r3, r4, #4
 8008e20:	1af2      	subs	r2, r6, r3
 8008e22:	d0b6      	beq.n	8008d92 <_malloc_r+0x22>
 8008e24:	1b9b      	subs	r3, r3, r6
 8008e26:	50a3      	str	r3, [r4, r2]
 8008e28:	e7b3      	b.n	8008d92 <_malloc_r+0x22>
 8008e2a:	6862      	ldr	r2, [r4, #4]
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	bf0c      	ite	eq
 8008e30:	6032      	streq	r2, [r6, #0]
 8008e32:	605a      	strne	r2, [r3, #4]
 8008e34:	e7ec      	b.n	8008e10 <_malloc_r+0xa0>
 8008e36:	4623      	mov	r3, r4
 8008e38:	6864      	ldr	r4, [r4, #4]
 8008e3a:	e7b2      	b.n	8008da2 <_malloc_r+0x32>
 8008e3c:	4634      	mov	r4, r6
 8008e3e:	6876      	ldr	r6, [r6, #4]
 8008e40:	e7b9      	b.n	8008db6 <_malloc_r+0x46>
 8008e42:	230c      	movs	r3, #12
 8008e44:	4638      	mov	r0, r7
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	f000 f84c 	bl	8008ee4 <__malloc_unlock>
 8008e4c:	e7a1      	b.n	8008d92 <_malloc_r+0x22>
 8008e4e:	6025      	str	r5, [r4, #0]
 8008e50:	e7de      	b.n	8008e10 <_malloc_r+0xa0>
 8008e52:	bf00      	nop
 8008e54:	20000ad4 	.word	0x20000ad4

08008e58 <_realloc_r>:
 8008e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5c:	4680      	mov	r8, r0
 8008e5e:	4614      	mov	r4, r2
 8008e60:	460e      	mov	r6, r1
 8008e62:	b921      	cbnz	r1, 8008e6e <_realloc_r+0x16>
 8008e64:	4611      	mov	r1, r2
 8008e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6a:	f7ff bf81 	b.w	8008d70 <_malloc_r>
 8008e6e:	b92a      	cbnz	r2, 8008e7c <_realloc_r+0x24>
 8008e70:	f7ff ff16 	bl	8008ca0 <_free_r>
 8008e74:	4625      	mov	r5, r4
 8008e76:	4628      	mov	r0, r5
 8008e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7c:	f000 f838 	bl	8008ef0 <_malloc_usable_size_r>
 8008e80:	4284      	cmp	r4, r0
 8008e82:	4607      	mov	r7, r0
 8008e84:	d802      	bhi.n	8008e8c <_realloc_r+0x34>
 8008e86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e8a:	d812      	bhi.n	8008eb2 <_realloc_r+0x5a>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f7ff ff6e 	bl	8008d70 <_malloc_r>
 8008e94:	4605      	mov	r5, r0
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d0ed      	beq.n	8008e76 <_realloc_r+0x1e>
 8008e9a:	42bc      	cmp	r4, r7
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	bf28      	it	cs
 8008ea2:	463a      	movcs	r2, r7
 8008ea4:	f7ff fed4 	bl	8008c50 <memcpy>
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4640      	mov	r0, r8
 8008eac:	f7ff fef8 	bl	8008ca0 <_free_r>
 8008eb0:	e7e1      	b.n	8008e76 <_realloc_r+0x1e>
 8008eb2:	4635      	mov	r5, r6
 8008eb4:	e7df      	b.n	8008e76 <_realloc_r+0x1e>
	...

08008eb8 <_sbrk_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4d05      	ldr	r5, [pc, #20]	; (8008ed4 <_sbrk_r+0x1c>)
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	f7f7 fc7e 	bl	80007c4 <_sbrk>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_sbrk_r+0x1a>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_sbrk_r+0x1a>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	20000adc 	.word	0x20000adc

08008ed8 <__malloc_lock>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	; (8008ee0 <__malloc_lock+0x8>)
 8008eda:	f000 b811 	b.w	8008f00 <__retarget_lock_acquire_recursive>
 8008ede:	bf00      	nop
 8008ee0:	20000ae0 	.word	0x20000ae0

08008ee4 <__malloc_unlock>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	; (8008eec <__malloc_unlock+0x8>)
 8008ee6:	f000 b80c 	b.w	8008f02 <__retarget_lock_release_recursive>
 8008eea:	bf00      	nop
 8008eec:	20000ae0 	.word	0x20000ae0

08008ef0 <_malloc_usable_size_r>:
 8008ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef4:	1f18      	subs	r0, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bfbc      	itt	lt
 8008efa:	580b      	ldrlt	r3, [r1, r0]
 8008efc:	18c0      	addlt	r0, r0, r3
 8008efe:	4770      	bx	lr

08008f00 <__retarget_lock_acquire_recursive>:
 8008f00:	4770      	bx	lr

08008f02 <__retarget_lock_release_recursive>:
 8008f02:	4770      	bx	lr

08008f04 <_init>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr

08008f10 <_fini>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr


FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800bb40  0800bb40  0001bb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdfc  0800bdfc  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdfc  0800bdfc  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdfc  0800bdfc  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdfc  0800bdfc  0001bdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800be04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c38  20000210  0800c010  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  0800c010  00020e48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001191f  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003781  00000000  00000000  00031b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  000352d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000362d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b699  00000000  00000000  00037150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014182  00000000  00000000  000527e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd43  00000000  00000000  0006696b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f46ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e7c  00000000  00000000  000f4700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb28 	.word	0x0800bb28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800bb28 	.word	0x0800bb28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2uiz>:
 8000fa8:	0042      	lsls	r2, r0, #1
 8000faa:	d20e      	bcs.n	8000fca <__aeabi_f2uiz+0x22>
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30b      	bcc.n	8000fca <__aeabi_f2uiz+0x22>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d409      	bmi.n	8000fd0 <__aeabi_f2uiz+0x28>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2uiz+0x32>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d102      	bne.n	8000fe0 <__aeabi_f2uiz+0x38>
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000ffa:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d020      	beq.n	800104c <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800100a:	68f9      	ldr	r1, [r7, #12]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	b2ca      	uxtb	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	0a19      	lsrs	r1, r3, #8
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3301      	adds	r3, #1
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	0c19      	lsrs	r1, r3, #16
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3302      	adds	r3, #2
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	0e19      	lsrs	r1, r3, #24
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3303      	adds	r3, #3
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3304      	adds	r3, #4
 800104a:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001052:	d1cf      	bne.n	8000ff4 <read_flash+0xc>
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <update_data_from_flash>:
		{0, 20, 40, 60, 80, 100}
		};

uint8_t inverter_config[3] = {0, 0, 0};

void update_data_from_flash(uint8_t (*sliders_data)[6], uint8_t (*range_x_data)[6], uint8_t (*inverter_config)){
 8001060:	b580      	push	{r7, lr}
 8001062:	b0bc      	sub	sp, #240	; 0xf0
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
	char data[0xC0];
	read_flash((uint8_t *)data);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffb9 	bl	8000fe8 <read_flash>
    char * token = strtok(data,",");				//first strtok go to variable directly
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	497f      	ldr	r1, [pc, #508]	; (8001278 <update_data_from_flash+0x218>)
 800107c:	4618      	mov	r0, r3
 800107e:	f009 fac3 	bl	800a608 <strtok>
 8001082:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    sliders_data[0][0] = atoi(token);
 8001086:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800108a:	f009 fa51 	bl	800a530 <atoi>
 800108e:	4603      	mov	r3, r0
 8001090:	b2da      	uxtb	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	701a      	strb	r2, [r3, #0]

    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 8001096:	2301      	movs	r3, #1
 8001098:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800109c:	e016      	b.n	80010cc <update_data_from_flash+0x6c>
    	token = strtok(NULL,",");
 800109e:	4976      	ldr	r1, [pc, #472]	; (8001278 <update_data_from_flash+0x218>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f009 fab1 	bl	800a608 <strtok>
 80010a6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    	sliders_data[0][i] = atoi(token);
 80010aa:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80010ae:	f009 fa3f 	bl	800a530 <atoi>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80010bc:	4413      	add	r3, r2
 80010be:	460a      	mov	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 80010c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80010c6:	3301      	adds	r3, #1
 80010c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80010cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	dde4      	ble.n	800109e <update_data_from_flash+0x3e>
    }

	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80010da:	e016      	b.n	800110a <update_data_from_flash+0xaa>
		token = strtok(NULL,",");
 80010dc:	4966      	ldr	r1, [pc, #408]	; (8001278 <update_data_from_flash+0x218>)
 80010de:	2000      	movs	r0, #0
 80010e0:	f009 fa92 	bl	800a608 <strtok>
 80010e4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[0][i] = atoi(token);
 80010e8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80010ec:	f009 fa20 	bl	800a530 <atoi>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010fa:	4413      	add	r3, r2
 80010fc:	460a      	mov	r2, r1
 80010fe:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 8001100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001104:	3301      	adds	r3, #1
 8001106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800110a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800110e:	2b05      	cmp	r3, #5
 8001110:	dde4      	ble.n	80010dc <update_data_from_flash+0x7c>
	}

	token = strtok(NULL,",");						// inverted for first pedal
 8001112:	4959      	ldr	r1, [pc, #356]	; (8001278 <update_data_from_flash+0x218>)
 8001114:	2000      	movs	r0, #0
 8001116:	f009 fa77 	bl	800a608 <strtok>
 800111a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[0] = atoi(token);
 800111e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001122:	f009 fa05 	bl	800a530 <atoi>
 8001126:	4603      	mov	r3, r0
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	701a      	strb	r2, [r3, #0]


	for (int i=0; i<6; i++){						// until all arrays be full filled
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001134:	e017      	b.n	8001166 <update_data_from_flash+0x106>
		token = strtok(NULL,",");
 8001136:	4950      	ldr	r1, [pc, #320]	; (8001278 <update_data_from_flash+0x218>)
 8001138:	2000      	movs	r0, #0
 800113a:	f009 fa65 	bl	800a608 <strtok>
 800113e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[1][i] = atoi(token);
 8001142:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001146:	f009 f9f3 	bl	800a530 <atoi>
 800114a:	4601      	mov	r1, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1d9a      	adds	r2, r3, #6
 8001150:	b2c9      	uxtb	r1, r1
 8001152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001156:	4413      	add	r3, r2
 8001158:	460a      	mov	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800115c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800116a:	2b05      	cmp	r3, #5
 800116c:	dde3      	ble.n	8001136 <update_data_from_flash+0xd6>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001174:	e017      	b.n	80011a6 <update_data_from_flash+0x146>
		token = strtok(NULL,",");
 8001176:	4940      	ldr	r1, [pc, #256]	; (8001278 <update_data_from_flash+0x218>)
 8001178:	2000      	movs	r0, #0
 800117a:	f009 fa45 	bl	800a608 <strtok>
 800117e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[1][i] = atoi(token);
 8001182:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001186:	f009 f9d3 	bl	800a530 <atoi>
 800118a:	4601      	mov	r1, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1d9a      	adds	r2, r3, #6
 8001190:	b2c9      	uxtb	r1, r1
 8001192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001196:	4413      	add	r3, r2
 8001198:	460a      	mov	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800119c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011a0:	3301      	adds	r3, #1
 80011a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80011a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	dde3      	ble.n	8001176 <update_data_from_flash+0x116>
	}

	token = strtok(NULL,",");						// inverted for second pedal
 80011ae:	4932      	ldr	r1, [pc, #200]	; (8001278 <update_data_from_flash+0x218>)
 80011b0:	2000      	movs	r0, #0
 80011b2:	f009 fa29 	bl	800a608 <strtok>
 80011b6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[1] = atoi(token);
 80011ba:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80011be:	f009 f9b7 	bl	800a530 <atoi>
 80011c2:	4602      	mov	r2, r0
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80011d2:	e018      	b.n	8001206 <update_data_from_flash+0x1a6>
		token = strtok(NULL,",");
 80011d4:	4928      	ldr	r1, [pc, #160]	; (8001278 <update_data_from_flash+0x218>)
 80011d6:	2000      	movs	r0, #0
 80011d8:	f009 fa16 	bl	800a608 <strtok>
 80011dc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[2][i] = atoi(token);
 80011e0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80011e4:	f009 f9a4 	bl	800a530 <atoi>
 80011e8:	4601      	mov	r1, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f103 020c 	add.w	r2, r3, #12
 80011f0:	b2c9      	uxtb	r1, r1
 80011f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011f6:	4413      	add	r3, r2
 80011f8:	460a      	mov	r2, r1
 80011fa:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001200:	3301      	adds	r3, #1
 8001202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800120a:	2b05      	cmp	r3, #5
 800120c:	dde2      	ble.n	80011d4 <update_data_from_flash+0x174>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001214:	e018      	b.n	8001248 <update_data_from_flash+0x1e8>
		token = strtok(NULL,",");
 8001216:	4918      	ldr	r1, [pc, #96]	; (8001278 <update_data_from_flash+0x218>)
 8001218:	2000      	movs	r0, #0
 800121a:	f009 f9f5 	bl	800a608 <strtok>
 800121e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[2][i] = atoi(token);
 8001222:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001226:	f009 f983 	bl	800a530 <atoi>
 800122a:	4601      	mov	r1, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f103 020c 	add.w	r2, r3, #12
 8001232:	b2c9      	uxtb	r1, r1
 8001234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001238:	4413      	add	r3, r2
 800123a:	460a      	mov	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800123e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001242:	3301      	adds	r3, #1
 8001244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800124c:	2b05      	cmp	r3, #5
 800124e:	dde2      	ble.n	8001216 <update_data_from_flash+0x1b6>
	}

	token = strtok(NULL,",");						// inverted for third pedal
 8001250:	4909      	ldr	r1, [pc, #36]	; (8001278 <update_data_from_flash+0x218>)
 8001252:	2000      	movs	r0, #0
 8001254:	f009 f9d8 	bl	800a608 <strtok>
 8001258:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[2] = atoi(token);
 800125c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001260:	f009 f966 	bl	800a530 <atoi>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3302      	adds	r3, #2
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]

}
 800126e:	bf00      	nop
 8001270:	37f0      	adds	r7, #240	; 0xf0
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	0800bb40 	.word	0x0800bb40

0800127c <interpolacao_linear>:

float interpolacao_linear(float x, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	460b      	mov	r3, r1
 8001290:	70bb      	strb	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	707b      	strb	r3, [r7, #1]
	//"""Realiza a interpolação de x sobre uma reta dada por [(x0,y0),(x1,y1)] e retorna o valor em y"""
	float y;
	y = (float)y0 + ((float)y1 - (float)y0) * (x-(float)x0)/((float)x1-(float)x0);
 8001296:	78bb      	ldrb	r3, [r7, #2]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcdd 	bl	8000c58 <__aeabi_ui2f>
 800129e:	4604      	mov	r4, r0
 80012a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fcd7 	bl	8000c58 <__aeabi_ui2f>
 80012aa:	4605      	mov	r5, r0
 80012ac:	78bb      	ldrb	r3, [r7, #2]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcd2 	bl	8000c58 <__aeabi_ui2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4628      	mov	r0, r5
 80012ba:	f7ff fc1b 	bl	8000af4 <__aeabi_fsub>
 80012be:	4603      	mov	r3, r0
 80012c0:	461d      	mov	r5, r3
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fcc7 	bl	8000c58 <__aeabi_ui2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fc10 	bl	8000af4 <__aeabi_fsub>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4628      	mov	r0, r5
 80012da:	f7ff fd15 	bl	8000d08 <__aeabi_fmul>
 80012de:	4603      	mov	r3, r0
 80012e0:	461e      	mov	r6, r3
 80012e2:	787b      	ldrb	r3, [r7, #1]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fcb7 	bl	8000c58 <__aeabi_ui2f>
 80012ea:	4605      	mov	r5, r0
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fcb2 	bl	8000c58 <__aeabi_ui2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	4628      	mov	r0, r5
 80012fa:	f7ff fbfb 	bl	8000af4 <__aeabi_fsub>
 80012fe:	4603      	mov	r3, r0
 8001300:	4619      	mov	r1, r3
 8001302:	4630      	mov	r0, r6
 8001304:	f7ff fdb4 	bl	8000e70 <__aeabi_fdiv>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff fbf3 	bl	8000af8 <__addsf3>
 8001312:	4603      	mov	r3, r0
 8001314:	60fb      	str	r3, [r7, #12]
	return y;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001320 <ret_x0_y0_x1_y1>:

uint8_t * ret_x0_y0_x1_y1(double x, uint8_t * x_array, uint8_t * y_array){
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
    //a funcao retorna o conjunto de pontos [(xa,ya),(xb,yb)] que formam uma reta
    //na qual o ponto x possa ser interpolado.\n
    //Os pontos precisam estar alistados em ordem crescente, e as listas de x e y precisam ter o mesmo tamanho."""
	static uint8_t x0y0x1y1array[4] = {0, 0, 0, 0};

	for (int i=0; i<6; i++){
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e02d      	b.n	8001390 <ret_x0_y0_x1_y1+0x70>
		if (x < (double)x_array[i]){
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f851 	bl	80003e4 <__aeabi_ui2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800134a:	f7ff fb37 	bl	80009bc <__aeabi_dcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01a      	beq.n	800138a <ret_x0_y0_x1_y1+0x6a>
			x0y0x1y1array[0] = x_array[i-1];
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3b01      	subs	r3, #1
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
 8001360:	701a      	strb	r2, [r3, #0]
			x0y0x1y1array[1] = y_array[i-1];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3b01      	subs	r3, #1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
 800136e:	705a      	strb	r2, [r3, #1]
			x0y0x1y1array[2] = x_array[i];
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
 800137a:	709a      	strb	r2, [r3, #2]
			x0y0x1y1array[3] = y_array[i];
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
 8001386:	70da      	strb	r2, [r3, #3]
			break;
 8001388:	e005      	b.n	8001396 <ret_x0_y0_x1_y1+0x76>
	for (int i=0; i<6; i++){
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b05      	cmp	r3, #5
 8001394:	ddce      	ble.n	8001334 <ret_x0_y0_x1_y1+0x14>
		}
	}
	return x0y0x1y1array;
 8001396:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002f8 	.word	0x200002f8
 80013a4:	00000000 	.word	0x00000000

080013a8 <set_output>:

uint16_t* set_output(uint16_t * valor_entrada, uint8_t (*sliders_data)[6], uint8_t (*range_x_data)[6], uint8_t * inverter_config){
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b093      	sub	sp, #76	; 0x4c
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	//"""Método que calcula e atualiza o valor de saída de acordo com o valor da entrada"""

	static uint16_t valor_saida[3] = {10, 20, 30};
	double entrada_invertida[3] = {0, 0, 0};
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	for (int i=0; i<3; i++){
 80013da:	2300      	movs	r3, #0
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013de:	e114      	b.n	800160a <set_output+0x262>
		entrada_invertida[i] = ((double)valor_entrada[i])*100/4095;		//converte o valor de entrada de 12bits para um range de 0,0 a 100,0
 80013e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fffa 	bl	80003e4 <__aeabi_ui2d>
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b8c      	ldr	r3, [pc, #560]	; (8001628 <set_output+0x280>)
 80013f6:	f7ff f86f 	bl	80004d8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	a387      	add	r3, pc, #540	; (adr r3, 8001620 <set_output+0x278>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f990 	bl	800072c <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001412:	00c9      	lsls	r1, r1, #3
 8001414:	3140      	adds	r1, #64	; 0x40
 8001416:	4439      	add	r1, r7
 8001418:	3920      	subs	r1, #32
 800141a:	e9c1 2300 	strd	r2, r3, [r1]

		if (inverter_config[i] == 1){
 800141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d114      	bne.n	8001454 <set_output+0xac>
			entrada_invertida[i] = 100 - entrada_invertida[i];		// inverte a entrada caso o bit de inversao esteja ligado
 800142a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	3340      	adds	r3, #64	; 0x40
 8001430:	443b      	add	r3, r7
 8001432:	3b20      	subs	r3, #32
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f04f 0000 	mov.w	r0, #0
 800143c:	497a      	ldr	r1, [pc, #488]	; (8001628 <set_output+0x280>)
 800143e:	f7fe fe93 	bl	8000168 <__aeabi_dsub>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001448:	00c9      	lsls	r1, r1, #3
 800144a:	3140      	adds	r1, #64	; 0x40
 800144c:	4439      	add	r1, r7
 800144e:	3920      	subs	r1, #32
 8001450:	e9c1 2300 	strd	r2, r3, [r1]
		}
		char buffer[12];
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", (uint16_t)entrada_invertida[i]), 100);
 8001454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	3340      	adds	r3, #64	; 0x40
 800145a:	443b      	add	r3, r7
 800145c:	3b20      	subs	r3, #32
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fad1 	bl	8000a0c <__aeabi_d2uiz>
 800146a:	4603      	mov	r3, r0
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	496d      	ldr	r1, [pc, #436]	; (800162c <set_output+0x284>)
 8001476:	4618      	mov	r0, r3
 8001478:	f009 f89e 	bl	800a5b8 <siprintf>
 800147c:	4603      	mov	r3, r0
 800147e:	b29a      	uxth	r2, r3
 8001480:	f107 0114 	add.w	r1, r7, #20
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	486a      	ldr	r0, [pc, #424]	; (8001630 <set_output+0x288>)
 8001488:	f004 f96f 	bl	800576a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", range_x_data[i][0]), 100);
 800148c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4961      	ldr	r1, [pc, #388]	; (800162c <set_output+0x284>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f009 f886 	bl	800a5b8 <siprintf>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f107 0114 	add.w	r1, r7, #20
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	485e      	ldr	r0, [pc, #376]	; (8001630 <set_output+0x288>)
 80014b8:	f004 f957 	bl	800576a <HAL_UART_Transmit>

		if ((uint16_t)entrada_invertida[i] <= range_x_data[i][0]){			// caso entrada esteja abaixa da calibracao minima
 80014bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	3340      	adds	r3, #64	; 0x40
 80014c2:	443b      	add	r3, r7
 80014c4:	3b20      	subs	r3, #32
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fa9d 	bl	8000a0c <__aeabi_d2uiz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b299      	uxth	r1, r3
 80014d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4299      	cmp	r1, r3
 80014ec:	d80e      	bhi.n	800150c <set_output+0x164>
			valor_saida[i] = (uint16_t)sliders_data[i][0];
 80014ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	461a      	mov	r2, r3
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b299      	uxth	r1, r3
 8001502:	4a4c      	ldr	r2, [pc, #304]	; (8001634 <set_output+0x28c>)
 8001504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001506:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			continue;
 800150a:	e07b      	b.n	8001604 <set_output+0x25c>
		}
		if ((uint16_t)entrada_invertida[i] >= range_x_data[i][5]){			// caso a entrada esteja acima da calibracao maxima
 800150c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	3340      	adds	r3, #64	; 0x40
 8001512:	443b      	add	r3, r7
 8001514:	3b20      	subs	r3, #32
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fa75 	bl	8000a0c <__aeabi_d2uiz>
 8001522:	4603      	mov	r3, r0
 8001524:	b299      	uxth	r1, r3
 8001526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	795b      	ldrb	r3, [r3, #5]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4299      	cmp	r1, r3
 800153c:	d30e      	bcc.n	800155c <set_output+0x1b4>
			valor_saida[i] = (uint16_t)sliders_data[i][5];
 800153e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	461a      	mov	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	4413      	add	r3, r2
 800154e:	795b      	ldrb	r3, [r3, #5]
 8001550:	b299      	uxth	r1, r3
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <set_output+0x28c>)
 8001554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001556:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			continue;
 800155a:	e053      	b.n	8001604 <set_output+0x25c>
		}
		uint8_t * x0y0x1y1_list = ret_x0_y0_x1_y1(entrada_invertida[i], range_x_data[i], sliders_data[i]);
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	3340      	adds	r3, #64	; 0x40
 8001562:	443b      	add	r3, r7
 8001564:	3b20      	subs	r3, #32
 8001566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800156a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	189c      	adds	r4, r3, r2
 800157a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4413      	add	r3, r2
 800158a:	4622      	mov	r2, r4
 800158c:	f7ff fec8 	bl	8001320 <ret_x0_y0_x1_y1>
 8001590:	63b8      	str	r0, [r7, #56]	; 0x38

		valor_saida[i] = interpolacao_linear(entrada_invertida[i], x0y0x1y1_list[0], x0y0x1y1_list[1], x0y0x1y1_list[2], x0y0x1y1_list[3]);
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	3340      	adds	r3, #64	; 0x40
 8001598:	443b      	add	r3, r7
 800159a:	3b20      	subs	r3, #32
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fa52 	bl	8000a4c <__aeabi_d2f>
 80015a8:	4604      	mov	r4, r0
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	7819      	ldrb	r1, [r3, #0]
 80015ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b0:	3301      	adds	r3, #1
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b6:	3302      	adds	r3, #2
 80015b8:	7818      	ldrb	r0, [r3, #0]
 80015ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015bc:	3303      	adds	r3, #3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4603      	mov	r3, r0
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff fe59 	bl	800127c <interpolacao_linear>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fceb 	bl	8000fa8 <__aeabi_f2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b299      	uxth	r1, r3
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <set_output+0x28c>)
 80015d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//valor_saida[i] = 100;
		valor_saida[i] = valor_saida[i]*4095/100;
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <set_output+0x28c>)
 80015e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4613      	mov	r3, r2
 80015ea:	031b      	lsls	r3, r3, #12
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <set_output+0x290>)
 80015f0:	fb82 1203 	smull	r1, r2, r2, r3
 80015f4:	1152      	asrs	r2, r2, #5
 80015f6:	17db      	asrs	r3, r3, #31
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b299      	uxth	r1, r3
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <set_output+0x28c>)
 80015fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<3; i++){
 8001604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001606:	3301      	adds	r3, #1
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800160c:	2b02      	cmp	r3, #2
 800160e:	f77f aee7 	ble.w	80013e0 <set_output+0x38>
//		char buffer[8];
//	    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", valor_saida[0]), 100);
	}
	return valor_saida;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <set_output+0x28c>)
}
 8001614:	4618      	mov	r0, r3
 8001616:	3744      	adds	r7, #68	; 0x44
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	f3af 8000 	nop.w
 8001620:	00000000 	.word	0x00000000
 8001624:	40affe00 	.word	0x40affe00
 8001628:	40590000 	.word	0x40590000
 800162c:	0800bb44 	.word	0x0800bb44
 8001630:	200002a0 	.word	0x200002a0
 8001634:	20000028 	.word	0x20000028
 8001638:	51eb851f 	.word	0x51eb851f

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001642:	f000 fbb3 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001646:	f000 f85d 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164a:	f000 f95d 	bl	8001908 <MX_GPIO_Init>
  MX_DMA_Init();
 800164e:	f000 f93d 	bl	80018cc <MX_DMA_Init>
  MX_ADC1_Init();
 8001652:	f000 f8b5 	bl	80017c0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001656:	f008 fa91 	bl	8009b7c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800165a:	f000 f90d 	bl	8001878 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 800165e:	2203      	movs	r2, #3
 8001660:	4921      	ldr	r1, [pc, #132]	; (80016e8 <main+0xac>)
 8001662:	4822      	ldr	r0, [pc, #136]	; (80016ec <main+0xb0>)
 8001664:	f000 fd00 	bl	8002068 <HAL_ADC_Start_DMA>
  update_data_from_flash(sliders_data, range_x_data, inverter_config);
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <main+0xb4>)
 800166a:	4922      	ldr	r1, [pc, #136]	; (80016f4 <main+0xb8>)
 800166c:	4822      	ldr	r0, [pc, #136]	; (80016f8 <main+0xbc>)
 800166e:	f7ff fcf7 	bl	8001060 <update_data_from_flash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t * OutputValue = set_output(ADCValue, sliders_data, range_x_data, inverter_config);
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <main+0xb4>)
 8001674:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <main+0xb8>)
 8001676:	4920      	ldr	r1, [pc, #128]	; (80016f8 <main+0xbc>)
 8001678:	481b      	ldr	r0, [pc, #108]	; (80016e8 <main+0xac>)
 800167a:	f7ff fe95 	bl	80013a8 <set_output>
 800167e:	6078      	str	r0, [r7, #4]
	  joystickhid.rx_8lsb = (OutputValue[0]);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <main+0xc0>)
 8001688:	701a      	strb	r2, [r3, #0]
	  joystickhid.ry_4lsb_rx_4msb = ((OutputValue[1] & 0xf) << 4 | OutputValue[0] >> 8);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3302      	adds	r3, #2
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	b25a      	sxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	b29b      	uxth	r3, r3
 800169c:	b25b      	sxtb	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <main+0xc0>)
 80016a6:	705a      	strb	r2, [r3, #1]
	  joystickhid.ry_8msb = OutputValue[1] >> 4;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3302      	adds	r3, #2
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <main+0xc0>)
 80016b6:	709a      	strb	r2, [r3, #2]
	  joystickhid.rz_8lsb = OutputValue[2];
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3304      	adds	r3, #4
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <main+0xc0>)
 80016c2:	70da      	strb	r2, [r3, #3]
	  joystickhid.rz_4msb = OutputValue[2] >> 8;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <main+0xc0>)
 80016d2:	711a      	strb	r2, [r3, #4]
//  	  uint8_t Test[] = "Fim\r\n"; //Data to send
//  	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80016d4:	2208      	movs	r2, #8
 80016d6:	4909      	ldr	r1, [pc, #36]	; (80016fc <main+0xc0>)
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <main+0xc4>)
 80016da:	f007 f8ed 	bl	80088b8 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f000 fbc6 	bl	8001e70 <HAL_Delay>
  {
 80016e4:	e7c5      	b.n	8001672 <main+0x36>
 80016e6:	bf00      	nop
 80016e8:	200002ec 	.word	0x200002ec
 80016ec:	2000022c 	.word	0x2000022c
 80016f0:	200002f4 	.word	0x200002f4
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000014 	.word	0x20000014
 80016fc:	200002e4 	.word	0x200002e4
 8001700:	2000032c 	.word	0x2000032c

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	; 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170e:	2228      	movs	r2, #40	; 0x28
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f008 ff48 	bl	800a5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001742:	2301      	movs	r3, #1
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	2302      	movs	r3, #2
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175a:	4618      	mov	r0, r3
 800175c:	f003 fae8 	bl	8004d30 <HAL_RCC_OscConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001766:	f000 f91b 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176a:	230f      	movs	r3, #15
 800176c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2101      	movs	r1, #1
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fd54 	bl	8005234 <HAL_RCC_ClockConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001792:	f000 f905 	bl	80019a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001796:	2312      	movs	r3, #18
 8001798:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800179a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80017a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fedb 	bl	8005564 <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017b4:	f000 f8f4 	bl	80019a0 <Error_Handler>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3750      	adds	r7, #80	; 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <MX_ADC1_Init+0xb0>)
 80017d2:	4a28      	ldr	r2, [pc, #160]	; (8001874 <MX_ADC1_Init+0xb4>)
 80017d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <MX_ADC1_Init+0xb0>)
 80017d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <MX_ADC1_Init+0xb0>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <MX_ADC1_Init+0xb0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <MX_ADC1_Init+0xb0>)
 80017ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_ADC1_Init+0xb0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_ADC1_Init+0xb0>)
 80017fa:	2203      	movs	r2, #3
 80017fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017fe:	481c      	ldr	r0, [pc, #112]	; (8001870 <MX_ADC1_Init+0xb0>)
 8001800:	f000 fb5a 	bl	8001eb8 <HAL_ADC_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800180a:	f000 f8c9 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001812:	2301      	movs	r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001816:	2306      	movs	r3, #6
 8001818:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4814      	ldr	r0, [pc, #80]	; (8001870 <MX_ADC1_Init+0xb0>)
 8001820:	f000 fd1c 	bl	800225c <HAL_ADC_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800182a:	f000 f8b9 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800182e:	2301      	movs	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001832:	2302      	movs	r3, #2
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_ADC1_Init+0xb0>)
 800183c:	f000 fd0e 	bl	800225c <HAL_ADC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001846:	f000 f8ab 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800184a:	2302      	movs	r3, #2
 800184c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800184e:	2303      	movs	r3, #3
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_ADC1_Init+0xb0>)
 8001858:	f000 fd00 	bl	800225c <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001862:	f000 f89d 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000022c 	.word	0x2000022c
 8001874:	40012400 	.word	0x40012400

08001878 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <MX_USART1_UART_Init+0x50>)
 8001880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 8001884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_USART1_UART_Init+0x4c>)
 80018b0:	f003 ff0e 	bl	80056d0 <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ba:	f000 f871 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200002a0 	.word	0x200002a0
 80018c8:	40013800 	.word	0x40013800

080018cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_DMA_Init+0x38>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <MX_DMA_Init+0x38>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6153      	str	r3, [r2, #20]
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_DMA_Init+0x38>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	200b      	movs	r0, #11
 80018f0:	f000 ff85 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018f4:	200b      	movs	r0, #11
 80018f6:	f000 ff9e 	bl	8002836 <HAL_NVIC_EnableIRQ>

}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_GPIO_Init+0x90>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <MX_GPIO_Init+0x90>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_GPIO_Init+0x90>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_GPIO_Init+0x90>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a17      	ldr	r2, [pc, #92]	; (8001998 <MX_GPIO_Init+0x90>)
 800193a:	f043 0320 	orr.w	r3, r3, #32
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_GPIO_Init+0x90>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_GPIO_Init+0x90>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <MX_GPIO_Init+0x90>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_GPIO_Init+0x90>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_GPIO_Init+0x94>)
 800196c:	f001 fd1c 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2302      	movs	r3, #2
 8001980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	4619      	mov	r1, r3
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <MX_GPIO_Init+0x94>)
 800198a:	f001 fb89 	bl	80030a0 <HAL_GPIO_Init>

}
 800198e:	bf00      	nop
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40011000 	.word	0x40011000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_MspInit+0x40>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_MspInit+0x40>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_MspInit+0x40>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_MspInit+0x40>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_MspInit+0x40>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_MspInit+0x40>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a29      	ldr	r2, [pc, #164]	; (8001ab0 <HAL_ADC_MspInit+0xc0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d14a      	bne.n	8001aa6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <HAL_ADC_MspInit+0xc4>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <HAL_ADC_MspInit+0xc4>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_ADC_MspInit+0xc4>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_ADC_MspInit+0xc4>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <HAL_ADC_MspInit+0xc4>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_ADC_MspInit+0xc4>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a40:	2307      	movs	r3, #7
 8001a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a44:	2303      	movs	r3, #3
 8001a46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481a      	ldr	r0, [pc, #104]	; (8001ab8 <HAL_ADC_MspInit+0xc8>)
 8001a50:	f001 fb26 	bl	80030a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a56:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_ADC_MspInit+0xd0>)
 8001a58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a7e:	2220      	movs	r2, #32
 8001a80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a8c:	f000 feee 	bl	800286c <HAL_DMA_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001a96:	f7ff ff83 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001a9e:	621a      	str	r2, [r3, #32]
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_ADC_MspInit+0xcc>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012400 	.word	0x40012400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010800 	.word	0x40010800
 8001abc:	2000025c 	.word	0x2000025c
 8001ac0:	40020008 	.word	0x40020008

08001ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_UART_MspInit+0x8c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d131      	bne.n	8001b48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	4619      	mov	r1, r3
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <HAL_UART_MspInit+0x94>)
 8001b2a:	f001 fab9 	bl	80030a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4619      	mov	r1, r3
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_UART_MspInit+0x94>)
 8001b44:	f001 faac 	bl	80030a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010800 	.word	0x40010800

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba2:	f000 f949 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DMA1_Channel1_IRQHandler+0x10>)
 8001bb2:	f000 ff15 	bl	80029e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000025c 	.word	0x2000025c

08001bc0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001bc6:	f001 fd38 	bl	800363a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000af4 	.word	0x20000af4

08001bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <_kill>:

int _kill(int pid, int sig)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bec:	f008 fca4 	bl	800a538 <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2216      	movs	r2, #22
 8001bf4:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_exit>:

void _exit (int status)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffe7 	bl	8001be2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c14:	e7fe      	b.n	8001c14 <_exit+0x12>

08001c16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e00a      	b.n	8001c3e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c28:	f3af 8000 	nop.w
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	60ba      	str	r2, [r7, #8]
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	dbf0      	blt.n	8001c28 <_read+0x12>
	}

return len;
 8001c46:	687b      	ldr	r3, [r7, #4]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e009      	b.n	8001c76 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	60ba      	str	r2, [r7, #8]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbf1      	blt.n	8001c62 <_write+0x12>
	}
	return len;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_close>:

int _close(int file)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cae:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <_isatty>:

int _isatty(int file)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	return 1;
 8001cc4:	2301      	movs	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
	return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <_sbrk+0x5c>)
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <_sbrk+0x60>)
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <_sbrk+0x64>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <_sbrk+0x68>)
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d207      	bcs.n	8001d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d18:	f008 fc0e 	bl	800a538 <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	220c      	movs	r2, #12
 8001d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	e009      	b.n	8001d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <_sbrk+0x64>)
 8001d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20005000 	.word	0x20005000
 8001d48:	00000400 	.word	0x00000400
 8001d4c:	200002fc 	.word	0x200002fc
 8001d50:	20000e48 	.word	0x20000e48

08001d54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d62:	490d      	ldr	r1, [pc, #52]	; (8001d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d78:	4c0a      	ldr	r4, [pc, #40]	; (8001da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d86:	f7ff ffe5 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8a:	f008 fbdb 	bl	800a544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d8e:	f7ff fc55 	bl	800163c <main>
  bx lr
 8001d92:	4770      	bx	lr
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001d9c:	0800be04 	.word	0x0800be04
  ldr r2, =_sbss
 8001da0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001da4:	20000e48 	.word	0x20000e48

08001da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_2_IRQHandler>
	...

08001dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_Init+0x28>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_Init+0x28>)
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 fd13 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f000 f808 	bl	8001dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff fdf0 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40022000 	.word	0x40022000

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x54>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fd2b 	bl	8002852 <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00e      	b.n	8001e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d80a      	bhi.n	8001e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f000 fcf3 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e18:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <HAL_InitTick+0x5c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000030 	.word	0x20000030
 8001e30:	20000038 	.word	0x20000038
 8001e34:	20000034 	.word	0x20000034

08001e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_IncTick+0x1c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_IncTick+0x20>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HAL_IncTick+0x20>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20000038 	.word	0x20000038
 8001e58:	20000300 	.word	0x20000300

08001e5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b02      	ldr	r3, [pc, #8]	; (8001e6c <HAL_GetTick+0x10>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000300 	.word	0x20000300

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fff0 	bl	8001e5c <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d005      	beq.n	8001e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_Delay+0x44>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e96:	bf00      	nop
 8001e98:	f7ff ffe0 	bl	8001e5c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <HAL_Delay+0x28>
  {
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000038 	.word	0x20000038

08001eb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0be      	b.n	8002058 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fd7a 	bl	80019f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 faff 	bl	8002500 <ADC_ConversionStop_Disable>
 8001f02:	4603      	mov	r3, r0
 8001f04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 8099 	bne.w	8002046 <HAL_ADC_Init+0x18e>
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 8095 	bne.w	8002046 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f24:	f023 0302 	bic.w	r3, r3, #2
 8001f28:	f043 0202 	orr.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7b1b      	ldrb	r3, [r3, #12]
 8001f3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f50:	d003      	beq.n	8001f5a <HAL_ADC_Init+0xa2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_ADC_Init+0xa8>
 8001f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f5e:	e000      	b.n	8001f62 <HAL_ADC_Init+0xaa>
 8001f60:	2300      	movs	r3, #0
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7d1b      	ldrb	r3, [r3, #20]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d119      	bne.n	8001fa4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7b1b      	ldrb	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	035a      	lsls	r2, r3, #13
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_ADC_Init+0x1a8>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd4:	d003      	beq.n	8001fde <HAL_ADC_Init+0x126>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d104      	bne.n	8001fe8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_ADC_Init+0x1ac>)
 8002004:	4013      	ands	r3, r2
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	429a      	cmp	r2, r3
 800200a:	d10b      	bne.n	8002024 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	f023 0303 	bic.w	r3, r3, #3
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002022:	e018      	b.n	8002056 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	f023 0312 	bic.w	r3, r3, #18
 800202c:	f043 0210 	orr.w	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002044:	e007      	b.n	8002056 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002056:	7dfb      	ldrb	r3, [r7, #23]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	ffe1f7fd 	.word	0xffe1f7fd
 8002064:	ff1f0efe 	.word	0xff1f0efe

08002068 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a64      	ldr	r2, [pc, #400]	; (8002210 <HAL_ADC_Start_DMA+0x1a8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_ADC_Start_DMA+0x24>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a63      	ldr	r2, [pc, #396]	; (8002214 <HAL_ADC_Start_DMA+0x1ac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d106      	bne.n	800209a <HAL_ADC_Start_DMA+0x32>
 800208c:	4b60      	ldr	r3, [pc, #384]	; (8002210 <HAL_ADC_Start_DMA+0x1a8>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 80b3 	bne.w	8002200 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_Start_DMA+0x40>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0ae      	b.n	8002206 <HAL_ADC_Start_DMA+0x19e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f9cb 	bl	800244c <ADC_Enable>
 80020b6:	4603      	mov	r3, r0
 80020b8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f040 809a 	bne.w	80021f6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <HAL_ADC_Start_DMA+0x1ac>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d105      	bne.n	80020ec <HAL_ADC_Start_DMA+0x84>
 80020e0:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <HAL_ADC_Start_DMA+0x1a8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d115      	bne.n	8002118 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	2b00      	cmp	r3, #0
 8002104:	d026      	beq.n	8002154 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800210e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002116:	e01d      	b.n	8002154 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <HAL_ADC_Start_DMA+0x1a8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d004      	beq.n	8002138 <HAL_ADC_Start_DMA+0xd0>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a38      	ldr	r2, [pc, #224]	; (8002214 <HAL_ADC_Start_DMA+0x1ac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d10d      	bne.n	8002154 <HAL_ADC_Start_DMA+0xec>
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <HAL_ADC_Start_DMA+0x1a8>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800214c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f023 0206 	bic.w	r2, r3, #6
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
 800216c:	e002      	b.n	8002174 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a25      	ldr	r2, [pc, #148]	; (8002218 <HAL_ADC_Start_DMA+0x1b0>)
 8002182:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a24      	ldr	r2, [pc, #144]	; (800221c <HAL_ADC_Start_DMA+0x1b4>)
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <HAL_ADC_Start_DMA+0x1b8>)
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0202 	mvn.w	r2, #2
 800219c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a18      	ldr	r0, [r3, #32]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	334c      	adds	r3, #76	; 0x4c
 80021b8:	4619      	mov	r1, r3
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f000 fbaf 	bl	8002920 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021d0:	d108      	bne.n	80021e4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021e0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021e2:	e00f      	b.n	8002204 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021f2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021f4:	e006      	b.n	8002204 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80021fe:	e001      	b.n	8002204 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002204:	7dfb      	ldrb	r3, [r7, #23]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40012400 	.word	0x40012400
 8002214:	40012800 	.word	0x40012800
 8002218:	08002583 	.word	0x08002583
 800221c:	080025ff 	.word	0x080025ff
 8002220:	0800261b 	.word	0x0800261b

08002224 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
	...

0800225c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x20>
 8002278:	2302      	movs	r3, #2
 800227a:	e0dc      	b.n	8002436 <HAL_ADC_ConfigChannel+0x1da>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b06      	cmp	r3, #6
 800228a:	d81c      	bhi.n	80022c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3b05      	subs	r3, #5
 800229e:	221f      	movs	r2, #31
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4019      	ands	r1, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	3b05      	subs	r3, #5
 80022b8:	fa00 f203 	lsl.w	r2, r0, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34
 80022c4:	e03c      	b.n	8002340 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d81c      	bhi.n	8002308 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	3b23      	subs	r3, #35	; 0x23
 80022e0:	221f      	movs	r2, #31
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4019      	ands	r1, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b23      	subs	r3, #35	; 0x23
 80022fa:	fa00 f203 	lsl.w	r2, r0, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
 8002306:	e01b      	b.n	8002340 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b41      	subs	r3, #65	; 0x41
 800231a:	221f      	movs	r2, #31
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	4019      	ands	r1, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	3b41      	subs	r3, #65	; 0x41
 8002334:	fa00 f203 	lsl.w	r2, r0, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b09      	cmp	r3, #9
 8002346:	d91c      	bls.n	8002382 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	3b1e      	subs	r3, #30
 800235a:	2207      	movs	r2, #7
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	4019      	ands	r1, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6898      	ldr	r0, [r3, #8]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	3b1e      	subs	r3, #30
 8002374:	fa00 f203 	lsl.w	r2, r0, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	e019      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6919      	ldr	r1, [r3, #16]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	2207      	movs	r2, #7
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	4019      	ands	r1, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6898      	ldr	r0, [r3, #8]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	fa00 f203 	lsl.w	r2, r0, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d003      	beq.n	80023c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023c2:	2b11      	cmp	r3, #17
 80023c4:	d132      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_ADC_ConfigChannel+0x1e4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d125      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d126      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d11a      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_ADC_ConfigChannel+0x1e8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a13      	ldr	r2, [pc, #76]	; (8002448 <HAL_ADC_ConfigChannel+0x1ec>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	0c9a      	lsrs	r2, r3, #18
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800240c:	e002      	b.n	8002414 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3b01      	subs	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f9      	bne.n	800240e <HAL_ADC_ConfigChannel+0x1b2>
 800241a:	e007      	b.n	800242c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40012400 	.word	0x40012400
 8002444:	20000030 	.word	0x20000030
 8002448:	431bde83 	.word	0x431bde83

0800244c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d040      	beq.n	80024ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <ADC_Enable+0xac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <ADC_Enable+0xb0>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	0c9b      	lsrs	r3, r3, #18
 8002486:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002488:	e002      	b.n	8002490 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3b01      	subs	r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f9      	bne.n	800248a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002496:	f7ff fce1 	bl	8001e5c <HAL_GetTick>
 800249a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800249c:	e01f      	b.n	80024de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800249e:	f7ff fcdd 	bl	8001e5c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d918      	bls.n	80024de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d011      	beq.n	80024de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	f043 0210 	orr.w	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e007      	b.n	80024ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d1d8      	bne.n	800249e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000030 	.word	0x20000030
 80024fc:	431bde83 	.word	0x431bde83

08002500 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d12e      	bne.n	8002578 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800252a:	f7ff fc97 	bl	8001e5c <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002530:	e01b      	b.n	800256a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002532:	f7ff fc93 	bl	8001e5c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d914      	bls.n	800256a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10d      	bne.n	800256a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	f043 0210 	orr.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e007      	b.n	800257a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d0dc      	beq.n	8002532 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002598:	2b00      	cmp	r3, #0
 800259a:	d127      	bne.n	80025ec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025b6:	d115      	bne.n	80025e4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d111      	bne.n	80025e4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff fe1d 	bl	8002224 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025ea:	e004      	b.n	80025f6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7ff fe12 	bl	8002236 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f043 0204 	orr.w	r2, r3, #4
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fe01 	bl	8002248 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4906      	ldr	r1, [pc, #24]	; (80026e8 <__NVIC_EnableIRQ+0x34>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f7ff ff90 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff2d 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff42 	bl	8002698 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff90 	bl	8002740 <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5f 	bl	80026ec <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff35 	bl	80026b4 <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa2 	bl	80027a4 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e043      	b.n	800290a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_DMA_Init+0xa8>)
 800288a:	4413      	add	r3, r2
 800288c:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_DMA_Init+0xac>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_DMA_Init+0xb0>)
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	bffdfff8 	.word	0xbffdfff8
 8002918:	cccccccd 	.word	0xcccccccd
 800291c:	40020000 	.word	0x40020000

08002920 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_DMA_Start_IT+0x20>
 800293c:	2302      	movs	r3, #2
 800293e:	e04a      	b.n	80029d6 <HAL_DMA_Start_IT+0xb6>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800294e:	2b01      	cmp	r3, #1
 8002950:	d13a      	bne.n	80029c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f938 	bl	8002bec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 020e 	orr.w	r2, r2, #14
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e00f      	b.n	80029b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0204 	bic.w	r2, r2, #4
 80029a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 020a 	orr.w	r2, r2, #10
 80029b4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e005      	b.n	80029d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
 80029d2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2204      	movs	r2, #4
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d04f      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0xc8>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0204 	bic.w	r2, r2, #4
 8002a2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d029      	beq.n	8002a8e <HAL_DMA_IRQHandler+0xae>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_DMA_IRQHandler+0x1f4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xaa>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a63      	ldr	r2, [pc, #396]	; (8002bd8 <HAL_DMA_IRQHandler+0x1f8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01a      	beq.n	8002a84 <HAL_DMA_IRQHandler+0xa4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a62      	ldr	r2, [pc, #392]	; (8002bdc <HAL_DMA_IRQHandler+0x1fc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d012      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x9e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a60      	ldr	r2, [pc, #384]	; (8002be0 <HAL_DMA_IRQHandler+0x200>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00a      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x98>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5f      	ldr	r2, [pc, #380]	; (8002be4 <HAL_DMA_IRQHandler+0x204>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d102      	bne.n	8002a72 <HAL_DMA_IRQHandler+0x92>
 8002a6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a70:	e00e      	b.n	8002a90 <HAL_DMA_IRQHandler+0xb0>
 8002a72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a76:	e00b      	b.n	8002a90 <HAL_DMA_IRQHandler+0xb0>
 8002a78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a7c:	e008      	b.n	8002a90 <HAL_DMA_IRQHandler+0xb0>
 8002a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a82:	e005      	b.n	8002a90 <HAL_DMA_IRQHandler+0xb0>
 8002a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a88:	e002      	b.n	8002a90 <HAL_DMA_IRQHandler+0xb0>
 8002a8a:	2340      	movs	r3, #64	; 0x40
 8002a8c:	e000      	b.n	8002a90 <HAL_DMA_IRQHandler+0xb0>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	4a55      	ldr	r2, [pc, #340]	; (8002be8 <HAL_DMA_IRQHandler+0x208>)
 8002a92:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8094 	beq.w	8002bc6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002aa6:	e08e      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	2202      	movs	r2, #2
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d056      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x186>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d051      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020a 	bic.w	r2, r2, #10
 8002ade:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a38      	ldr	r2, [pc, #224]	; (8002bd0 <HAL_DMA_IRQHandler+0x1f0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d029      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x166>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_DMA_IRQHandler+0x1f4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x162>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a35      	ldr	r2, [pc, #212]	; (8002bd8 <HAL_DMA_IRQHandler+0x1f8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x15c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <HAL_DMA_IRQHandler+0x1fc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d012      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x156>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_DMA_IRQHandler+0x200>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00a      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x150>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <HAL_DMA_IRQHandler+0x204>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d102      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x14a>
 8002b24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b28:	e00e      	b.n	8002b48 <HAL_DMA_IRQHandler+0x168>
 8002b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2e:	e00b      	b.n	8002b48 <HAL_DMA_IRQHandler+0x168>
 8002b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b34:	e008      	b.n	8002b48 <HAL_DMA_IRQHandler+0x168>
 8002b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b3a:	e005      	b.n	8002b48 <HAL_DMA_IRQHandler+0x168>
 8002b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b40:	e002      	b.n	8002b48 <HAL_DMA_IRQHandler+0x168>
 8002b42:	2320      	movs	r3, #32
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_IRQHandler+0x168>
 8002b46:	2302      	movs	r3, #2
 8002b48:	4a27      	ldr	r2, [pc, #156]	; (8002be8 <HAL_DMA_IRQHandler+0x208>)
 8002b4a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d034      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b64:	e02f      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d028      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x1e8>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 020e 	bic.w	r2, r2, #14
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
    }
  }
  return;
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
}
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40020008 	.word	0x40020008
 8002bd4:	4002001c 	.word	0x4002001c
 8002bd8:	40020030 	.word	0x40020030
 8002bdc:	40020044 	.word	0x40020044
 8002be0:	40020058 	.word	0x40020058
 8002be4:	4002006c 	.word	0x4002006c
 8002be8:	40020000 	.word	0x40020000

08002bec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	2101      	movs	r1, #1
 8002c04:	fa01 f202 	lsl.w	r2, r1, r2
 8002c08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d108      	bne.n	8002c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c2a:	e007      	b.n	8002c3c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c62:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_FLASH_Program+0xd8>)
 8002c64:	7e1b      	ldrb	r3, [r3, #24]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_FLASH_Program+0x26>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e054      	b.n	8002d18 <HAL_FLASH_Program+0xd0>
 8002c6e:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_FLASH_Program+0xd8>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c78:	f000 f8d4 	bl	8002e24 <FLASH_WaitForLastOperation>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d144      	bne.n	8002d10 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d102      	bne.n	8002c92 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	757b      	strb	r3, [r7, #21]
 8002c90:	e007      	b.n	8002ca2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d102      	bne.n	8002c9e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	757b      	strb	r3, [r7, #21]
 8002c9c:	e001      	b.n	8002ca2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75bb      	strb	r3, [r7, #22]
 8002ca6:	e02d      	b.n	8002d04 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ca8:	7dbb      	ldrb	r3, [r7, #22]
 8002caa:	005a      	lsls	r2, r3, #1
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	eb02 0c03 	add.w	ip, r2, r3
 8002cb2:	7dbb      	ldrb	r3, [r7, #22]
 8002cb4:	0119      	lsls	r1, r3, #4
 8002cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cba:	f1c1 0620 	rsb	r6, r1, #32
 8002cbe:	f1a1 0020 	sub.w	r0, r1, #32
 8002cc2:	fa22 f401 	lsr.w	r4, r2, r1
 8002cc6:	fa03 f606 	lsl.w	r6, r3, r6
 8002cca:	4334      	orrs	r4, r6
 8002ccc:	fa23 f000 	lsr.w	r0, r3, r0
 8002cd0:	4304      	orrs	r4, r0
 8002cd2:	fa23 f501 	lsr.w	r5, r3, r1
 8002cd6:	b2a3      	uxth	r3, r4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4660      	mov	r0, ip
 8002cdc:	f000 f886 	bl	8002dec <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002ce0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ce4:	f000 f89e 	bl	8002e24 <FLASH_WaitForLastOperation>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_FLASH_Program+0xdc>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <HAL_FLASH_Program+0xdc>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d107      	bne.n	8002d0e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002cfe:	7dbb      	ldrb	r3, [r7, #22]
 8002d00:	3301      	adds	r3, #1
 8002d02:	75bb      	strb	r3, [r7, #22]
 8002d04:	7dba      	ldrb	r2, [r7, #22]
 8002d06:	7d7b      	ldrb	r3, [r7, #21]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3cd      	bcc.n	8002ca8 <HAL_FLASH_Program+0x60>
 8002d0c:	e000      	b.n	8002d10 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002d0e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_FLASH_Program+0xd8>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	761a      	strb	r2, [r3, #24]

  return status;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d20:	20000308 	.word	0x20000308
 8002d24:	40022000 	.word	0x40022000

08002d28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_FLASH_Unlock+0x40>)
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_FLASH_Unlock+0x40>)
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <HAL_FLASH_Unlock+0x44>)
 8002d42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_FLASH_Unlock+0x40>)
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_FLASH_Unlock+0x48>)
 8002d48:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <HAL_FLASH_Unlock+0x40>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40022000 	.word	0x40022000
 8002d6c:	45670123 	.word	0x45670123
 8002d70:	cdef89ab 	.word	0xcdef89ab

08002d74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_FLASH_Lock+0x1c>)
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_FLASH_Lock+0x1c>)
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d82:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40022000 	.word	0x40022000

08002d94 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_FLASH_OB_Unlock+0x30>)
 8002da8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_FLASH_OB_Unlock+0x34>)
 8002dae:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40022000 	.word	0x40022000
 8002dc4:	45670123 	.word	0x45670123
 8002dc8:	cdef89ab 	.word	0xcdef89ab

08002dcc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_FLASH_OB_Lock+0x1c>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_FLASH_OB_Lock+0x1c>)
 8002dd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dda:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000

08002dec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <FLASH_Program_HalfWord+0x30>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <FLASH_Program_HalfWord+0x34>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <FLASH_Program_HalfWord+0x34>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	801a      	strh	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000308 	.word	0x20000308
 8002e20:	40022000 	.word	0x40022000

08002e24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff f816 	bl	8001e5c <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e32:	e010      	b.n	8002e56 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d00c      	beq.n	8002e56 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <FLASH_WaitForLastOperation+0x2e>
 8002e42:	f7ff f80b 	bl	8001e5c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d201      	bcs.n	8002e56 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e025      	b.n	8002ea2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <FLASH_WaitForLastOperation+0x88>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e8      	bne.n	8002e34 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <FLASH_WaitForLastOperation+0x88>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <FLASH_WaitForLastOperation+0x88>)
 8002e70:	2220      	movs	r2, #32
 8002e72:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <FLASH_WaitForLastOperation+0x88>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <FLASH_WaitForLastOperation+0x88>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <FLASH_WaitForLastOperation+0x88>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002e98:	f000 f80a 	bl	8002eb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40022000 	.word	0x40022000

08002eb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <FLASH_SetErrorCode+0x98>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <FLASH_SetErrorCode+0x9c>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <FLASH_SetErrorCode+0x9c>)
 8002ed0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f043 0310 	orr.w	r3, r3, #16
 8002ed8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <FLASH_SetErrorCode+0x98>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <FLASH_SetErrorCode+0x9c>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <FLASH_SetErrorCode+0x9c>)
 8002ef0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <FLASH_SetErrorCode+0x98>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <FLASH_SetErrorCode+0x9c>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f043 0304 	orr.w	r3, r3, #4
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <FLASH_SetErrorCode+0x9c>)
 8002f10:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <FLASH_SetErrorCode+0x98>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <FLASH_SetErrorCode+0x98>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f240 1201 	movw	r2, #257	; 0x101
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d106      	bne.n	8002f36 <FLASH_SetErrorCode+0x86>
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <FLASH_SetErrorCode+0x98>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <FLASH_SetErrorCode+0x98>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	61d3      	str	r3, [r2, #28]
}  
 8002f34:	e002      	b.n	8002f3c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <FLASH_SetErrorCode+0x98>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60d3      	str	r3, [r2, #12]
}  
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	20000308 	.word	0x20000308

08002f50 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f62:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_FLASHEx_Erase+0xd0>)
 8002f64:	7e1b      	ldrb	r3, [r3, #24]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_FLASHEx_Erase+0x1e>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e053      	b.n	8003016 <HAL_FLASHEx_Erase+0xc6>
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <HAL_FLASHEx_Erase+0xd0>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d116      	bne.n	8002faa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f80:	f7ff ff50 	bl	8002e24 <FLASH_WaitForLastOperation>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d141      	bne.n	800300e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f000 f84c 	bl	8003028 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f94:	f7ff ff46 	bl	8002e24 <FLASH_WaitForLastOperation>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_FLASHEx_Erase+0xd4>)
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <HAL_FLASHEx_Erase+0xd4>)
 8002fa2:	f023 0304 	bic.w	r3, r3, #4
 8002fa6:	6113      	str	r3, [r2, #16]
 8002fa8:	e031      	b.n	800300e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002faa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fae:	f7ff ff39 	bl	8002e24 <FLASH_WaitForLastOperation>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d12a      	bne.n	800300e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	e019      	b.n	8002ffc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002fc8:	68b8      	ldr	r0, [r7, #8]
 8002fca:	f000 f849 	bl	8003060 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fd2:	f7ff ff27 	bl	8002e24 <FLASH_WaitForLastOperation>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_FLASHEx_Erase+0xd4>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_FLASHEx_Erase+0xd4>)
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	601a      	str	r2, [r3, #0]
            break;
 8002ff2:	e00c      	b.n	800300e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ffa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	029a      	lsls	r2, r3, #10
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d3dc      	bcc.n	8002fc8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <HAL_FLASHEx_Erase+0xd0>)
 8003010:	2200      	movs	r2, #0
 8003012:	761a      	strb	r2, [r3, #24]

  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000308 	.word	0x20000308
 8003024:	40022000 	.word	0x40022000

08003028 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <FLASH_MassErase+0x30>)
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <FLASH_MassErase+0x34>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	4a08      	ldr	r2, [pc, #32]	; (800305c <FLASH_MassErase+0x34>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <FLASH_MassErase+0x34>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <FLASH_MassErase+0x34>)
 8003048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800304c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	20000308 	.word	0x20000308
 800305c:	40022000 	.word	0x40022000

08003060 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <FLASH_PageErase+0x38>)
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <FLASH_PageErase+0x3c>)
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <FLASH_PageErase+0x3c>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800307a:	4a08      	ldr	r2, [pc, #32]	; (800309c <FLASH_PageErase+0x3c>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <FLASH_PageErase+0x3c>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <FLASH_PageErase+0x3c>)
 8003086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000308 	.word	0x20000308
 800309c:	40022000 	.word	0x40022000

080030a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b08b      	sub	sp, #44	; 0x2c
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b2:	e169      	b.n	8003388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030b4:	2201      	movs	r2, #1
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	f040 8158 	bne.w	8003382 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a9a      	ldr	r2, [pc, #616]	; (8003340 <HAL_GPIO_Init+0x2a0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d05e      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 80030dc:	4a98      	ldr	r2, [pc, #608]	; (8003340 <HAL_GPIO_Init+0x2a0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d875      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 80030e2:	4a98      	ldr	r2, [pc, #608]	; (8003344 <HAL_GPIO_Init+0x2a4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d058      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 80030e8:	4a96      	ldr	r2, [pc, #600]	; (8003344 <HAL_GPIO_Init+0x2a4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d86f      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 80030ee:	4a96      	ldr	r2, [pc, #600]	; (8003348 <HAL_GPIO_Init+0x2a8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d052      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 80030f4:	4a94      	ldr	r2, [pc, #592]	; (8003348 <HAL_GPIO_Init+0x2a8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d869      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 80030fa:	4a94      	ldr	r2, [pc, #592]	; (800334c <HAL_GPIO_Init+0x2ac>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d04c      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 8003100:	4a92      	ldr	r2, [pc, #584]	; (800334c <HAL_GPIO_Init+0x2ac>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d863      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 8003106:	4a92      	ldr	r2, [pc, #584]	; (8003350 <HAL_GPIO_Init+0x2b0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d046      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 800310c:	4a90      	ldr	r2, [pc, #576]	; (8003350 <HAL_GPIO_Init+0x2b0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d85d      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 8003112:	2b12      	cmp	r3, #18
 8003114:	d82a      	bhi.n	800316c <HAL_GPIO_Init+0xcc>
 8003116:	2b12      	cmp	r3, #18
 8003118:	d859      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_GPIO_Init+0x80>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	0800319b 	.word	0x0800319b
 8003124:	08003175 	.word	0x08003175
 8003128:	08003187 	.word	0x08003187
 800312c:	080031c9 	.word	0x080031c9
 8003130:	080031cf 	.word	0x080031cf
 8003134:	080031cf 	.word	0x080031cf
 8003138:	080031cf 	.word	0x080031cf
 800313c:	080031cf 	.word	0x080031cf
 8003140:	080031cf 	.word	0x080031cf
 8003144:	080031cf 	.word	0x080031cf
 8003148:	080031cf 	.word	0x080031cf
 800314c:	080031cf 	.word	0x080031cf
 8003150:	080031cf 	.word	0x080031cf
 8003154:	080031cf 	.word	0x080031cf
 8003158:	080031cf 	.word	0x080031cf
 800315c:	080031cf 	.word	0x080031cf
 8003160:	080031cf 	.word	0x080031cf
 8003164:	0800317d 	.word	0x0800317d
 8003168:	08003191 	.word	0x08003191
 800316c:	4a79      	ldr	r2, [pc, #484]	; (8003354 <HAL_GPIO_Init+0x2b4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003172:	e02c      	b.n	80031ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	623b      	str	r3, [r7, #32]
          break;
 800317a:	e029      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	3304      	adds	r3, #4
 8003182:	623b      	str	r3, [r7, #32]
          break;
 8003184:	e024      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	3308      	adds	r3, #8
 800318c:	623b      	str	r3, [r7, #32]
          break;
 800318e:	e01f      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	330c      	adds	r3, #12
 8003196:	623b      	str	r3, [r7, #32]
          break;
 8003198:	e01a      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031a2:	2304      	movs	r3, #4
 80031a4:	623b      	str	r3, [r7, #32]
          break;
 80031a6:	e013      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b0:	2308      	movs	r3, #8
 80031b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	611a      	str	r2, [r3, #16]
          break;
 80031ba:	e009      	b.n	80031d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031bc:	2308      	movs	r3, #8
 80031be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	615a      	str	r2, [r3, #20]
          break;
 80031c6:	e003      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031c8:	2300      	movs	r3, #0
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          break;
 80031ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d801      	bhi.n	80031da <HAL_GPIO_Init+0x13a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	e001      	b.n	80031de <HAL_GPIO_Init+0x13e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2bff      	cmp	r3, #255	; 0xff
 80031e4:	d802      	bhi.n	80031ec <HAL_GPIO_Init+0x14c>
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	e002      	b.n	80031f2 <HAL_GPIO_Init+0x152>
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	3b08      	subs	r3, #8
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	210f      	movs	r1, #15
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	401a      	ands	r2, r3
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	431a      	orrs	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80b1 	beq.w	8003382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003220:	4b4d      	ldr	r3, [pc, #308]	; (8003358 <HAL_GPIO_Init+0x2b8>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	4a4c      	ldr	r2, [pc, #304]	; (8003358 <HAL_GPIO_Init+0x2b8>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6193      	str	r3, [r2, #24]
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_GPIO_Init+0x2b8>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003238:	4a48      	ldr	r2, [pc, #288]	; (800335c <HAL_GPIO_Init+0x2bc>)
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a40      	ldr	r2, [pc, #256]	; (8003360 <HAL_GPIO_Init+0x2c0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <HAL_GPIO_Init+0x1ec>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a3f      	ldr	r2, [pc, #252]	; (8003364 <HAL_GPIO_Init+0x2c4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00d      	beq.n	8003288 <HAL_GPIO_Init+0x1e8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3e      	ldr	r2, [pc, #248]	; (8003368 <HAL_GPIO_Init+0x2c8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <HAL_GPIO_Init+0x1e4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3d      	ldr	r2, [pc, #244]	; (800336c <HAL_GPIO_Init+0x2cc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_GPIO_Init+0x1e0>
 800327c:	2303      	movs	r3, #3
 800327e:	e006      	b.n	800328e <HAL_GPIO_Init+0x1ee>
 8003280:	2304      	movs	r3, #4
 8003282:	e004      	b.n	800328e <HAL_GPIO_Init+0x1ee>
 8003284:	2302      	movs	r3, #2
 8003286:	e002      	b.n	800328e <HAL_GPIO_Init+0x1ee>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_GPIO_Init+0x1ee>
 800328c:	2300      	movs	r3, #0
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	f002 0203 	and.w	r2, r2, #3
 8003294:	0092      	lsls	r2, r2, #2
 8003296:	4093      	lsls	r3, r2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800329e:	492f      	ldr	r1, [pc, #188]	; (800335c <HAL_GPIO_Init+0x2bc>)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	492c      	ldr	r1, [pc, #176]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	4928      	ldr	r1, [pc, #160]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4922      	ldr	r1, [pc, #136]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	491e      	ldr	r1, [pc, #120]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4918      	ldr	r1, [pc, #96]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003316:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	43db      	mvns	r3, r3
 800331e:	4914      	ldr	r1, [pc, #80]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 8003320:	4013      	ands	r3, r2
 8003322:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d021      	beq.n	8003374 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	60cb      	str	r3, [r1, #12]
 800333c:	e021      	b.n	8003382 <HAL_GPIO_Init+0x2e2>
 800333e:	bf00      	nop
 8003340:	10320000 	.word	0x10320000
 8003344:	10310000 	.word	0x10310000
 8003348:	10220000 	.word	0x10220000
 800334c:	10210000 	.word	0x10210000
 8003350:	10120000 	.word	0x10120000
 8003354:	10110000 	.word	0x10110000
 8003358:	40021000 	.word	0x40021000
 800335c:	40010000 	.word	0x40010000
 8003360:	40010800 	.word	0x40010800
 8003364:	40010c00 	.word	0x40010c00
 8003368:	40011000 	.word	0x40011000
 800336c:	40011400 	.word	0x40011400
 8003370:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_GPIO_Init+0x304>)
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	43db      	mvns	r3, r3
 800337c:	4909      	ldr	r1, [pc, #36]	; (80033a4 <HAL_GPIO_Init+0x304>)
 800337e:	4013      	ands	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	3301      	adds	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f47f ae8e 	bne.w	80030b4 <HAL_GPIO_Init+0x14>
  }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	372c      	adds	r7, #44	; 0x2c
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033da:	b08b      	sub	sp, #44	; 0x2c
 80033dc:	af06      	add	r7, sp, #24
 80033de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0fd      	b.n	80035e6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f006 fe08 	bl	800a014 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2203      	movs	r2, #3
 8003408:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f002 fb3b 	bl	8005a8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	687e      	ldr	r6, [r7, #4]
 800341e:	466d      	mov	r5, sp
 8003420:	f106 0410 	add.w	r4, r6, #16
 8003424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	1d33      	adds	r3, r6, #4
 800342e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003430:	6838      	ldr	r0, [r7, #0]
 8003432:	f002 fb05 	bl	8005a40 <USB_CoreInit>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ce      	b.n	80035e6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f002 fb36 	bl	8005ac0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e04c      	b.n	80034f4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	3301      	adds	r3, #1
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	b298      	uxth	r0, r3
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	3336      	adds	r3, #54	; 0x36
 8003498:	4602      	mov	r2, r0
 800349a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	3303      	adds	r3, #3
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	440b      	add	r3, r1
 80034c0:	3338      	adds	r3, #56	; 0x38
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	333c      	adds	r3, #60	; 0x3c
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	3340      	adds	r3, #64	; 0x40
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	3301      	adds	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3ad      	bcc.n	800345a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e044      	b.n	800358e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	440b      	add	r3, r1
 8003554:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	3301      	adds	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d3b5      	bcc.n	8003504 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	687e      	ldr	r6, [r7, #4]
 80035a0:	466d      	mov	r5, sp
 80035a2:	f106 0410 	add.w	r4, r6, #16
 80035a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	602b      	str	r3, [r5, #0]
 80035ae:	1d33      	adds	r3, r6, #4
 80035b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	f002 fa90 	bl	8005ad8 <USB_DevInit>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00d      	b.n	80035e6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f004 ff42 	bl	8008468 <USB_DevDisconnect>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_PCD_Start+0x16>
 8003600:	2302      	movs	r3, #2
 8003602:	e016      	b.n	8003632 <HAL_PCD_Start+0x44>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f002 fa25 	bl	8005a60 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003616:	2101      	movs	r1, #1
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f006 ff52 	bl	800a4c2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f004 ff16 	bl	8008454 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b088      	sub	sp, #32
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f004 ff18 	bl	800847c <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003656:	d102      	bne.n	800365e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fb48 	bl	8003cee <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 ff0a 	bl	800847c <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003672:	d112      	bne.n	800369a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003686:	b292      	uxth	r2, r2
 8003688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f006 fd3c 	bl	800a10a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003692:	2100      	movs	r1, #0
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f923 	bl	80038e0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 feec 	bl	800847c <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ae:	d10b      	bne.n	80036c8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036c2:	b292      	uxth	r2, r2
 80036c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 fed5 	bl	800847c <USB_ReadInterrupts>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036dc:	d10b      	bne.n	80036f6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f0:	b292      	uxth	r2, r2
 80036f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 febe 	bl	800847c <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370a:	d126      	bne.n	800375a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0204 	bic.w	r2, r2, #4
 800371e:	b292      	uxth	r2, r2
 8003720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0208 	bic.w	r2, r2, #8
 8003736:	b292      	uxth	r2, r2
 8003738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f006 fd1d 	bl	800a17c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800374a:	b29a      	uxth	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003754:	b292      	uxth	r2, r2
 8003756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f004 fe8c 	bl	800847c <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376e:	f040 8082 	bne.w	8003876 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003772:	2300      	movs	r3, #0
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e010      	b.n	800379a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	7ffb      	ldrb	r3, [r7, #31]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	441a      	add	r2, r3
 8003784:	7ffb      	ldrb	r3, [r7, #31]
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	b292      	uxth	r2, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	3320      	adds	r3, #32
 800378e:	443b      	add	r3, r7
 8003790:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003794:	7ffb      	ldrb	r3, [r7, #31]
 8003796:	3301      	adds	r3, #1
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	2b07      	cmp	r3, #7
 800379e:	d9eb      	bls.n	8003778 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	b292      	uxth	r2, r2
 80037b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	b292      	uxth	r2, r2
 80037cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037d0:	bf00      	nop
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f6      	beq.n	80037d2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f6:	b292      	uxth	r2, r2
 80037f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e00f      	b.n	8003822 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	4611      	mov	r1, r2
 800380a:	7ffa      	ldrb	r2, [r7, #31]
 800380c:	0092      	lsls	r2, r2, #2
 800380e:	440a      	add	r2, r1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	3320      	adds	r3, #32
 8003814:	443b      	add	r3, r7
 8003816:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800381a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800381c:	7ffb      	ldrb	r3, [r7, #31]
 800381e:	3301      	adds	r3, #1
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	2b07      	cmp	r3, #7
 8003826:	d9ec      	bls.n	8003802 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003830:	b29a      	uxth	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	b292      	uxth	r2, r2
 800383c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003852:	b292      	uxth	r2, r2
 8003854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0204 	orr.w	r2, r2, #4
 800386a:	b292      	uxth	r2, r2
 800386c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f006 fc69 	bl	800a148 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f004 fdfe 	bl	800847c <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388a:	d10e      	bne.n	80038aa <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800389e:	b292      	uxth	r2, r2
 80038a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f006 fc22 	bl	800a0ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f004 fde4 	bl	800847c <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d10b      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d2:	b292      	uxth	r2, r2
 80038d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80038d8:	bf00      	nop
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_SetAddress+0x1a>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e013      	b.n	8003922 <HAL_PCD_SetAddress+0x42>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f004 fd8b 	bl	800842e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	4608      	mov	r0, r1
 8003934:	4611      	mov	r1, r2
 8003936:	461a      	mov	r2, r3
 8003938:	4603      	mov	r3, r0
 800393a:	70fb      	strb	r3, [r7, #3]
 800393c:	460b      	mov	r3, r1
 800393e:	803b      	strh	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800394c:	2b00      	cmp	r3, #0
 800394e:	da0e      	bge.n	800396e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	705a      	strb	r2, [r3, #1]
 800396c:	e00e      	b.n	800398c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 0207 	and.w	r2, r3, #7
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003998:	883a      	ldrh	r2, [r7, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	78ba      	ldrb	r2, [r7, #2]
 80039a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039b6:	78bb      	ldrb	r3, [r7, #2]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d102      	bne.n	80039c2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_PCD_EP_Open+0xa6>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e00e      	b.n	80039ee <HAL_PCD_EP_Open+0xc4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	4618      	mov	r0, r3
 80039e0:	f002 f89a 	bl	8005b18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80039ec:	7afb      	ldrb	r3, [r7, #11]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da0e      	bge.n	8003a28 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	705a      	strb	r2, [r3, #1]
 8003a26:	e00e      	b.n	8003a46 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 0207 	and.w	r2, r3, #7
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_PCD_EP_Close+0x6a>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e00e      	b.n	8003a7e <HAL_PCD_EP_Close+0x88>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f002 fbbc 	bl	80061ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	460b      	mov	r3, r1
 8003a94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	f003 0207 	and.w	r2, r3, #7
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ad2:	7afb      	ldrb	r3, [r7, #11]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6979      	ldr	r1, [r7, #20]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f002 fd6e 	bl	80065c4 <USB_EPStartXfer>
 8003ae8:	e005      	b.n	8003af6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f002 fd67 	bl	80065c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b10:	7afb      	ldrb	r3, [r7, #11]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b58:	7afb      	ldrb	r3, [r7, #11]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6979      	ldr	r1, [r7, #20]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f002 fd2b 	bl	80065c4 <USB_EPStartXfer>
 8003b6e:	e005      	b.n	8003b7c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6979      	ldr	r1, [r7, #20]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 fd24 	bl	80065c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 0207 	and.w	r2, r3, #7
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d901      	bls.n	8003ba4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e04c      	b.n	8003c3e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da0e      	bge.n	8003bca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	705a      	strb	r2, [r3, #1]
 8003bc8:	e00c      	b.n	8003be4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_PCD_EP_SetStall+0x7e>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e01c      	b.n	8003c3e <HAL_PCD_EP_SetStall+0xb8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68f9      	ldr	r1, [r7, #12]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f004 fb0e 	bl	8008234 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f004 fc33 	bl	800849a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d901      	bls.n	8003c64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e040      	b.n	8003ce6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	da0e      	bge.n	8003c8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	705a      	strb	r2, [r3, #1]
 8003c88:	e00e      	b.n	8003ca8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0207 	and.w	r2, r3, #7
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_PCD_EP_ClrStall+0x82>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e00e      	b.n	8003ce6 <HAL_PCD_EP_ClrStall+0xa0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68f9      	ldr	r1, [r7, #12]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 fafc 	bl	80082d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b08e      	sub	sp, #56	; 0x38
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cf6:	e2ec      	b.n	80042d2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d00:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003d0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 8161 	bne.w	8003fda <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d152      	bne.n	8003dc8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	81fb      	strh	r3, [r7, #14]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	89fb      	ldrh	r3, [r7, #14]
 8003d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3328      	adds	r3, #40	; 0x28
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4413      	add	r3, r2
 8003d60:	3302      	adds	r3, #2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	441a      	add	r2, r3
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d86:	2100      	movs	r1, #0
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f006 f996 	bl	800a0ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 829b 	beq.w	80042d2 <PCD_EP_ISR_Handler+0x5e4>
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 8296 	bne.w	80042d2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b292      	uxth	r2, r2
 8003dba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dc6:	e284      	b.n	80042d2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d034      	beq.n	8003e4c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	3306      	adds	r3, #6
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f004 fb8a 	bl	800853a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e32:	4013      	ands	r3, r2
 8003e34:	823b      	strh	r3, [r7, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	8a3a      	ldrh	r2, [r7, #16]
 8003e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e40:	b292      	uxth	r2, r2
 8003e42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f006 f90b 	bl	800a060 <HAL_PCD_SetupStageCallback>
 8003e4a:	e242      	b.n	80042d2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f280 823e 	bge.w	80042d2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e62:	4013      	ands	r3, r2
 8003e64:	83bb      	strh	r3, [r7, #28]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	8bba      	ldrh	r2, [r7, #28]
 8003e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e70:	b292      	uxth	r2, r2
 8003e72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	3306      	adds	r3, #6
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d019      	beq.n	8003edc <PCD_EP_ISR_Handler+0x1ee>
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d015      	beq.n	8003edc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	6959      	ldr	r1, [r3, #20]
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f004 fb3a 	bl	800853a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	441a      	add	r2, r3
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f006 f8d4 	bl	800a084 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f040 81f2 	bne.w	80042d2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	4413      	add	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d112      	bne.n	8003f3c <PCD_EP_ISR_Handler+0x24e>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	801a      	strh	r2, [r3, #0]
 8003f3a:	e02f      	b.n	8003f9c <PCD_EP_ISR_Handler+0x2ae>
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b3e      	cmp	r3, #62	; 0x3e
 8003f42:	d813      	bhi.n	8003f6c <PCD_EP_ISR_Handler+0x27e>
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <PCD_EP_ISR_Handler+0x270>
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	029b      	lsls	r3, r3, #10
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	801a      	strh	r2, [r3, #0]
 8003f6a:	e017      	b.n	8003f9c <PCD_EP_ISR_Handler+0x2ae>
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	633b      	str	r3, [r7, #48]	; 0x30
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <PCD_EP_ISR_Handler+0x298>
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	3b01      	subs	r3, #1
 8003f84:	633b      	str	r3, [r7, #48]	; 0x30
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	029b      	lsls	r3, r3, #10
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fac:	827b      	strh	r3, [r7, #18]
 8003fae:	8a7b      	ldrh	r3, [r7, #18]
 8003fb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003fb4:	827b      	strh	r3, [r7, #18]
 8003fb6:	8a7b      	ldrh	r3, [r7, #18]
 8003fb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fbc:	827b      	strh	r3, [r7, #18]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	8a7b      	ldrh	r3, [r7, #18]
 8003fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	8013      	strh	r3, [r2, #0]
 8003fd8:	e17b      	b.n	80042d2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f280 80ea 	bge.w	80041ca <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	b29a      	uxth	r2, r3
 8004008:	f640 738f 	movw	r3, #3983	; 0xf8f
 800400c:	4013      	ands	r3, r2
 800400e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004020:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004024:	b292      	uxth	r2, r2
 8004026:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004028:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	7b1b      	ldrb	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d122      	bne.n	800408c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404e:	b29b      	uxth	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	3306      	adds	r3, #6
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004070:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8087 	beq.w	8004186 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	6959      	ldr	r1, [r3, #20]
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	88da      	ldrh	r2, [r3, #6]
 8004084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004086:	f004 fa58 	bl	800853a <USB_ReadPMA>
 800408a:	e07c      	b.n	8004186 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	78db      	ldrb	r3, [r3, #3]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d108      	bne.n	80040a6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004094:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004096:	461a      	mov	r2, r3
 8004098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f927 	bl	80042ee <HAL_PCD_EP_DB_Receive>
 80040a0:	4603      	mov	r3, r0
 80040a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040a4:	e06f      	b.n	8004186 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d021      	beq.n	8004144 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	3302      	adds	r3, #2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004128:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800412a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02a      	beq.n	8004186 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	6959      	ldr	r1, [r3, #20]
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	891a      	ldrh	r2, [r3, #8]
 800413c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800413e:	f004 f9fc 	bl	800853a <USB_ReadPMA>
 8004142:	e020      	b.n	8004186 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414c:	b29b      	uxth	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	3306      	adds	r3, #6
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800416e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	6959      	ldr	r1, [r3, #20]
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	895a      	ldrh	r2, [r3, #10]
 8004180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004182:	f004 f9da 	bl	800853a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800418c:	441a      	add	r2, r3
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004198:	441a      	add	r2, r3
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <PCD_EP_ISR_Handler+0x4c2>
 80041a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d206      	bcs.n	80041be <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f005 ff64 	bl	800a084 <HAL_PCD_DataOutStageCallback>
 80041bc:	e005      	b.n	80041ca <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f002 f9fd 	bl	80065c4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d07e      	beq.n	80042d2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80041d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	843b      	strh	r3, [r7, #32]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	441a      	add	r2, r3
 8004212:	8c3b      	ldrh	r3, [r7, #32]
 8004214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800421c:	b29b      	uxth	r3, r3
 800421e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	78db      	ldrb	r3, [r3, #3]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d00c      	beq.n	8004242 <PCD_EP_ISR_Handler+0x554>
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	78db      	ldrb	r3, [r3, #3]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004234:	2b02      	cmp	r3, #2
 8004236:	d146      	bne.n	80042c6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004238:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d141      	bne.n	80042c6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	3302      	adds	r3, #2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	8bfb      	ldrh	r3, [r7, #30]
 8004272:	429a      	cmp	r2, r3
 8004274:	d906      	bls.n	8004284 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	8bfb      	ldrh	r3, [r7, #30]
 800427c:	1ad2      	subs	r2, r2, r3
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	619a      	str	r2, [r3, #24]
 8004282:	e002      	b.n	800428a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	2200      	movs	r2, #0
 8004288:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	4619      	mov	r1, r3
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f005 ff0e 	bl	800a0ba <HAL_PCD_DataInStageCallback>
 800429e:	e018      	b.n	80042d2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	441a      	add	r2, r3
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	8bfb      	ldrh	r3, [r7, #30]
 80042b2:	441a      	add	r2, r3
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042be:	4618      	mov	r0, r3
 80042c0:	f002 f980 	bl	80065c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80042c4:	e005      	b.n	80042d2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042c8:	461a      	mov	r2, r3
 80042ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f91b 	bl	8004508 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042da:	b29b      	uxth	r3, r3
 80042dc:	b21b      	sxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f6ff ad0a 	blt.w	8003cf8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3738      	adds	r7, #56	; 0x38
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d07e      	beq.n	8004404 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430e:	b29b      	uxth	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	3302      	adds	r3, #2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800432e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	699a      	ldr	r2, [r3, #24]
 8004334:	8b7b      	ldrh	r3, [r7, #26]
 8004336:	429a      	cmp	r2, r3
 8004338:	d306      	bcc.n	8004348 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	8b7b      	ldrh	r3, [r7, #26]
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	619a      	str	r2, [r3, #24]
 8004346:	e002      	b.n	800434e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d123      	bne.n	800439e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	833b      	strh	r3, [r7, #24]
 8004372:	8b3b      	ldrh	r3, [r7, #24]
 8004374:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004378:	833b      	strh	r3, [r7, #24]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	8b3b      	ldrh	r3, [r7, #24]
 800438a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439a:	b29b      	uxth	r3, r3
 800439c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01f      	beq.n	80043e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	82fb      	strh	r3, [r7, #22]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	8afb      	ldrh	r3, [r7, #22]
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043e8:	8b7b      	ldrh	r3, [r7, #26]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8087 	beq.w	80044fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6959      	ldr	r1, [r3, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	891a      	ldrh	r2, [r3, #8]
 80043fc:	8b7b      	ldrh	r3, [r7, #26]
 80043fe:	f004 f89c 	bl	800853a <USB_ReadPMA>
 8004402:	e07c      	b.n	80044fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800440c:	b29b      	uxth	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	3306      	adds	r3, #6
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	8b7b      	ldrh	r3, [r7, #26]
 8004434:	429a      	cmp	r2, r3
 8004436:	d306      	bcc.n	8004446 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	8b7b      	ldrh	r3, [r7, #26]
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	619a      	str	r2, [r3, #24]
 8004444:	e002      	b.n	800444c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2200      	movs	r2, #0
 800444a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d123      	bne.n	800449c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	83fb      	strh	r3, [r7, #30]
 8004470:	8bfb      	ldrh	r3, [r7, #30]
 8004472:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004476:	83fb      	strh	r3, [r7, #30]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	8bfb      	ldrh	r3, [r7, #30]
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11f      	bne.n	80044e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c0:	83bb      	strh	r3, [r7, #28]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	8bbb      	ldrh	r3, [r7, #28]
 80044d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044e6:	8b7b      	ldrh	r3, [r7, #26]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6959      	ldr	r1, [r3, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	895a      	ldrh	r2, [r3, #10]
 80044f8:	8b7b      	ldrh	r3, [r7, #26]
 80044fa:	f004 f81e 	bl	800853a <USB_ReadPMA>
    }
  }

  return count;
 80044fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b0a2      	sub	sp, #136	; 0x88
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 81c7 	beq.w	80048b0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	3302      	adds	r3, #2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800454a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004556:	429a      	cmp	r2, r3
 8004558:	d907      	bls.n	800456a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	619a      	str	r2, [r3, #24]
 8004568:	e002      	b.n	8004570 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2200      	movs	r2, #0
 800456e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 80b9 	bne.w	80046ec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d126      	bne.n	80045d0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004590:	b29b      	uxth	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	4413      	add	r3, r2
 8004598:	62bb      	str	r3, [r7, #40]	; 0x28
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	011a      	lsls	r2, r3, #4
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	4413      	add	r3, r2
 80045a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	801a      	strh	r2, [r3, #0]
 80045ce:	e01a      	b.n	8004606 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	785b      	ldrb	r3, [r3, #1]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d116      	bne.n	8004606 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	633b      	str	r3, [r7, #48]	; 0x30
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	4413      	add	r3, r2
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	011a      	lsls	r2, r3, #4
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	4413      	add	r3, r2
 80045fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	2200      	movs	r2, #0
 8004604:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	623b      	str	r3, [r7, #32]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d126      	bne.n	8004662 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	4413      	add	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	011a      	lsls	r2, r3, #4
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4413      	add	r3, r2
 8004636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004646:	b29a      	uxth	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465a:	b29a      	uxth	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	e017      	b.n	8004692 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d113      	bne.n	8004692 <HAL_PCD_EP_DB_Transmit+0x18a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	4413      	add	r3, r2
 800467a:	623b      	str	r3, [r7, #32]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	011a      	lsls	r2, r3, #4
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	4413      	add	r3, r2
 8004686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	2200      	movs	r2, #0
 8004690:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f005 fd0e 	bl	800a0ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 82d4 	beq.w	8004c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c4:	827b      	strh	r3, [r7, #18]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	441a      	add	r2, r3
 80046d4:	8a7b      	ldrh	r3, [r7, #18]
 80046d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	8013      	strh	r3, [r2, #0]
 80046ea:	e2b2      	b.n	8004c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d021      	beq.n	800473a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004710:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	b29b      	uxth	r3, r3
 8004738:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 8286 	bne.w	8004c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800474e:	441a      	add	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800475c:	441a      	add	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d309      	bcc.n	8004782 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	621a      	str	r2, [r3, #32]
 8004780:	e015      	b.n	80047ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d107      	bne.n	800479a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800478a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800478e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004798:	e009      	b.n	80047ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d155      	bne.n	8004862 <HAL_PCD_EP_DB_Transmit+0x35a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	4413      	add	r3, r2
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	011a      	lsls	r2, r3, #4
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	4413      	add	r3, r2
 80047d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d112      	bne.n	800480a <HAL_PCD_EP_DB_Transmit+0x302>
 80047e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004802:	b29a      	uxth	r2, r3
 8004804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	e047      	b.n	800489a <HAL_PCD_EP_DB_Transmit+0x392>
 800480a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800480c:	2b3e      	cmp	r3, #62	; 0x3e
 800480e:	d811      	bhi.n	8004834 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	64bb      	str	r3, [r7, #72]	; 0x48
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004822:	3301      	adds	r3, #1
 8004824:	64bb      	str	r3, [r7, #72]	; 0x48
 8004826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004828:	b29b      	uxth	r3, r3
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	b29a      	uxth	r2, r3
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	e032      	b.n	800489a <HAL_PCD_EP_DB_Transmit+0x392>
 8004834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	64bb      	str	r3, [r7, #72]	; 0x48
 800483a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <HAL_PCD_EP_DB_Transmit+0x342>
 8004844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004846:	3b01      	subs	r3, #1
 8004848:	64bb      	str	r3, [r7, #72]	; 0x48
 800484a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484c:	b29b      	uxth	r3, r3
 800484e:	029b      	lsls	r3, r3, #10
 8004850:	b29b      	uxth	r3, r3
 8004852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800485a:	b29a      	uxth	r2, r3
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	e01b      	b.n	800489a <HAL_PCD_EP_DB_Transmit+0x392>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d117      	bne.n	800489a <HAL_PCD_EP_DB_Transmit+0x392>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	643b      	str	r3, [r7, #64]	; 0x40
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800487e:	4413      	add	r3, r2
 8004880:	643b      	str	r3, [r7, #64]	; 0x40
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	011a      	lsls	r2, r3, #4
 8004888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488a:	4413      	add	r3, r2
 800488c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004894:	b29a      	uxth	r2, r3
 8004896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004898:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6959      	ldr	r1, [r3, #20]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	891a      	ldrh	r2, [r3, #8]
 80048a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f003 fe01 	bl	80084b0 <USB_WritePMA>
 80048ae:	e1d0      	b.n	8004c52 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4413      	add	r3, r2
 80048c4:	3306      	adds	r3, #6
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d307      	bcc.n	80048f8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048f0:	1ad2      	subs	r2, r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	619a      	str	r2, [r3, #24]
 80048f6:	e002      	b.n	80048fe <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 80c4 	bne.w	8004a90 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d126      	bne.n	800495e <HAL_PCD_EP_DB_Transmit+0x456>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800491e:	b29b      	uxth	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004924:	4413      	add	r3, r2
 8004926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	011a      	lsls	r2, r3, #4
 800492e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004930:	4413      	add	r3, r2
 8004932:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004936:	66bb      	str	r3, [r7, #104]	; 0x68
 8004938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004942:	b29a      	uxth	r2, r3
 8004944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004956:	b29a      	uxth	r2, r3
 8004958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	e01a      	b.n	8004994 <HAL_PCD_EP_DB_Transmit+0x48c>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d116      	bne.n	8004994 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	677b      	str	r3, [r7, #116]	; 0x74
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497a:	4413      	add	r3, r2
 800497c:	677b      	str	r3, [r7, #116]	; 0x74
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	011a      	lsls	r2, r3, #4
 8004984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004986:	4413      	add	r3, r2
 8004988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800498c:	673b      	str	r3, [r7, #112]	; 0x70
 800498e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004990:	2200      	movs	r2, #0
 8004992:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	67bb      	str	r3, [r7, #120]	; 0x78
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d12f      	bne.n	8004a02 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049ba:	4413      	add	r3, r2
 80049bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	011a      	lsls	r2, r3, #4
 80049c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049ca:	4413      	add	r3, r2
 80049cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049e6:	801a      	strh	r2, [r3, #0]
 80049e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	e017      	b.n	8004a32 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d113      	bne.n	8004a32 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a18:	4413      	add	r3, r2
 8004a1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	011a      	lsls	r2, r3, #4
 8004a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a2e:	2200      	movs	r2, #0
 8004a30:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	4619      	mov	r1, r3
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f005 fb3e 	bl	800a0ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 8104 	bne.w	8004c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
 8004a8e:	e0e0      	b.n	8004c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d121      	bne.n	8004ade <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 80b4 	bne.w	8004c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004af2:	441a      	add	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b00:	441a      	add	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6a1a      	ldr	r2, [r3, #32]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d309      	bcc.n	8004b26 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6a1a      	ldr	r2, [r3, #32]
 8004b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	621a      	str	r2, [r3, #32]
 8004b24:	e015      	b.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d107      	bne.n	8004b3e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b3c:	e009      	b.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2200      	movs	r2, #0
 8004b48:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	667b      	str	r3, [r7, #100]	; 0x64
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d155      	bne.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x704>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b74:	4413      	add	r3, r2
 8004b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	011a      	lsls	r2, r3, #4
 8004b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b80:	4413      	add	r3, r2
 8004b82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d112      	bne.n	8004bb4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e044      	b.n	8004c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8004bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb8:	d811      	bhi.n	8004bde <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8004bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bcc:	3301      	adds	r3, #1
 8004bce:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	029b      	lsls	r3, r3, #10
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bda:	801a      	strh	r2, [r3, #0]
 8004bdc:	e02f      	b.n	8004c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8004bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	657b      	str	r3, [r7, #84]	; 0x54
 8004be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e018      	b.n	8004c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d114      	bne.n	8004c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c22:	4413      	add	r3, r2
 8004c24:	667b      	str	r3, [r7, #100]	; 0x64
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	011a      	lsls	r2, r3, #4
 8004c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c2e:	4413      	add	r3, r2
 8004c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c34:	663b      	str	r3, [r7, #96]	; 0x60
 8004c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6959      	ldr	r1, [r3, #20]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	895a      	ldrh	r2, [r3, #10]
 8004c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f003 fc2f 	bl	80084b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6c:	823b      	strh	r3, [r7, #16]
 8004c6e:	8a3b      	ldrh	r3, [r7, #16]
 8004c70:	f083 0310 	eor.w	r3, r3, #16
 8004c74:	823b      	strh	r3, [r7, #16]
 8004c76:	8a3b      	ldrh	r3, [r7, #16]
 8004c78:	f083 0320 	eor.w	r3, r3, #32
 8004c7c:	823b      	strh	r3, [r7, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	441a      	add	r2, r3
 8004c8c:	8a3b      	ldrh	r3, [r7, #16]
 8004c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3788      	adds	r7, #136	; 0x88
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	817b      	strh	r3, [r7, #10]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cbe:	897b      	ldrh	r3, [r7, #10]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cca:	897b      	ldrh	r3, [r7, #10]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e009      	b.n	8004cf6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ce2:	897a      	ldrh	r2, [r7, #10]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004cf6:	893b      	ldrh	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	80da      	strh	r2, [r3, #6]
 8004d0a:	e00b      	b.n	8004d24 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e272      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8087 	beq.w	8004e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d50:	4b92      	ldr	r3, [pc, #584]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 030c 	and.w	r3, r3, #12
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d00c      	beq.n	8004d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d5c:	4b8f      	ldr	r3, [pc, #572]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 030c 	and.w	r3, r3, #12
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d112      	bne.n	8004d8e <HAL_RCC_OscConfig+0x5e>
 8004d68:	4b8c      	ldr	r3, [pc, #560]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d10b      	bne.n	8004d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d76:	4b89      	ldr	r3, [pc, #548]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d06c      	beq.n	8004e5c <HAL_RCC_OscConfig+0x12c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d168      	bne.n	8004e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e24c      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x76>
 8004d98:	4b80      	ldr	r3, [pc, #512]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a7f      	ldr	r2, [pc, #508]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	e02e      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x98>
 8004dae:	4b7b      	ldr	r3, [pc, #492]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7a      	ldr	r2, [pc, #488]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b78      	ldr	r3, [pc, #480]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a77      	ldr	r2, [pc, #476]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e01d      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0xbc>
 8004dd2:	4b72      	ldr	r3, [pc, #456]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a71      	ldr	r2, [pc, #452]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6e      	ldr	r2, [pc, #440]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004dec:	4b6b      	ldr	r3, [pc, #428]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6a      	ldr	r2, [pc, #424]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	4b68      	ldr	r3, [pc, #416]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a67      	ldr	r2, [pc, #412]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d013      	beq.n	8004e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fd f826 	bl	8001e5c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7fd f822 	bl	8001e5c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e200      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	4b5d      	ldr	r3, [pc, #372]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0xe4>
 8004e32:	e014      	b.n	8004e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7fd f812 	bl	8001e5c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e3c:	f7fd f80e 	bl	8001e5c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	; 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e1ec      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x10c>
 8004e5a:	e000      	b.n	8004e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d063      	beq.n	8004f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e6a:	4b4c      	ldr	r3, [pc, #304]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e76:	4b49      	ldr	r3, [pc, #292]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d11c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x18c>
 8004e82:	4b46      	ldr	r3, [pc, #280]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d116      	bne.n	8004ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e8e:	4b43      	ldr	r3, [pc, #268]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x176>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e1c0      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea6:	4b3d      	ldr	r3, [pc, #244]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4939      	ldr	r1, [pc, #228]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eba:	e03a      	b.n	8004f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d020      	beq.n	8004f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec4:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fc ffc7 	bl	8001e5c <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed2:	f7fc ffc3 	bl	8001e5c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e1a1      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef0:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4927      	ldr	r1, [pc, #156]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	600b      	str	r3, [r1, #0]
 8004f04:	e015      	b.n	8004f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f06:	4b26      	ldr	r3, [pc, #152]	; (8004fa0 <HAL_RCC_OscConfig+0x270>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fc ffa6 	bl	8001e5c <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f14:	f7fc ffa2 	bl	8001e5c <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e180      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d03a      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d019      	beq.n	8004f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f46:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <HAL_RCC_OscConfig+0x274>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4c:	f7fc ff86 	bl	8001e5c <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f54:	f7fc ff82 	bl	8001e5c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e160      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f72:	2001      	movs	r0, #1
 8004f74:	f000 fad8 	bl	8005528 <RCC_Delay>
 8004f78:	e01c      	b.n	8004fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f80:	f7fc ff6c 	bl	8001e5c <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f86:	e00f      	b.n	8004fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f88:	f7fc ff68 	bl	8001e5c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d908      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e146      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	42420000 	.word	0x42420000
 8004fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	4b92      	ldr	r3, [pc, #584]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e9      	bne.n	8004f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80a6 	beq.w	800510e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b8b      	ldr	r3, [pc, #556]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10d      	bne.n	8004fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	4b88      	ldr	r3, [pc, #544]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4a87      	ldr	r2, [pc, #540]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	61d3      	str	r3, [r2, #28]
 8004fde:	4b85      	ldr	r3, [pc, #532]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fee:	4b82      	ldr	r3, [pc, #520]	; (80051f8 <HAL_RCC_OscConfig+0x4c8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d118      	bne.n	800502c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	; (80051f8 <HAL_RCC_OscConfig+0x4c8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7e      	ldr	r2, [pc, #504]	; (80051f8 <HAL_RCC_OscConfig+0x4c8>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005006:	f7fc ff29 	bl	8001e5c <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500e:	f7fc ff25 	bl	8001e5c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b64      	cmp	r3, #100	; 0x64
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e103      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005020:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <HAL_RCC_OscConfig+0x4c8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0x312>
 8005034:	4b6f      	ldr	r3, [pc, #444]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	4a6e      	ldr	r2, [pc, #440]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6213      	str	r3, [r2, #32]
 8005040:	e02d      	b.n	800509e <HAL_RCC_OscConfig+0x36e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x334>
 800504a:	4b6a      	ldr	r3, [pc, #424]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4a69      	ldr	r2, [pc, #420]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6213      	str	r3, [r2, #32]
 8005056:	4b67      	ldr	r3, [pc, #412]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4a66      	ldr	r2, [pc, #408]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	6213      	str	r3, [r2, #32]
 8005062:	e01c      	b.n	800509e <HAL_RCC_OscConfig+0x36e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b05      	cmp	r3, #5
 800506a:	d10c      	bne.n	8005086 <HAL_RCC_OscConfig+0x356>
 800506c:	4b61      	ldr	r3, [pc, #388]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4a60      	ldr	r2, [pc, #384]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005072:	f043 0304 	orr.w	r3, r3, #4
 8005076:	6213      	str	r3, [r2, #32]
 8005078:	4b5e      	ldr	r3, [pc, #376]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4a5d      	ldr	r2, [pc, #372]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	6213      	str	r3, [r2, #32]
 8005084:	e00b      	b.n	800509e <HAL_RCC_OscConfig+0x36e>
 8005086:	4b5b      	ldr	r3, [pc, #364]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	4a5a      	ldr	r2, [pc, #360]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	6213      	str	r3, [r2, #32]
 8005092:	4b58      	ldr	r3, [pc, #352]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4a57      	ldr	r2, [pc, #348]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d015      	beq.n	80050d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a6:	f7fc fed9 	bl	8001e5c <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ae:	f7fc fed5 	bl	8001e5c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050bc:	4293      	cmp	r3, r2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e0b1      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	4b4b      	ldr	r3, [pc, #300]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ee      	beq.n	80050ae <HAL_RCC_OscConfig+0x37e>
 80050d0:	e014      	b.n	80050fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d2:	f7fc fec3 	bl	8001e5c <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d8:	e00a      	b.n	80050f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7fc febf 	bl	8001e5c <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e09b      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f0:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ee      	bne.n	80050da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005102:	4b3c      	ldr	r3, [pc, #240]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	4a3b      	ldr	r2, [pc, #236]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8087 	beq.w	8005226 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005118:	4b36      	ldr	r3, [pc, #216]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d061      	beq.n	80051e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d146      	bne.n	80051ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512c:	4b33      	ldr	r3, [pc, #204]	; (80051fc <HAL_RCC_OscConfig+0x4cc>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7fc fe93 	bl	8001e5c <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513a:	f7fc fe8f 	bl	8001e5c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e06d      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514c:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005160:	d108      	bne.n	8005174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	4921      	ldr	r1, [pc, #132]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005174:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a19      	ldr	r1, [r3, #32]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	430b      	orrs	r3, r1
 8005186:	491b      	ldr	r1, [pc, #108]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCC_OscConfig+0x4cc>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005192:	f7fc fe63 	bl	8001e5c <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519a:	f7fc fe5f 	bl	8001e5c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e03d      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x46a>
 80051b8:	e035      	b.n	8005226 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <HAL_RCC_OscConfig+0x4cc>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fc fe4c 	bl	8001e5c <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fc fe48 	bl	8001e5c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e026      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x498>
 80051e6:	e01e      	b.n	8005226 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e019      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40007000 	.word	0x40007000
 80051fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_RCC_OscConfig+0x500>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	429a      	cmp	r2, r3
 8005212:	d106      	bne.n	8005222 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d001      	beq.n	8005226 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000

08005234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0d0      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005248:	4b6a      	ldr	r3, [pc, #424]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d910      	bls.n	8005278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b67      	ldr	r3, [pc, #412]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 0207 	bic.w	r2, r3, #7
 800525e:	4965      	ldr	r1, [pc, #404]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b63      	ldr	r3, [pc, #396]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0b8      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d020      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005290:	4b59      	ldr	r3, [pc, #356]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4a58      	ldr	r2, [pc, #352]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800529a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a8:	4b53      	ldr	r3, [pc, #332]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4a52      	ldr	r2, [pc, #328]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b4:	4b50      	ldr	r3, [pc, #320]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	494d      	ldr	r1, [pc, #308]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d040      	beq.n	8005354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	4b47      	ldr	r3, [pc, #284]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d115      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e07f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f2:	4b41      	ldr	r3, [pc, #260]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e073      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005302:	4b3d      	ldr	r3, [pc, #244]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e06b      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005312:	4b39      	ldr	r3, [pc, #228]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f023 0203 	bic.w	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4936      	ldr	r1, [pc, #216]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	4313      	orrs	r3, r2
 8005322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005324:	f7fc fd9a 	bl	8001e5c <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532a:	e00a      	b.n	8005342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532c:	f7fc fd96 	bl	8001e5c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e053      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	4b2d      	ldr	r3, [pc, #180]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f003 020c 	and.w	r2, r3, #12
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	429a      	cmp	r2, r3
 8005352:	d1eb      	bne.n	800532c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005354:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d210      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 0207 	bic.w	r2, r3, #7
 800536a:	4922      	ldr	r1, [pc, #136]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e032      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4916      	ldr	r1, [pc, #88]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ae:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	490e      	ldr	r1, [pc, #56]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053c2:	f000 f821 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	490a      	ldr	r1, [pc, #40]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	5ccb      	ldrb	r3, [r1, r3]
 80053d6:	fa22 f303 	lsr.w	r3, r2, r3
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <HAL_RCC_ClockConfig+0x1cc>)
 80053dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_RCC_ClockConfig+0x1d0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fcf8 	bl	8001dd8 <HAL_InitTick>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40022000 	.word	0x40022000
 80053f8:	40021000 	.word	0x40021000
 80053fc:	0800bb9c 	.word	0x0800bb9c
 8005400:	20000030 	.word	0x20000030
 8005404:	20000034 	.word	0x20000034

08005408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005408:	b490      	push	{r4, r7}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800540e:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005410:	1d3c      	adds	r4, r7, #4
 8005412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005418:	f240 2301 	movw	r3, #513	; 0x201
 800541c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005432:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b04      	cmp	r3, #4
 8005440:	d002      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x40>
 8005442:	2b08      	cmp	r3, #8
 8005444:	d003      	beq.n	800544e <HAL_RCC_GetSysClockFreq+0x46>
 8005446:	e02b      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005448:	4b1c      	ldr	r3, [pc, #112]	; (80054bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800544a:	623b      	str	r3, [r7, #32]
      break;
 800544c:	e02b      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	0c9b      	lsrs	r3, r3, #18
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	3328      	adds	r3, #40	; 0x28
 8005458:	443b      	add	r3, r7
 800545a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800545e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d012      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	0c5b      	lsrs	r3, r3, #17
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	3328      	adds	r3, #40	; 0x28
 8005476:	443b      	add	r3, r7
 8005478:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800547c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005482:	fb03 f202 	mul.w	r2, r3, r2
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
 800548e:	e004      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	4a0b      	ldr	r2, [pc, #44]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005494:	fb02 f303 	mul.w	r3, r2, r3
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	623b      	str	r3, [r7, #32]
      break;
 800549e:	e002      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80054a2:	623b      	str	r3, [r7, #32]
      break;
 80054a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054a6:	6a3b      	ldr	r3, [r7, #32]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3728      	adds	r7, #40	; 0x28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc90      	pop	{r4, r7}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	0800bb48 	.word	0x0800bb48
 80054b8:	40021000 	.word	0x40021000
 80054bc:	007a1200 	.word	0x007a1200
 80054c0:	003d0900 	.word	0x003d0900

080054c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c8:	4b02      	ldr	r3, [pc, #8]	; (80054d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr
 80054d4:	20000030 	.word	0x20000030

080054d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054dc:	f7ff fff2 	bl	80054c4 <HAL_RCC_GetHCLKFreq>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	4903      	ldr	r1, [pc, #12]	; (80054fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ee:	5ccb      	ldrb	r3, [r1, r3]
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40021000 	.word	0x40021000
 80054fc:	0800bbac 	.word	0x0800bbac

08005500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005504:	f7ff ffde 	bl	80054c4 <HAL_RCC_GetHCLKFreq>
 8005508:	4602      	mov	r2, r0
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	0adb      	lsrs	r3, r3, #11
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	4903      	ldr	r1, [pc, #12]	; (8005524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005516:	5ccb      	ldrb	r3, [r1, r3]
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800551c:	4618      	mov	r0, r3
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000
 8005524:	0800bbac 	.word	0x0800bbac

08005528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <RCC_Delay+0x34>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <RCC_Delay+0x38>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	0a5b      	lsrs	r3, r3, #9
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005544:	bf00      	nop
  }
  while (Delay --);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1e5a      	subs	r2, r3, #1
 800554a:	60fa      	str	r2, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f9      	bne.n	8005544 <RCC_Delay+0x1c>
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	20000030 	.word	0x20000030
 8005560:	10624dd3 	.word	0x10624dd3

08005564 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d07d      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005580:	2300      	movs	r3, #0
 8005582:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005584:	4b4f      	ldr	r3, [pc, #316]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10d      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005590:	4b4c      	ldr	r3, [pc, #304]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	4a4b      	ldr	r2, [pc, #300]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	61d3      	str	r3, [r2, #28]
 800559c:	4b49      	ldr	r3, [pc, #292]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ac:	4b46      	ldr	r3, [pc, #280]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d118      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b8:	4b43      	ldr	r3, [pc, #268]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a42      	ldr	r2, [pc, #264]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c4:	f7fc fc4a 	bl	8001e5c <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ca:	e008      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055cc:	f7fc fc46 	bl	8001e5c <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e06d      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055de:	4b3a      	ldr	r3, [pc, #232]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055ea:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d02e      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d027      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005608:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005610:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005618:	4b2c      	ldr	r3, [pc, #176]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800561e:	4a29      	ldr	r2, [pc, #164]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d014      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562e:	f7fc fc15 	bl	8001e5c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	e00a      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fc fc11 	bl	8001e5c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e036      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564c:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ee      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005658:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4917      	ldr	r1, [pc, #92]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	4313      	orrs	r3, r2
 8005668:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800566a:	7dfb      	ldrb	r3, [r7, #23]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005670:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005688:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	490b      	ldr	r1, [pc, #44]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	4313      	orrs	r3, r2
 8005698:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	4904      	ldr	r1, [pc, #16]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40007000 	.word	0x40007000
 80056cc:	42420440 	.word	0x42420440

080056d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e03f      	b.n	8005762 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc f9e4 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2224      	movs	r2, #36	; 0x24
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f905 	bl	8005924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b08a      	sub	sp, #40	; 0x28
 800576e:	af02      	add	r7, sp, #8
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b20      	cmp	r3, #32
 8005788:	d17c      	bne.n	8005884 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_UART_Transmit+0x2c>
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e075      	b.n	8005886 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Transmit+0x3e>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e06e      	b.n	8005886 <HAL_UART_Transmit+0x11c>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2221      	movs	r2, #33	; 0x21
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057be:	f7fc fb4d 	bl	8001e5c <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	88fa      	ldrh	r2, [r7, #6]
 80057c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	88fa      	ldrh	r2, [r7, #6]
 80057ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d8:	d108      	bne.n	80057ec <HAL_UART_Transmit+0x82>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e003      	b.n	80057f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057fc:	e02a      	b.n	8005854 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	2180      	movs	r1, #128	; 0x80
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f840 	bl	800588e <UART_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e036      	b.n	8005886 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10b      	bne.n	8005836 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800582c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	3302      	adds	r3, #2
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e007      	b.n	8005846 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1cf      	bne.n	80057fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2200      	movs	r2, #0
 8005866:	2140      	movs	r1, #64	; 0x40
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f810 	bl	800588e <UART_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	4613      	mov	r3, r2
 800589c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589e:	e02c      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d028      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0x30>
 80058ae:	f7fc fad5 	bl	8001e5c <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d21d      	bcs.n	80058fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e00f      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	429a      	cmp	r2, r3
 8005916:	d0c3      	beq.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800595e:	f023 030c 	bic.w	r3, r3, #12
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	430b      	orrs	r3, r1
 800596a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <UART_SetConfig+0x114>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d103      	bne.n	8005994 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800598c:	f7ff fdb8 	bl	8005500 <HAL_RCC_GetPCLK2Freq>
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	e002      	b.n	800599a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005994:	f7ff fda0 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 8005998:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009a      	lsls	r2, r3, #2
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b0:	4a22      	ldr	r2, [pc, #136]	; (8005a3c <UART_SetConfig+0x118>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	0119      	lsls	r1, r3, #4
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009a      	lsls	r2, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059d0:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <UART_SetConfig+0x118>)
 80059d2:	fba3 0302 	umull	r0, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	2064      	movs	r0, #100	; 0x64
 80059da:	fb00 f303 	mul.w	r3, r0, r3
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	3332      	adds	r3, #50	; 0x32
 80059e4:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <UART_SetConfig+0x118>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059f0:	4419      	add	r1, r3
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009a      	lsls	r2, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <UART_SetConfig+0x118>)
 8005a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	2064      	movs	r0, #100	; 0x64
 8005a12:	fb00 f303 	mul.w	r3, r0, r3
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	3332      	adds	r3, #50	; 0x32
 8005a1c:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <UART_SetConfig+0x118>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	f003 020f 	and.w	r2, r3, #15
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40013800 	.word	0x40013800
 8005a3c:	51eb851f 	.word	0x51eb851f

08005a40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a40:	b084      	sub	sp, #16
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	f107 0014 	add.w	r0, r7, #20
 8005a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	b004      	add	sp, #16
 8005a5e:	4770      	bx	lr

08005a60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr

08005a8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	4013      	ands	r3, r2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ad8:	b084      	sub	sp, #16
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	f107 0014 	add.w	r0, r7, #20
 8005ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	b004      	add	sp, #16
 8005b16:	4770      	bx	lr

08005b18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b09b      	sub	sp, #108	; 0x6c
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	78db      	ldrb	r3, [r3, #3]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d81f      	bhi.n	8005b8a <USB_ActivateEndpoint+0x72>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <USB_ActivateEndpoint+0x38>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b7d 	.word	0x08005b7d
 8005b58:	08005b93 	.word	0x08005b93
 8005b5c:	08005b6f 	.word	0x08005b6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b68:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b6c:	e012      	b.n	8005b94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b7a:	e00b      	b.n	8005b94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b88:	e004      	b.n	8005b94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005b90:	e000      	b.n	8005b94 <USB_ActivateEndpoint+0x7c>
      break;
 8005b92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	441a      	add	r2, r3
 8005b9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	441a      	add	r2, r3
 8005be4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	7b1b      	ldrb	r3, [r3, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f040 8149 	bne.w	8005e98 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8084 	beq.w	8005d18 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	4413      	add	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	011a      	lsls	r2, r3, #4
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	88db      	ldrh	r3, [r3, #6]
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	81fb      	strh	r3, [r7, #14]
 8005c52:	89fb      	ldrh	r3, [r7, #14]
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01b      	beq.n	8005c94 <USB_ActivateEndpoint+0x17c>
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	81bb      	strh	r3, [r7, #12]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	89bb      	ldrh	r3, [r7, #12]
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d020      	beq.n	8005cde <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb2:	813b      	strh	r3, [r7, #8]
 8005cb4:	893b      	ldrh	r3, [r7, #8]
 8005cb6:	f083 0320 	eor.w	r3, r3, #32
 8005cba:	813b      	strh	r3, [r7, #8]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	893b      	ldrh	r3, [r7, #8]
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
 8005cdc:	e27f      	b.n	80061de <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf4:	817b      	strh	r3, [r7, #10]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	441a      	add	r2, r3
 8005d00:	897b      	ldrh	r3, [r7, #10]
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]
 8005d16:	e262      	b.n	80061de <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	4413      	add	r3, r2
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	011a      	lsls	r2, r3, #4
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	88db      	ldrh	r3, [r3, #6]
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	4413      	add	r3, r2
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	011a      	lsls	r2, r3, #4
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	4413      	add	r3, r2
 8005d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d6e:	623b      	str	r3, [r7, #32]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d112      	bne.n	8005d9e <USB_ActivateEndpoint+0x286>
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e02f      	b.n	8005dfe <USB_ActivateEndpoint+0x2e6>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b3e      	cmp	r3, #62	; 0x3e
 8005da4:	d813      	bhi.n	8005dce <USB_ActivateEndpoint+0x2b6>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	663b      	str	r3, [r7, #96]	; 0x60
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <USB_ActivateEndpoint+0x2a8>
 8005dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8005dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e017      	b.n	8005dfe <USB_ActivateEndpoint+0x2e6>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <USB_ActivateEndpoint+0x2d0>
 8005de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de4:	3b01      	subs	r3, #1
 8005de6:	663b      	str	r3, [r7, #96]	; 0x60
 8005de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	029b      	lsls	r3, r3, #10
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	83fb      	strh	r3, [r7, #30]
 8005e0c:	8bfb      	ldrh	r3, [r7, #30]
 8005e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01b      	beq.n	8005e4e <USB_ActivateEndpoint+0x336>
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	83bb      	strh	r3, [r7, #28]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	441a      	add	r2, r3
 8005e38:	8bbb      	ldrh	r3, [r7, #28]
 8005e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	837b      	strh	r3, [r7, #26]
 8005e66:	8b7b      	ldrh	r3, [r7, #26]
 8005e68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e6c:	837b      	strh	r3, [r7, #26]
 8005e6e:	8b7b      	ldrh	r3, [r7, #26]
 8005e70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e74:	837b      	strh	r3, [r7, #26]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	8b7b      	ldrh	r3, [r7, #26]
 8005e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	8013      	strh	r3, [r2, #0]
 8005e96:	e1a2      	b.n	80061de <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	441a      	add	r2, r3
 8005ebc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ee4:	4413      	add	r3, r2
 8005ee6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	011a      	lsls	r2, r3, #4
 8005eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	891b      	ldrh	r3, [r3, #8]
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f18:	4413      	add	r3, r2
 8005f1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	011a      	lsls	r2, r3, #4
 8005f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	895b      	ldrh	r3, [r3, #10]
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f040 8091 	bne.w	8006068 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01b      	beq.n	8005f96 <USB_ActivateEndpoint+0x47e>
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f74:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fa4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01b      	beq.n	8005fe6 <USB_ActivateEndpoint+0x4ce>
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	441a      	add	r2, r3
 8005fd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005ffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006000:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006004:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006006:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800600c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800601a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602a:	b29b      	uxth	r3, r3
 800602c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006044:	867b      	strh	r3, [r7, #50]	; 0x32
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006062:	b29b      	uxth	r3, r3
 8006064:	8013      	strh	r3, [r2, #0]
 8006066:	e0ba      	b.n	80061de <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006078:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800607c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01d      	beq.n	80060c0 <USB_ActivateEndpoint+0x5a8>
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	441a      	add	r2, r3
 80060a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01d      	beq.n	8006118 <USB_ActivateEndpoint+0x600>
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006110:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	78db      	ldrb	r3, [r3, #3]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d024      	beq.n	800616a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006136:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800613a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800613e:	f083 0320 	eor.w	r3, r3, #32
 8006142:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	b29b      	uxth	r3, r3
 8006166:	8013      	strh	r3, [r2, #0]
 8006168:	e01d      	b.n	80061a6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006180:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	441a      	add	r2, r3
 80061c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80061de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	376c      	adds	r7, #108	; 0x6c
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b08d      	sub	sp, #52	; 0x34
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	7b1b      	ldrb	r3, [r3, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 808e 	bne.w	800631c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d044      	beq.n	8006292 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	81bb      	strh	r3, [r7, #12]
 8006216:	89bb      	ldrh	r3, [r7, #12]
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01b      	beq.n	8006258 <USB_DeactivateEndpoint+0x6c>
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	817b      	strh	r3, [r7, #10]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	897b      	ldrh	r3, [r7, #10]
 8006244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006250:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006254:	b29b      	uxth	r3, r3
 8006256:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626e:	813b      	strh	r3, [r7, #8]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	893b      	ldrh	r3, [r7, #8]
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
 8006290:	e192      	b.n	80065b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	827b      	strh	r3, [r7, #18]
 80062a0:	8a7b      	ldrh	r3, [r7, #18]
 80062a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01b      	beq.n	80062e2 <USB_DeactivateEndpoint+0xf6>
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c0:	823b      	strh	r3, [r7, #16]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8a3b      	ldrh	r3, [r7, #16]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	81fb      	strh	r3, [r7, #14]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	441a      	add	r2, r3
 8006304:	89fb      	ldrh	r3, [r7, #14]
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]
 800631a:	e14d      	b.n	80065b8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 80a5 	bne.w	8006470 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	843b      	strh	r3, [r7, #32]
 8006334:	8c3b      	ldrh	r3, [r7, #32]
 8006336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01b      	beq.n	8006376 <USB_DeactivateEndpoint+0x18a>
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006354:	83fb      	strh	r3, [r7, #30]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	441a      	add	r2, r3
 8006360:	8bfb      	ldrh	r3, [r7, #30]
 8006362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006372:	b29b      	uxth	r3, r3
 8006374:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	83bb      	strh	r3, [r7, #28]
 8006384:	8bbb      	ldrh	r3, [r7, #28]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01b      	beq.n	80063c6 <USB_DeactivateEndpoint+0x1da>
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	837b      	strh	r3, [r7, #26]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	441a      	add	r2, r3
 80063b0:	8b7b      	ldrh	r3, [r7, #26]
 80063b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	833b      	strh	r3, [r7, #24]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	8b3b      	ldrh	r3, [r7, #24]
 80063ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006414:	82fb      	strh	r3, [r7, #22]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	8afb      	ldrh	r3, [r7, #22]
 8006422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006432:	b29b      	uxth	r3, r3
 8006434:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800644c:	82bb      	strh	r3, [r7, #20]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	441a      	add	r2, r3
 8006458:	8abb      	ldrh	r3, [r7, #20]
 800645a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646a:	b29b      	uxth	r3, r3
 800646c:	8013      	strh	r3, [r2, #0]
 800646e:	e0a3      	b.n	80065b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800647e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01b      	beq.n	80064c0 <USB_DeactivateEndpoint+0x2d4>
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	441a      	add	r2, r3
 80064aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80064ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064bc:	b29b      	uxth	r3, r3
 80064be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80064ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01b      	beq.n	8006510 <USB_DeactivateEndpoint+0x324>
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800650c:	b29b      	uxth	r3, r3
 800650e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	441a      	add	r2, r3
 8006532:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	b29b      	uxth	r3, r3
 8006546:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800656c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657c:	b29b      	uxth	r3, r3
 800657e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	847b      	strh	r3, [r7, #34]	; 0x22
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	441a      	add	r2, r3
 80065a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3734      	adds	r7, #52	; 0x34
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr

080065c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b0cc      	sub	sp, #304	; 0x130
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065d2:	6018      	str	r0, [r3, #0]
 80065d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065dc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	785b      	ldrb	r3, [r3, #1]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	f041 817d 	bne.w	80078ea <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	699a      	ldr	r2, [r3, #24]
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	429a      	cmp	r2, r3
 800660a:	d908      	bls.n	800661e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800660c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800661c:	e007      	b.n	800662e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800662e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	7b1b      	ldrb	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d152      	bne.n	80066e4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6959      	ldr	r1, [r3, #20]
 800664a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	88da      	ldrh	r2, [r3, #6]
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665a:	b29b      	uxth	r3, r3
 800665c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006660:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006664:	6800      	ldr	r0, [r0, #0]
 8006666:	f001 ff23 	bl	80084b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006672:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006676:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668c:	b29b      	uxth	r3, r3
 800668e:	4619      	mov	r1, r3
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006698:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800669c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	440a      	add	r2, r1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	011a      	lsls	r2, r3, #4
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4413      	add	r3, r2
 80066c0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	f001 b8b5 	b.w	800784e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80066e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	78db      	ldrb	r3, [r3, #3]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	f040 84c6 	bne.w	8007082 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	429a      	cmp	r2, r3
 8006710:	f240 8443 	bls.w	8006f9a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800673e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800675c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006764:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676c:	b29b      	uxth	r3, r3
 800676e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006780:	1ad2      	subs	r2, r2, r3
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800678e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 823e 	beq.w	8006c32 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	785b      	ldrb	r3, [r3, #1]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f040 809a 	bne.w	8006910 <USB_EPStartXfer+0x34c>
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fe:	b29b      	uxth	r3, r3
 8006800:	4619      	mov	r1, r3
 8006802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800680e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	440a      	add	r2, r1
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	011a      	lsls	r2, r3, #4
 8006826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4413      	add	r3, r2
 8006832:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d122      	bne.n	800688e <USB_EPStartXfer+0x2ca>
 8006848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800685a:	b29a      	uxth	r2, r3
 800685c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006860:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687e:	b29a      	uxth	r2, r3
 8006880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006884:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	e079      	b.n	8006982 <USB_EPStartXfer+0x3be>
 800688e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006892:	2b3e      	cmp	r3, #62	; 0x3e
 8006894:	d81b      	bhi.n	80068ce <USB_EPStartXfer+0x30a>
 8006896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d004      	beq.n	80068b6 <USB_EPStartXfer+0x2f2>
 80068ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068b0:	3301      	adds	r3, #1
 80068b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	029b      	lsls	r3, r3, #10
 80068be:	b29a      	uxth	r2, r3
 80068c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	e059      	b.n	8006982 <USB_EPStartXfer+0x3be>
 80068ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <USB_EPStartXfer+0x32a>
 80068e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068e8:	3b01      	subs	r3, #1
 80068ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	029b      	lsls	r3, r3, #10
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006900:	b29a      	uxth	r2, r3
 8006902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006906:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	e038      	b.n	8006982 <USB_EPStartXfer+0x3be>
 8006910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d130      	bne.n	8006982 <USB_EPStartXfer+0x3be>
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692e:	b29b      	uxth	r3, r3
 8006930:	4619      	mov	r1, r3
 8006932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006936:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800693a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800693e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	440a      	add	r2, r1
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	011a      	lsls	r2, r3, #4
 8006956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4413      	add	r3, r2
 8006962:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006974:	b29a      	uxth	r2, r3
 8006976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	895b      	ldrh	r3, [r3, #10]
 800698e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6959      	ldr	r1, [r3, #20]
 800699e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069b0:	6800      	ldr	r0, [r0, #0]
 80069b2:	f001 fd7d 	bl	80084b0 <USB_WritePMA>
            ep->xfer_buff += len;
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695a      	ldr	r2, [r3, #20]
 80069c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c6:	441a      	add	r2, r3
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d90f      	bls.n	8006a10 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80069f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a1a      	ldr	r2, [r3, #32]
 80069fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a00:	1ad2      	subs	r2, r2, r3
 8006a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	621a      	str	r2, [r3, #32]
 8006a0e:	e00e      	b.n	8006a2e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	785b      	ldrb	r3, [r3, #1]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 809a 	bne.w	8006b74 <USB_EPStartXfer+0x5b0>
 8006a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a4c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a72:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	440a      	add	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	011a      	lsls	r2, r3, #4
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4413      	add	r3, r2
 8006a96:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d122      	bne.n	8006af2 <USB_EPStartXfer+0x52e>
 8006aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	e083      	b.n	8006bfa <USB_EPStartXfer+0x636>
 8006af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af6:	2b3e      	cmp	r3, #62	; 0x3e
 8006af8:	d81b      	bhi.n	8006b32 <USB_EPStartXfer+0x56e>
 8006afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d004      	beq.n	8006b1a <USB_EPStartXfer+0x556>
 8006b10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b14:	3301      	adds	r3, #1
 8006b16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	029b      	lsls	r3, r3, #10
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e063      	b.n	8006bfa <USB_EPStartXfer+0x636>
 8006b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <USB_EPStartXfer+0x58e>
 8006b48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	e042      	b.n	8006bfa <USB_EPStartXfer+0x636>
 8006b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d13a      	bne.n	8006bfa <USB_EPStartXfer+0x636>
 8006b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006bb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bb6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	011a      	lsls	r2, r3, #4
 8006bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	891b      	ldrh	r3, [r3, #8]
 8006c06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6959      	ldr	r1, [r3, #20]
 8006c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c28:	6800      	ldr	r0, [r0, #0]
 8006c2a:	f001 fc41 	bl	80084b0 <USB_WritePMA>
 8006c2e:	f000 be0e 	b.w	800784e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	785b      	ldrb	r3, [r3, #1]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d16d      	bne.n	8006d1e <USB_EPStartXfer+0x75a>
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c62:	4413      	add	r3, r2
 8006c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	011a      	lsls	r2, r3, #4
 8006c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c76:	4413      	add	r3, r2
 8006c78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d112      	bne.n	8006cac <USB_EPStartXfer+0x6e8>
 8006c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	e063      	b.n	8006d74 <USB_EPStartXfer+0x7b0>
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb0:	2b3e      	cmp	r3, #62	; 0x3e
 8006cb2:	d817      	bhi.n	8006ce4 <USB_EPStartXfer+0x720>
 8006cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb8:	085b      	lsrs	r3, r3, #1
 8006cba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <USB_EPStartXfer+0x710>
 8006cca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cce:	3301      	adds	r3, #1
 8006cd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	029b      	lsls	r3, r3, #10
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e047      	b.n	8006d74 <USB_EPStartXfer+0x7b0>
 8006ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d104      	bne.n	8006d04 <USB_EPStartXfer+0x740>
 8006cfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	029b      	lsls	r3, r3, #10
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	e02a      	b.n	8006d74 <USB_EPStartXfer+0x7b0>
 8006d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d122      	bne.n	8006d74 <USB_EPStartXfer+0x7b0>
 8006d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	653b      	str	r3, [r7, #80]	; 0x50
 8006d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4e:	4413      	add	r3, r2
 8006d50:	653b      	str	r3, [r7, #80]	; 0x50
 8006d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	011a      	lsls	r2, r3, #4
 8006d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d62:	4413      	add	r3, r2
 8006d64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	891b      	ldrh	r3, [r3, #8]
 8006d80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6959      	ldr	r1, [r3, #20]
 8006d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d9a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d9e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006da2:	6800      	ldr	r0, [r0, #0]
 8006da4:	f001 fb84 	bl	80084b0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db8:	441a      	add	r2, r3
 8006dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a1a      	ldr	r2, [r3, #32]
 8006dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d90f      	bls.n	8006e02 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6a1a      	ldr	r2, [r3, #32]
 8006dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df2:	1ad2      	subs	r2, r2, r3
 8006df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	621a      	str	r2, [r3, #32]
 8006e00:	e00e      	b.n	8006e20 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d16d      	bne.n	8006f18 <USB_EPStartXfer+0x954>
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	4413      	add	r3, r2
 8006e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	011a      	lsls	r2, r3, #4
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	4413      	add	r3, r2
 8006e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
 8006e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d112      	bne.n	8006ea6 <USB_EPStartXfer+0x8e2>
 8006e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e05d      	b.n	8006f62 <USB_EPStartXfer+0x99e>
 8006ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8006eac:	d817      	bhi.n	8006ede <USB_EPStartXfer+0x91a>
 8006eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb2:	085b      	lsrs	r3, r3, #1
 8006eb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <USB_EPStartXfer+0x90a>
 8006ec4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ec8:	3301      	adds	r3, #1
 8006eca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e041      	b.n	8006f62 <USB_EPStartXfer+0x99e>
 8006ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <USB_EPStartXfer+0x93a>
 8006ef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	e024      	b.n	8006f62 <USB_EPStartXfer+0x99e>
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d11c      	bne.n	8006f62 <USB_EPStartXfer+0x99e>
 8006f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f3c:	4413      	add	r3, r2
 8006f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	011a      	lsls	r2, r3, #4
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f50:	4413      	add	r3, r2
 8006f52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	895b      	ldrh	r3, [r3, #10]
 8006f6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6959      	ldr	r1, [r3, #20]
 8006f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f90:	6800      	ldr	r0, [r0, #0]
 8006f92:	f001 fa8d 	bl	80084b0 <USB_WritePMA>
 8006f96:	f000 bc5a 	b.w	800784e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007002:	b29b      	uxth	r3, r3
 8007004:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007020:	b29b      	uxth	r3, r3
 8007022:	461a      	mov	r2, r3
 8007024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007026:	4413      	add	r3, r2
 8007028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800702a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	011a      	lsls	r2, r3, #4
 8007038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703a:	4413      	add	r3, r2
 800703c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007040:	65bb      	str	r3, [r7, #88]	; 0x58
 8007042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007046:	b29a      	uxth	r2, r3
 8007048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800704a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800704c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	891b      	ldrh	r3, [r3, #8]
 8007058:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800705c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6959      	ldr	r1, [r3, #20]
 8007068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706c:	b29b      	uxth	r3, r3
 800706e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007072:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007076:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	f001 fa18 	bl	80084b0 <USB_WritePMA>
 8007080:	e3e5      	b.n	800784e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	441a      	add	r2, r3
 80070c6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80070ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070da:	b29b      	uxth	r3, r3
 80070dc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6a1a      	ldr	r2, [r3, #32]
 80070ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	b29b      	uxth	r3, r3
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 81bc 	beq.w	800749c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d16d      	bne.n	800721e <USB_EPStartXfer+0xc5a>
 8007142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	67bb      	str	r3, [r7, #120]	; 0x78
 800714e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715c:	b29b      	uxth	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007162:	4413      	add	r3, r2
 8007164:	67bb      	str	r3, [r7, #120]	; 0x78
 8007166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	011a      	lsls	r2, r3, #4
 8007174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007176:	4413      	add	r3, r2
 8007178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800717c:	677b      	str	r3, [r7, #116]	; 0x74
 800717e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d112      	bne.n	80071ac <USB_EPStartXfer+0xbe8>
 8007186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007190:	b29a      	uxth	r2, r3
 8007192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	e060      	b.n	800726e <USB_EPStartXfer+0xcaa>
 80071ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b0:	2b3e      	cmp	r3, #62	; 0x3e
 80071b2:	d817      	bhi.n	80071e4 <USB_EPStartXfer+0xc20>
 80071b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b8:	085b      	lsrs	r3, r3, #1
 80071ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d004      	beq.n	80071d4 <USB_EPStartXfer+0xc10>
 80071ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071ce:	3301      	adds	r3, #1
 80071d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071d8:	b29b      	uxth	r3, r3
 80071da:	029b      	lsls	r3, r3, #10
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e044      	b.n	800726e <USB_EPStartXfer+0xcaa>
 80071e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e8:	095b      	lsrs	r3, r3, #5
 80071ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <USB_EPStartXfer+0xc40>
 80071fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071fe:	3b01      	subs	r3, #1
 8007200:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007204:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007208:	b29b      	uxth	r3, r3
 800720a:	029b      	lsls	r3, r3, #10
 800720c:	b29b      	uxth	r3, r3
 800720e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007216:	b29a      	uxth	r2, r3
 8007218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721a:	801a      	strh	r2, [r3, #0]
 800721c:	e027      	b.n	800726e <USB_EPStartXfer+0xcaa>
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d11f      	bne.n	800726e <USB_EPStartXfer+0xcaa>
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723c:	b29b      	uxth	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007244:	4413      	add	r3, r2
 8007246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	011a      	lsls	r2, r3, #4
 8007258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800725c:	4413      	add	r3, r2
 800725e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007262:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	b29a      	uxth	r2, r3
 800726a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800726c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800726e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	895b      	ldrh	r3, [r3, #10]
 800727a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800727e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6959      	ldr	r1, [r3, #20]
 800728a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728e:	b29b      	uxth	r3, r3
 8007290:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007294:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007298:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	f001 f907 	bl	80084b0 <USB_WritePMA>
          ep->xfer_buff += len;
 80072a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695a      	ldr	r2, [r3, #20]
 80072ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b2:	441a      	add	r2, r3
 80072b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80072c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a1a      	ldr	r2, [r3, #32]
 80072cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d90f      	bls.n	80072fc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ec:	1ad2      	subs	r2, r2, r3
 80072ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	621a      	str	r2, [r3, #32]
 80072fa:	e00e      	b.n	800731a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80072fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2200      	movs	r2, #0
 8007318:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800731a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 8295 	beq.w	800784e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d16d      	bne.n	8007410 <USB_EPStartXfer+0xe4c>
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007344:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734e:	b29b      	uxth	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007354:	4413      	add	r3, r2
 8007356:	66bb      	str	r3, [r7, #104]	; 0x68
 8007358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	011a      	lsls	r2, r3, #4
 8007366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007368:	4413      	add	r3, r2
 800736a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800736e:	667b      	str	r3, [r7, #100]	; 0x64
 8007370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d112      	bne.n	800739e <USB_EPStartXfer+0xdda>
 8007378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007382:	b29a      	uxth	r2, r3
 8007384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007396:	b29a      	uxth	r2, r3
 8007398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e063      	b.n	8007466 <USB_EPStartXfer+0xea2>
 800739e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a2:	2b3e      	cmp	r3, #62	; 0x3e
 80073a4:	d817      	bhi.n	80073d6 <USB_EPStartXfer+0xe12>
 80073a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <USB_EPStartXfer+0xe02>
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c0:	3301      	adds	r3, #1
 80073c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	029b      	lsls	r3, r3, #10
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e047      	b.n	8007466 <USB_EPStartXfer+0xea2>
 80073d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e4:	f003 031f 	and.w	r3, r3, #31
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <USB_EPStartXfer+0xe32>
 80073ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f0:	3b01      	subs	r3, #1
 80073f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	029b      	lsls	r3, r3, #10
 80073fe:	b29b      	uxth	r3, r3
 8007400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007408:	b29a      	uxth	r2, r3
 800740a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	e02a      	b.n	8007466 <USB_EPStartXfer+0xea2>
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d122      	bne.n	8007466 <USB_EPStartXfer+0xea2>
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	673b      	str	r3, [r7, #112]	; 0x70
 800742c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007440:	4413      	add	r3, r2
 8007442:	673b      	str	r3, [r7, #112]	; 0x70
 8007444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	011a      	lsls	r2, r3, #4
 8007452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007454:	4413      	add	r3, r2
 8007456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800745a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800745c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007460:	b29a      	uxth	r2, r3
 8007462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007464:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	891b      	ldrh	r3, [r3, #8]
 8007472:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6959      	ldr	r1, [r3, #20]
 8007482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007486:	b29b      	uxth	r3, r3
 8007488:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800748c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007490:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007494:	6800      	ldr	r0, [r0, #0]
 8007496:	f001 f80b 	bl	80084b0 <USB_WritePMA>
 800749a:	e1d8      	b.n	800784e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d178      	bne.n	800759e <USB_EPStartXfer+0xfda>
 80074ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074d0:	4413      	add	r3, r2
 80074d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	011a      	lsls	r2, r3, #4
 80074e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074e8:	4413      	add	r3, r2
 80074ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d116      	bne.n	8007528 <USB_EPStartXfer+0xf64>
 80074fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007506:	b29a      	uxth	r2, r3
 8007508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800751a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751e:	b29a      	uxth	r2, r3
 8007520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007524:	801a      	strh	r2, [r3, #0]
 8007526:	e06b      	b.n	8007600 <USB_EPStartXfer+0x103c>
 8007528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752c:	2b3e      	cmp	r3, #62	; 0x3e
 800752e:	d818      	bhi.n	8007562 <USB_EPStartXfer+0xf9e>
 8007530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800753a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d004      	beq.n	8007550 <USB_EPStartXfer+0xf8c>
 8007546:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800754a:	3301      	adds	r3, #1
 800754c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007550:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007554:	b29b      	uxth	r3, r3
 8007556:	029b      	lsls	r3, r3, #10
 8007558:	b29a      	uxth	r2, r3
 800755a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	e04e      	b.n	8007600 <USB_EPStartXfer+0x103c>
 8007562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800756c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <USB_EPStartXfer+0xfbe>
 8007578:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800757c:	3b01      	subs	r3, #1
 800757e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007582:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007586:	b29b      	uxth	r3, r3
 8007588:	029b      	lsls	r3, r3, #10
 800758a:	b29b      	uxth	r3, r3
 800758c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007594:	b29a      	uxth	r2, r3
 8007596:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	e030      	b.n	8007600 <USB_EPStartXfer+0x103c>
 800759e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d128      	bne.n	8007600 <USB_EPStartXfer+0x103c>
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075d2:	4413      	add	r3, r2
 80075d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	011a      	lsls	r2, r3, #4
 80075e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075ea:	4413      	add	r3, r2
 80075ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	891b      	ldrh	r3, [r3, #8]
 800760c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6959      	ldr	r1, [r3, #20]
 800761c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007620:	b29b      	uxth	r3, r3
 8007622:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007626:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800762a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800762e:	6800      	ldr	r0, [r0, #0]
 8007630:	f000 ff3e 	bl	80084b0 <USB_WritePMA>
          ep->xfer_buff += len;
 8007634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007644:	441a      	add	r2, r3
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6a1a      	ldr	r2, [r3, #32]
 800765e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	429a      	cmp	r2, r3
 800766c:	d90f      	bls.n	800768e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800766e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	621a      	str	r2, [r3, #32]
 800768c:	e00e      	b.n	80076ac <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800769e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2200      	movs	r2, #0
 80076aa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80076ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 80cc 	beq.w	800784e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d178      	bne.n	80077c6 <USB_EPStartXfer+0x1202>
 80076d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	461a      	mov	r2, r3
 80076f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076f8:	4413      	add	r3, r2
 80076fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	011a      	lsls	r2, r3, #4
 800770c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007710:	4413      	add	r3, r2
 8007712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800771a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d116      	bne.n	8007750 <USB_EPStartXfer+0x118c>
 8007722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800772e:	b29a      	uxth	r2, r3
 8007730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007746:	b29a      	uxth	r2, r3
 8007748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800774c:	801a      	strh	r2, [r3, #0]
 800774e:	e064      	b.n	800781a <USB_EPStartXfer+0x1256>
 8007750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007754:	2b3e      	cmp	r3, #62	; 0x3e
 8007756:	d818      	bhi.n	800778a <USB_EPStartXfer+0x11c6>
 8007758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <USB_EPStartXfer+0x11b4>
 800776e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007772:	3301      	adds	r3, #1
 8007774:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800777c:	b29b      	uxth	r3, r3
 800777e:	029b      	lsls	r3, r3, #10
 8007780:	b29a      	uxth	r2, r3
 8007782:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007786:	801a      	strh	r2, [r3, #0]
 8007788:	e047      	b.n	800781a <USB_EPStartXfer+0x1256>
 800778a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <USB_EPStartXfer+0x11e6>
 80077a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077a4:	3b01      	subs	r3, #1
 80077a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80077aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	029b      	lsls	r3, r3, #10
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077bc:	b29a      	uxth	r2, r3
 80077be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077c2:	801a      	strh	r2, [r3, #0]
 80077c4:	e029      	b.n	800781a <USB_EPStartXfer+0x1256>
 80077c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d121      	bne.n	800781a <USB_EPStartXfer+0x1256>
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077ec:	4413      	add	r3, r2
 80077ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	011a      	lsls	r2, r3, #4
 8007800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007804:	4413      	add	r3, r2
 8007806:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800780a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800780e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007818:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800781a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	895b      	ldrh	r3, [r3, #10]
 8007826:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6959      	ldr	r1, [r3, #20]
 8007836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783a:	b29b      	uxth	r3, r3
 800783c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007840:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007844:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007848:	6800      	ldr	r0, [r0, #0]
 800784a:	f000 fe31 	bl	80084b0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800784e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007870:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800787c:	8013      	strh	r3, [r2, #0]
 800787e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007882:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007886:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800788a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800788e:	8812      	ldrh	r2, [r2, #0]
 8007890:	f082 0210 	eor.w	r2, r2, #16
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800789e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078a2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80078a6:	8812      	ldrh	r2, [r2, #0]
 80078a8:	f082 0220 	eor.w	r2, r2, #32
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	441a      	add	r2, r3
 80078c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078cc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	8013      	strh	r3, [r2, #0]
 80078e6:	f000 bc9f 	b.w	8008228 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80078ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	7b1b      	ldrb	r3, [r3, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f040 80ae 	bne.w	8007a58 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80078fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	699a      	ldr	r2, [r3, #24]
 8007908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	429a      	cmp	r2, r3
 8007916:	d917      	bls.n	8007948 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007938:	1ad2      	subs	r2, r2, r3
 800793a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	619a      	str	r2, [r3, #24]
 8007946:	e00e      	b.n	8007966 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007982:	b29b      	uxth	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800798a:	4413      	add	r3, r2
 800798c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	011a      	lsls	r2, r3, #4
 800799e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079a2:	4413      	add	r3, r2
 80079a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d116      	bne.n	80079e2 <USB_EPStartXfer+0x141e>
 80079b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e3e8      	b.n	80081b4 <USB_EPStartXfer+0x1bf0>
 80079e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e6:	2b3e      	cmp	r3, #62	; 0x3e
 80079e8:	d818      	bhi.n	8007a1c <USB_EPStartXfer+0x1458>
 80079ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80079f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <USB_EPStartXfer+0x1446>
 8007a00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a04:	3301      	adds	r3, #1
 8007a06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e3cb      	b.n	80081b4 <USB_EPStartXfer+0x1bf0>
 8007a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <USB_EPStartXfer+0x1478>
 8007a32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a36:	3b01      	subs	r3, #1
 8007a38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	029b      	lsls	r3, r3, #10
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e3ad      	b.n	80081b4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	78db      	ldrb	r3, [r3, #3]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	f040 8200 	bne.w	8007e6a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f040 8091 	bne.w	8007b9e <USB_EPStartXfer+0x15da>
 8007a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	011a      	lsls	r2, r3, #4
 8007ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ab8:	4413      	add	r3, r2
 8007aba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d116      	bne.n	8007b00 <USB_EPStartXfer+0x153c>
 8007ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ae4:	801a      	strh	r2, [r3, #0]
 8007ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007afc:	801a      	strh	r2, [r3, #0]
 8007afe:	e083      	b.n	8007c08 <USB_EPStartXfer+0x1644>
 8007b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b0e:	d820      	bhi.n	8007b52 <USB_EPStartXfer+0x158e>
 8007b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	085b      	lsrs	r3, r3, #1
 8007b1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <USB_EPStartXfer+0x157c>
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	029b      	lsls	r3, r3, #10
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	e05a      	b.n	8007c08 <USB_EPStartXfer+0x1644>
 8007b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f003 031f 	and.w	r3, r3, #31
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <USB_EPStartXfer+0x15be>
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	029b      	lsls	r3, r3, #10
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e034      	b.n	8007c08 <USB_EPStartXfer+0x1644>
 8007b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	785b      	ldrb	r3, [r3, #1]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d12c      	bne.n	8007c08 <USB_EPStartXfer+0x1644>
 8007bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	011a      	lsls	r2, r3, #4
 8007be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bea:	4413      	add	r3, r2
 8007bec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 8091 	bne.w	8007d4a <USB_EPStartXfer+0x1786>
 8007c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	011a      	lsls	r2, r3, #4
 8007c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d116      	bne.n	8007cac <USB_EPStartXfer+0x16e8>
 8007c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c90:	801a      	strh	r2, [r3, #0]
 8007c92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	e07c      	b.n	8007da6 <USB_EPStartXfer+0x17e2>
 8007cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8007cba:	d820      	bhi.n	8007cfe <USB_EPStartXfer+0x173a>
 8007cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <USB_EPStartXfer+0x1728>
 8007ce2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	029b      	lsls	r3, r3, #10
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	e053      	b.n	8007da6 <USB_EPStartXfer+0x17e2>
 8007cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <USB_EPStartXfer+0x176a>
 8007d24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	029b      	lsls	r3, r3, #10
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e02d      	b.n	8007da6 <USB_EPStartXfer+0x17e2>
 8007d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d125      	bne.n	8007da6 <USB_EPStartXfer+0x17e2>
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d70:	4413      	add	r3, r2
 8007d72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	011a      	lsls	r2, r3, #4
 8007d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d88:	4413      	add	r3, r2
 8007d8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007da4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 81fe 	beq.w	80081b4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007dd8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <USB_EPStartXfer+0x182c>
 8007de4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10d      	bne.n	8007e0c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007df0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f040 81db 	bne.w	80081b4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007dfe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f040 81d4 	bne.w	80081b4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e32:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	441a      	add	r2, r3
 8007e50:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	8013      	strh	r3, [r2, #0]
 8007e68:	e1a4      	b.n	80081b4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	78db      	ldrb	r3, [r3, #3]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	f040 819a 	bne.w	80081b0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d917      	bls.n	8007ec8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb8:	1ad2      	subs	r2, r2, r3
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	619a      	str	r2, [r3, #24]
 8007ec6:	e00e      	b.n	8007ee6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	785b      	ldrb	r3, [r3, #1]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d178      	bne.n	8007fe8 <USB_EPStartXfer+0x1a24>
 8007ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	011a      	lsls	r2, r3, #4
 8007f2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f32:	4413      	add	r3, r2
 8007f34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d116      	bne.n	8007f72 <USB_EPStartXfer+0x19ae>
 8007f44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f56:	801a      	strh	r2, [r3, #0]
 8007f58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f6e:	801a      	strh	r2, [r3, #0]
 8007f70:	e06b      	b.n	800804a <USB_EPStartXfer+0x1a86>
 8007f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f76:	2b3e      	cmp	r3, #62	; 0x3e
 8007f78:	d818      	bhi.n	8007fac <USB_EPStartXfer+0x19e8>
 8007f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7e:	085b      	lsrs	r3, r3, #1
 8007f80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d004      	beq.n	8007f9a <USB_EPStartXfer+0x19d6>
 8007f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f94:	3301      	adds	r3, #1
 8007f96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	029b      	lsls	r3, r3, #10
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fa8:	801a      	strh	r2, [r3, #0]
 8007faa:	e04e      	b.n	800804a <USB_EPStartXfer+0x1a86>
 8007fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fba:	f003 031f 	and.w	r3, r3, #31
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <USB_EPStartXfer+0x1a08>
 8007fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	029b      	lsls	r3, r3, #10
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	e030      	b.n	800804a <USB_EPStartXfer+0x1a86>
 8007fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d128      	bne.n	800804a <USB_EPStartXfer+0x1a86>
 8007ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008014:	b29b      	uxth	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	4413      	add	r3, r2
 800801e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	011a      	lsls	r2, r3, #4
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	4413      	add	r3, r2
 8008036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800803a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800803e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008042:	b29a      	uxth	r2, r3
 8008044:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d178      	bne.n	800815a <USB_EPStartXfer+0x1b96>
 8008068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008084:	b29b      	uxth	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800808c:	4413      	add	r3, r2
 800808e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	011a      	lsls	r2, r3, #4
 80080a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a4:	4413      	add	r3, r2
 80080a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d116      	bne.n	80080e4 <USB_EPStartXfer+0x1b20>
 80080b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080c8:	801a      	strh	r2, [r3, #0]
 80080ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080da:	b29a      	uxth	r2, r3
 80080dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	e067      	b.n	80081b4 <USB_EPStartXfer+0x1bf0>
 80080e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e8:	2b3e      	cmp	r3, #62	; 0x3e
 80080ea:	d818      	bhi.n	800811e <USB_EPStartXfer+0x1b5a>
 80080ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f0:	085b      	lsrs	r3, r3, #1
 80080f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <USB_EPStartXfer+0x1b48>
 8008102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008106:	3301      	adds	r3, #1
 8008108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800810c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008110:	b29b      	uxth	r3, r3
 8008112:	029b      	lsls	r3, r3, #10
 8008114:	b29a      	uxth	r2, r3
 8008116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e04a      	b.n	80081b4 <USB_EPStartXfer+0x1bf0>
 800811e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008122:	095b      	lsrs	r3, r3, #5
 8008124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <USB_EPStartXfer+0x1b7a>
 8008134:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008138:	3b01      	subs	r3, #1
 800813a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800813e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008142:	b29b      	uxth	r3, r3
 8008144:	029b      	lsls	r3, r3, #10
 8008146:	b29b      	uxth	r3, r3
 8008148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800814c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008150:	b29a      	uxth	r2, r3
 8008152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008156:	801a      	strh	r2, [r3, #0]
 8008158:	e02c      	b.n	80081b4 <USB_EPStartXfer+0x1bf0>
 800815a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d124      	bne.n	80081b4 <USB_EPStartXfer+0x1bf0>
 800816a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008180:	4413      	add	r3, r2
 8008182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	011a      	lsls	r2, r3, #4
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008198:	4413      	add	r3, r2
 800819a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800819e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	e001      	b.n	80081b4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e03a      	b.n	800822a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80081de:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80081ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80081f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	441a      	add	r2, r3
 8008210:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800821c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008224:	b29b      	uxth	r3, r3
 8008226:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d020      	beq.n	8008288 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825c:	81bb      	strh	r3, [r7, #12]
 800825e:	89bb      	ldrh	r3, [r7, #12]
 8008260:	f083 0310 	eor.w	r3, r3, #16
 8008264:	81bb      	strh	r3, [r7, #12]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	441a      	add	r2, r3
 8008270:	89bb      	ldrh	r3, [r7, #12]
 8008272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800827a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008282:	b29b      	uxth	r3, r3
 8008284:	8013      	strh	r3, [r2, #0]
 8008286:	e01f      	b.n	80082c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800829a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829e:	81fb      	strh	r3, [r7, #14]
 80082a0:	89fb      	ldrh	r3, [r7, #14]
 80082a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082a6:	81fb      	strh	r3, [r7, #14]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	441a      	add	r2, r3
 80082b2:	89fb      	ldrh	r3, [r7, #14]
 80082b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bc80      	pop	{r7}
 80082d2:	4770      	bx	lr

080082d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	7b1b      	ldrb	r3, [r3, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 809d 	bne.w	8008422 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d04c      	beq.n	800838a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	823b      	strh	r3, [r7, #16]
 80082fe:	8a3b      	ldrh	r3, [r7, #16]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01b      	beq.n	8008340 <USB_EPClearStall+0x6c>
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831e:	81fb      	strh	r3, [r7, #14]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	441a      	add	r2, r3
 800832a:	89fb      	ldrh	r3, [r7, #14]
 800832c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800833c:	b29b      	uxth	r3, r3
 800833e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	78db      	ldrb	r3, [r3, #3]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d06c      	beq.n	8008422 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800835a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800835e:	81bb      	strh	r3, [r7, #12]
 8008360:	89bb      	ldrh	r3, [r7, #12]
 8008362:	f083 0320 	eor.w	r3, r3, #32
 8008366:	81bb      	strh	r3, [r7, #12]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	441a      	add	r2, r3
 8008372:	89bb      	ldrh	r3, [r7, #12]
 8008374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800837c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008384:	b29b      	uxth	r3, r3
 8008386:	8013      	strh	r3, [r2, #0]
 8008388:	e04b      	b.n	8008422 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	82fb      	strh	r3, [r7, #22]
 8008398:	8afb      	ldrh	r3, [r7, #22]
 800839a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01b      	beq.n	80083da <USB_EPClearStall+0x106>
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b8:	82bb      	strh	r3, [r7, #20]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	441a      	add	r2, r3
 80083c4:	8abb      	ldrh	r3, [r7, #20]
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f0:	827b      	strh	r3, [r7, #18]
 80083f2:	8a7b      	ldrh	r3, [r7, #18]
 80083f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083f8:	827b      	strh	r3, [r7, #18]
 80083fa:	8a7b      	ldrh	r3, [r7, #18]
 80083fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008400:	827b      	strh	r3, [r7, #18]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	441a      	add	r2, r3
 800840c:	8a7b      	ldrh	r3, [r7, #18]
 800840e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800841a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800841e:	b29b      	uxth	r3, r3
 8008420:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	bc80      	pop	{r7}
 800842c:	4770      	bx	lr

0800842e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2280      	movs	r2, #128	; 0x80
 8008444:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr

08008454 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr

08008468 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800848a:	b29b      	uxth	r3, r3
 800848c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800848e:	68fb      	ldr	r3, [r7, #12]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	bc80      	pop	{r7}
 8008498:	4770      	bx	lr

0800849a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr

080084b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b08d      	sub	sp, #52	; 0x34
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4611      	mov	r1, r2
 80084bc:	461a      	mov	r2, r3
 80084be:	460b      	mov	r3, r1
 80084c0:	80fb      	strh	r3, [r7, #6]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80084c6:	88bb      	ldrh	r3, [r7, #4]
 80084c8:	3301      	adds	r3, #1
 80084ca:	085b      	lsrs	r3, r3, #1
 80084cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	005a      	lsls	r2, r3, #1
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e8:	e01e      	b.n	8008528 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	3301      	adds	r3, #1
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	b29b      	uxth	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	b29a      	uxth	r2, r3
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	3302      	adds	r3, #2
 8008514:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	3302      	adds	r3, #2
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	3301      	adds	r3, #1
 8008520:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	3b01      	subs	r3, #1
 8008526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1dd      	bne.n	80084ea <USB_WritePMA+0x3a>
  }
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	3734      	adds	r7, #52	; 0x34
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr

0800853a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800853a:	b480      	push	{r7}
 800853c:	b08b      	sub	sp, #44	; 0x2c
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	4611      	mov	r1, r2
 8008546:	461a      	mov	r2, r3
 8008548:	460b      	mov	r3, r1
 800854a:	80fb      	strh	r3, [r7, #6]
 800854c:	4613      	mov	r3, r2
 800854e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008550:	88bb      	ldrh	r3, [r7, #4]
 8008552:	085b      	lsrs	r3, r3, #1
 8008554:	b29b      	uxth	r3, r3
 8008556:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008560:	88fb      	ldrh	r3, [r7, #6]
 8008562:	005a      	lsls	r2, r3, #1
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800856c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	627b      	str	r3, [r7, #36]	; 0x24
 8008572:	e01b      	b.n	80085ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29b      	uxth	r3, r3
 800857a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	3302      	adds	r3, #2
 8008580:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	b2da      	uxtb	r2, r3
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	3301      	adds	r3, #1
 800858e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	0a1b      	lsrs	r3, r3, #8
 8008594:	b2da      	uxtb	r2, r3
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	3301      	adds	r3, #1
 800859e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	3302      	adds	r3, #2
 80085a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	3b01      	subs	r3, #1
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e0      	bne.n	8008574 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80085b2:	88bb      	ldrh	r3, [r7, #4]
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	701a      	strb	r2, [r3, #0]
  }
}
 80085ce:	bf00      	nop
 80085d0:	372c      	adds	r7, #44	; 0x2c
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bc80      	pop	{r7}
 80085d6:	4770      	bx	lr

080085d8 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80085e8:	2302      	movs	r3, #2
 80085ea:	2203      	movs	r2, #3
 80085ec:	2181      	movs	r1, #129	; 0x81
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 fe3d 	bl	800a26e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80085fa:	2302      	movs	r3, #2
 80085fc:	2203      	movs	r2, #3
 80085fe:	2101      	movs	r1, #1
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f001 fe34 	bl	800a26e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800860e:	2054      	movs	r0, #84	; 0x54
 8008610:	f001 ff42 	bl	800a498 <USBD_static_malloc>
 8008614:	4602      	mov	r2, r0
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008626:	2301      	movs	r3, #1
 8008628:	73fb      	strb	r3, [r7, #15]
 800862a:	e012      	b.n	8008652 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008632:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	2101      	movs	r1, #1
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 feff 	bl	800a450 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008668:	2181      	movs	r1, #129	; 0x81
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 fe25 	bl	800a2ba <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008676:	2101      	movs	r1, #1
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fe1e 	bl	800a2ba <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00e      	beq.n	80086ae <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 ff05 	bl	800a4b0 <USBD_static_free>
    pdev->pClassData = NULL;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d051      	beq.n	800878a <USBD_CUSTOM_HID_Setup+0xd2>
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	f040 80d8 	bne.w	800889c <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	3b02      	subs	r3, #2
 80086f2:	2b09      	cmp	r3, #9
 80086f4:	d841      	bhi.n	800877a <USBD_CUSTOM_HID_Setup+0xc2>
 80086f6:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <USBD_CUSTOM_HID_Setup+0x44>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	08008755 	.word	0x08008755
 8008700:	08008733 	.word	0x08008733
 8008704:	0800877b 	.word	0x0800877b
 8008708:	0800877b 	.word	0x0800877b
 800870c:	0800877b 	.word	0x0800877b
 8008710:	0800877b 	.word	0x0800877b
 8008714:	0800877b 	.word	0x0800877b
 8008718:	08008765 	.word	0x08008765
 800871c:	08008743 	.word	0x08008743
 8008720:	08008725 	.word	0x08008725
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	885b      	ldrh	r3, [r3, #2]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8008730:	e02a      	b.n	8008788 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3340      	adds	r3, #64	; 0x40
 8008736:	2201      	movs	r2, #1
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 f999 	bl	8009a72 <USBD_CtlSendData>
          break;
 8008740:	e022      	b.n	8008788 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	b29b      	uxth	r3, r3
 800874a:	b2db      	uxtb	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8008752:	e019      	b.n	8008788 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	3344      	adds	r3, #68	; 0x44
 8008758:	2201      	movs	r2, #1
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 f988 	bl	8009a72 <USBD_CtlSendData>
          break;
 8008762:	e011      	b.n	8008788 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2201      	movs	r2, #1
 8008768:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800876a:	6939      	ldr	r1, [r7, #16]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	88db      	ldrh	r3, [r3, #6]
 8008770:	461a      	mov	r2, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 f9ab 	bl	8009ace <USBD_CtlPrepareRx>
          break;
 8008778:	e006      	b.n	8008788 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f90e 	bl	800999e <USBD_CtlError>
          ret = USBD_FAIL;
 8008782:	2302      	movs	r3, #2
 8008784:	75fb      	strb	r3, [r7, #23]
          break;
 8008786:	bf00      	nop
      }
      break;
 8008788:	e08f      	b.n	80088aa <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2b0b      	cmp	r3, #11
 8008790:	d87c      	bhi.n	800888c <USBD_CUSTOM_HID_Setup+0x1d4>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087c9 	.word	0x080087c9
 800879c:	0800888d 	.word	0x0800888d
 80087a0:	0800888d 	.word	0x0800888d
 80087a4:	0800888d 	.word	0x0800888d
 80087a8:	0800888d 	.word	0x0800888d
 80087ac:	0800888d 	.word	0x0800888d
 80087b0:	080087f1 	.word	0x080087f1
 80087b4:	0800888d 	.word	0x0800888d
 80087b8:	0800888d 	.word	0x0800888d
 80087bc:	0800888d 	.word	0x0800888d
 80087c0:	0800883f 	.word	0x0800883f
 80087c4:	08008867 	.word	0x08008867
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d107      	bne.n	80087e2 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80087d2:	f107 030e 	add.w	r3, r7, #14
 80087d6:	2202      	movs	r2, #2
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 f949 	bl	8009a72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087e0:	e05b      	b.n	800889a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 f8da 	bl	800999e <USBD_CtlError>
            ret = USBD_FAIL;
 80087ea:	2302      	movs	r3, #2
 80087ec:	75fb      	strb	r3, [r7, #23]
          break;
 80087ee:	e054      	b.n	800889a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	885b      	ldrh	r3, [r3, #2]
 80087f4:	0a1b      	lsrs	r3, r3, #8
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b22      	cmp	r3, #34	; 0x22
 80087fa:	d10b      	bne.n	8008814 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	88db      	ldrh	r3, [r3, #6]
 8008800:	2b36      	cmp	r3, #54	; 0x36
 8008802:	bf28      	it	cs
 8008804:	2336      	movcs	r3, #54	; 0x36
 8008806:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	61bb      	str	r3, [r7, #24]
 8008812:	e00d      	b.n	8008830 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	885b      	ldrh	r3, [r3, #2]
 8008818:	0a1b      	lsrs	r3, r3, #8
 800881a:	b29b      	uxth	r3, r3
 800881c:	2b21      	cmp	r3, #33	; 0x21
 800881e:	d107      	bne.n	8008830 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008820:	4b24      	ldr	r3, [pc, #144]	; (80088b4 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008822:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	88db      	ldrh	r3, [r3, #6]
 8008828:	2b09      	cmp	r3, #9
 800882a:	bf28      	it	cs
 800882c:	2309      	movcs	r3, #9
 800882e:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008830:	8bfb      	ldrh	r3, [r7, #30]
 8008832:	461a      	mov	r2, r3
 8008834:	69b9      	ldr	r1, [r7, #24]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 f91b 	bl	8009a72 <USBD_CtlSendData>
          break;
 800883c:	e02d      	b.n	800889a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008844:	2b03      	cmp	r3, #3
 8008846:	d107      	bne.n	8008858 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	3348      	adds	r3, #72	; 0x48
 800884c:	2201      	movs	r2, #1
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 f90e 	bl	8009a72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008856:	e020      	b.n	800889a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 f89f 	bl	800999e <USBD_CtlError>
            ret = USBD_FAIL;
 8008860:	2302      	movs	r3, #2
 8008862:	75fb      	strb	r3, [r7, #23]
          break;
 8008864:	e019      	b.n	800889a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886c:	2b03      	cmp	r3, #3
 800886e:	d106      	bne.n	800887e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	885b      	ldrh	r3, [r3, #2]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	461a      	mov	r2, r3
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800887c:	e00d      	b.n	800889a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 f88c 	bl	800999e <USBD_CtlError>
            ret = USBD_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	75fb      	strb	r3, [r7, #23]
          break;
 800888a:	e006      	b.n	800889a <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 f885 	bl	800999e <USBD_CtlError>
          ret = USBD_FAIL;
 8008894:	2302      	movs	r3, #2
 8008896:	75fb      	strb	r3, [r7, #23]
          break;
 8008898:	bf00      	nop
      }
      break;
 800889a:	e006      	b.n	80088aa <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 f87d 	bl	800999e <USBD_CtlError>
      ret = USBD_FAIL;
 80088a4:	2302      	movs	r3, #2
 80088a6:	75fb      	strb	r3, [r7, #23]
      break;
 80088a8:	bf00      	nop
  }
  return ret;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3720      	adds	r7, #32
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	200000f8 	.word	0x200000f8

080088b8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088cc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d111      	bne.n	80088fc <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80088ea:	88fb      	ldrh	r3, [r7, #6]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	2181      	movs	r1, #129	; 0x81
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f001 fd8a 	bl	800a40a <USBD_LL_Transmit>
 80088f6:	e001      	b.n	80088fc <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e000      	b.n	80088fe <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2229      	movs	r2, #41	; 0x29
 8008914:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008916:	4b03      	ldr	r3, [pc, #12]	; (8008924 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008918:	4618      	mov	r0, r3
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	bc80      	pop	{r7}
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000074 	.word	0x20000074

08008928 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2229      	movs	r2, #41	; 0x29
 8008934:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008936:	4b03      	ldr	r3, [pc, #12]	; (8008944 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	200000a0 	.word	0x200000a0

08008948 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2229      	movs	r2, #41	; 0x29
 8008954:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008956:	4b03      	ldr	r3, [pc, #12]	; (8008964 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	200000cc 	.word	0x200000cc

08008968 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	bc80      	pop	{r7}
 800898a:	4770      	bx	lr

0800898c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4610      	mov	r0, r2
 80089ac:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	2340      	movs	r3, #64	; 0x40
 80089b2:	2101      	movs	r1, #1
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 fd4b 	bl	800a450 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d2:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d109      	bne.n	80089f0 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4610      	mov	r0, r2
 80089e8:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	220a      	movs	r2, #10
 8008a08:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008a0a:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bc80      	pop	{r7}
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	20000104 	.word	0x20000104

08008a1c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008a26:	2302      	movs	r3, #2
 8008a28:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bc80      	pop	{r7}
 8008a46:	4770      	bx	lr

08008a48 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e01a      	b.n	8008a96 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d003      	beq.n	8008a80 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	79fa      	ldrb	r2, [r7, #7]
 8008a8c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f001 fb82 	bl	800a198 <USBD_LL_Init>

  return USBD_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d006      	beq.n	8008ac0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
 8008abe:	e001      	b.n	8008ac4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bc80      	pop	{r7}
 8008ace:	4770      	bx	lr

08008ad0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 fbad 	bl	800a238 <USBD_LL_Start>

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bc80      	pop	{r7}
 8008afa:	4770      	bx	lr

08008afc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00c      	beq.n	8008b30 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	4611      	mov	r1, r2
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	4798      	blx	r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3

  return USBD_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fed7 	bl	8009926 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d016      	beq.n	8008bca <USBD_LL_SetupStage+0x6a>
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d81c      	bhi.n	8008bda <USBD_LL_SetupStage+0x7a>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <USBD_LL_SetupStage+0x4a>
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d008      	beq.n	8008bba <USBD_LL_SetupStage+0x5a>
 8008ba8:	e017      	b.n	8008bda <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9ca 	bl	8008f4c <USBD_StdDevReq>
      break;
 8008bb8:	e01a      	b.n	8008bf0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa2c 	bl	8009020 <USBD_StdItfReq>
      break;
 8008bc8:	e012      	b.n	8008bf0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa6c 	bl	80090b0 <USBD_StdEPReq>
      break;
 8008bd8:	e00a      	b.n	8008bf0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008be0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fb85 	bl	800a2f8 <USBD_LL_StallEP>
      break;
 8008bee:	bf00      	nop
  }

  return USBD_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b086      	sub	sp, #24
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	460b      	mov	r3, r1
 8008c04:	607a      	str	r2, [r7, #4]
 8008c06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d14b      	bne.n	8008ca6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c14:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d134      	bne.n	8008c8a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d919      	bls.n	8008c60 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	1ad2      	subs	r2, r2, r3
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d203      	bcs.n	8008c4e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	e002      	b.n	8008c54 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	461a      	mov	r2, r3
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 ff56 	bl	8009b0a <USBD_CtlContinueRx>
 8008c5e:	e038      	b.n	8008cd2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00a      	beq.n	8008c82 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d105      	bne.n	8008c82 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 ff53 	bl	8009b2e <USBD_CtlSendStatus>
 8008c88:	e023      	b.n	8008cd2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c90:	2b05      	cmp	r3, #5
 8008c92:	d11e      	bne.n	8008cd2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f001 fb2a 	bl	800a2f8 <USBD_LL_StallEP>
 8008ca4:	e015      	b.n	8008cd2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00d      	beq.n	8008cce <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d108      	bne.n	8008cce <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	7afa      	ldrb	r2, [r7, #11]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	4798      	blx	r3
 8008ccc:	e001      	b.n	8008cd2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	e000      	b.n	8008cd4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008cea:	7afb      	ldrb	r3, [r7, #11]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d17f      	bne.n	8008df0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d15c      	bne.n	8008dba <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d915      	bls.n	8008d38 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	1ad2      	subs	r2, r2, r3
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	461a      	mov	r2, r3
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 fec0 	bl	8009aaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2100      	movs	r1, #0
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f001 fb8d 	bl	800a450 <USBD_LL_PrepareReceive>
 8008d36:	e04e      	b.n	8008dd6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	6912      	ldr	r2, [r2, #16]
 8008d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d44:	fb01 f202 	mul.w	r2, r1, r2
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d11c      	bne.n	8008d88 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d316      	bcc.n	8008d88 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d20f      	bcs.n	8008d88 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fe9c 	bl	8009aaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2100      	movs	r1, #0
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f001 fb65 	bl	800a450 <USBD_LL_PrepareReceive>
 8008d86:	e026      	b.n	8008dd6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d105      	bne.n	8008daa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008daa:	2180      	movs	r1, #128	; 0x80
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f001 faa3 	bl	800a2f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 fece 	bl	8009b54 <USBD_CtlReceiveStatus>
 8008db8:	e00d      	b.n	8008dd6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d004      	beq.n	8008dce <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d103      	bne.n	8008dd6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008dce:	2180      	movs	r1, #128	; 0x80
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f001 fa91 	bl	800a2f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d11d      	bne.n	8008e1c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff fe81 	bl	8008ae8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008dee:	e015      	b.n	8008e1c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00d      	beq.n	8008e18 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d108      	bne.n	8008e18 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	7afa      	ldrb	r2, [r7, #11]
 8008e10:	4611      	mov	r1, r2
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	4798      	blx	r3
 8008e16:	e001      	b.n	8008e1c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e000      	b.n	8008e1e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e2e:	2340      	movs	r3, #64	; 0x40
 8008e30:	2200      	movs	r2, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 fa1a 	bl	800a26e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2240      	movs	r2, #64	; 0x40
 8008e46:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e4a:	2340      	movs	r3, #64	; 0x40
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2180      	movs	r1, #128	; 0x80
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 fa0c 	bl	800a26e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2240      	movs	r2, #64	; 0x40
 8008e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d009      	beq.n	8008e9e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	6852      	ldr	r2, [r2, #4]
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	4611      	mov	r1, r2
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
  }

  return USBD_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bc80      	pop	{r7}
 8008ec4:	4770      	bx	lr

08008ec6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2204      	movs	r2, #4
 8008ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr

08008eee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	d105      	bne.n	8008f0c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bc80      	pop	{r7}
 8008f16:	4770      	bx	lr

08008f18 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d10b      	bne.n	8008f42 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f62:	2b40      	cmp	r3, #64	; 0x40
 8008f64:	d005      	beq.n	8008f72 <USBD_StdDevReq+0x26>
 8008f66:	2b40      	cmp	r3, #64	; 0x40
 8008f68:	d84f      	bhi.n	800900a <USBD_StdDevReq+0xbe>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d009      	beq.n	8008f82 <USBD_StdDevReq+0x36>
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d14b      	bne.n	800900a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	4798      	blx	r3
      break;
 8008f80:	e048      	b.n	8009014 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	2b09      	cmp	r3, #9
 8008f88:	d839      	bhi.n	8008ffe <USBD_StdDevReq+0xb2>
 8008f8a:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <USBD_StdDevReq+0x44>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	08008fe1 	.word	0x08008fe1
 8008f94:	08008ff5 	.word	0x08008ff5
 8008f98:	08008fff 	.word	0x08008fff
 8008f9c:	08008feb 	.word	0x08008feb
 8008fa0:	08008fff 	.word	0x08008fff
 8008fa4:	08008fc3 	.word	0x08008fc3
 8008fa8:	08008fb9 	.word	0x08008fb9
 8008fac:	08008fff 	.word	0x08008fff
 8008fb0:	08008fd7 	.word	0x08008fd7
 8008fb4:	08008fcd 	.word	0x08008fcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f9dc 	bl	8009378 <USBD_GetDescriptor>
          break;
 8008fc0:	e022      	b.n	8009008 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fb3f 	bl	8009648 <USBD_SetAddress>
          break;
 8008fca:	e01d      	b.n	8009008 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fb7e 	bl	80096d0 <USBD_SetConfig>
          break;
 8008fd4:	e018      	b.n	8009008 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fc07 	bl	80097ec <USBD_GetConfig>
          break;
 8008fde:	e013      	b.n	8009008 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fc37 	bl	8009856 <USBD_GetStatus>
          break;
 8008fe8:	e00e      	b.n	8009008 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fc65 	bl	80098bc <USBD_SetFeature>
          break;
 8008ff2:	e009      	b.n	8009008 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fc74 	bl	80098e4 <USBD_ClrFeature>
          break;
 8008ffc:	e004      	b.n	8009008 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fccc 	bl	800999e <USBD_CtlError>
          break;
 8009006:	bf00      	nop
      }
      break;
 8009008:	e004      	b.n	8009014 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fcc6 	bl	800999e <USBD_CtlError>
      break;
 8009012:	bf00      	nop
  }

  return ret;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop

08009020 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009036:	2b40      	cmp	r3, #64	; 0x40
 8009038:	d005      	beq.n	8009046 <USBD_StdItfReq+0x26>
 800903a:	2b40      	cmp	r3, #64	; 0x40
 800903c:	d82e      	bhi.n	800909c <USBD_StdItfReq+0x7c>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <USBD_StdItfReq+0x26>
 8009042:	2b20      	cmp	r3, #32
 8009044:	d12a      	bne.n	800909c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	3b01      	subs	r3, #1
 800904e:	2b02      	cmp	r3, #2
 8009050:	d81d      	bhi.n	800908e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	889b      	ldrh	r3, [r3, #4]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b01      	cmp	r3, #1
 800905a:	d813      	bhi.n	8009084 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	4798      	blx	r3
 800906a:	4603      	mov	r3, r0
 800906c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	88db      	ldrh	r3, [r3, #6]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d110      	bne.n	8009098 <USBD_StdItfReq+0x78>
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10d      	bne.n	8009098 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fd56 	bl	8009b2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009082:	e009      	b.n	8009098 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fc89 	bl	800999e <USBD_CtlError>
          break;
 800908c:	e004      	b.n	8009098 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fc84 	bl	800999e <USBD_CtlError>
          break;
 8009096:	e000      	b.n	800909a <USBD_StdItfReq+0x7a>
          break;
 8009098:	bf00      	nop
      }
      break;
 800909a:	e004      	b.n	80090a6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fc7d 	bl	800999e <USBD_CtlError>
      break;
 80090a4:	bf00      	nop
  }

  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	889b      	ldrh	r3, [r3, #4]
 80090c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	d007      	beq.n	80090e0 <USBD_StdEPReq+0x30>
 80090d0:	2b40      	cmp	r3, #64	; 0x40
 80090d2:	f200 8146 	bhi.w	8009362 <USBD_StdEPReq+0x2b2>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <USBD_StdEPReq+0x40>
 80090da:	2b20      	cmp	r3, #32
 80090dc:	f040 8141 	bne.w	8009362 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	4798      	blx	r3
      break;
 80090ee:	e13d      	b.n	800936c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d10a      	bne.n	8009112 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	e12d      	b.n	800936e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	785b      	ldrb	r3, [r3, #1]
 8009116:	2b03      	cmp	r3, #3
 8009118:	d007      	beq.n	800912a <USBD_StdEPReq+0x7a>
 800911a:	2b03      	cmp	r3, #3
 800911c:	f300 811b 	bgt.w	8009356 <USBD_StdEPReq+0x2a6>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d072      	beq.n	800920a <USBD_StdEPReq+0x15a>
 8009124:	2b01      	cmp	r3, #1
 8009126:	d03a      	beq.n	800919e <USBD_StdEPReq+0xee>
 8009128:	e115      	b.n	8009356 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009130:	2b02      	cmp	r3, #2
 8009132:	d002      	beq.n	800913a <USBD_StdEPReq+0x8a>
 8009134:	2b03      	cmp	r3, #3
 8009136:	d015      	beq.n	8009164 <USBD_StdEPReq+0xb4>
 8009138:	e02b      	b.n	8009192 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00c      	beq.n	800915a <USBD_StdEPReq+0xaa>
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	2b80      	cmp	r3, #128	; 0x80
 8009144:	d009      	beq.n	800915a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 f8d4 	bl	800a2f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009150:	2180      	movs	r1, #128	; 0x80
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 f8d0 	bl	800a2f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009158:	e020      	b.n	800919c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fc1e 	bl	800999e <USBD_CtlError>
              break;
 8009162:	e01b      	b.n	800919c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	885b      	ldrh	r3, [r3, #2]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10e      	bne.n	800918a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <USBD_StdEPReq+0xda>
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	2b80      	cmp	r3, #128	; 0x80
 8009176:	d008      	beq.n	800918a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	88db      	ldrh	r3, [r3, #6]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d104      	bne.n	800918a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 f8b7 	bl	800a2f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fccf 	bl	8009b2e <USBD_CtlSendStatus>

              break;
 8009190:	e004      	b.n	800919c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fc02 	bl	800999e <USBD_CtlError>
              break;
 800919a:	bf00      	nop
          }
          break;
 800919c:	e0e0      	b.n	8009360 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d002      	beq.n	80091ae <USBD_StdEPReq+0xfe>
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d015      	beq.n	80091d8 <USBD_StdEPReq+0x128>
 80091ac:	e026      	b.n	80091fc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00c      	beq.n	80091ce <USBD_StdEPReq+0x11e>
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	2b80      	cmp	r3, #128	; 0x80
 80091b8:	d009      	beq.n	80091ce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 f89a 	bl	800a2f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80091c4:	2180      	movs	r1, #128	; 0x80
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 f896 	bl	800a2f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091cc:	e01c      	b.n	8009208 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fbe4 	bl	800999e <USBD_CtlError>
              break;
 80091d6:	e017      	b.n	8009208 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	885b      	ldrh	r3, [r3, #2]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d112      	bne.n	8009206 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d004      	beq.n	80091f4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 f8a1 	bl	800a336 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fc9a 	bl	8009b2e <USBD_CtlSendStatus>
              }
              break;
 80091fa:	e004      	b.n	8009206 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fbcd 	bl	800999e <USBD_CtlError>
              break;
 8009204:	e000      	b.n	8009208 <USBD_StdEPReq+0x158>
              break;
 8009206:	bf00      	nop
          }
          break;
 8009208:	e0aa      	b.n	8009360 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009210:	2b02      	cmp	r3, #2
 8009212:	d002      	beq.n	800921a <USBD_StdEPReq+0x16a>
 8009214:	2b03      	cmp	r3, #3
 8009216:	d032      	beq.n	800927e <USBD_StdEPReq+0x1ce>
 8009218:	e097      	b.n	800934a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <USBD_StdEPReq+0x180>
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	2b80      	cmp	r3, #128	; 0x80
 8009224:	d004      	beq.n	8009230 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fbb8 	bl	800999e <USBD_CtlError>
                break;
 800922e:	e091      	b.n	8009354 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009234:	2b00      	cmp	r3, #0
 8009236:	da0b      	bge.n	8009250 <USBD_StdEPReq+0x1a0>
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	3310      	adds	r3, #16
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	4413      	add	r3, r2
 800924c:	3304      	adds	r3, #4
 800924e:	e00b      	b.n	8009268 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	4413      	add	r3, r2
 8009266:	3304      	adds	r3, #4
 8009268:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2202      	movs	r2, #2
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fbfb 	bl	8009a72 <USBD_CtlSendData>
              break;
 800927c:	e06a      	b.n	8009354 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800927e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009282:	2b00      	cmp	r3, #0
 8009284:	da11      	bge.n	80092aa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009286:	7bbb      	ldrb	r3, [r7, #14]
 8009288:	f003 020f 	and.w	r2, r3, #15
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	440b      	add	r3, r1
 8009298:	3318      	adds	r3, #24
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d117      	bne.n	80092d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fb7b 	bl	800999e <USBD_CtlError>
                  break;
 80092a8:	e054      	b.n	8009354 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	f003 020f 	and.w	r2, r3, #15
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	4613      	mov	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fb68 	bl	800999e <USBD_CtlError>
                  break;
 80092ce:	e041      	b.n	8009354 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	da0b      	bge.n	80092f0 <USBD_StdEPReq+0x240>
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	3310      	adds	r3, #16
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	4413      	add	r3, r2
 80092ec:	3304      	adds	r3, #4
 80092ee:	e00b      	b.n	8009308 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	4413      	add	r3, r2
 8009306:	3304      	adds	r3, #4
 8009308:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <USBD_StdEPReq+0x266>
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	2b80      	cmp	r3, #128	; 0x80
 8009314:	d103      	bne.n	800931e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	e00e      	b.n	800933c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800931e:	7bbb      	ldrb	r3, [r7, #14]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 f826 	bl	800a374 <USBD_LL_IsStallEP>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2201      	movs	r2, #1
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	e002      	b.n	800933c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	2202      	movs	r2, #2
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fb95 	bl	8009a72 <USBD_CtlSendData>
              break;
 8009348:	e004      	b.n	8009354 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fb26 	bl	800999e <USBD_CtlError>
              break;
 8009352:	bf00      	nop
          }
          break;
 8009354:	e004      	b.n	8009360 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fb20 	bl	800999e <USBD_CtlError>
          break;
 800935e:	bf00      	nop
      }
      break;
 8009360:	e004      	b.n	800936c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fb1a 	bl	800999e <USBD_CtlError>
      break;
 800936a:	bf00      	nop
  }

  return ret;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	885b      	ldrh	r3, [r3, #2]
 8009392:	0a1b      	lsrs	r3, r3, #8
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	2b06      	cmp	r3, #6
 800939a:	f200 8128 	bhi.w	80095ee <USBD_GetDescriptor+0x276>
 800939e:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <USBD_GetDescriptor+0x2c>)
 80093a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	080093d9 	.word	0x080093d9
 80093ac:	08009419 	.word	0x08009419
 80093b0:	080095ef 	.word	0x080095ef
 80093b4:	080095ef 	.word	0x080095ef
 80093b8:	0800958f 	.word	0x0800958f
 80093bc:	080095bb 	.word	0x080095bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	7c12      	ldrb	r2, [r2, #16]
 80093cc:	f107 0108 	add.w	r1, r7, #8
 80093d0:	4610      	mov	r0, r2
 80093d2:	4798      	blx	r3
 80093d4:	60f8      	str	r0, [r7, #12]
      break;
 80093d6:	e112      	b.n	80095fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7c1b      	ldrb	r3, [r3, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10d      	bne.n	80093fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e8:	f107 0208 	add.w	r2, r7, #8
 80093ec:	4610      	mov	r0, r2
 80093ee:	4798      	blx	r3
 80093f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3301      	adds	r3, #1
 80093f6:	2202      	movs	r2, #2
 80093f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80093fa:	e100      	b.n	80095fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	f107 0208 	add.w	r2, r7, #8
 8009408:	4610      	mov	r0, r2
 800940a:	4798      	blx	r3
 800940c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3301      	adds	r3, #1
 8009412:	2202      	movs	r2, #2
 8009414:	701a      	strb	r2, [r3, #0]
      break;
 8009416:	e0f2      	b.n	80095fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	885b      	ldrh	r3, [r3, #2]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b05      	cmp	r3, #5
 8009420:	f200 80ac 	bhi.w	800957c <USBD_GetDescriptor+0x204>
 8009424:	a201      	add	r2, pc, #4	; (adr r2, 800942c <USBD_GetDescriptor+0xb4>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	08009445 	.word	0x08009445
 8009430:	08009479 	.word	0x08009479
 8009434:	080094ad 	.word	0x080094ad
 8009438:	080094e1 	.word	0x080094e1
 800943c:	08009515 	.word	0x08009515
 8009440:	08009549 	.word	0x08009549
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	7c12      	ldrb	r2, [r2, #16]
 800945c:	f107 0108 	add.w	r1, r7, #8
 8009460:	4610      	mov	r0, r2
 8009462:	4798      	blx	r3
 8009464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009466:	e091      	b.n	800958c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa97 	bl	800999e <USBD_CtlError>
            err++;
 8009470:	7afb      	ldrb	r3, [r7, #11]
 8009472:	3301      	adds	r3, #1
 8009474:	72fb      	strb	r3, [r7, #11]
          break;
 8009476:	e089      	b.n	800958c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00b      	beq.n	800949c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	7c12      	ldrb	r2, [r2, #16]
 8009490:	f107 0108 	add.w	r1, r7, #8
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
 8009498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800949a:	e077      	b.n	800958c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa7d 	bl	800999e <USBD_CtlError>
            err++;
 80094a4:	7afb      	ldrb	r3, [r7, #11]
 80094a6:	3301      	adds	r3, #1
 80094a8:	72fb      	strb	r3, [r7, #11]
          break;
 80094aa:	e06f      	b.n	800958c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	7c12      	ldrb	r2, [r2, #16]
 80094c4:	f107 0108 	add.w	r1, r7, #8
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
 80094cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ce:	e05d      	b.n	800958c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa63 	bl	800999e <USBD_CtlError>
            err++;
 80094d8:	7afb      	ldrb	r3, [r7, #11]
 80094da:	3301      	adds	r3, #1
 80094dc:	72fb      	strb	r3, [r7, #11]
          break;
 80094de:	e055      	b.n	800958c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	7c12      	ldrb	r2, [r2, #16]
 80094f8:	f107 0108 	add.w	r1, r7, #8
 80094fc:	4610      	mov	r0, r2
 80094fe:	4798      	blx	r3
 8009500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009502:	e043      	b.n	800958c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa49 	bl	800999e <USBD_CtlError>
            err++;
 800950c:	7afb      	ldrb	r3, [r7, #11]
 800950e:	3301      	adds	r3, #1
 8009510:	72fb      	strb	r3, [r7, #11]
          break;
 8009512:	e03b      	b.n	800958c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800951a:	695b      	ldr	r3, [r3, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00b      	beq.n	8009538 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	7c12      	ldrb	r2, [r2, #16]
 800952c:	f107 0108 	add.w	r1, r7, #8
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
 8009534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009536:	e029      	b.n	800958c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa2f 	bl	800999e <USBD_CtlError>
            err++;
 8009540:	7afb      	ldrb	r3, [r7, #11]
 8009542:	3301      	adds	r3, #1
 8009544:	72fb      	strb	r3, [r7, #11]
          break;
 8009546:	e021      	b.n	800958c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	7c12      	ldrb	r2, [r2, #16]
 8009560:	f107 0108 	add.w	r1, r7, #8
 8009564:	4610      	mov	r0, r2
 8009566:	4798      	blx	r3
 8009568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800956a:	e00f      	b.n	800958c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fa15 	bl	800999e <USBD_CtlError>
            err++;
 8009574:	7afb      	ldrb	r3, [r7, #11]
 8009576:	3301      	adds	r3, #1
 8009578:	72fb      	strb	r3, [r7, #11]
          break;
 800957a:	e007      	b.n	800958c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fa0d 	bl	800999e <USBD_CtlError>
          err++;
 8009584:	7afb      	ldrb	r3, [r7, #11]
 8009586:	3301      	adds	r3, #1
 8009588:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800958a:	e038      	b.n	80095fe <USBD_GetDescriptor+0x286>
 800958c:	e037      	b.n	80095fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7c1b      	ldrb	r3, [r3, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d109      	bne.n	80095aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959e:	f107 0208 	add.w	r2, r7, #8
 80095a2:	4610      	mov	r0, r2
 80095a4:	4798      	blx	r3
 80095a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095a8:	e029      	b.n	80095fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f9f6 	bl	800999e <USBD_CtlError>
        err++;
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	3301      	adds	r3, #1
 80095b6:	72fb      	strb	r3, [r7, #11]
      break;
 80095b8:	e021      	b.n	80095fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	7c1b      	ldrb	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10d      	bne.n	80095de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ca:	f107 0208 	add.w	r2, r7, #8
 80095ce:	4610      	mov	r0, r2
 80095d0:	4798      	blx	r3
 80095d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3301      	adds	r3, #1
 80095d8:	2207      	movs	r2, #7
 80095da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095dc:	e00f      	b.n	80095fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f9dc 	bl	800999e <USBD_CtlError>
        err++;
 80095e6:	7afb      	ldrb	r3, [r7, #11]
 80095e8:	3301      	adds	r3, #1
 80095ea:	72fb      	strb	r3, [r7, #11]
      break;
 80095ec:	e007      	b.n	80095fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f9d4 	bl	800999e <USBD_CtlError>
      err++;
 80095f6:	7afb      	ldrb	r3, [r7, #11]
 80095f8:	3301      	adds	r3, #1
 80095fa:	72fb      	strb	r3, [r7, #11]
      break;
 80095fc:	bf00      	nop
  }

  if (err != 0U)
 80095fe:	7afb      	ldrb	r3, [r7, #11]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d11c      	bne.n	800963e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009604:	893b      	ldrh	r3, [r7, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d011      	beq.n	800962e <USBD_GetDescriptor+0x2b6>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	88db      	ldrh	r3, [r3, #6]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00d      	beq.n	800962e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	88da      	ldrh	r2, [r3, #6]
 8009616:	893b      	ldrh	r3, [r7, #8]
 8009618:	4293      	cmp	r3, r2
 800961a:	bf28      	it	cs
 800961c:	4613      	movcs	r3, r2
 800961e:	b29b      	uxth	r3, r3
 8009620:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009622:	893b      	ldrh	r3, [r7, #8]
 8009624:	461a      	mov	r2, r3
 8009626:	68f9      	ldr	r1, [r7, #12]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fa22 	bl	8009a72 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	88db      	ldrh	r3, [r3, #6]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d104      	bne.n	8009640 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa79 	bl	8009b2e <USBD_CtlSendStatus>
 800963c:	e000      	b.n	8009640 <USBD_GetDescriptor+0x2c8>
    return;
 800963e:	bf00      	nop
    }
  }
}
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop

08009648 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	889b      	ldrh	r3, [r3, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d130      	bne.n	80096bc <USBD_SetAddress+0x74>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	88db      	ldrh	r3, [r3, #6]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d12c      	bne.n	80096bc <USBD_SetAddress+0x74>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	885b      	ldrh	r3, [r3, #2]
 8009666:	2b7f      	cmp	r3, #127	; 0x7f
 8009668:	d828      	bhi.n	80096bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	885b      	ldrh	r3, [r3, #2]
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009674:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967c:	2b03      	cmp	r3, #3
 800967e:	d104      	bne.n	800968a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f98b 	bl	800999e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009688:	e01d      	b.n	80096c6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	7bfa      	ldrb	r2, [r7, #15]
 800968e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fe98 	bl	800a3cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fa46 	bl	8009b2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d004      	beq.n	80096b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b0:	e009      	b.n	80096c6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ba:	e004      	b.n	80096c6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f96d 	bl	800999e <USBD_CtlError>
  }
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	885b      	ldrh	r3, [r3, #2]
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	4b41      	ldr	r3, [pc, #260]	; (80097e8 <USBD_SetConfig+0x118>)
 80096e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096e4:	4b40      	ldr	r3, [pc, #256]	; (80097e8 <USBD_SetConfig+0x118>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d904      	bls.n	80096f6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f955 	bl	800999e <USBD_CtlError>
 80096f4:	e075      	b.n	80097e2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d002      	beq.n	8009706 <USBD_SetConfig+0x36>
 8009700:	2b03      	cmp	r3, #3
 8009702:	d023      	beq.n	800974c <USBD_SetConfig+0x7c>
 8009704:	e062      	b.n	80097cc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009706:	4b38      	ldr	r3, [pc, #224]	; (80097e8 <USBD_SetConfig+0x118>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d01a      	beq.n	8009744 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800970e:	4b36      	ldr	r3, [pc, #216]	; (80097e8 <USBD_SetConfig+0x118>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2203      	movs	r2, #3
 800971c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009720:	4b31      	ldr	r3, [pc, #196]	; (80097e8 <USBD_SetConfig+0x118>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff f9e8 	bl	8008afc <USBD_SetClassConfig>
 800972c:	4603      	mov	r3, r0
 800972e:	2b02      	cmp	r3, #2
 8009730:	d104      	bne.n	800973c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f932 	bl	800999e <USBD_CtlError>
            return;
 800973a:	e052      	b.n	80097e2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f9f6 	bl	8009b2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009742:	e04e      	b.n	80097e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f9f2 	bl	8009b2e <USBD_CtlSendStatus>
        break;
 800974a:	e04a      	b.n	80097e2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800974c:	4b26      	ldr	r3, [pc, #152]	; (80097e8 <USBD_SetConfig+0x118>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d112      	bne.n	800977a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2202      	movs	r2, #2
 8009758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800975c:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <USBD_SetConfig+0x118>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009766:	4b20      	ldr	r3, [pc, #128]	; (80097e8 <USBD_SetConfig+0x118>)
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff f9e4 	bl	8008b3a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f9db 	bl	8009b2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009778:	e033      	b.n	80097e2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800977a:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <USBD_SetConfig+0x118>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d01d      	beq.n	80097c4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff f9d2 	bl	8008b3a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <USBD_SetConfig+0x118>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097a0:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <USBD_SetConfig+0x118>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff f9a8 	bl	8008afc <USBD_SetClassConfig>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d104      	bne.n	80097bc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f8f2 	bl	800999e <USBD_CtlError>
            return;
 80097ba:	e012      	b.n	80097e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f9b6 	bl	8009b2e <USBD_CtlSendStatus>
        break;
 80097c2:	e00e      	b.n	80097e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f9b2 	bl	8009b2e <USBD_CtlSendStatus>
        break;
 80097ca:	e00a      	b.n	80097e2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f8e5 	bl	800999e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80097d4:	4b04      	ldr	r3, [pc, #16]	; (80097e8 <USBD_SetConfig+0x118>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff f9ad 	bl	8008b3a <USBD_ClrClassConfig>
        break;
 80097e0:	bf00      	nop
    }
  }
}
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20000328 	.word	0x20000328

080097ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	88db      	ldrh	r3, [r3, #6]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d004      	beq.n	8009808 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f8cc 	bl	800999e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009806:	e022      	b.n	800984e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800980e:	2b02      	cmp	r3, #2
 8009810:	dc02      	bgt.n	8009818 <USBD_GetConfig+0x2c>
 8009812:	2b00      	cmp	r3, #0
 8009814:	dc03      	bgt.n	800981e <USBD_GetConfig+0x32>
 8009816:	e015      	b.n	8009844 <USBD_GetConfig+0x58>
 8009818:	2b03      	cmp	r3, #3
 800981a:	d00b      	beq.n	8009834 <USBD_GetConfig+0x48>
 800981c:	e012      	b.n	8009844 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3308      	adds	r3, #8
 8009828:	2201      	movs	r2, #1
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f920 	bl	8009a72 <USBD_CtlSendData>
        break;
 8009832:	e00c      	b.n	800984e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3304      	adds	r3, #4
 8009838:	2201      	movs	r2, #1
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f918 	bl	8009a72 <USBD_CtlSendData>
        break;
 8009842:	e004      	b.n	800984e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f8a9 	bl	800999e <USBD_CtlError>
        break;
 800984c:	bf00      	nop
}
 800984e:	bf00      	nop
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009866:	3b01      	subs	r3, #1
 8009868:	2b02      	cmp	r3, #2
 800986a:	d81e      	bhi.n	80098aa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	88db      	ldrh	r3, [r3, #6]
 8009870:	2b02      	cmp	r3, #2
 8009872:	d004      	beq.n	800987e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f891 	bl	800999e <USBD_CtlError>
        break;
 800987c:	e01a      	b.n	80098b4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800988a:	2b00      	cmp	r3, #0
 800988c:	d005      	beq.n	800989a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f043 0202 	orr.w	r2, r3, #2
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	330c      	adds	r3, #12
 800989e:	2202      	movs	r2, #2
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f8e5 	bl	8009a72 <USBD_CtlSendData>
      break;
 80098a8:	e004      	b.n	80098b4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f876 	bl	800999e <USBD_CtlError>
      break;
 80098b2:	bf00      	nop
  }
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	885b      	ldrh	r3, [r3, #2]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d106      	bne.n	80098dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f929 	bl	8009b2e <USBD_CtlSendStatus>
  }
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f4:	3b01      	subs	r3, #1
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d80b      	bhi.n	8009912 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	885b      	ldrh	r3, [r3, #2]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d10c      	bne.n	800991c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f90f 	bl	8009b2e <USBD_CtlSendStatus>
      }
      break;
 8009910:	e004      	b.n	800991c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f842 	bl	800999e <USBD_CtlError>
      break;
 800991a:	e000      	b.n	800991e <USBD_ClrFeature+0x3a>
      break;
 800991c:	bf00      	nop
  }
}
 800991e:	bf00      	nop
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781a      	ldrb	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	785a      	ldrb	r2, [r3, #1]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	3302      	adds	r3, #2
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b29a      	uxth	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	3303      	adds	r3, #3
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	021b      	lsls	r3, r3, #8
 8009952:	b29b      	uxth	r3, r3
 8009954:	4413      	add	r3, r2
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	3304      	adds	r3, #4
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	b29a      	uxth	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	3305      	adds	r3, #5
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	b29b      	uxth	r3, r3
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	b29b      	uxth	r3, r3
 8009970:	4413      	add	r3, r2
 8009972:	b29a      	uxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	3306      	adds	r3, #6
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b29a      	uxth	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	3307      	adds	r3, #7
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	b29b      	uxth	r3, r3
 800998c:	4413      	add	r3, r2
 800998e:	b29a      	uxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	80da      	strh	r2, [r3, #6]

}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr

0800999e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80099a8:	2180      	movs	r1, #128	; 0x80
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fca4 	bl	800a2f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80099b0:	2100      	movs	r1, #0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fca0 	bl	800a2f8 <USBD_LL_StallEP>
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d032      	beq.n	8009a3c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 f834 	bl	8009a44 <USBD_GetLen>
 80099dc:	4603      	mov	r3, r0
 80099de:	3301      	adds	r3, #1
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	75fa      	strb	r2, [r7, #23]
 80099f0:	461a      	mov	r2, r3
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	4413      	add	r3, r2
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	7812      	ldrb	r2, [r2, #0]
 80099fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80099fc:	7dfb      	ldrb	r3, [r7, #23]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	75fa      	strb	r2, [r7, #23]
 8009a02:	461a      	mov	r2, r3
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	4413      	add	r3, r2
 8009a08:	2203      	movs	r2, #3
 8009a0a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009a0c:	e012      	b.n	8009a34 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	60fa      	str	r2, [r7, #12]
 8009a14:	7dfa      	ldrb	r2, [r7, #23]
 8009a16:	1c51      	adds	r1, r2, #1
 8009a18:	75f9      	strb	r1, [r7, #23]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	440a      	add	r2, r1
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	75fa      	strb	r2, [r7, #23]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4413      	add	r3, r2
 8009a30:	2200      	movs	r2, #0
 8009a32:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e8      	bne.n	8009a0e <USBD_GetString+0x4e>
    }
  }
}
 8009a3c:	bf00      	nop
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009a50:	e005      	b.n	8009a5e <USBD_GetLen+0x1a>
  {
    len++;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	3301      	adds	r3, #1
 8009a56:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1f5      	bne.n	8009a52 <USBD_GetLen+0xe>
  }

  return len;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bc80      	pop	{r7}
 8009a70:	4770      	bx	lr

08009a72 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a88:	88fa      	ldrh	r2, [r7, #6]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a94:	88fb      	ldrh	r3, [r7, #6]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 fcb5 	bl	800a40a <USBD_LL_Transmit>

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	2100      	movs	r1, #0
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fca3 	bl	800a40a <USBD_LL_Transmit>

  return USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	60f8      	str	r0, [r7, #12]
 8009ad6:	60b9      	str	r1, [r7, #8]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2203      	movs	r2, #3
 8009ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ae4:	88fa      	ldrh	r2, [r7, #6]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009aec:	88fa      	ldrh	r2, [r7, #6]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009af4:	88fb      	ldrh	r3, [r7, #6]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	2100      	movs	r1, #0
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fca8 	bl	800a450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	4613      	mov	r3, r2
 8009b16:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b18:	88fb      	ldrh	r3, [r7, #6]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fc96 	bl	800a450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2204      	movs	r2, #4
 8009b3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2200      	movs	r2, #0
 8009b42:	2100      	movs	r1, #0
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fc60 	bl	800a40a <USBD_LL_Transmit>

  return USBD_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2205      	movs	r2, #5
 8009b60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b64:	2300      	movs	r3, #0
 8009b66:	2200      	movs	r2, #0
 8009b68:	2100      	movs	r1, #0
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fc70 	bl	800a450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b80:	2200      	movs	r2, #0
 8009b82:	4912      	ldr	r1, [pc, #72]	; (8009bcc <MX_USB_DEVICE_Init+0x50>)
 8009b84:	4812      	ldr	r0, [pc, #72]	; (8009bd0 <MX_USB_DEVICE_Init+0x54>)
 8009b86:	f7fe ff5f 	bl	8008a48 <USBD_Init>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b90:	f7f7 ff06 	bl	80019a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009b94:	490f      	ldr	r1, [pc, #60]	; (8009bd4 <MX_USB_DEVICE_Init+0x58>)
 8009b96:	480e      	ldr	r0, [pc, #56]	; (8009bd0 <MX_USB_DEVICE_Init+0x54>)
 8009b98:	f7fe ff81 	bl	8008a9e <USBD_RegisterClass>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009ba2:	f7f7 fefd 	bl	80019a0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009ba6:	490c      	ldr	r1, [pc, #48]	; (8009bd8 <MX_USB_DEVICE_Init+0x5c>)
 8009ba8:	4809      	ldr	r0, [pc, #36]	; (8009bd0 <MX_USB_DEVICE_Init+0x54>)
 8009baa:	f7fe ff37 	bl	8008a1c <USBD_CUSTOM_HID_RegisterInterface>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009bb4:	f7f7 fef4 	bl	80019a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009bb8:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <MX_USB_DEVICE_Init+0x54>)
 8009bba:	f7fe ff89 	bl	8008ad0 <USBD_Start>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009bc4:	f7f7 feec 	bl	80019a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009bc8:	bf00      	nop
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000158 	.word	0x20000158
 8009bd0:	2000032c 	.word	0x2000032c
 8009bd4:	2000003c 	.word	0x2000003c
 8009bd8:	20000148 	.word	0x20000148

08009bdc <save_to_flash>:
  */

/* USER CODE BEGIN PRIVATE_MACRO */

void save_to_flash(uint8_t *data)
{
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	b08f      	sub	sp, #60	; 0x3c
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	466b      	mov	r3, sp
 8009be8:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7f6 fab0 	bl	8000150 <strlen>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	089e      	lsrs	r6, r3, #2
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7f6 faab 	bl	8000150 <strlen>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f003 0303 	and.w	r3, r3, #3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bf14      	ite	ne
 8009c04:	2301      	movne	r3, #1
 8009c06:	2300      	moveq	r3, #0
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	18f1      	adds	r1, r6, r3
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	637b      	str	r3, [r7, #52]	; 0x34
 8009c12:	2300      	movs	r3, #0
 8009c14:	4688      	mov	r8, r1
 8009c16:	4699      	mov	r9, r3
 8009c18:	f04f 0200 	mov.w	r2, #0
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009c24:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009c28:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	461d      	mov	r5, r3
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	f04f 0300 	mov.w	r3, #0
 8009c3a:	016b      	lsls	r3, r5, #5
 8009c3c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009c40:	0162      	lsls	r2, r4, #5
 8009c42:	008b      	lsls	r3, r1, #2
 8009c44:	3307      	adds	r3, #7
 8009c46:	08db      	lsrs	r3, r3, #3
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	ebad 0d03 	sub.w	sp, sp, r3
 8009c4e:	466b      	mov	r3, sp
 8009c50:	3303      	adds	r3, #3
 8009c52:	089b      	lsrs	r3, r3, #2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8009c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c5a:	f7f6 fa79 	bl	8000150 <strlen>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	461a      	mov	r2, r3
 8009c62:	2100      	movs	r1, #0
 8009c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c66:	f000 fc9f 	bl	800a5a8 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c6e:	f000 fcc3 	bl	800a5f8 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8009c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c74:	f7f6 fa6c 	bl	8000150 <strlen>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8009c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c7e:	f7f6 fa67 	bl	8000150 <strlen>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f003 0303 	and.w	r3, r3, #3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bf14      	ite	ne
 8009c8c:	2301      	movne	r3, #1
 8009c8e:	2300      	moveq	r3, #0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8009c94:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7f6 fa5a 	bl	8000150 <strlen>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 8009ca0:	b29c      	uxth	r4, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7f6 fa54 	bl	8000150 <strlen>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	bf14      	ite	ne
 8009cb2:	2301      	movne	r3, #1
 8009cb4:	2300      	moveq	r3, #0
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	4423      	add	r3, r4
 8009cbc:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8009cbe:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8009cc0:	f7f9 f832 	bl	8002d28 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 8009cc4:	f7f9 f866 	bl	8002d94 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 8009ccc:	4b21      	ldr	r3, [pc, #132]	; (8009d54 <save_to_flash+0x178>)
 8009cce:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 8009cd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	613b      	str	r3, [r7, #16]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8009cde:	f107 0214 	add.w	r2, r7, #20
 8009ce2:	f107 0318 	add.w	r3, r7, #24
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7f9 f931 	bl	8002f50 <HAL_FLASHEx_Erase>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	72fb      	strb	r3, [r7, #11]
	  while(index < data_length)
 8009cf2:	e020      	b.n	8009d36 <save_to_flash+0x15a>
	  {
		  if (status == HAL_OK)
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d11c      	bne.n	8009d36 <save_to_flash+0x15a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8009d02:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	469a      	mov	sl, r3
 8009d12:	4693      	mov	fp, r2
 8009d14:	4652      	mov	r2, sl
 8009d16:	465b      	mov	r3, fp
 8009d18:	2002      	movs	r0, #2
 8009d1a:	f7f8 ff95 	bl	8002c48 <HAL_FLASH_Program>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 8009d22:	7afb      	ldrb	r3, [r7, #11]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <save_to_flash+0x15a>
			  {
				  write_cnt += 4;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	613b      	str	r3, [r7, #16]
				  index++;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]
	  while(index < data_length)
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d3da      	bcc.n	8009cf4 <save_to_flash+0x118>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8009d3e:	f7f9 f845 	bl	8002dcc <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 8009d42:	f7f9 f817 	bl	8002d74 <HAL_FLASH_Lock>
 8009d46:	f8d7 d000 	ldr.w	sp, [r7]
}
 8009d4a:	bf00      	nop
 8009d4c:	373c      	adds	r7, #60	; 0x3c
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	08019000 	.word	0x08019000

08009d58 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr

08009d66 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009d66:	b480      	push	{r7}
 8009d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009d6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bc80      	pop	{r7}
 8009d72:	4770      	bx	lr

08009d74 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
	//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

    static uint8_t position;
	static char * data_to_send[0xC0]; //0x40 * 3

    if (state[0] == 'I'){
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b49      	cmp	r3, #73	; 0x49
 8009d82:	d104      	bne.n	8009d8e <CUSTOM_HID_OutEvent_FS+0x1a>
		position = 0;
 8009d84:	4b17      	ldr	r3, [pc, #92]	; (8009de4 <CUSTOM_HID_OutEvent_FS+0x70>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
		return 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e025      	b.n	8009dda <CUSTOM_HID_OutEvent_FS+0x66>
	}

    memcpy(&data_to_send[position], state, 0x40);
 8009d8e:	4b15      	ldr	r3, [pc, #84]	; (8009de4 <CUSTOM_HID_OutEvent_FS+0x70>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4a14      	ldr	r2, [pc, #80]	; (8009de8 <CUSTOM_HID_OutEvent_FS+0x74>)
 8009d96:	4413      	add	r3, r2
 8009d98:	2240      	movs	r2, #64	; 0x40
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fbf5 	bl	800a58c <memcpy>
    position = position+16;
 8009da2:	4b10      	ldr	r3, [pc, #64]	; (8009de4 <CUSTOM_HID_OutEvent_FS+0x70>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	3310      	adds	r3, #16
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <CUSTOM_HID_OutEvent_FS+0x70>)
 8009dac:	701a      	strb	r2, [r3, #0]

	if (position >= 48){  //informa que a terceira linha foi recebida
 8009dae:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <CUSTOM_HID_OutEvent_FS+0x70>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b2f      	cmp	r3, #47	; 0x2f
 8009db4:	d910      	bls.n	8009dd8 <CUSTOM_HID_OutEvent_FS+0x64>
	    position = 0;
 8009db6:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <CUSTOM_HID_OutEvent_FS+0x70>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	701a      	strb	r2, [r3, #0]
		save_to_flash((uint8_t *)data_to_send);
 8009dbc:	480a      	ldr	r0, [pc, #40]	; (8009de8 <CUSTOM_HID_OutEvent_FS+0x74>)
 8009dbe:	f7ff ff0d 	bl	8009bdc <save_to_flash>
		update_data_from_flash(sliders_data, range_x_data, inverter_config);
 8009dc2:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <CUSTOM_HID_OutEvent_FS+0x78>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <CUSTOM_HID_OutEvent_FS+0x7c>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <CUSTOM_HID_OutEvent_FS+0x80>)
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f7f7 f944 	bl	8001060 <update_data_from_flash>
	}
	return (USBD_OK);
 8009dd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	200005f0 	.word	0x200005f0
 8009de8:	200005f4 	.word	0x200005f4
 8009dec:	20000014 	.word	0x20000014
 8009df0:	20000000 	.word	0x20000000
 8009df4:	200002f4 	.word	0x200002f4

08009df8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2212      	movs	r2, #18
 8009e08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e0a:	4b03      	ldr	r3, [pc, #12]	; (8009e18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bc80      	pop	{r7}
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20000174 	.word	0x20000174

08009e1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e2e:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	20000188 	.word	0x20000188

08009e40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	6039      	str	r1, [r7, #0]
 8009e4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d105      	bne.n	8009e5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	4907      	ldr	r1, [pc, #28]	; (8009e74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e56:	4808      	ldr	r0, [pc, #32]	; (8009e78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e58:	f7ff fdb2 	bl	80099c0 <USBD_GetString>
 8009e5c:	e004      	b.n	8009e68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	4904      	ldr	r1, [pc, #16]	; (8009e74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e62:	4805      	ldr	r0, [pc, #20]	; (8009e78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e64:	f7ff fdac 	bl	80099c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	200008f4 	.word	0x200008f4
 8009e78:	0800bb58 	.word	0x0800bb58

08009e7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	6039      	str	r1, [r7, #0]
 8009e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	4904      	ldr	r1, [pc, #16]	; (8009e9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e8c:	4804      	ldr	r0, [pc, #16]	; (8009ea0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e8e:	f7ff fd97 	bl	80099c0 <USBD_GetString>
  return USBD_StrDesc;
 8009e92:	4b02      	ldr	r3, [pc, #8]	; (8009e9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	200008f4 	.word	0x200008f4
 8009ea0:	0800bb6c 	.word	0x0800bb6c

08009ea4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	221a      	movs	r2, #26
 8009eb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009eb6:	f000 f843 	bl	8009f40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009eba:	4b02      	ldr	r3, [pc, #8]	; (8009ec4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	2000018c 	.word	0x2000018c

08009ec8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ed4:	79fb      	ldrb	r3, [r7, #7]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	4907      	ldr	r1, [pc, #28]	; (8009efc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ede:	4808      	ldr	r0, [pc, #32]	; (8009f00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ee0:	f7ff fd6e 	bl	80099c0 <USBD_GetString>
 8009ee4:	e004      	b.n	8009ef0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	4904      	ldr	r1, [pc, #16]	; (8009efc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eea:	4805      	ldr	r0, [pc, #20]	; (8009f00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009eec:	f7ff fd68 	bl	80099c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ef0:	4b02      	ldr	r3, [pc, #8]	; (8009efc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	200008f4 	.word	0x200008f4
 8009f00:	0800bb7c 	.word	0x0800bb7c

08009f04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	6039      	str	r1, [r7, #0]
 8009f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d105      	bne.n	8009f22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	4907      	ldr	r1, [pc, #28]	; (8009f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f1a:	4808      	ldr	r0, [pc, #32]	; (8009f3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f1c:	f7ff fd50 	bl	80099c0 <USBD_GetString>
 8009f20:	e004      	b.n	8009f2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	4904      	ldr	r1, [pc, #16]	; (8009f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f26:	4805      	ldr	r0, [pc, #20]	; (8009f3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f28:	f7ff fd4a 	bl	80099c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f2c:	4b02      	ldr	r3, [pc, #8]	; (8009f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	200008f4 	.word	0x200008f4
 8009f3c:	0800bb88 	.word	0x0800bb88

08009f40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f46:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <Get_SerialNum+0x44>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <Get_SerialNum+0x48>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f52:	4b0e      	ldr	r3, [pc, #56]	; (8009f8c <Get_SerialNum+0x4c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d009      	beq.n	8009f7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f66:	2208      	movs	r2, #8
 8009f68:	4909      	ldr	r1, [pc, #36]	; (8009f90 <Get_SerialNum+0x50>)
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 f814 	bl	8009f98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f70:	2204      	movs	r2, #4
 8009f72:	4908      	ldr	r1, [pc, #32]	; (8009f94 <Get_SerialNum+0x54>)
 8009f74:	68b8      	ldr	r0, [r7, #8]
 8009f76:	f000 f80f 	bl	8009f98 <IntToUnicode>
  }
}
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	1ffff7e8 	.word	0x1ffff7e8
 8009f88:	1ffff7ec 	.word	0x1ffff7ec
 8009f8c:	1ffff7f0 	.word	0x1ffff7f0
 8009f90:	2000018e 	.word	0x2000018e
 8009f94:	2000019e 	.word	0x2000019e

08009f98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009faa:	2300      	movs	r3, #0
 8009fac:	75fb      	strb	r3, [r7, #23]
 8009fae:	e027      	b.n	800a000 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	0f1b      	lsrs	r3, r3, #28
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	d80b      	bhi.n	8009fd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	0f1b      	lsrs	r3, r3, #28
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	440b      	add	r3, r1
 8009fc8:	3230      	adds	r2, #48	; 0x30
 8009fca:	b2d2      	uxtb	r2, r2
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	e00a      	b.n	8009fe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	0f1b      	lsrs	r3, r3, #28
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	4619      	mov	r1, r3
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	440b      	add	r3, r1
 8009fe0:	3237      	adds	r2, #55	; 0x37
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	75fb      	strb	r3, [r7, #23]
 800a000:	7dfa      	ldrb	r2, [r7, #23]
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	429a      	cmp	r2, r3
 800a006:	d3d3      	bcc.n	8009fb0 <IntToUnicode+0x18>
  }
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	371c      	adds	r7, #28
 800a00e:	46bd      	mov	sp, r7
 800a010:	bc80      	pop	{r7}
 800a012:	4770      	bx	lr

0800a014 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a0d      	ldr	r2, [pc, #52]	; (800a058 <HAL_PCD_MspInit+0x44>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d113      	bne.n	800a04e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a026:	4b0d      	ldr	r3, [pc, #52]	; (800a05c <HAL_PCD_MspInit+0x48>)
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	4a0c      	ldr	r2, [pc, #48]	; (800a05c <HAL_PCD_MspInit+0x48>)
 800a02c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a030:	61d3      	str	r3, [r2, #28]
 800a032:	4b0a      	ldr	r3, [pc, #40]	; (800a05c <HAL_PCD_MspInit+0x48>)
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a03e:	2200      	movs	r2, #0
 800a040:	2100      	movs	r1, #0
 800a042:	2014      	movs	r0, #20
 800a044:	f7f8 fbdb 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a048:	2014      	movs	r0, #20
 800a04a:	f7f8 fbf4 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a04e:	bf00      	nop
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	40005c00 	.word	0x40005c00
 800a05c:	40021000 	.word	0x40021000

0800a060 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a074:	4619      	mov	r1, r3
 800a076:	4610      	mov	r0, r2
 800a078:	f7fe fd72 	bl	8008b60 <USBD_LL_SetupStage>
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a096:	78fa      	ldrb	r2, [r7, #3]
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	4613      	mov	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4413      	add	r3, r2
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	440b      	add	r3, r1
 800a0a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f7fe fda4 	bl	8008bfa <USBD_LL_DataOutStage>
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	440b      	add	r3, r1
 800a0da:	333c      	adds	r3, #60	; 0x3c
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f7fe fdfb 	bl	8008cdc <USBD_LL_DataInStage>
}
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe ff0b 	bl	8008f18 <USBD_LL_SOF>
}
 800a102:	bf00      	nop
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a112:	2301      	movs	r3, #1
 800a114:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d001      	beq.n	800a122 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a11e:	f7f7 fc3f 	bl	80019a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a128:	7bfa      	ldrb	r2, [r7, #15]
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe febb 	bl	8008ea8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe fe74 	bl	8008e26 <USBD_LL_Reset>
}
 800a13e:	bf00      	nop
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe feb5 	bl	8008ec6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <HAL_PCD_SuspendCallback+0x30>)
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	4a03      	ldr	r2, [pc, #12]	; (800a178 <HAL_PCD_SuspendCallback+0x30>)
 800a16a:	f043 0306 	orr.w	r3, r3, #6
 800a16e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed00 	.word	0xe000ed00

0800a17c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe feaf 	bl	8008eee <USBD_LL_Resume>
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a1a0:	4a23      	ldr	r2, [pc, #140]	; (800a230 <USBD_LL_Init+0x98>)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a21      	ldr	r2, [pc, #132]	; (800a230 <USBD_LL_Init+0x98>)
 800a1ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a1b0:	4b1f      	ldr	r3, [pc, #124]	; (800a230 <USBD_LL_Init+0x98>)
 800a1b2:	4a20      	ldr	r2, [pc, #128]	; (800a234 <USBD_LL_Init+0x9c>)
 800a1b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a1b6:	4b1e      	ldr	r3, [pc, #120]	; (800a230 <USBD_LL_Init+0x98>)
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a1bc:	4b1c      	ldr	r3, [pc, #112]	; (800a230 <USBD_LL_Init+0x98>)
 800a1be:	2202      	movs	r2, #2
 800a1c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a1c2:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <USBD_LL_Init+0x98>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a1c8:	4b19      	ldr	r3, [pc, #100]	; (800a230 <USBD_LL_Init+0x98>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a1ce:	4b18      	ldr	r3, [pc, #96]	; (800a230 <USBD_LL_Init+0x98>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a1d4:	4816      	ldr	r0, [pc, #88]	; (800a230 <USBD_LL_Init+0x98>)
 800a1d6:	f7f9 f8ff 	bl	80033d8 <HAL_PCD_Init>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a1e0:	f7f7 fbde 	bl	80019a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1ea:	2318      	movs	r3, #24
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	f7fa fd5c 	bl	8004cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1fa:	2358      	movs	r3, #88	; 0x58
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2180      	movs	r1, #128	; 0x80
 800a200:	f7fa fd54 	bl	8004cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a20a:	2398      	movs	r3, #152	; 0x98
 800a20c:	2200      	movs	r2, #0
 800a20e:	2181      	movs	r1, #129	; 0x81
 800a210:	f7fa fd4c 	bl	8004cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a21a:	23d8      	movs	r3, #216	; 0xd8
 800a21c:	2200      	movs	r2, #0
 800a21e:	2101      	movs	r1, #1
 800a220:	f7fa fd44 	bl	8004cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20000af4 	.word	0x20000af4
 800a234:	40005c00 	.word	0x40005c00

0800a238 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a24e:	4618      	mov	r0, r3
 800a250:	f7f9 f9cd 	bl	80035ee <HAL_PCD_Start>
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 f93c 	bl	800a4d8 <USBD_Get_USB_Status>
 800a260:	4603      	mov	r3, r0
 800a262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a264:	7bbb      	ldrb	r3, [r7, #14]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	4608      	mov	r0, r1
 800a278:	4611      	mov	r1, r2
 800a27a:	461a      	mov	r2, r3
 800a27c:	4603      	mov	r3, r0
 800a27e:	70fb      	strb	r3, [r7, #3]
 800a280:	460b      	mov	r3, r1
 800a282:	70bb      	strb	r3, [r7, #2]
 800a284:	4613      	mov	r3, r2
 800a286:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a296:	78bb      	ldrb	r3, [r7, #2]
 800a298:	883a      	ldrh	r2, [r7, #0]
 800a29a:	78f9      	ldrb	r1, [r7, #3]
 800a29c:	f7f9 fb45 	bl	800392a <HAL_PCD_EP_Open>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f916 	bl	800a4d8 <USBD_Get_USB_Status>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2d4:	78fa      	ldrb	r2, [r7, #3]
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f9 fb8c 	bl	80039f6 <HAL_PCD_EP_Close>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f8f7 	bl	800a4d8 <USBD_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f7f9 fc35 	bl	8003b86 <HAL_PCD_EP_SetStall>
 800a31c:	4603      	mov	r3, r0
 800a31e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	4618      	mov	r0, r3
 800a324:	f000 f8d8 	bl	800a4d8 <USBD_Get_USB_Status>
 800a328:	4603      	mov	r3, r0
 800a32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f7f9 fc76 	bl	8003c46 <HAL_PCD_EP_ClrStall>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	4618      	mov	r0, r3
 800a362:	f000 f8b9 	bl	800a4d8 <USBD_Get_USB_Status>
 800a366:	4603      	mov	r3, r0
 800a368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a386:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	da0c      	bge.n	800a3aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a396:	68f9      	ldr	r1, [r7, #12]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	00db      	lsls	r3, r3, #3
 800a3a2:	440b      	add	r3, r1
 800a3a4:	3302      	adds	r3, #2
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	e00b      	b.n	800a3c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3aa:	78fb      	ldrb	r3, [r7, #3]
 800a3ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3b0:	68f9      	ldr	r1, [r7, #12]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	440b      	add	r3, r1
 800a3bc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a3c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bc80      	pop	{r7}
 800a3ca:	4770      	bx	lr

0800a3cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f9 fa78 	bl	80038e0 <HAL_PCD_SetAddress>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f86e 	bl	800a4d8 <USBD_Get_USB_Status>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a400:	7bbb      	ldrb	r3, [r7, #14]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b086      	sub	sp, #24
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	461a      	mov	r2, r3
 800a416:	460b      	mov	r3, r1
 800a418:	72fb      	strb	r3, [r7, #11]
 800a41a:	4613      	mov	r3, r2
 800a41c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a42c:	893b      	ldrh	r3, [r7, #8]
 800a42e:	7af9      	ldrb	r1, [r7, #11]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	f7f9 fb65 	bl	8003b00 <HAL_PCD_EP_Transmit>
 800a436:	4603      	mov	r3, r0
 800a438:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 f84b 	bl	800a4d8 <USBD_Get_USB_Status>
 800a442:	4603      	mov	r3, r0
 800a444:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a446:	7dbb      	ldrb	r3, [r7, #22]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	607a      	str	r2, [r7, #4]
 800a45a:	461a      	mov	r2, r3
 800a45c:	460b      	mov	r3, r1
 800a45e:	72fb      	strb	r3, [r7, #11]
 800a460:	4613      	mov	r3, r2
 800a462:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a472:	893b      	ldrh	r3, [r7, #8]
 800a474:	7af9      	ldrb	r1, [r7, #11]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	f7f9 fb05 	bl	8003a86 <HAL_PCD_EP_Receive>
 800a47c:	4603      	mov	r3, r0
 800a47e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a480:	7dfb      	ldrb	r3, [r7, #23]
 800a482:	4618      	mov	r0, r3
 800a484:	f000 f828 	bl	800a4d8 <USBD_Get_USB_Status>
 800a488:	4603      	mov	r3, r0
 800a48a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a48c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a4a0:	4b02      	ldr	r3, [pc, #8]	; (800a4ac <USBD_static_malloc+0x14>)
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bc80      	pop	{r7}
 800a4aa:	4770      	bx	lr
 800a4ac:	20000de0 	.word	0x20000de0

0800a4b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]

}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bc80      	pop	{r7}
 800a4c0:	4770      	bx	lr

0800a4c2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a4ce:	bf00      	nop
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bc80      	pop	{r7}
 800a4d6:	4770      	bx	lr

0800a4d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d817      	bhi.n	800a51c <USBD_Get_USB_Status+0x44>
 800a4ec:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <USBD_Get_USB_Status+0x1c>)
 800a4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f2:	bf00      	nop
 800a4f4:	0800a505 	.word	0x0800a505
 800a4f8:	0800a50b 	.word	0x0800a50b
 800a4fc:	0800a511 	.word	0x0800a511
 800a500:	0800a517 	.word	0x0800a517
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	73fb      	strb	r3, [r7, #15]
    break;
 800a508:	e00b      	b.n	800a522 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a50a:	2302      	movs	r3, #2
 800a50c:	73fb      	strb	r3, [r7, #15]
    break;
 800a50e:	e008      	b.n	800a522 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a510:	2301      	movs	r3, #1
 800a512:	73fb      	strb	r3, [r7, #15]
    break;
 800a514:	e005      	b.n	800a522 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a516:	2302      	movs	r3, #2
 800a518:	73fb      	strb	r3, [r7, #15]
    break;
 800a51a:	e002      	b.n	800a522 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a51c:	2302      	movs	r3, #2
 800a51e:	73fb      	strb	r3, [r7, #15]
    break;
 800a520:	bf00      	nop
  }
  return usb_status;
 800a522:	7bfb      	ldrb	r3, [r7, #15]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	bc80      	pop	{r7}
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop

0800a530 <atoi>:
 800a530:	220a      	movs	r2, #10
 800a532:	2100      	movs	r1, #0
 800a534:	f000 b940 	b.w	800a7b8 <strtol>

0800a538 <__errno>:
 800a538:	4b01      	ldr	r3, [pc, #4]	; (800a540 <__errno+0x8>)
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	200001a8 	.word	0x200001a8

0800a544 <__libc_init_array>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	2600      	movs	r6, #0
 800a548:	4d0c      	ldr	r5, [pc, #48]	; (800a57c <__libc_init_array+0x38>)
 800a54a:	4c0d      	ldr	r4, [pc, #52]	; (800a580 <__libc_init_array+0x3c>)
 800a54c:	1b64      	subs	r4, r4, r5
 800a54e:	10a4      	asrs	r4, r4, #2
 800a550:	42a6      	cmp	r6, r4
 800a552:	d109      	bne.n	800a568 <__libc_init_array+0x24>
 800a554:	f001 fae8 	bl	800bb28 <_init>
 800a558:	2600      	movs	r6, #0
 800a55a:	4d0a      	ldr	r5, [pc, #40]	; (800a584 <__libc_init_array+0x40>)
 800a55c:	4c0a      	ldr	r4, [pc, #40]	; (800a588 <__libc_init_array+0x44>)
 800a55e:	1b64      	subs	r4, r4, r5
 800a560:	10a4      	asrs	r4, r4, #2
 800a562:	42a6      	cmp	r6, r4
 800a564:	d105      	bne.n	800a572 <__libc_init_array+0x2e>
 800a566:	bd70      	pop	{r4, r5, r6, pc}
 800a568:	f855 3b04 	ldr.w	r3, [r5], #4
 800a56c:	4798      	blx	r3
 800a56e:	3601      	adds	r6, #1
 800a570:	e7ee      	b.n	800a550 <__libc_init_array+0xc>
 800a572:	f855 3b04 	ldr.w	r3, [r5], #4
 800a576:	4798      	blx	r3
 800a578:	3601      	adds	r6, #1
 800a57a:	e7f2      	b.n	800a562 <__libc_init_array+0x1e>
 800a57c:	0800bdfc 	.word	0x0800bdfc
 800a580:	0800bdfc 	.word	0x0800bdfc
 800a584:	0800bdfc 	.word	0x0800bdfc
 800a588:	0800be00 	.word	0x0800be00

0800a58c <memcpy>:
 800a58c:	440a      	add	r2, r1
 800a58e:	4291      	cmp	r1, r2
 800a590:	f100 33ff 	add.w	r3, r0, #4294967295
 800a594:	d100      	bne.n	800a598 <memcpy+0xc>
 800a596:	4770      	bx	lr
 800a598:	b510      	push	{r4, lr}
 800a59a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59e:	4291      	cmp	r1, r2
 800a5a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5a4:	d1f9      	bne.n	800a59a <memcpy+0xe>
 800a5a6:	bd10      	pop	{r4, pc}

0800a5a8 <memset>:
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	4402      	add	r2, r0
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d100      	bne.n	800a5b2 <memset+0xa>
 800a5b0:	4770      	bx	lr
 800a5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b6:	e7f9      	b.n	800a5ac <memset+0x4>

0800a5b8 <siprintf>:
 800a5b8:	b40e      	push	{r1, r2, r3}
 800a5ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5be:	b500      	push	{lr}
 800a5c0:	b09c      	sub	sp, #112	; 0x70
 800a5c2:	ab1d      	add	r3, sp, #116	; 0x74
 800a5c4:	9002      	str	r0, [sp, #8]
 800a5c6:	9006      	str	r0, [sp, #24]
 800a5c8:	9107      	str	r1, [sp, #28]
 800a5ca:	9104      	str	r1, [sp, #16]
 800a5cc:	4808      	ldr	r0, [pc, #32]	; (800a5f0 <siprintf+0x38>)
 800a5ce:	4909      	ldr	r1, [pc, #36]	; (800a5f4 <siprintf+0x3c>)
 800a5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d4:	9105      	str	r1, [sp, #20]
 800a5d6:	6800      	ldr	r0, [r0, #0]
 800a5d8:	a902      	add	r1, sp, #8
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	f000 fa66 	bl	800aaac <_svfiprintf_r>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	9b02      	ldr	r3, [sp, #8]
 800a5e4:	701a      	strb	r2, [r3, #0]
 800a5e6:	b01c      	add	sp, #112	; 0x70
 800a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ec:	b003      	add	sp, #12
 800a5ee:	4770      	bx	lr
 800a5f0:	200001a8 	.word	0x200001a8
 800a5f4:	ffff0208 	.word	0xffff0208

0800a5f8 <strcpy>:
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5fe:	f803 2b01 	strb.w	r2, [r3], #1
 800a602:	2a00      	cmp	r2, #0
 800a604:	d1f9      	bne.n	800a5fa <strcpy+0x2>
 800a606:	4770      	bx	lr

0800a608 <strtok>:
 800a608:	4b16      	ldr	r3, [pc, #88]	; (800a664 <strtok+0x5c>)
 800a60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60e:	681f      	ldr	r7, [r3, #0]
 800a610:	4605      	mov	r5, r0
 800a612:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a614:	460e      	mov	r6, r1
 800a616:	b9ec      	cbnz	r4, 800a654 <strtok+0x4c>
 800a618:	2050      	movs	r0, #80	; 0x50
 800a61a:	f000 f907 	bl	800a82c <malloc>
 800a61e:	4602      	mov	r2, r0
 800a620:	65b8      	str	r0, [r7, #88]	; 0x58
 800a622:	b920      	cbnz	r0, 800a62e <strtok+0x26>
 800a624:	2157      	movs	r1, #87	; 0x57
 800a626:	4b10      	ldr	r3, [pc, #64]	; (800a668 <strtok+0x60>)
 800a628:	4810      	ldr	r0, [pc, #64]	; (800a66c <strtok+0x64>)
 800a62a:	f000 f8cf 	bl	800a7cc <__assert_func>
 800a62e:	e9c0 4400 	strd	r4, r4, [r0]
 800a632:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a636:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a63a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a63e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a642:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a646:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a64a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a64e:	6184      	str	r4, [r0, #24]
 800a650:	7704      	strb	r4, [r0, #28]
 800a652:	6244      	str	r4, [r0, #36]	; 0x24
 800a654:	4631      	mov	r1, r6
 800a656:	4628      	mov	r0, r5
 800a658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a65a:	2301      	movs	r3, #1
 800a65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	f000 b806 	b.w	800a670 <__strtok_r>
 800a664:	200001a8 	.word	0x200001a8
 800a668:	0800bbb8 	.word	0x0800bbb8
 800a66c:	0800bbcf 	.word	0x0800bbcf

0800a670 <__strtok_r>:
 800a670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a672:	b908      	cbnz	r0, 800a678 <__strtok_r+0x8>
 800a674:	6810      	ldr	r0, [r2, #0]
 800a676:	b188      	cbz	r0, 800a69c <__strtok_r+0x2c>
 800a678:	4604      	mov	r4, r0
 800a67a:	460f      	mov	r7, r1
 800a67c:	4620      	mov	r0, r4
 800a67e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a682:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a686:	b91e      	cbnz	r6, 800a690 <__strtok_r+0x20>
 800a688:	b965      	cbnz	r5, 800a6a4 <__strtok_r+0x34>
 800a68a:	4628      	mov	r0, r5
 800a68c:	6015      	str	r5, [r2, #0]
 800a68e:	e005      	b.n	800a69c <__strtok_r+0x2c>
 800a690:	42b5      	cmp	r5, r6
 800a692:	d1f6      	bne.n	800a682 <__strtok_r+0x12>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1f0      	bne.n	800a67a <__strtok_r+0xa>
 800a698:	6014      	str	r4, [r2, #0]
 800a69a:	7003      	strb	r3, [r0, #0]
 800a69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a69e:	461c      	mov	r4, r3
 800a6a0:	e00c      	b.n	800a6bc <__strtok_r+0x4c>
 800a6a2:	b915      	cbnz	r5, 800a6aa <__strtok_r+0x3a>
 800a6a4:	460e      	mov	r6, r1
 800a6a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a6ae:	42ab      	cmp	r3, r5
 800a6b0:	d1f7      	bne.n	800a6a2 <__strtok_r+0x32>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0f3      	beq.n	800a69e <__strtok_r+0x2e>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a6bc:	6014      	str	r4, [r2, #0]
 800a6be:	e7ed      	b.n	800a69c <__strtok_r+0x2c>

0800a6c0 <_strtol_l.constprop.0>:
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	d001      	beq.n	800a6ce <_strtol_l.constprop.0+0xe>
 800a6ca:	2b24      	cmp	r3, #36	; 0x24
 800a6cc:	d906      	bls.n	800a6dc <_strtol_l.constprop.0+0x1c>
 800a6ce:	f7ff ff33 	bl	800a538 <__errno>
 800a6d2:	2316      	movs	r3, #22
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6dc:	460d      	mov	r5, r1
 800a6de:	4f35      	ldr	r7, [pc, #212]	; (800a7b4 <_strtol_l.constprop.0+0xf4>)
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6e6:	5de6      	ldrb	r6, [r4, r7]
 800a6e8:	f016 0608 	ands.w	r6, r6, #8
 800a6ec:	d1f8      	bne.n	800a6e0 <_strtol_l.constprop.0+0x20>
 800a6ee:	2c2d      	cmp	r4, #45	; 0x2d
 800a6f0:	d12f      	bne.n	800a752 <_strtol_l.constprop.0+0x92>
 800a6f2:	2601      	movs	r6, #1
 800a6f4:	782c      	ldrb	r4, [r5, #0]
 800a6f6:	1c85      	adds	r5, r0, #2
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d057      	beq.n	800a7ac <_strtol_l.constprop.0+0xec>
 800a6fc:	2b10      	cmp	r3, #16
 800a6fe:	d109      	bne.n	800a714 <_strtol_l.constprop.0+0x54>
 800a700:	2c30      	cmp	r4, #48	; 0x30
 800a702:	d107      	bne.n	800a714 <_strtol_l.constprop.0+0x54>
 800a704:	7828      	ldrb	r0, [r5, #0]
 800a706:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a70a:	2858      	cmp	r0, #88	; 0x58
 800a70c:	d149      	bne.n	800a7a2 <_strtol_l.constprop.0+0xe2>
 800a70e:	2310      	movs	r3, #16
 800a710:	786c      	ldrb	r4, [r5, #1]
 800a712:	3502      	adds	r5, #2
 800a714:	2700      	movs	r7, #0
 800a716:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a71a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a71e:	fbbe f9f3 	udiv	r9, lr, r3
 800a722:	4638      	mov	r0, r7
 800a724:	fb03 ea19 	mls	sl, r3, r9, lr
 800a728:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a72c:	f1bc 0f09 	cmp.w	ip, #9
 800a730:	d814      	bhi.n	800a75c <_strtol_l.constprop.0+0x9c>
 800a732:	4664      	mov	r4, ip
 800a734:	42a3      	cmp	r3, r4
 800a736:	dd22      	ble.n	800a77e <_strtol_l.constprop.0+0xbe>
 800a738:	2f00      	cmp	r7, #0
 800a73a:	db1d      	blt.n	800a778 <_strtol_l.constprop.0+0xb8>
 800a73c:	4581      	cmp	r9, r0
 800a73e:	d31b      	bcc.n	800a778 <_strtol_l.constprop.0+0xb8>
 800a740:	d101      	bne.n	800a746 <_strtol_l.constprop.0+0x86>
 800a742:	45a2      	cmp	sl, r4
 800a744:	db18      	blt.n	800a778 <_strtol_l.constprop.0+0xb8>
 800a746:	2701      	movs	r7, #1
 800a748:	fb00 4003 	mla	r0, r0, r3, r4
 800a74c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a750:	e7ea      	b.n	800a728 <_strtol_l.constprop.0+0x68>
 800a752:	2c2b      	cmp	r4, #43	; 0x2b
 800a754:	bf04      	itt	eq
 800a756:	782c      	ldrbeq	r4, [r5, #0]
 800a758:	1c85      	addeq	r5, r0, #2
 800a75a:	e7cd      	b.n	800a6f8 <_strtol_l.constprop.0+0x38>
 800a75c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a760:	f1bc 0f19 	cmp.w	ip, #25
 800a764:	d801      	bhi.n	800a76a <_strtol_l.constprop.0+0xaa>
 800a766:	3c37      	subs	r4, #55	; 0x37
 800a768:	e7e4      	b.n	800a734 <_strtol_l.constprop.0+0x74>
 800a76a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a76e:	f1bc 0f19 	cmp.w	ip, #25
 800a772:	d804      	bhi.n	800a77e <_strtol_l.constprop.0+0xbe>
 800a774:	3c57      	subs	r4, #87	; 0x57
 800a776:	e7dd      	b.n	800a734 <_strtol_l.constprop.0+0x74>
 800a778:	f04f 37ff 	mov.w	r7, #4294967295
 800a77c:	e7e6      	b.n	800a74c <_strtol_l.constprop.0+0x8c>
 800a77e:	2f00      	cmp	r7, #0
 800a780:	da07      	bge.n	800a792 <_strtol_l.constprop.0+0xd2>
 800a782:	2322      	movs	r3, #34	; 0x22
 800a784:	4670      	mov	r0, lr
 800a786:	f8c8 3000 	str.w	r3, [r8]
 800a78a:	2a00      	cmp	r2, #0
 800a78c:	d0a4      	beq.n	800a6d8 <_strtol_l.constprop.0+0x18>
 800a78e:	1e69      	subs	r1, r5, #1
 800a790:	e005      	b.n	800a79e <_strtol_l.constprop.0+0xde>
 800a792:	b106      	cbz	r6, 800a796 <_strtol_l.constprop.0+0xd6>
 800a794:	4240      	negs	r0, r0
 800a796:	2a00      	cmp	r2, #0
 800a798:	d09e      	beq.n	800a6d8 <_strtol_l.constprop.0+0x18>
 800a79a:	2f00      	cmp	r7, #0
 800a79c:	d1f7      	bne.n	800a78e <_strtol_l.constprop.0+0xce>
 800a79e:	6011      	str	r1, [r2, #0]
 800a7a0:	e79a      	b.n	800a6d8 <_strtol_l.constprop.0+0x18>
 800a7a2:	2430      	movs	r4, #48	; 0x30
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1b5      	bne.n	800a714 <_strtol_l.constprop.0+0x54>
 800a7a8:	2308      	movs	r3, #8
 800a7aa:	e7b3      	b.n	800a714 <_strtol_l.constprop.0+0x54>
 800a7ac:	2c30      	cmp	r4, #48	; 0x30
 800a7ae:	d0a9      	beq.n	800a704 <_strtol_l.constprop.0+0x44>
 800a7b0:	230a      	movs	r3, #10
 800a7b2:	e7af      	b.n	800a714 <_strtol_l.constprop.0+0x54>
 800a7b4:	0800bc69 	.word	0x0800bc69

0800a7b8 <strtol>:
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	460a      	mov	r2, r1
 800a7bc:	4601      	mov	r1, r0
 800a7be:	4802      	ldr	r0, [pc, #8]	; (800a7c8 <strtol+0x10>)
 800a7c0:	6800      	ldr	r0, [r0, #0]
 800a7c2:	f7ff bf7d 	b.w	800a6c0 <_strtol_l.constprop.0>
 800a7c6:	bf00      	nop
 800a7c8:	200001a8 	.word	0x200001a8

0800a7cc <__assert_func>:
 800a7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ce:	4614      	mov	r4, r2
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <__assert_func+0x2c>)
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68d8      	ldr	r0, [r3, #12]
 800a7da:	b14c      	cbz	r4, 800a7f0 <__assert_func+0x24>
 800a7dc:	4b07      	ldr	r3, [pc, #28]	; (800a7fc <__assert_func+0x30>)
 800a7de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7e2:	9100      	str	r1, [sp, #0]
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	4906      	ldr	r1, [pc, #24]	; (800a800 <__assert_func+0x34>)
 800a7e8:	f000 f80e 	bl	800a808 <fiprintf>
 800a7ec:	f000 fe1c 	bl	800b428 <abort>
 800a7f0:	4b04      	ldr	r3, [pc, #16]	; (800a804 <__assert_func+0x38>)
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	e7f3      	b.n	800a7de <__assert_func+0x12>
 800a7f6:	bf00      	nop
 800a7f8:	200001a8 	.word	0x200001a8
 800a7fc:	0800bc2c 	.word	0x0800bc2c
 800a800:	0800bc39 	.word	0x0800bc39
 800a804:	0800bc67 	.word	0x0800bc67

0800a808 <fiprintf>:
 800a808:	b40e      	push	{r1, r2, r3}
 800a80a:	b503      	push	{r0, r1, lr}
 800a80c:	4601      	mov	r1, r0
 800a80e:	ab03      	add	r3, sp, #12
 800a810:	4805      	ldr	r0, [pc, #20]	; (800a828 <fiprintf+0x20>)
 800a812:	f853 2b04 	ldr.w	r2, [r3], #4
 800a816:	6800      	ldr	r0, [r0, #0]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	f000 fa6f 	bl	800acfc <_vfiprintf_r>
 800a81e:	b002      	add	sp, #8
 800a820:	f85d eb04 	ldr.w	lr, [sp], #4
 800a824:	b003      	add	sp, #12
 800a826:	4770      	bx	lr
 800a828:	200001a8 	.word	0x200001a8

0800a82c <malloc>:
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <malloc+0xc>)
 800a82e:	4601      	mov	r1, r0
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	f000 b86b 	b.w	800a90c <_malloc_r>
 800a836:	bf00      	nop
 800a838:	200001a8 	.word	0x200001a8

0800a83c <_free_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4605      	mov	r5, r0
 800a840:	2900      	cmp	r1, #0
 800a842:	d040      	beq.n	800a8c6 <_free_r+0x8a>
 800a844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a848:	1f0c      	subs	r4, r1, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bfb8      	it	lt
 800a84e:	18e4      	addlt	r4, r4, r3
 800a850:	f001 f836 	bl	800b8c0 <__malloc_lock>
 800a854:	4a1c      	ldr	r2, [pc, #112]	; (800a8c8 <_free_r+0x8c>)
 800a856:	6813      	ldr	r3, [r2, #0]
 800a858:	b933      	cbnz	r3, 800a868 <_free_r+0x2c>
 800a85a:	6063      	str	r3, [r4, #4]
 800a85c:	6014      	str	r4, [r2, #0]
 800a85e:	4628      	mov	r0, r5
 800a860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a864:	f001 b832 	b.w	800b8cc <__malloc_unlock>
 800a868:	42a3      	cmp	r3, r4
 800a86a:	d908      	bls.n	800a87e <_free_r+0x42>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	1821      	adds	r1, r4, r0
 800a870:	428b      	cmp	r3, r1
 800a872:	bf01      	itttt	eq
 800a874:	6819      	ldreq	r1, [r3, #0]
 800a876:	685b      	ldreq	r3, [r3, #4]
 800a878:	1809      	addeq	r1, r1, r0
 800a87a:	6021      	streq	r1, [r4, #0]
 800a87c:	e7ed      	b.n	800a85a <_free_r+0x1e>
 800a87e:	461a      	mov	r2, r3
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	b10b      	cbz	r3, 800a888 <_free_r+0x4c>
 800a884:	42a3      	cmp	r3, r4
 800a886:	d9fa      	bls.n	800a87e <_free_r+0x42>
 800a888:	6811      	ldr	r1, [r2, #0]
 800a88a:	1850      	adds	r0, r2, r1
 800a88c:	42a0      	cmp	r0, r4
 800a88e:	d10b      	bne.n	800a8a8 <_free_r+0x6c>
 800a890:	6820      	ldr	r0, [r4, #0]
 800a892:	4401      	add	r1, r0
 800a894:	1850      	adds	r0, r2, r1
 800a896:	4283      	cmp	r3, r0
 800a898:	6011      	str	r1, [r2, #0]
 800a89a:	d1e0      	bne.n	800a85e <_free_r+0x22>
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4401      	add	r1, r0
 800a8a2:	6011      	str	r1, [r2, #0]
 800a8a4:	6053      	str	r3, [r2, #4]
 800a8a6:	e7da      	b.n	800a85e <_free_r+0x22>
 800a8a8:	d902      	bls.n	800a8b0 <_free_r+0x74>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	602b      	str	r3, [r5, #0]
 800a8ae:	e7d6      	b.n	800a85e <_free_r+0x22>
 800a8b0:	6820      	ldr	r0, [r4, #0]
 800a8b2:	1821      	adds	r1, r4, r0
 800a8b4:	428b      	cmp	r3, r1
 800a8b6:	bf01      	itttt	eq
 800a8b8:	6819      	ldreq	r1, [r3, #0]
 800a8ba:	685b      	ldreq	r3, [r3, #4]
 800a8bc:	1809      	addeq	r1, r1, r0
 800a8be:	6021      	streq	r1, [r4, #0]
 800a8c0:	6063      	str	r3, [r4, #4]
 800a8c2:	6054      	str	r4, [r2, #4]
 800a8c4:	e7cb      	b.n	800a85e <_free_r+0x22>
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	20000e38 	.word	0x20000e38

0800a8cc <sbrk_aligned>:
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	4e0e      	ldr	r6, [pc, #56]	; (800a908 <sbrk_aligned+0x3c>)
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	6831      	ldr	r1, [r6, #0]
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	b911      	cbnz	r1, 800a8de <sbrk_aligned+0x12>
 800a8d8:	f000 fcd6 	bl	800b288 <_sbrk_r>
 800a8dc:	6030      	str	r0, [r6, #0]
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f000 fcd1 	bl	800b288 <_sbrk_r>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d00a      	beq.n	800a900 <sbrk_aligned+0x34>
 800a8ea:	1cc4      	adds	r4, r0, #3
 800a8ec:	f024 0403 	bic.w	r4, r4, #3
 800a8f0:	42a0      	cmp	r0, r4
 800a8f2:	d007      	beq.n	800a904 <sbrk_aligned+0x38>
 800a8f4:	1a21      	subs	r1, r4, r0
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f000 fcc6 	bl	800b288 <_sbrk_r>
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d101      	bne.n	800a904 <sbrk_aligned+0x38>
 800a900:	f04f 34ff 	mov.w	r4, #4294967295
 800a904:	4620      	mov	r0, r4
 800a906:	bd70      	pop	{r4, r5, r6, pc}
 800a908:	20000e3c 	.word	0x20000e3c

0800a90c <_malloc_r>:
 800a90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a910:	1ccd      	adds	r5, r1, #3
 800a912:	f025 0503 	bic.w	r5, r5, #3
 800a916:	3508      	adds	r5, #8
 800a918:	2d0c      	cmp	r5, #12
 800a91a:	bf38      	it	cc
 800a91c:	250c      	movcc	r5, #12
 800a91e:	2d00      	cmp	r5, #0
 800a920:	4607      	mov	r7, r0
 800a922:	db01      	blt.n	800a928 <_malloc_r+0x1c>
 800a924:	42a9      	cmp	r1, r5
 800a926:	d905      	bls.n	800a934 <_malloc_r+0x28>
 800a928:	230c      	movs	r3, #12
 800a92a:	2600      	movs	r6, #0
 800a92c:	603b      	str	r3, [r7, #0]
 800a92e:	4630      	mov	r0, r6
 800a930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a934:	4e2e      	ldr	r6, [pc, #184]	; (800a9f0 <_malloc_r+0xe4>)
 800a936:	f000 ffc3 	bl	800b8c0 <__malloc_lock>
 800a93a:	6833      	ldr	r3, [r6, #0]
 800a93c:	461c      	mov	r4, r3
 800a93e:	bb34      	cbnz	r4, 800a98e <_malloc_r+0x82>
 800a940:	4629      	mov	r1, r5
 800a942:	4638      	mov	r0, r7
 800a944:	f7ff ffc2 	bl	800a8cc <sbrk_aligned>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	4604      	mov	r4, r0
 800a94c:	d14d      	bne.n	800a9ea <_malloc_r+0xde>
 800a94e:	6834      	ldr	r4, [r6, #0]
 800a950:	4626      	mov	r6, r4
 800a952:	2e00      	cmp	r6, #0
 800a954:	d140      	bne.n	800a9d8 <_malloc_r+0xcc>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	4631      	mov	r1, r6
 800a95a:	4638      	mov	r0, r7
 800a95c:	eb04 0803 	add.w	r8, r4, r3
 800a960:	f000 fc92 	bl	800b288 <_sbrk_r>
 800a964:	4580      	cmp	r8, r0
 800a966:	d13a      	bne.n	800a9de <_malloc_r+0xd2>
 800a968:	6821      	ldr	r1, [r4, #0]
 800a96a:	3503      	adds	r5, #3
 800a96c:	1a6d      	subs	r5, r5, r1
 800a96e:	f025 0503 	bic.w	r5, r5, #3
 800a972:	3508      	adds	r5, #8
 800a974:	2d0c      	cmp	r5, #12
 800a976:	bf38      	it	cc
 800a978:	250c      	movcc	r5, #12
 800a97a:	4638      	mov	r0, r7
 800a97c:	4629      	mov	r1, r5
 800a97e:	f7ff ffa5 	bl	800a8cc <sbrk_aligned>
 800a982:	3001      	adds	r0, #1
 800a984:	d02b      	beq.n	800a9de <_malloc_r+0xd2>
 800a986:	6823      	ldr	r3, [r4, #0]
 800a988:	442b      	add	r3, r5
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	e00e      	b.n	800a9ac <_malloc_r+0xa0>
 800a98e:	6822      	ldr	r2, [r4, #0]
 800a990:	1b52      	subs	r2, r2, r5
 800a992:	d41e      	bmi.n	800a9d2 <_malloc_r+0xc6>
 800a994:	2a0b      	cmp	r2, #11
 800a996:	d916      	bls.n	800a9c6 <_malloc_r+0xba>
 800a998:	1961      	adds	r1, r4, r5
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	6025      	str	r5, [r4, #0]
 800a99e:	bf18      	it	ne
 800a9a0:	6059      	strne	r1, [r3, #4]
 800a9a2:	6863      	ldr	r3, [r4, #4]
 800a9a4:	bf08      	it	eq
 800a9a6:	6031      	streq	r1, [r6, #0]
 800a9a8:	5162      	str	r2, [r4, r5]
 800a9aa:	604b      	str	r3, [r1, #4]
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	f104 060b 	add.w	r6, r4, #11
 800a9b2:	f000 ff8b 	bl	800b8cc <__malloc_unlock>
 800a9b6:	f026 0607 	bic.w	r6, r6, #7
 800a9ba:	1d23      	adds	r3, r4, #4
 800a9bc:	1af2      	subs	r2, r6, r3
 800a9be:	d0b6      	beq.n	800a92e <_malloc_r+0x22>
 800a9c0:	1b9b      	subs	r3, r3, r6
 800a9c2:	50a3      	str	r3, [r4, r2]
 800a9c4:	e7b3      	b.n	800a92e <_malloc_r+0x22>
 800a9c6:	6862      	ldr	r2, [r4, #4]
 800a9c8:	42a3      	cmp	r3, r4
 800a9ca:	bf0c      	ite	eq
 800a9cc:	6032      	streq	r2, [r6, #0]
 800a9ce:	605a      	strne	r2, [r3, #4]
 800a9d0:	e7ec      	b.n	800a9ac <_malloc_r+0xa0>
 800a9d2:	4623      	mov	r3, r4
 800a9d4:	6864      	ldr	r4, [r4, #4]
 800a9d6:	e7b2      	b.n	800a93e <_malloc_r+0x32>
 800a9d8:	4634      	mov	r4, r6
 800a9da:	6876      	ldr	r6, [r6, #4]
 800a9dc:	e7b9      	b.n	800a952 <_malloc_r+0x46>
 800a9de:	230c      	movs	r3, #12
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	603b      	str	r3, [r7, #0]
 800a9e4:	f000 ff72 	bl	800b8cc <__malloc_unlock>
 800a9e8:	e7a1      	b.n	800a92e <_malloc_r+0x22>
 800a9ea:	6025      	str	r5, [r4, #0]
 800a9ec:	e7de      	b.n	800a9ac <_malloc_r+0xa0>
 800a9ee:	bf00      	nop
 800a9f0:	20000e38 	.word	0x20000e38

0800a9f4 <__ssputs_r>:
 800a9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f8:	688e      	ldr	r6, [r1, #8]
 800a9fa:	4682      	mov	sl, r0
 800a9fc:	429e      	cmp	r6, r3
 800a9fe:	460c      	mov	r4, r1
 800aa00:	4690      	mov	r8, r2
 800aa02:	461f      	mov	r7, r3
 800aa04:	d838      	bhi.n	800aa78 <__ssputs_r+0x84>
 800aa06:	898a      	ldrh	r2, [r1, #12]
 800aa08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa0c:	d032      	beq.n	800aa74 <__ssputs_r+0x80>
 800aa0e:	6825      	ldr	r5, [r4, #0]
 800aa10:	6909      	ldr	r1, [r1, #16]
 800aa12:	3301      	adds	r3, #1
 800aa14:	eba5 0901 	sub.w	r9, r5, r1
 800aa18:	6965      	ldr	r5, [r4, #20]
 800aa1a:	444b      	add	r3, r9
 800aa1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa24:	106d      	asrs	r5, r5, #1
 800aa26:	429d      	cmp	r5, r3
 800aa28:	bf38      	it	cc
 800aa2a:	461d      	movcc	r5, r3
 800aa2c:	0553      	lsls	r3, r2, #21
 800aa2e:	d531      	bpl.n	800aa94 <__ssputs_r+0xa0>
 800aa30:	4629      	mov	r1, r5
 800aa32:	f7ff ff6b 	bl	800a90c <_malloc_r>
 800aa36:	4606      	mov	r6, r0
 800aa38:	b950      	cbnz	r0, 800aa50 <__ssputs_r+0x5c>
 800aa3a:	230c      	movs	r3, #12
 800aa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa40:	f8ca 3000 	str.w	r3, [sl]
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa50:	464a      	mov	r2, r9
 800aa52:	6921      	ldr	r1, [r4, #16]
 800aa54:	f7ff fd9a 	bl	800a58c <memcpy>
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	6126      	str	r6, [r4, #16]
 800aa66:	444e      	add	r6, r9
 800aa68:	6026      	str	r6, [r4, #0]
 800aa6a:	463e      	mov	r6, r7
 800aa6c:	6165      	str	r5, [r4, #20]
 800aa6e:	eba5 0509 	sub.w	r5, r5, r9
 800aa72:	60a5      	str	r5, [r4, #8]
 800aa74:	42be      	cmp	r6, r7
 800aa76:	d900      	bls.n	800aa7a <__ssputs_r+0x86>
 800aa78:	463e      	mov	r6, r7
 800aa7a:	4632      	mov	r2, r6
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	6820      	ldr	r0, [r4, #0]
 800aa80:	f000 ff04 	bl	800b88c <memmove>
 800aa84:	68a3      	ldr	r3, [r4, #8]
 800aa86:	2000      	movs	r0, #0
 800aa88:	1b9b      	subs	r3, r3, r6
 800aa8a:	60a3      	str	r3, [r4, #8]
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	4433      	add	r3, r6
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	e7db      	b.n	800aa4c <__ssputs_r+0x58>
 800aa94:	462a      	mov	r2, r5
 800aa96:	f000 ff1f 	bl	800b8d8 <_realloc_r>
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d1e1      	bne.n	800aa64 <__ssputs_r+0x70>
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	6921      	ldr	r1, [r4, #16]
 800aaa4:	f7ff feca 	bl	800a83c <_free_r>
 800aaa8:	e7c7      	b.n	800aa3a <__ssputs_r+0x46>
	...

0800aaac <_svfiprintf_r>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	4698      	mov	r8, r3
 800aab2:	898b      	ldrh	r3, [r1, #12]
 800aab4:	4607      	mov	r7, r0
 800aab6:	061b      	lsls	r3, r3, #24
 800aab8:	460d      	mov	r5, r1
 800aaba:	4614      	mov	r4, r2
 800aabc:	b09d      	sub	sp, #116	; 0x74
 800aabe:	d50e      	bpl.n	800aade <_svfiprintf_r+0x32>
 800aac0:	690b      	ldr	r3, [r1, #16]
 800aac2:	b963      	cbnz	r3, 800aade <_svfiprintf_r+0x32>
 800aac4:	2140      	movs	r1, #64	; 0x40
 800aac6:	f7ff ff21 	bl	800a90c <_malloc_r>
 800aaca:	6028      	str	r0, [r5, #0]
 800aacc:	6128      	str	r0, [r5, #16]
 800aace:	b920      	cbnz	r0, 800aada <_svfiprintf_r+0x2e>
 800aad0:	230c      	movs	r3, #12
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295
 800aad8:	e0d1      	b.n	800ac7e <_svfiprintf_r+0x1d2>
 800aada:	2340      	movs	r3, #64	; 0x40
 800aadc:	616b      	str	r3, [r5, #20]
 800aade:	2300      	movs	r3, #0
 800aae0:	9309      	str	r3, [sp, #36]	; 0x24
 800aae2:	2320      	movs	r3, #32
 800aae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aae8:	2330      	movs	r3, #48	; 0x30
 800aaea:	f04f 0901 	mov.w	r9, #1
 800aaee:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac98 <_svfiprintf_r+0x1ec>
 800aaf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aafa:	4623      	mov	r3, r4
 800aafc:	469a      	mov	sl, r3
 800aafe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab02:	b10a      	cbz	r2, 800ab08 <_svfiprintf_r+0x5c>
 800ab04:	2a25      	cmp	r2, #37	; 0x25
 800ab06:	d1f9      	bne.n	800aafc <_svfiprintf_r+0x50>
 800ab08:	ebba 0b04 	subs.w	fp, sl, r4
 800ab0c:	d00b      	beq.n	800ab26 <_svfiprintf_r+0x7a>
 800ab0e:	465b      	mov	r3, fp
 800ab10:	4622      	mov	r2, r4
 800ab12:	4629      	mov	r1, r5
 800ab14:	4638      	mov	r0, r7
 800ab16:	f7ff ff6d 	bl	800a9f4 <__ssputs_r>
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	f000 80aa 	beq.w	800ac74 <_svfiprintf_r+0x1c8>
 800ab20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab22:	445a      	add	r2, fp
 800ab24:	9209      	str	r2, [sp, #36]	; 0x24
 800ab26:	f89a 3000 	ldrb.w	r3, [sl]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 80a2 	beq.w	800ac74 <_svfiprintf_r+0x1c8>
 800ab30:	2300      	movs	r3, #0
 800ab32:	f04f 32ff 	mov.w	r2, #4294967295
 800ab36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab3a:	f10a 0a01 	add.w	sl, sl, #1
 800ab3e:	9304      	str	r3, [sp, #16]
 800ab40:	9307      	str	r3, [sp, #28]
 800ab42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab46:	931a      	str	r3, [sp, #104]	; 0x68
 800ab48:	4654      	mov	r4, sl
 800ab4a:	2205      	movs	r2, #5
 800ab4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab50:	4851      	ldr	r0, [pc, #324]	; (800ac98 <_svfiprintf_r+0x1ec>)
 800ab52:	f000 fe8d 	bl	800b870 <memchr>
 800ab56:	9a04      	ldr	r2, [sp, #16]
 800ab58:	b9d8      	cbnz	r0, 800ab92 <_svfiprintf_r+0xe6>
 800ab5a:	06d0      	lsls	r0, r2, #27
 800ab5c:	bf44      	itt	mi
 800ab5e:	2320      	movmi	r3, #32
 800ab60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab64:	0711      	lsls	r1, r2, #28
 800ab66:	bf44      	itt	mi
 800ab68:	232b      	movmi	r3, #43	; 0x2b
 800ab6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab72:	2b2a      	cmp	r3, #42	; 0x2a
 800ab74:	d015      	beq.n	800aba2 <_svfiprintf_r+0xf6>
 800ab76:	4654      	mov	r4, sl
 800ab78:	2000      	movs	r0, #0
 800ab7a:	f04f 0c0a 	mov.w	ip, #10
 800ab7e:	9a07      	ldr	r2, [sp, #28]
 800ab80:	4621      	mov	r1, r4
 800ab82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab86:	3b30      	subs	r3, #48	; 0x30
 800ab88:	2b09      	cmp	r3, #9
 800ab8a:	d94e      	bls.n	800ac2a <_svfiprintf_r+0x17e>
 800ab8c:	b1b0      	cbz	r0, 800abbc <_svfiprintf_r+0x110>
 800ab8e:	9207      	str	r2, [sp, #28]
 800ab90:	e014      	b.n	800abbc <_svfiprintf_r+0x110>
 800ab92:	eba0 0308 	sub.w	r3, r0, r8
 800ab96:	fa09 f303 	lsl.w	r3, r9, r3
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	46a2      	mov	sl, r4
 800ab9e:	9304      	str	r3, [sp, #16]
 800aba0:	e7d2      	b.n	800ab48 <_svfiprintf_r+0x9c>
 800aba2:	9b03      	ldr	r3, [sp, #12]
 800aba4:	1d19      	adds	r1, r3, #4
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	9103      	str	r1, [sp, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	bfbb      	ittet	lt
 800abae:	425b      	neglt	r3, r3
 800abb0:	f042 0202 	orrlt.w	r2, r2, #2
 800abb4:	9307      	strge	r3, [sp, #28]
 800abb6:	9307      	strlt	r3, [sp, #28]
 800abb8:	bfb8      	it	lt
 800abba:	9204      	strlt	r2, [sp, #16]
 800abbc:	7823      	ldrb	r3, [r4, #0]
 800abbe:	2b2e      	cmp	r3, #46	; 0x2e
 800abc0:	d10c      	bne.n	800abdc <_svfiprintf_r+0x130>
 800abc2:	7863      	ldrb	r3, [r4, #1]
 800abc4:	2b2a      	cmp	r3, #42	; 0x2a
 800abc6:	d135      	bne.n	800ac34 <_svfiprintf_r+0x188>
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	3402      	adds	r4, #2
 800abcc:	1d1a      	adds	r2, r3, #4
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	9203      	str	r2, [sp, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bfb8      	it	lt
 800abd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800abda:	9305      	str	r3, [sp, #20]
 800abdc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ac9c <_svfiprintf_r+0x1f0>
 800abe0:	2203      	movs	r2, #3
 800abe2:	4650      	mov	r0, sl
 800abe4:	7821      	ldrb	r1, [r4, #0]
 800abe6:	f000 fe43 	bl	800b870 <memchr>
 800abea:	b140      	cbz	r0, 800abfe <_svfiprintf_r+0x152>
 800abec:	2340      	movs	r3, #64	; 0x40
 800abee:	eba0 000a 	sub.w	r0, r0, sl
 800abf2:	fa03 f000 	lsl.w	r0, r3, r0
 800abf6:	9b04      	ldr	r3, [sp, #16]
 800abf8:	3401      	adds	r4, #1
 800abfa:	4303      	orrs	r3, r0
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac02:	2206      	movs	r2, #6
 800ac04:	4826      	ldr	r0, [pc, #152]	; (800aca0 <_svfiprintf_r+0x1f4>)
 800ac06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac0a:	f000 fe31 	bl	800b870 <memchr>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d038      	beq.n	800ac84 <_svfiprintf_r+0x1d8>
 800ac12:	4b24      	ldr	r3, [pc, #144]	; (800aca4 <_svfiprintf_r+0x1f8>)
 800ac14:	bb1b      	cbnz	r3, 800ac5e <_svfiprintf_r+0x1b2>
 800ac16:	9b03      	ldr	r3, [sp, #12]
 800ac18:	3307      	adds	r3, #7
 800ac1a:	f023 0307 	bic.w	r3, r3, #7
 800ac1e:	3308      	adds	r3, #8
 800ac20:	9303      	str	r3, [sp, #12]
 800ac22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac24:	4433      	add	r3, r6
 800ac26:	9309      	str	r3, [sp, #36]	; 0x24
 800ac28:	e767      	b.n	800aafa <_svfiprintf_r+0x4e>
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac32:	e7a5      	b.n	800ab80 <_svfiprintf_r+0xd4>
 800ac34:	2300      	movs	r3, #0
 800ac36:	f04f 0c0a 	mov.w	ip, #10
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	3401      	adds	r4, #1
 800ac3e:	9305      	str	r3, [sp, #20]
 800ac40:	4620      	mov	r0, r4
 800ac42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac46:	3a30      	subs	r2, #48	; 0x30
 800ac48:	2a09      	cmp	r2, #9
 800ac4a:	d903      	bls.n	800ac54 <_svfiprintf_r+0x1a8>
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0c5      	beq.n	800abdc <_svfiprintf_r+0x130>
 800ac50:	9105      	str	r1, [sp, #20]
 800ac52:	e7c3      	b.n	800abdc <_svfiprintf_r+0x130>
 800ac54:	4604      	mov	r4, r0
 800ac56:	2301      	movs	r3, #1
 800ac58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac5c:	e7f0      	b.n	800ac40 <_svfiprintf_r+0x194>
 800ac5e:	ab03      	add	r3, sp, #12
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	462a      	mov	r2, r5
 800ac64:	4638      	mov	r0, r7
 800ac66:	4b10      	ldr	r3, [pc, #64]	; (800aca8 <_svfiprintf_r+0x1fc>)
 800ac68:	a904      	add	r1, sp, #16
 800ac6a:	f3af 8000 	nop.w
 800ac6e:	1c42      	adds	r2, r0, #1
 800ac70:	4606      	mov	r6, r0
 800ac72:	d1d6      	bne.n	800ac22 <_svfiprintf_r+0x176>
 800ac74:	89ab      	ldrh	r3, [r5, #12]
 800ac76:	065b      	lsls	r3, r3, #25
 800ac78:	f53f af2c 	bmi.w	800aad4 <_svfiprintf_r+0x28>
 800ac7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac7e:	b01d      	add	sp, #116	; 0x74
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	ab03      	add	r3, sp, #12
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	462a      	mov	r2, r5
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <_svfiprintf_r+0x1fc>)
 800ac8e:	a904      	add	r1, sp, #16
 800ac90:	f000 f9d4 	bl	800b03c <_printf_i>
 800ac94:	e7eb      	b.n	800ac6e <_svfiprintf_r+0x1c2>
 800ac96:	bf00      	nop
 800ac98:	0800bd69 	.word	0x0800bd69
 800ac9c:	0800bd6f 	.word	0x0800bd6f
 800aca0:	0800bd73 	.word	0x0800bd73
 800aca4:	00000000 	.word	0x00000000
 800aca8:	0800a9f5 	.word	0x0800a9f5

0800acac <__sfputc_r>:
 800acac:	6893      	ldr	r3, [r2, #8]
 800acae:	b410      	push	{r4}
 800acb0:	3b01      	subs	r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	6093      	str	r3, [r2, #8]
 800acb6:	da07      	bge.n	800acc8 <__sfputc_r+0x1c>
 800acb8:	6994      	ldr	r4, [r2, #24]
 800acba:	42a3      	cmp	r3, r4
 800acbc:	db01      	blt.n	800acc2 <__sfputc_r+0x16>
 800acbe:	290a      	cmp	r1, #10
 800acc0:	d102      	bne.n	800acc8 <__sfputc_r+0x1c>
 800acc2:	bc10      	pop	{r4}
 800acc4:	f000 baf0 	b.w	800b2a8 <__swbuf_r>
 800acc8:	6813      	ldr	r3, [r2, #0]
 800acca:	1c58      	adds	r0, r3, #1
 800accc:	6010      	str	r0, [r2, #0]
 800acce:	7019      	strb	r1, [r3, #0]
 800acd0:	4608      	mov	r0, r1
 800acd2:	bc10      	pop	{r4}
 800acd4:	4770      	bx	lr

0800acd6 <__sfputs_r>:
 800acd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	4614      	mov	r4, r2
 800acde:	18d5      	adds	r5, r2, r3
 800ace0:	42ac      	cmp	r4, r5
 800ace2:	d101      	bne.n	800ace8 <__sfputs_r+0x12>
 800ace4:	2000      	movs	r0, #0
 800ace6:	e007      	b.n	800acf8 <__sfputs_r+0x22>
 800ace8:	463a      	mov	r2, r7
 800acea:	4630      	mov	r0, r6
 800acec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf0:	f7ff ffdc 	bl	800acac <__sfputc_r>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d1f3      	bne.n	800ace0 <__sfputs_r+0xa>
 800acf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acfc <_vfiprintf_r>:
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	460d      	mov	r5, r1
 800ad02:	4614      	mov	r4, r2
 800ad04:	4698      	mov	r8, r3
 800ad06:	4606      	mov	r6, r0
 800ad08:	b09d      	sub	sp, #116	; 0x74
 800ad0a:	b118      	cbz	r0, 800ad14 <_vfiprintf_r+0x18>
 800ad0c:	6983      	ldr	r3, [r0, #24]
 800ad0e:	b90b      	cbnz	r3, 800ad14 <_vfiprintf_r+0x18>
 800ad10:	f000 fca8 	bl	800b664 <__sinit>
 800ad14:	4b89      	ldr	r3, [pc, #548]	; (800af3c <_vfiprintf_r+0x240>)
 800ad16:	429d      	cmp	r5, r3
 800ad18:	d11b      	bne.n	800ad52 <_vfiprintf_r+0x56>
 800ad1a:	6875      	ldr	r5, [r6, #4]
 800ad1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad1e:	07d9      	lsls	r1, r3, #31
 800ad20:	d405      	bmi.n	800ad2e <_vfiprintf_r+0x32>
 800ad22:	89ab      	ldrh	r3, [r5, #12]
 800ad24:	059a      	lsls	r2, r3, #22
 800ad26:	d402      	bmi.n	800ad2e <_vfiprintf_r+0x32>
 800ad28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad2a:	f000 fd39 	bl	800b7a0 <__retarget_lock_acquire_recursive>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	071b      	lsls	r3, r3, #28
 800ad32:	d501      	bpl.n	800ad38 <_vfiprintf_r+0x3c>
 800ad34:	692b      	ldr	r3, [r5, #16]
 800ad36:	b9eb      	cbnz	r3, 800ad74 <_vfiprintf_r+0x78>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f000 fb06 	bl	800b34c <__swsetup_r>
 800ad40:	b1c0      	cbz	r0, 800ad74 <_vfiprintf_r+0x78>
 800ad42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad44:	07dc      	lsls	r4, r3, #31
 800ad46:	d50e      	bpl.n	800ad66 <_vfiprintf_r+0x6a>
 800ad48:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4c:	b01d      	add	sp, #116	; 0x74
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad52:	4b7b      	ldr	r3, [pc, #492]	; (800af40 <_vfiprintf_r+0x244>)
 800ad54:	429d      	cmp	r5, r3
 800ad56:	d101      	bne.n	800ad5c <_vfiprintf_r+0x60>
 800ad58:	68b5      	ldr	r5, [r6, #8]
 800ad5a:	e7df      	b.n	800ad1c <_vfiprintf_r+0x20>
 800ad5c:	4b79      	ldr	r3, [pc, #484]	; (800af44 <_vfiprintf_r+0x248>)
 800ad5e:	429d      	cmp	r5, r3
 800ad60:	bf08      	it	eq
 800ad62:	68f5      	ldreq	r5, [r6, #12]
 800ad64:	e7da      	b.n	800ad1c <_vfiprintf_r+0x20>
 800ad66:	89ab      	ldrh	r3, [r5, #12]
 800ad68:	0598      	lsls	r0, r3, #22
 800ad6a:	d4ed      	bmi.n	800ad48 <_vfiprintf_r+0x4c>
 800ad6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad6e:	f000 fd18 	bl	800b7a2 <__retarget_lock_release_recursive>
 800ad72:	e7e9      	b.n	800ad48 <_vfiprintf_r+0x4c>
 800ad74:	2300      	movs	r3, #0
 800ad76:	9309      	str	r3, [sp, #36]	; 0x24
 800ad78:	2320      	movs	r3, #32
 800ad7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad7e:	2330      	movs	r3, #48	; 0x30
 800ad80:	f04f 0901 	mov.w	r9, #1
 800ad84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800af48 <_vfiprintf_r+0x24c>
 800ad8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad90:	4623      	mov	r3, r4
 800ad92:	469a      	mov	sl, r3
 800ad94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad98:	b10a      	cbz	r2, 800ad9e <_vfiprintf_r+0xa2>
 800ad9a:	2a25      	cmp	r2, #37	; 0x25
 800ad9c:	d1f9      	bne.n	800ad92 <_vfiprintf_r+0x96>
 800ad9e:	ebba 0b04 	subs.w	fp, sl, r4
 800ada2:	d00b      	beq.n	800adbc <_vfiprintf_r+0xc0>
 800ada4:	465b      	mov	r3, fp
 800ada6:	4622      	mov	r2, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	4630      	mov	r0, r6
 800adac:	f7ff ff93 	bl	800acd6 <__sfputs_r>
 800adb0:	3001      	adds	r0, #1
 800adb2:	f000 80aa 	beq.w	800af0a <_vfiprintf_r+0x20e>
 800adb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adb8:	445a      	add	r2, fp
 800adba:	9209      	str	r2, [sp, #36]	; 0x24
 800adbc:	f89a 3000 	ldrb.w	r3, [sl]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 80a2 	beq.w	800af0a <_vfiprintf_r+0x20e>
 800adc6:	2300      	movs	r3, #0
 800adc8:	f04f 32ff 	mov.w	r2, #4294967295
 800adcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800add0:	f10a 0a01 	add.w	sl, sl, #1
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	9307      	str	r3, [sp, #28]
 800add8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800addc:	931a      	str	r3, [sp, #104]	; 0x68
 800adde:	4654      	mov	r4, sl
 800ade0:	2205      	movs	r2, #5
 800ade2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade6:	4858      	ldr	r0, [pc, #352]	; (800af48 <_vfiprintf_r+0x24c>)
 800ade8:	f000 fd42 	bl	800b870 <memchr>
 800adec:	9a04      	ldr	r2, [sp, #16]
 800adee:	b9d8      	cbnz	r0, 800ae28 <_vfiprintf_r+0x12c>
 800adf0:	06d1      	lsls	r1, r2, #27
 800adf2:	bf44      	itt	mi
 800adf4:	2320      	movmi	r3, #32
 800adf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adfa:	0713      	lsls	r3, r2, #28
 800adfc:	bf44      	itt	mi
 800adfe:	232b      	movmi	r3, #43	; 0x2b
 800ae00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae04:	f89a 3000 	ldrb.w	r3, [sl]
 800ae08:	2b2a      	cmp	r3, #42	; 0x2a
 800ae0a:	d015      	beq.n	800ae38 <_vfiprintf_r+0x13c>
 800ae0c:	4654      	mov	r4, sl
 800ae0e:	2000      	movs	r0, #0
 800ae10:	f04f 0c0a 	mov.w	ip, #10
 800ae14:	9a07      	ldr	r2, [sp, #28]
 800ae16:	4621      	mov	r1, r4
 800ae18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae1c:	3b30      	subs	r3, #48	; 0x30
 800ae1e:	2b09      	cmp	r3, #9
 800ae20:	d94e      	bls.n	800aec0 <_vfiprintf_r+0x1c4>
 800ae22:	b1b0      	cbz	r0, 800ae52 <_vfiprintf_r+0x156>
 800ae24:	9207      	str	r2, [sp, #28]
 800ae26:	e014      	b.n	800ae52 <_vfiprintf_r+0x156>
 800ae28:	eba0 0308 	sub.w	r3, r0, r8
 800ae2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae30:	4313      	orrs	r3, r2
 800ae32:	46a2      	mov	sl, r4
 800ae34:	9304      	str	r3, [sp, #16]
 800ae36:	e7d2      	b.n	800adde <_vfiprintf_r+0xe2>
 800ae38:	9b03      	ldr	r3, [sp, #12]
 800ae3a:	1d19      	adds	r1, r3, #4
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	9103      	str	r1, [sp, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bfbb      	ittet	lt
 800ae44:	425b      	neglt	r3, r3
 800ae46:	f042 0202 	orrlt.w	r2, r2, #2
 800ae4a:	9307      	strge	r3, [sp, #28]
 800ae4c:	9307      	strlt	r3, [sp, #28]
 800ae4e:	bfb8      	it	lt
 800ae50:	9204      	strlt	r2, [sp, #16]
 800ae52:	7823      	ldrb	r3, [r4, #0]
 800ae54:	2b2e      	cmp	r3, #46	; 0x2e
 800ae56:	d10c      	bne.n	800ae72 <_vfiprintf_r+0x176>
 800ae58:	7863      	ldrb	r3, [r4, #1]
 800ae5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae5c:	d135      	bne.n	800aeca <_vfiprintf_r+0x1ce>
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	3402      	adds	r4, #2
 800ae62:	1d1a      	adds	r2, r3, #4
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	9203      	str	r2, [sp, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bfb8      	it	lt
 800ae6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae70:	9305      	str	r3, [sp, #20]
 800ae72:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800af4c <_vfiprintf_r+0x250>
 800ae76:	2203      	movs	r2, #3
 800ae78:	4650      	mov	r0, sl
 800ae7a:	7821      	ldrb	r1, [r4, #0]
 800ae7c:	f000 fcf8 	bl	800b870 <memchr>
 800ae80:	b140      	cbz	r0, 800ae94 <_vfiprintf_r+0x198>
 800ae82:	2340      	movs	r3, #64	; 0x40
 800ae84:	eba0 000a 	sub.w	r0, r0, sl
 800ae88:	fa03 f000 	lsl.w	r0, r3, r0
 800ae8c:	9b04      	ldr	r3, [sp, #16]
 800ae8e:	3401      	adds	r4, #1
 800ae90:	4303      	orrs	r3, r0
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae98:	2206      	movs	r2, #6
 800ae9a:	482d      	ldr	r0, [pc, #180]	; (800af50 <_vfiprintf_r+0x254>)
 800ae9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aea0:	f000 fce6 	bl	800b870 <memchr>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d03f      	beq.n	800af28 <_vfiprintf_r+0x22c>
 800aea8:	4b2a      	ldr	r3, [pc, #168]	; (800af54 <_vfiprintf_r+0x258>)
 800aeaa:	bb1b      	cbnz	r3, 800aef4 <_vfiprintf_r+0x1f8>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	3307      	adds	r3, #7
 800aeb0:	f023 0307 	bic.w	r3, r3, #7
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeba:	443b      	add	r3, r7
 800aebc:	9309      	str	r3, [sp, #36]	; 0x24
 800aebe:	e767      	b.n	800ad90 <_vfiprintf_r+0x94>
 800aec0:	460c      	mov	r4, r1
 800aec2:	2001      	movs	r0, #1
 800aec4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aec8:	e7a5      	b.n	800ae16 <_vfiprintf_r+0x11a>
 800aeca:	2300      	movs	r3, #0
 800aecc:	f04f 0c0a 	mov.w	ip, #10
 800aed0:	4619      	mov	r1, r3
 800aed2:	3401      	adds	r4, #1
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	4620      	mov	r0, r4
 800aed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aedc:	3a30      	subs	r2, #48	; 0x30
 800aede:	2a09      	cmp	r2, #9
 800aee0:	d903      	bls.n	800aeea <_vfiprintf_r+0x1ee>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0c5      	beq.n	800ae72 <_vfiprintf_r+0x176>
 800aee6:	9105      	str	r1, [sp, #20]
 800aee8:	e7c3      	b.n	800ae72 <_vfiprintf_r+0x176>
 800aeea:	4604      	mov	r4, r0
 800aeec:	2301      	movs	r3, #1
 800aeee:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef2:	e7f0      	b.n	800aed6 <_vfiprintf_r+0x1da>
 800aef4:	ab03      	add	r3, sp, #12
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	462a      	mov	r2, r5
 800aefa:	4630      	mov	r0, r6
 800aefc:	4b16      	ldr	r3, [pc, #88]	; (800af58 <_vfiprintf_r+0x25c>)
 800aefe:	a904      	add	r1, sp, #16
 800af00:	f3af 8000 	nop.w
 800af04:	4607      	mov	r7, r0
 800af06:	1c78      	adds	r0, r7, #1
 800af08:	d1d6      	bne.n	800aeb8 <_vfiprintf_r+0x1bc>
 800af0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af0c:	07d9      	lsls	r1, r3, #31
 800af0e:	d405      	bmi.n	800af1c <_vfiprintf_r+0x220>
 800af10:	89ab      	ldrh	r3, [r5, #12]
 800af12:	059a      	lsls	r2, r3, #22
 800af14:	d402      	bmi.n	800af1c <_vfiprintf_r+0x220>
 800af16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af18:	f000 fc43 	bl	800b7a2 <__retarget_lock_release_recursive>
 800af1c:	89ab      	ldrh	r3, [r5, #12]
 800af1e:	065b      	lsls	r3, r3, #25
 800af20:	f53f af12 	bmi.w	800ad48 <_vfiprintf_r+0x4c>
 800af24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af26:	e711      	b.n	800ad4c <_vfiprintf_r+0x50>
 800af28:	ab03      	add	r3, sp, #12
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	462a      	mov	r2, r5
 800af2e:	4630      	mov	r0, r6
 800af30:	4b09      	ldr	r3, [pc, #36]	; (800af58 <_vfiprintf_r+0x25c>)
 800af32:	a904      	add	r1, sp, #16
 800af34:	f000 f882 	bl	800b03c <_printf_i>
 800af38:	e7e4      	b.n	800af04 <_vfiprintf_r+0x208>
 800af3a:	bf00      	nop
 800af3c:	0800bdbc 	.word	0x0800bdbc
 800af40:	0800bddc 	.word	0x0800bddc
 800af44:	0800bd9c 	.word	0x0800bd9c
 800af48:	0800bd69 	.word	0x0800bd69
 800af4c:	0800bd6f 	.word	0x0800bd6f
 800af50:	0800bd73 	.word	0x0800bd73
 800af54:	00000000 	.word	0x00000000
 800af58:	0800acd7 	.word	0x0800acd7

0800af5c <_printf_common>:
 800af5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af60:	4616      	mov	r6, r2
 800af62:	4699      	mov	r9, r3
 800af64:	688a      	ldr	r2, [r1, #8]
 800af66:	690b      	ldr	r3, [r1, #16]
 800af68:	4607      	mov	r7, r0
 800af6a:	4293      	cmp	r3, r2
 800af6c:	bfb8      	it	lt
 800af6e:	4613      	movlt	r3, r2
 800af70:	6033      	str	r3, [r6, #0]
 800af72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af76:	460c      	mov	r4, r1
 800af78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af7c:	b10a      	cbz	r2, 800af82 <_printf_common+0x26>
 800af7e:	3301      	adds	r3, #1
 800af80:	6033      	str	r3, [r6, #0]
 800af82:	6823      	ldr	r3, [r4, #0]
 800af84:	0699      	lsls	r1, r3, #26
 800af86:	bf42      	ittt	mi
 800af88:	6833      	ldrmi	r3, [r6, #0]
 800af8a:	3302      	addmi	r3, #2
 800af8c:	6033      	strmi	r3, [r6, #0]
 800af8e:	6825      	ldr	r5, [r4, #0]
 800af90:	f015 0506 	ands.w	r5, r5, #6
 800af94:	d106      	bne.n	800afa4 <_printf_common+0x48>
 800af96:	f104 0a19 	add.w	sl, r4, #25
 800af9a:	68e3      	ldr	r3, [r4, #12]
 800af9c:	6832      	ldr	r2, [r6, #0]
 800af9e:	1a9b      	subs	r3, r3, r2
 800afa0:	42ab      	cmp	r3, r5
 800afa2:	dc28      	bgt.n	800aff6 <_printf_common+0x9a>
 800afa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afa8:	1e13      	subs	r3, r2, #0
 800afaa:	6822      	ldr	r2, [r4, #0]
 800afac:	bf18      	it	ne
 800afae:	2301      	movne	r3, #1
 800afb0:	0692      	lsls	r2, r2, #26
 800afb2:	d42d      	bmi.n	800b010 <_printf_common+0xb4>
 800afb4:	4649      	mov	r1, r9
 800afb6:	4638      	mov	r0, r7
 800afb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afbc:	47c0      	blx	r8
 800afbe:	3001      	adds	r0, #1
 800afc0:	d020      	beq.n	800b004 <_printf_common+0xa8>
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	68e5      	ldr	r5, [r4, #12]
 800afc6:	f003 0306 	and.w	r3, r3, #6
 800afca:	2b04      	cmp	r3, #4
 800afcc:	bf18      	it	ne
 800afce:	2500      	movne	r5, #0
 800afd0:	6832      	ldr	r2, [r6, #0]
 800afd2:	f04f 0600 	mov.w	r6, #0
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	bf08      	it	eq
 800afda:	1aad      	subeq	r5, r5, r2
 800afdc:	6922      	ldr	r2, [r4, #16]
 800afde:	bf08      	it	eq
 800afe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afe4:	4293      	cmp	r3, r2
 800afe6:	bfc4      	itt	gt
 800afe8:	1a9b      	subgt	r3, r3, r2
 800afea:	18ed      	addgt	r5, r5, r3
 800afec:	341a      	adds	r4, #26
 800afee:	42b5      	cmp	r5, r6
 800aff0:	d11a      	bne.n	800b028 <_printf_common+0xcc>
 800aff2:	2000      	movs	r0, #0
 800aff4:	e008      	b.n	800b008 <_printf_common+0xac>
 800aff6:	2301      	movs	r3, #1
 800aff8:	4652      	mov	r2, sl
 800affa:	4649      	mov	r1, r9
 800affc:	4638      	mov	r0, r7
 800affe:	47c0      	blx	r8
 800b000:	3001      	adds	r0, #1
 800b002:	d103      	bne.n	800b00c <_printf_common+0xb0>
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00c:	3501      	adds	r5, #1
 800b00e:	e7c4      	b.n	800af9a <_printf_common+0x3e>
 800b010:	2030      	movs	r0, #48	; 0x30
 800b012:	18e1      	adds	r1, r4, r3
 800b014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b01e:	4422      	add	r2, r4
 800b020:	3302      	adds	r3, #2
 800b022:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b026:	e7c5      	b.n	800afb4 <_printf_common+0x58>
 800b028:	2301      	movs	r3, #1
 800b02a:	4622      	mov	r2, r4
 800b02c:	4649      	mov	r1, r9
 800b02e:	4638      	mov	r0, r7
 800b030:	47c0      	blx	r8
 800b032:	3001      	adds	r0, #1
 800b034:	d0e6      	beq.n	800b004 <_printf_common+0xa8>
 800b036:	3601      	adds	r6, #1
 800b038:	e7d9      	b.n	800afee <_printf_common+0x92>
	...

0800b03c <_printf_i>:
 800b03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b040:	7e0f      	ldrb	r7, [r1, #24]
 800b042:	4691      	mov	r9, r2
 800b044:	2f78      	cmp	r7, #120	; 0x78
 800b046:	4680      	mov	r8, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	469a      	mov	sl, r3
 800b04c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b04e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b052:	d807      	bhi.n	800b064 <_printf_i+0x28>
 800b054:	2f62      	cmp	r7, #98	; 0x62
 800b056:	d80a      	bhi.n	800b06e <_printf_i+0x32>
 800b058:	2f00      	cmp	r7, #0
 800b05a:	f000 80d9 	beq.w	800b210 <_printf_i+0x1d4>
 800b05e:	2f58      	cmp	r7, #88	; 0x58
 800b060:	f000 80a4 	beq.w	800b1ac <_printf_i+0x170>
 800b064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b06c:	e03a      	b.n	800b0e4 <_printf_i+0xa8>
 800b06e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b072:	2b15      	cmp	r3, #21
 800b074:	d8f6      	bhi.n	800b064 <_printf_i+0x28>
 800b076:	a101      	add	r1, pc, #4	; (adr r1, 800b07c <_printf_i+0x40>)
 800b078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b07c:	0800b0d5 	.word	0x0800b0d5
 800b080:	0800b0e9 	.word	0x0800b0e9
 800b084:	0800b065 	.word	0x0800b065
 800b088:	0800b065 	.word	0x0800b065
 800b08c:	0800b065 	.word	0x0800b065
 800b090:	0800b065 	.word	0x0800b065
 800b094:	0800b0e9 	.word	0x0800b0e9
 800b098:	0800b065 	.word	0x0800b065
 800b09c:	0800b065 	.word	0x0800b065
 800b0a0:	0800b065 	.word	0x0800b065
 800b0a4:	0800b065 	.word	0x0800b065
 800b0a8:	0800b1f7 	.word	0x0800b1f7
 800b0ac:	0800b119 	.word	0x0800b119
 800b0b0:	0800b1d9 	.word	0x0800b1d9
 800b0b4:	0800b065 	.word	0x0800b065
 800b0b8:	0800b065 	.word	0x0800b065
 800b0bc:	0800b219 	.word	0x0800b219
 800b0c0:	0800b065 	.word	0x0800b065
 800b0c4:	0800b119 	.word	0x0800b119
 800b0c8:	0800b065 	.word	0x0800b065
 800b0cc:	0800b065 	.word	0x0800b065
 800b0d0:	0800b1e1 	.word	0x0800b1e1
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	1d1a      	adds	r2, r3, #4
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	602a      	str	r2, [r5, #0]
 800b0dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e0a4      	b.n	800b232 <_printf_i+0x1f6>
 800b0e8:	6820      	ldr	r0, [r4, #0]
 800b0ea:	6829      	ldr	r1, [r5, #0]
 800b0ec:	0606      	lsls	r6, r0, #24
 800b0ee:	f101 0304 	add.w	r3, r1, #4
 800b0f2:	d50a      	bpl.n	800b10a <_printf_i+0xce>
 800b0f4:	680e      	ldr	r6, [r1, #0]
 800b0f6:	602b      	str	r3, [r5, #0]
 800b0f8:	2e00      	cmp	r6, #0
 800b0fa:	da03      	bge.n	800b104 <_printf_i+0xc8>
 800b0fc:	232d      	movs	r3, #45	; 0x2d
 800b0fe:	4276      	negs	r6, r6
 800b100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b104:	230a      	movs	r3, #10
 800b106:	485e      	ldr	r0, [pc, #376]	; (800b280 <_printf_i+0x244>)
 800b108:	e019      	b.n	800b13e <_printf_i+0x102>
 800b10a:	680e      	ldr	r6, [r1, #0]
 800b10c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b110:	602b      	str	r3, [r5, #0]
 800b112:	bf18      	it	ne
 800b114:	b236      	sxthne	r6, r6
 800b116:	e7ef      	b.n	800b0f8 <_printf_i+0xbc>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	6820      	ldr	r0, [r4, #0]
 800b11c:	1d19      	adds	r1, r3, #4
 800b11e:	6029      	str	r1, [r5, #0]
 800b120:	0601      	lsls	r1, r0, #24
 800b122:	d501      	bpl.n	800b128 <_printf_i+0xec>
 800b124:	681e      	ldr	r6, [r3, #0]
 800b126:	e002      	b.n	800b12e <_printf_i+0xf2>
 800b128:	0646      	lsls	r6, r0, #25
 800b12a:	d5fb      	bpl.n	800b124 <_printf_i+0xe8>
 800b12c:	881e      	ldrh	r6, [r3, #0]
 800b12e:	2f6f      	cmp	r7, #111	; 0x6f
 800b130:	bf0c      	ite	eq
 800b132:	2308      	moveq	r3, #8
 800b134:	230a      	movne	r3, #10
 800b136:	4852      	ldr	r0, [pc, #328]	; (800b280 <_printf_i+0x244>)
 800b138:	2100      	movs	r1, #0
 800b13a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b13e:	6865      	ldr	r5, [r4, #4]
 800b140:	2d00      	cmp	r5, #0
 800b142:	bfa8      	it	ge
 800b144:	6821      	ldrge	r1, [r4, #0]
 800b146:	60a5      	str	r5, [r4, #8]
 800b148:	bfa4      	itt	ge
 800b14a:	f021 0104 	bicge.w	r1, r1, #4
 800b14e:	6021      	strge	r1, [r4, #0]
 800b150:	b90e      	cbnz	r6, 800b156 <_printf_i+0x11a>
 800b152:	2d00      	cmp	r5, #0
 800b154:	d04d      	beq.n	800b1f2 <_printf_i+0x1b6>
 800b156:	4615      	mov	r5, r2
 800b158:	fbb6 f1f3 	udiv	r1, r6, r3
 800b15c:	fb03 6711 	mls	r7, r3, r1, r6
 800b160:	5dc7      	ldrb	r7, [r0, r7]
 800b162:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b166:	4637      	mov	r7, r6
 800b168:	42bb      	cmp	r3, r7
 800b16a:	460e      	mov	r6, r1
 800b16c:	d9f4      	bls.n	800b158 <_printf_i+0x11c>
 800b16e:	2b08      	cmp	r3, #8
 800b170:	d10b      	bne.n	800b18a <_printf_i+0x14e>
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	07de      	lsls	r6, r3, #31
 800b176:	d508      	bpl.n	800b18a <_printf_i+0x14e>
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	6861      	ldr	r1, [r4, #4]
 800b17c:	4299      	cmp	r1, r3
 800b17e:	bfde      	ittt	le
 800b180:	2330      	movle	r3, #48	; 0x30
 800b182:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b186:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b18a:	1b52      	subs	r2, r2, r5
 800b18c:	6122      	str	r2, [r4, #16]
 800b18e:	464b      	mov	r3, r9
 800b190:	4621      	mov	r1, r4
 800b192:	4640      	mov	r0, r8
 800b194:	f8cd a000 	str.w	sl, [sp]
 800b198:	aa03      	add	r2, sp, #12
 800b19a:	f7ff fedf 	bl	800af5c <_printf_common>
 800b19e:	3001      	adds	r0, #1
 800b1a0:	d14c      	bne.n	800b23c <_printf_i+0x200>
 800b1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a6:	b004      	add	sp, #16
 800b1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ac:	4834      	ldr	r0, [pc, #208]	; (800b280 <_printf_i+0x244>)
 800b1ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1b2:	6829      	ldr	r1, [r5, #0]
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1ba:	6029      	str	r1, [r5, #0]
 800b1bc:	061d      	lsls	r5, r3, #24
 800b1be:	d514      	bpl.n	800b1ea <_printf_i+0x1ae>
 800b1c0:	07df      	lsls	r7, r3, #31
 800b1c2:	bf44      	itt	mi
 800b1c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b1c8:	6023      	strmi	r3, [r4, #0]
 800b1ca:	b91e      	cbnz	r6, 800b1d4 <_printf_i+0x198>
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	f023 0320 	bic.w	r3, r3, #32
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	e7af      	b.n	800b138 <_printf_i+0xfc>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	f043 0320 	orr.w	r3, r3, #32
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	2378      	movs	r3, #120	; 0x78
 800b1e2:	4828      	ldr	r0, [pc, #160]	; (800b284 <_printf_i+0x248>)
 800b1e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1e8:	e7e3      	b.n	800b1b2 <_printf_i+0x176>
 800b1ea:	0659      	lsls	r1, r3, #25
 800b1ec:	bf48      	it	mi
 800b1ee:	b2b6      	uxthmi	r6, r6
 800b1f0:	e7e6      	b.n	800b1c0 <_printf_i+0x184>
 800b1f2:	4615      	mov	r5, r2
 800b1f4:	e7bb      	b.n	800b16e <_printf_i+0x132>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	6826      	ldr	r6, [r4, #0]
 800b1fa:	1d18      	adds	r0, r3, #4
 800b1fc:	6961      	ldr	r1, [r4, #20]
 800b1fe:	6028      	str	r0, [r5, #0]
 800b200:	0635      	lsls	r5, r6, #24
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	d501      	bpl.n	800b20a <_printf_i+0x1ce>
 800b206:	6019      	str	r1, [r3, #0]
 800b208:	e002      	b.n	800b210 <_printf_i+0x1d4>
 800b20a:	0670      	lsls	r0, r6, #25
 800b20c:	d5fb      	bpl.n	800b206 <_printf_i+0x1ca>
 800b20e:	8019      	strh	r1, [r3, #0]
 800b210:	2300      	movs	r3, #0
 800b212:	4615      	mov	r5, r2
 800b214:	6123      	str	r3, [r4, #16]
 800b216:	e7ba      	b.n	800b18e <_printf_i+0x152>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	2100      	movs	r1, #0
 800b21c:	1d1a      	adds	r2, r3, #4
 800b21e:	602a      	str	r2, [r5, #0]
 800b220:	681d      	ldr	r5, [r3, #0]
 800b222:	6862      	ldr	r2, [r4, #4]
 800b224:	4628      	mov	r0, r5
 800b226:	f000 fb23 	bl	800b870 <memchr>
 800b22a:	b108      	cbz	r0, 800b230 <_printf_i+0x1f4>
 800b22c:	1b40      	subs	r0, r0, r5
 800b22e:	6060      	str	r0, [r4, #4]
 800b230:	6863      	ldr	r3, [r4, #4]
 800b232:	6123      	str	r3, [r4, #16]
 800b234:	2300      	movs	r3, #0
 800b236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b23a:	e7a8      	b.n	800b18e <_printf_i+0x152>
 800b23c:	462a      	mov	r2, r5
 800b23e:	4649      	mov	r1, r9
 800b240:	4640      	mov	r0, r8
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	47d0      	blx	sl
 800b246:	3001      	adds	r0, #1
 800b248:	d0ab      	beq.n	800b1a2 <_printf_i+0x166>
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	079b      	lsls	r3, r3, #30
 800b24e:	d413      	bmi.n	800b278 <_printf_i+0x23c>
 800b250:	68e0      	ldr	r0, [r4, #12]
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	4298      	cmp	r0, r3
 800b256:	bfb8      	it	lt
 800b258:	4618      	movlt	r0, r3
 800b25a:	e7a4      	b.n	800b1a6 <_printf_i+0x16a>
 800b25c:	2301      	movs	r3, #1
 800b25e:	4632      	mov	r2, r6
 800b260:	4649      	mov	r1, r9
 800b262:	4640      	mov	r0, r8
 800b264:	47d0      	blx	sl
 800b266:	3001      	adds	r0, #1
 800b268:	d09b      	beq.n	800b1a2 <_printf_i+0x166>
 800b26a:	3501      	adds	r5, #1
 800b26c:	68e3      	ldr	r3, [r4, #12]
 800b26e:	9903      	ldr	r1, [sp, #12]
 800b270:	1a5b      	subs	r3, r3, r1
 800b272:	42ab      	cmp	r3, r5
 800b274:	dcf2      	bgt.n	800b25c <_printf_i+0x220>
 800b276:	e7eb      	b.n	800b250 <_printf_i+0x214>
 800b278:	2500      	movs	r5, #0
 800b27a:	f104 0619 	add.w	r6, r4, #25
 800b27e:	e7f5      	b.n	800b26c <_printf_i+0x230>
 800b280:	0800bd7a 	.word	0x0800bd7a
 800b284:	0800bd8b 	.word	0x0800bd8b

0800b288 <_sbrk_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	2300      	movs	r3, #0
 800b28c:	4d05      	ldr	r5, [pc, #20]	; (800b2a4 <_sbrk_r+0x1c>)
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	602b      	str	r3, [r5, #0]
 800b294:	f7f6 fd28 	bl	8001ce8 <_sbrk>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d102      	bne.n	800b2a2 <_sbrk_r+0x1a>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	b103      	cbz	r3, 800b2a2 <_sbrk_r+0x1a>
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	20000e44 	.word	0x20000e44

0800b2a8 <__swbuf_r>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	460e      	mov	r6, r1
 800b2ac:	4614      	mov	r4, r2
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	b118      	cbz	r0, 800b2ba <__swbuf_r+0x12>
 800b2b2:	6983      	ldr	r3, [r0, #24]
 800b2b4:	b90b      	cbnz	r3, 800b2ba <__swbuf_r+0x12>
 800b2b6:	f000 f9d5 	bl	800b664 <__sinit>
 800b2ba:	4b21      	ldr	r3, [pc, #132]	; (800b340 <__swbuf_r+0x98>)
 800b2bc:	429c      	cmp	r4, r3
 800b2be:	d12b      	bne.n	800b318 <__swbuf_r+0x70>
 800b2c0:	686c      	ldr	r4, [r5, #4]
 800b2c2:	69a3      	ldr	r3, [r4, #24]
 800b2c4:	60a3      	str	r3, [r4, #8]
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	071a      	lsls	r2, r3, #28
 800b2ca:	d52f      	bpl.n	800b32c <__swbuf_r+0x84>
 800b2cc:	6923      	ldr	r3, [r4, #16]
 800b2ce:	b36b      	cbz	r3, 800b32c <__swbuf_r+0x84>
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	6820      	ldr	r0, [r4, #0]
 800b2d4:	b2f6      	uxtb	r6, r6
 800b2d6:	1ac0      	subs	r0, r0, r3
 800b2d8:	6963      	ldr	r3, [r4, #20]
 800b2da:	4637      	mov	r7, r6
 800b2dc:	4283      	cmp	r3, r0
 800b2de:	dc04      	bgt.n	800b2ea <__swbuf_r+0x42>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f000 f92a 	bl	800b53c <_fflush_r>
 800b2e8:	bb30      	cbnz	r0, 800b338 <__swbuf_r+0x90>
 800b2ea:	68a3      	ldr	r3, [r4, #8]
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	60a3      	str	r3, [r4, #8]
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	6022      	str	r2, [r4, #0]
 800b2f8:	701e      	strb	r6, [r3, #0]
 800b2fa:	6963      	ldr	r3, [r4, #20]
 800b2fc:	4283      	cmp	r3, r0
 800b2fe:	d004      	beq.n	800b30a <__swbuf_r+0x62>
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	07db      	lsls	r3, r3, #31
 800b304:	d506      	bpl.n	800b314 <__swbuf_r+0x6c>
 800b306:	2e0a      	cmp	r6, #10
 800b308:	d104      	bne.n	800b314 <__swbuf_r+0x6c>
 800b30a:	4621      	mov	r1, r4
 800b30c:	4628      	mov	r0, r5
 800b30e:	f000 f915 	bl	800b53c <_fflush_r>
 800b312:	b988      	cbnz	r0, 800b338 <__swbuf_r+0x90>
 800b314:	4638      	mov	r0, r7
 800b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b318:	4b0a      	ldr	r3, [pc, #40]	; (800b344 <__swbuf_r+0x9c>)
 800b31a:	429c      	cmp	r4, r3
 800b31c:	d101      	bne.n	800b322 <__swbuf_r+0x7a>
 800b31e:	68ac      	ldr	r4, [r5, #8]
 800b320:	e7cf      	b.n	800b2c2 <__swbuf_r+0x1a>
 800b322:	4b09      	ldr	r3, [pc, #36]	; (800b348 <__swbuf_r+0xa0>)
 800b324:	429c      	cmp	r4, r3
 800b326:	bf08      	it	eq
 800b328:	68ec      	ldreq	r4, [r5, #12]
 800b32a:	e7ca      	b.n	800b2c2 <__swbuf_r+0x1a>
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 f80c 	bl	800b34c <__swsetup_r>
 800b334:	2800      	cmp	r0, #0
 800b336:	d0cb      	beq.n	800b2d0 <__swbuf_r+0x28>
 800b338:	f04f 37ff 	mov.w	r7, #4294967295
 800b33c:	e7ea      	b.n	800b314 <__swbuf_r+0x6c>
 800b33e:	bf00      	nop
 800b340:	0800bdbc 	.word	0x0800bdbc
 800b344:	0800bddc 	.word	0x0800bddc
 800b348:	0800bd9c 	.word	0x0800bd9c

0800b34c <__swsetup_r>:
 800b34c:	4b32      	ldr	r3, [pc, #200]	; (800b418 <__swsetup_r+0xcc>)
 800b34e:	b570      	push	{r4, r5, r6, lr}
 800b350:	681d      	ldr	r5, [r3, #0]
 800b352:	4606      	mov	r6, r0
 800b354:	460c      	mov	r4, r1
 800b356:	b125      	cbz	r5, 800b362 <__swsetup_r+0x16>
 800b358:	69ab      	ldr	r3, [r5, #24]
 800b35a:	b913      	cbnz	r3, 800b362 <__swsetup_r+0x16>
 800b35c:	4628      	mov	r0, r5
 800b35e:	f000 f981 	bl	800b664 <__sinit>
 800b362:	4b2e      	ldr	r3, [pc, #184]	; (800b41c <__swsetup_r+0xd0>)
 800b364:	429c      	cmp	r4, r3
 800b366:	d10f      	bne.n	800b388 <__swsetup_r+0x3c>
 800b368:	686c      	ldr	r4, [r5, #4]
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b370:	0719      	lsls	r1, r3, #28
 800b372:	d42c      	bmi.n	800b3ce <__swsetup_r+0x82>
 800b374:	06dd      	lsls	r5, r3, #27
 800b376:	d411      	bmi.n	800b39c <__swsetup_r+0x50>
 800b378:	2309      	movs	r3, #9
 800b37a:	6033      	str	r3, [r6, #0]
 800b37c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b380:	f04f 30ff 	mov.w	r0, #4294967295
 800b384:	81a3      	strh	r3, [r4, #12]
 800b386:	e03e      	b.n	800b406 <__swsetup_r+0xba>
 800b388:	4b25      	ldr	r3, [pc, #148]	; (800b420 <__swsetup_r+0xd4>)
 800b38a:	429c      	cmp	r4, r3
 800b38c:	d101      	bne.n	800b392 <__swsetup_r+0x46>
 800b38e:	68ac      	ldr	r4, [r5, #8]
 800b390:	e7eb      	b.n	800b36a <__swsetup_r+0x1e>
 800b392:	4b24      	ldr	r3, [pc, #144]	; (800b424 <__swsetup_r+0xd8>)
 800b394:	429c      	cmp	r4, r3
 800b396:	bf08      	it	eq
 800b398:	68ec      	ldreq	r4, [r5, #12]
 800b39a:	e7e6      	b.n	800b36a <__swsetup_r+0x1e>
 800b39c:	0758      	lsls	r0, r3, #29
 800b39e:	d512      	bpl.n	800b3c6 <__swsetup_r+0x7a>
 800b3a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3a2:	b141      	cbz	r1, 800b3b6 <__swsetup_r+0x6a>
 800b3a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3a8:	4299      	cmp	r1, r3
 800b3aa:	d002      	beq.n	800b3b2 <__swsetup_r+0x66>
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f7ff fa45 	bl	800a83c <_free_r>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3bc:	81a3      	strh	r3, [r4, #12]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6063      	str	r3, [r4, #4]
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f043 0308 	orr.w	r3, r3, #8
 800b3cc:	81a3      	strh	r3, [r4, #12]
 800b3ce:	6923      	ldr	r3, [r4, #16]
 800b3d0:	b94b      	cbnz	r3, 800b3e6 <__swsetup_r+0x9a>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3dc:	d003      	beq.n	800b3e6 <__swsetup_r+0x9a>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f000 fa05 	bl	800b7f0 <__smakebuf_r>
 800b3e6:	89a0      	ldrh	r0, [r4, #12]
 800b3e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3ec:	f010 0301 	ands.w	r3, r0, #1
 800b3f0:	d00a      	beq.n	800b408 <__swsetup_r+0xbc>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60a3      	str	r3, [r4, #8]
 800b3f6:	6963      	ldr	r3, [r4, #20]
 800b3f8:	425b      	negs	r3, r3
 800b3fa:	61a3      	str	r3, [r4, #24]
 800b3fc:	6923      	ldr	r3, [r4, #16]
 800b3fe:	b943      	cbnz	r3, 800b412 <__swsetup_r+0xc6>
 800b400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b404:	d1ba      	bne.n	800b37c <__swsetup_r+0x30>
 800b406:	bd70      	pop	{r4, r5, r6, pc}
 800b408:	0781      	lsls	r1, r0, #30
 800b40a:	bf58      	it	pl
 800b40c:	6963      	ldrpl	r3, [r4, #20]
 800b40e:	60a3      	str	r3, [r4, #8]
 800b410:	e7f4      	b.n	800b3fc <__swsetup_r+0xb0>
 800b412:	2000      	movs	r0, #0
 800b414:	e7f7      	b.n	800b406 <__swsetup_r+0xba>
 800b416:	bf00      	nop
 800b418:	200001a8 	.word	0x200001a8
 800b41c:	0800bdbc 	.word	0x0800bdbc
 800b420:	0800bddc 	.word	0x0800bddc
 800b424:	0800bd9c 	.word	0x0800bd9c

0800b428 <abort>:
 800b428:	2006      	movs	r0, #6
 800b42a:	b508      	push	{r3, lr}
 800b42c:	f000 faac 	bl	800b988 <raise>
 800b430:	2001      	movs	r0, #1
 800b432:	f7f6 fbe6 	bl	8001c02 <_exit>
	...

0800b438 <__sflush_r>:
 800b438:	898a      	ldrh	r2, [r1, #12]
 800b43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43c:	4605      	mov	r5, r0
 800b43e:	0710      	lsls	r0, r2, #28
 800b440:	460c      	mov	r4, r1
 800b442:	d457      	bmi.n	800b4f4 <__sflush_r+0xbc>
 800b444:	684b      	ldr	r3, [r1, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	dc04      	bgt.n	800b454 <__sflush_r+0x1c>
 800b44a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dc01      	bgt.n	800b454 <__sflush_r+0x1c>
 800b450:	2000      	movs	r0, #0
 800b452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b456:	2e00      	cmp	r6, #0
 800b458:	d0fa      	beq.n	800b450 <__sflush_r+0x18>
 800b45a:	2300      	movs	r3, #0
 800b45c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b460:	682f      	ldr	r7, [r5, #0]
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	d032      	beq.n	800b4cc <__sflush_r+0x94>
 800b466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	075a      	lsls	r2, r3, #29
 800b46c:	d505      	bpl.n	800b47a <__sflush_r+0x42>
 800b46e:	6863      	ldr	r3, [r4, #4]
 800b470:	1ac0      	subs	r0, r0, r3
 800b472:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b474:	b10b      	cbz	r3, 800b47a <__sflush_r+0x42>
 800b476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b478:	1ac0      	subs	r0, r0, r3
 800b47a:	2300      	movs	r3, #0
 800b47c:	4602      	mov	r2, r0
 800b47e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b480:	4628      	mov	r0, r5
 800b482:	6a21      	ldr	r1, [r4, #32]
 800b484:	47b0      	blx	r6
 800b486:	1c43      	adds	r3, r0, #1
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	d106      	bne.n	800b49a <__sflush_r+0x62>
 800b48c:	6829      	ldr	r1, [r5, #0]
 800b48e:	291d      	cmp	r1, #29
 800b490:	d82c      	bhi.n	800b4ec <__sflush_r+0xb4>
 800b492:	4a29      	ldr	r2, [pc, #164]	; (800b538 <__sflush_r+0x100>)
 800b494:	40ca      	lsrs	r2, r1
 800b496:	07d6      	lsls	r6, r2, #31
 800b498:	d528      	bpl.n	800b4ec <__sflush_r+0xb4>
 800b49a:	2200      	movs	r2, #0
 800b49c:	6062      	str	r2, [r4, #4]
 800b49e:	6922      	ldr	r2, [r4, #16]
 800b4a0:	04d9      	lsls	r1, r3, #19
 800b4a2:	6022      	str	r2, [r4, #0]
 800b4a4:	d504      	bpl.n	800b4b0 <__sflush_r+0x78>
 800b4a6:	1c42      	adds	r2, r0, #1
 800b4a8:	d101      	bne.n	800b4ae <__sflush_r+0x76>
 800b4aa:	682b      	ldr	r3, [r5, #0]
 800b4ac:	b903      	cbnz	r3, 800b4b0 <__sflush_r+0x78>
 800b4ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b4b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b2:	602f      	str	r7, [r5, #0]
 800b4b4:	2900      	cmp	r1, #0
 800b4b6:	d0cb      	beq.n	800b450 <__sflush_r+0x18>
 800b4b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	d002      	beq.n	800b4c6 <__sflush_r+0x8e>
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	f7ff f9bb 	bl	800a83c <_free_r>
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b4ca:	e7c2      	b.n	800b452 <__sflush_r+0x1a>
 800b4cc:	6a21      	ldr	r1, [r4, #32]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	47b0      	blx	r6
 800b4d4:	1c41      	adds	r1, r0, #1
 800b4d6:	d1c7      	bne.n	800b468 <__sflush_r+0x30>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0c4      	beq.n	800b468 <__sflush_r+0x30>
 800b4de:	2b1d      	cmp	r3, #29
 800b4e0:	d001      	beq.n	800b4e6 <__sflush_r+0xae>
 800b4e2:	2b16      	cmp	r3, #22
 800b4e4:	d101      	bne.n	800b4ea <__sflush_r+0xb2>
 800b4e6:	602f      	str	r7, [r5, #0]
 800b4e8:	e7b2      	b.n	800b450 <__sflush_r+0x18>
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f0:	81a3      	strh	r3, [r4, #12]
 800b4f2:	e7ae      	b.n	800b452 <__sflush_r+0x1a>
 800b4f4:	690f      	ldr	r7, [r1, #16]
 800b4f6:	2f00      	cmp	r7, #0
 800b4f8:	d0aa      	beq.n	800b450 <__sflush_r+0x18>
 800b4fa:	0793      	lsls	r3, r2, #30
 800b4fc:	bf18      	it	ne
 800b4fe:	2300      	movne	r3, #0
 800b500:	680e      	ldr	r6, [r1, #0]
 800b502:	bf08      	it	eq
 800b504:	694b      	ldreq	r3, [r1, #20]
 800b506:	1bf6      	subs	r6, r6, r7
 800b508:	600f      	str	r7, [r1, #0]
 800b50a:	608b      	str	r3, [r1, #8]
 800b50c:	2e00      	cmp	r6, #0
 800b50e:	dd9f      	ble.n	800b450 <__sflush_r+0x18>
 800b510:	4633      	mov	r3, r6
 800b512:	463a      	mov	r2, r7
 800b514:	4628      	mov	r0, r5
 800b516:	6a21      	ldr	r1, [r4, #32]
 800b518:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b51c:	47e0      	blx	ip
 800b51e:	2800      	cmp	r0, #0
 800b520:	dc06      	bgt.n	800b530 <__sflush_r+0xf8>
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	e790      	b.n	800b452 <__sflush_r+0x1a>
 800b530:	4407      	add	r7, r0
 800b532:	1a36      	subs	r6, r6, r0
 800b534:	e7ea      	b.n	800b50c <__sflush_r+0xd4>
 800b536:	bf00      	nop
 800b538:	20400001 	.word	0x20400001

0800b53c <_fflush_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	690b      	ldr	r3, [r1, #16]
 800b540:	4605      	mov	r5, r0
 800b542:	460c      	mov	r4, r1
 800b544:	b913      	cbnz	r3, 800b54c <_fflush_r+0x10>
 800b546:	2500      	movs	r5, #0
 800b548:	4628      	mov	r0, r5
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	b118      	cbz	r0, 800b556 <_fflush_r+0x1a>
 800b54e:	6983      	ldr	r3, [r0, #24]
 800b550:	b90b      	cbnz	r3, 800b556 <_fflush_r+0x1a>
 800b552:	f000 f887 	bl	800b664 <__sinit>
 800b556:	4b14      	ldr	r3, [pc, #80]	; (800b5a8 <_fflush_r+0x6c>)
 800b558:	429c      	cmp	r4, r3
 800b55a:	d11b      	bne.n	800b594 <_fflush_r+0x58>
 800b55c:	686c      	ldr	r4, [r5, #4]
 800b55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0ef      	beq.n	800b546 <_fflush_r+0xa>
 800b566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b568:	07d0      	lsls	r0, r2, #31
 800b56a:	d404      	bmi.n	800b576 <_fflush_r+0x3a>
 800b56c:	0599      	lsls	r1, r3, #22
 800b56e:	d402      	bmi.n	800b576 <_fflush_r+0x3a>
 800b570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b572:	f000 f915 	bl	800b7a0 <__retarget_lock_acquire_recursive>
 800b576:	4628      	mov	r0, r5
 800b578:	4621      	mov	r1, r4
 800b57a:	f7ff ff5d 	bl	800b438 <__sflush_r>
 800b57e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b580:	4605      	mov	r5, r0
 800b582:	07da      	lsls	r2, r3, #31
 800b584:	d4e0      	bmi.n	800b548 <_fflush_r+0xc>
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	059b      	lsls	r3, r3, #22
 800b58a:	d4dd      	bmi.n	800b548 <_fflush_r+0xc>
 800b58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b58e:	f000 f908 	bl	800b7a2 <__retarget_lock_release_recursive>
 800b592:	e7d9      	b.n	800b548 <_fflush_r+0xc>
 800b594:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <_fflush_r+0x70>)
 800b596:	429c      	cmp	r4, r3
 800b598:	d101      	bne.n	800b59e <_fflush_r+0x62>
 800b59a:	68ac      	ldr	r4, [r5, #8]
 800b59c:	e7df      	b.n	800b55e <_fflush_r+0x22>
 800b59e:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <_fflush_r+0x74>)
 800b5a0:	429c      	cmp	r4, r3
 800b5a2:	bf08      	it	eq
 800b5a4:	68ec      	ldreq	r4, [r5, #12]
 800b5a6:	e7da      	b.n	800b55e <_fflush_r+0x22>
 800b5a8:	0800bdbc 	.word	0x0800bdbc
 800b5ac:	0800bddc 	.word	0x0800bddc
 800b5b0:	0800bd9c 	.word	0x0800bd9c

0800b5b4 <std>:
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	b510      	push	{r4, lr}
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b5be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5c2:	6083      	str	r3, [r0, #8]
 800b5c4:	8181      	strh	r1, [r0, #12]
 800b5c6:	6643      	str	r3, [r0, #100]	; 0x64
 800b5c8:	81c2      	strh	r2, [r0, #14]
 800b5ca:	6183      	str	r3, [r0, #24]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	2208      	movs	r2, #8
 800b5d0:	305c      	adds	r0, #92	; 0x5c
 800b5d2:	f7fe ffe9 	bl	800a5a8 <memset>
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <std+0x38>)
 800b5d8:	6224      	str	r4, [r4, #32]
 800b5da:	6263      	str	r3, [r4, #36]	; 0x24
 800b5dc:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <std+0x3c>)
 800b5de:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5e0:	4b04      	ldr	r3, [pc, #16]	; (800b5f4 <std+0x40>)
 800b5e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5e4:	4b04      	ldr	r3, [pc, #16]	; (800b5f8 <std+0x44>)
 800b5e6:	6323      	str	r3, [r4, #48]	; 0x30
 800b5e8:	bd10      	pop	{r4, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0800b9c1 	.word	0x0800b9c1
 800b5f0:	0800b9e3 	.word	0x0800b9e3
 800b5f4:	0800ba1b 	.word	0x0800ba1b
 800b5f8:	0800ba3f 	.word	0x0800ba3f

0800b5fc <_cleanup_r>:
 800b5fc:	4901      	ldr	r1, [pc, #4]	; (800b604 <_cleanup_r+0x8>)
 800b5fe:	f000 b8af 	b.w	800b760 <_fwalk_reent>
 800b602:	bf00      	nop
 800b604:	0800b53d 	.word	0x0800b53d

0800b608 <__sfmoreglue>:
 800b608:	2268      	movs	r2, #104	; 0x68
 800b60a:	b570      	push	{r4, r5, r6, lr}
 800b60c:	1e4d      	subs	r5, r1, #1
 800b60e:	4355      	muls	r5, r2
 800b610:	460e      	mov	r6, r1
 800b612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b616:	f7ff f979 	bl	800a90c <_malloc_r>
 800b61a:	4604      	mov	r4, r0
 800b61c:	b140      	cbz	r0, 800b630 <__sfmoreglue+0x28>
 800b61e:	2100      	movs	r1, #0
 800b620:	e9c0 1600 	strd	r1, r6, [r0]
 800b624:	300c      	adds	r0, #12
 800b626:	60a0      	str	r0, [r4, #8]
 800b628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b62c:	f7fe ffbc 	bl	800a5a8 <memset>
 800b630:	4620      	mov	r0, r4
 800b632:	bd70      	pop	{r4, r5, r6, pc}

0800b634 <__sfp_lock_acquire>:
 800b634:	4801      	ldr	r0, [pc, #4]	; (800b63c <__sfp_lock_acquire+0x8>)
 800b636:	f000 b8b3 	b.w	800b7a0 <__retarget_lock_acquire_recursive>
 800b63a:	bf00      	nop
 800b63c:	20000e41 	.word	0x20000e41

0800b640 <__sfp_lock_release>:
 800b640:	4801      	ldr	r0, [pc, #4]	; (800b648 <__sfp_lock_release+0x8>)
 800b642:	f000 b8ae 	b.w	800b7a2 <__retarget_lock_release_recursive>
 800b646:	bf00      	nop
 800b648:	20000e41 	.word	0x20000e41

0800b64c <__sinit_lock_acquire>:
 800b64c:	4801      	ldr	r0, [pc, #4]	; (800b654 <__sinit_lock_acquire+0x8>)
 800b64e:	f000 b8a7 	b.w	800b7a0 <__retarget_lock_acquire_recursive>
 800b652:	bf00      	nop
 800b654:	20000e42 	.word	0x20000e42

0800b658 <__sinit_lock_release>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__sinit_lock_release+0x8>)
 800b65a:	f000 b8a2 	b.w	800b7a2 <__retarget_lock_release_recursive>
 800b65e:	bf00      	nop
 800b660:	20000e42 	.word	0x20000e42

0800b664 <__sinit>:
 800b664:	b510      	push	{r4, lr}
 800b666:	4604      	mov	r4, r0
 800b668:	f7ff fff0 	bl	800b64c <__sinit_lock_acquire>
 800b66c:	69a3      	ldr	r3, [r4, #24]
 800b66e:	b11b      	cbz	r3, 800b678 <__sinit+0x14>
 800b670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b674:	f7ff bff0 	b.w	800b658 <__sinit_lock_release>
 800b678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b67c:	6523      	str	r3, [r4, #80]	; 0x50
 800b67e:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <__sinit+0x68>)
 800b680:	4a13      	ldr	r2, [pc, #76]	; (800b6d0 <__sinit+0x6c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	62a2      	str	r2, [r4, #40]	; 0x28
 800b686:	42a3      	cmp	r3, r4
 800b688:	bf08      	it	eq
 800b68a:	2301      	moveq	r3, #1
 800b68c:	4620      	mov	r0, r4
 800b68e:	bf08      	it	eq
 800b690:	61a3      	streq	r3, [r4, #24]
 800b692:	f000 f81f 	bl	800b6d4 <__sfp>
 800b696:	6060      	str	r0, [r4, #4]
 800b698:	4620      	mov	r0, r4
 800b69a:	f000 f81b 	bl	800b6d4 <__sfp>
 800b69e:	60a0      	str	r0, [r4, #8]
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 f817 	bl	800b6d4 <__sfp>
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2104      	movs	r1, #4
 800b6aa:	60e0      	str	r0, [r4, #12]
 800b6ac:	6860      	ldr	r0, [r4, #4]
 800b6ae:	f7ff ff81 	bl	800b5b4 <std>
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	2109      	movs	r1, #9
 800b6b6:	68a0      	ldr	r0, [r4, #8]
 800b6b8:	f7ff ff7c 	bl	800b5b4 <std>
 800b6bc:	2202      	movs	r2, #2
 800b6be:	2112      	movs	r1, #18
 800b6c0:	68e0      	ldr	r0, [r4, #12]
 800b6c2:	f7ff ff77 	bl	800b5b4 <std>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	61a3      	str	r3, [r4, #24]
 800b6ca:	e7d1      	b.n	800b670 <__sinit+0xc>
 800b6cc:	0800bbb4 	.word	0x0800bbb4
 800b6d0:	0800b5fd 	.word	0x0800b5fd

0800b6d4 <__sfp>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	4607      	mov	r7, r0
 800b6d8:	f7ff ffac 	bl	800b634 <__sfp_lock_acquire>
 800b6dc:	4b1e      	ldr	r3, [pc, #120]	; (800b758 <__sfp+0x84>)
 800b6de:	681e      	ldr	r6, [r3, #0]
 800b6e0:	69b3      	ldr	r3, [r6, #24]
 800b6e2:	b913      	cbnz	r3, 800b6ea <__sfp+0x16>
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7ff ffbd 	bl	800b664 <__sinit>
 800b6ea:	3648      	adds	r6, #72	; 0x48
 800b6ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	d503      	bpl.n	800b6fc <__sfp+0x28>
 800b6f4:	6833      	ldr	r3, [r6, #0]
 800b6f6:	b30b      	cbz	r3, 800b73c <__sfp+0x68>
 800b6f8:	6836      	ldr	r6, [r6, #0]
 800b6fa:	e7f7      	b.n	800b6ec <__sfp+0x18>
 800b6fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b700:	b9d5      	cbnz	r5, 800b738 <__sfp+0x64>
 800b702:	4b16      	ldr	r3, [pc, #88]	; (800b75c <__sfp+0x88>)
 800b704:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b708:	60e3      	str	r3, [r4, #12]
 800b70a:	6665      	str	r5, [r4, #100]	; 0x64
 800b70c:	f000 f847 	bl	800b79e <__retarget_lock_init_recursive>
 800b710:	f7ff ff96 	bl	800b640 <__sfp_lock_release>
 800b714:	2208      	movs	r2, #8
 800b716:	4629      	mov	r1, r5
 800b718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b71c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b720:	6025      	str	r5, [r4, #0]
 800b722:	61a5      	str	r5, [r4, #24]
 800b724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b728:	f7fe ff3e 	bl	800a5a8 <memset>
 800b72c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b734:	4620      	mov	r0, r4
 800b736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b738:	3468      	adds	r4, #104	; 0x68
 800b73a:	e7d9      	b.n	800b6f0 <__sfp+0x1c>
 800b73c:	2104      	movs	r1, #4
 800b73e:	4638      	mov	r0, r7
 800b740:	f7ff ff62 	bl	800b608 <__sfmoreglue>
 800b744:	4604      	mov	r4, r0
 800b746:	6030      	str	r0, [r6, #0]
 800b748:	2800      	cmp	r0, #0
 800b74a:	d1d5      	bne.n	800b6f8 <__sfp+0x24>
 800b74c:	f7ff ff78 	bl	800b640 <__sfp_lock_release>
 800b750:	230c      	movs	r3, #12
 800b752:	603b      	str	r3, [r7, #0]
 800b754:	e7ee      	b.n	800b734 <__sfp+0x60>
 800b756:	bf00      	nop
 800b758:	0800bbb4 	.word	0x0800bbb4
 800b75c:	ffff0001 	.word	0xffff0001

0800b760 <_fwalk_reent>:
 800b760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b764:	4606      	mov	r6, r0
 800b766:	4688      	mov	r8, r1
 800b768:	2700      	movs	r7, #0
 800b76a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b76e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b772:	f1b9 0901 	subs.w	r9, r9, #1
 800b776:	d505      	bpl.n	800b784 <_fwalk_reent+0x24>
 800b778:	6824      	ldr	r4, [r4, #0]
 800b77a:	2c00      	cmp	r4, #0
 800b77c:	d1f7      	bne.n	800b76e <_fwalk_reent+0xe>
 800b77e:	4638      	mov	r0, r7
 800b780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b784:	89ab      	ldrh	r3, [r5, #12]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d907      	bls.n	800b79a <_fwalk_reent+0x3a>
 800b78a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b78e:	3301      	adds	r3, #1
 800b790:	d003      	beq.n	800b79a <_fwalk_reent+0x3a>
 800b792:	4629      	mov	r1, r5
 800b794:	4630      	mov	r0, r6
 800b796:	47c0      	blx	r8
 800b798:	4307      	orrs	r7, r0
 800b79a:	3568      	adds	r5, #104	; 0x68
 800b79c:	e7e9      	b.n	800b772 <_fwalk_reent+0x12>

0800b79e <__retarget_lock_init_recursive>:
 800b79e:	4770      	bx	lr

0800b7a0 <__retarget_lock_acquire_recursive>:
 800b7a0:	4770      	bx	lr

0800b7a2 <__retarget_lock_release_recursive>:
 800b7a2:	4770      	bx	lr

0800b7a4 <__swhatbuf_r>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	460e      	mov	r6, r1
 800b7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	461d      	mov	r5, r3
 800b7b2:	b096      	sub	sp, #88	; 0x58
 800b7b4:	da08      	bge.n	800b7c8 <__swhatbuf_r+0x24>
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7bc:	602a      	str	r2, [r5, #0]
 800b7be:	061a      	lsls	r2, r3, #24
 800b7c0:	d410      	bmi.n	800b7e4 <__swhatbuf_r+0x40>
 800b7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c6:	e00e      	b.n	800b7e6 <__swhatbuf_r+0x42>
 800b7c8:	466a      	mov	r2, sp
 800b7ca:	f000 f95f 	bl	800ba8c <_fstat_r>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	dbf1      	blt.n	800b7b6 <__swhatbuf_r+0x12>
 800b7d2:	9a01      	ldr	r2, [sp, #4]
 800b7d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7dc:	425a      	negs	r2, r3
 800b7de:	415a      	adcs	r2, r3
 800b7e0:	602a      	str	r2, [r5, #0]
 800b7e2:	e7ee      	b.n	800b7c2 <__swhatbuf_r+0x1e>
 800b7e4:	2340      	movs	r3, #64	; 0x40
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	b016      	add	sp, #88	; 0x58
 800b7ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7f0 <__smakebuf_r>:
 800b7f0:	898b      	ldrh	r3, [r1, #12]
 800b7f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7f4:	079d      	lsls	r5, r3, #30
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	460c      	mov	r4, r1
 800b7fa:	d507      	bpl.n	800b80c <__smakebuf_r+0x1c>
 800b7fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	6123      	str	r3, [r4, #16]
 800b804:	2301      	movs	r3, #1
 800b806:	6163      	str	r3, [r4, #20]
 800b808:	b002      	add	sp, #8
 800b80a:	bd70      	pop	{r4, r5, r6, pc}
 800b80c:	466a      	mov	r2, sp
 800b80e:	ab01      	add	r3, sp, #4
 800b810:	f7ff ffc8 	bl	800b7a4 <__swhatbuf_r>
 800b814:	9900      	ldr	r1, [sp, #0]
 800b816:	4605      	mov	r5, r0
 800b818:	4630      	mov	r0, r6
 800b81a:	f7ff f877 	bl	800a90c <_malloc_r>
 800b81e:	b948      	cbnz	r0, 800b834 <__smakebuf_r+0x44>
 800b820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b824:	059a      	lsls	r2, r3, #22
 800b826:	d4ef      	bmi.n	800b808 <__smakebuf_r+0x18>
 800b828:	f023 0303 	bic.w	r3, r3, #3
 800b82c:	f043 0302 	orr.w	r3, r3, #2
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	e7e3      	b.n	800b7fc <__smakebuf_r+0xc>
 800b834:	4b0d      	ldr	r3, [pc, #52]	; (800b86c <__smakebuf_r+0x7c>)
 800b836:	62b3      	str	r3, [r6, #40]	; 0x28
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	6020      	str	r0, [r4, #0]
 800b83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b840:	81a3      	strh	r3, [r4, #12]
 800b842:	9b00      	ldr	r3, [sp, #0]
 800b844:	6120      	str	r0, [r4, #16]
 800b846:	6163      	str	r3, [r4, #20]
 800b848:	9b01      	ldr	r3, [sp, #4]
 800b84a:	b15b      	cbz	r3, 800b864 <__smakebuf_r+0x74>
 800b84c:	4630      	mov	r0, r6
 800b84e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b852:	f000 f92d 	bl	800bab0 <_isatty_r>
 800b856:	b128      	cbz	r0, 800b864 <__smakebuf_r+0x74>
 800b858:	89a3      	ldrh	r3, [r4, #12]
 800b85a:	f023 0303 	bic.w	r3, r3, #3
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	81a3      	strh	r3, [r4, #12]
 800b864:	89a0      	ldrh	r0, [r4, #12]
 800b866:	4305      	orrs	r5, r0
 800b868:	81a5      	strh	r5, [r4, #12]
 800b86a:	e7cd      	b.n	800b808 <__smakebuf_r+0x18>
 800b86c:	0800b5fd 	.word	0x0800b5fd

0800b870 <memchr>:
 800b870:	4603      	mov	r3, r0
 800b872:	b510      	push	{r4, lr}
 800b874:	b2c9      	uxtb	r1, r1
 800b876:	4402      	add	r2, r0
 800b878:	4293      	cmp	r3, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	d101      	bne.n	800b882 <memchr+0x12>
 800b87e:	2000      	movs	r0, #0
 800b880:	e003      	b.n	800b88a <memchr+0x1a>
 800b882:	7804      	ldrb	r4, [r0, #0]
 800b884:	3301      	adds	r3, #1
 800b886:	428c      	cmp	r4, r1
 800b888:	d1f6      	bne.n	800b878 <memchr+0x8>
 800b88a:	bd10      	pop	{r4, pc}

0800b88c <memmove>:
 800b88c:	4288      	cmp	r0, r1
 800b88e:	b510      	push	{r4, lr}
 800b890:	eb01 0402 	add.w	r4, r1, r2
 800b894:	d902      	bls.n	800b89c <memmove+0x10>
 800b896:	4284      	cmp	r4, r0
 800b898:	4623      	mov	r3, r4
 800b89a:	d807      	bhi.n	800b8ac <memmove+0x20>
 800b89c:	1e43      	subs	r3, r0, #1
 800b89e:	42a1      	cmp	r1, r4
 800b8a0:	d008      	beq.n	800b8b4 <memmove+0x28>
 800b8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8aa:	e7f8      	b.n	800b89e <memmove+0x12>
 800b8ac:	4601      	mov	r1, r0
 800b8ae:	4402      	add	r2, r0
 800b8b0:	428a      	cmp	r2, r1
 800b8b2:	d100      	bne.n	800b8b6 <memmove+0x2a>
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8be:	e7f7      	b.n	800b8b0 <memmove+0x24>

0800b8c0 <__malloc_lock>:
 800b8c0:	4801      	ldr	r0, [pc, #4]	; (800b8c8 <__malloc_lock+0x8>)
 800b8c2:	f7ff bf6d 	b.w	800b7a0 <__retarget_lock_acquire_recursive>
 800b8c6:	bf00      	nop
 800b8c8:	20000e40 	.word	0x20000e40

0800b8cc <__malloc_unlock>:
 800b8cc:	4801      	ldr	r0, [pc, #4]	; (800b8d4 <__malloc_unlock+0x8>)
 800b8ce:	f7ff bf68 	b.w	800b7a2 <__retarget_lock_release_recursive>
 800b8d2:	bf00      	nop
 800b8d4:	20000e40 	.word	0x20000e40

0800b8d8 <_realloc_r>:
 800b8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8dc:	4680      	mov	r8, r0
 800b8de:	4614      	mov	r4, r2
 800b8e0:	460e      	mov	r6, r1
 800b8e2:	b921      	cbnz	r1, 800b8ee <_realloc_r+0x16>
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ea:	f7ff b80f 	b.w	800a90c <_malloc_r>
 800b8ee:	b92a      	cbnz	r2, 800b8fc <_realloc_r+0x24>
 800b8f0:	f7fe ffa4 	bl	800a83c <_free_r>
 800b8f4:	4625      	mov	r5, r4
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8fc:	f000 f8fa 	bl	800baf4 <_malloc_usable_size_r>
 800b900:	4284      	cmp	r4, r0
 800b902:	4607      	mov	r7, r0
 800b904:	d802      	bhi.n	800b90c <_realloc_r+0x34>
 800b906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b90a:	d812      	bhi.n	800b932 <_realloc_r+0x5a>
 800b90c:	4621      	mov	r1, r4
 800b90e:	4640      	mov	r0, r8
 800b910:	f7fe fffc 	bl	800a90c <_malloc_r>
 800b914:	4605      	mov	r5, r0
 800b916:	2800      	cmp	r0, #0
 800b918:	d0ed      	beq.n	800b8f6 <_realloc_r+0x1e>
 800b91a:	42bc      	cmp	r4, r7
 800b91c:	4622      	mov	r2, r4
 800b91e:	4631      	mov	r1, r6
 800b920:	bf28      	it	cs
 800b922:	463a      	movcs	r2, r7
 800b924:	f7fe fe32 	bl	800a58c <memcpy>
 800b928:	4631      	mov	r1, r6
 800b92a:	4640      	mov	r0, r8
 800b92c:	f7fe ff86 	bl	800a83c <_free_r>
 800b930:	e7e1      	b.n	800b8f6 <_realloc_r+0x1e>
 800b932:	4635      	mov	r5, r6
 800b934:	e7df      	b.n	800b8f6 <_realloc_r+0x1e>

0800b936 <_raise_r>:
 800b936:	291f      	cmp	r1, #31
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4604      	mov	r4, r0
 800b93c:	460d      	mov	r5, r1
 800b93e:	d904      	bls.n	800b94a <_raise_r+0x14>
 800b940:	2316      	movs	r3, #22
 800b942:	6003      	str	r3, [r0, #0]
 800b944:	f04f 30ff 	mov.w	r0, #4294967295
 800b948:	bd38      	pop	{r3, r4, r5, pc}
 800b94a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b94c:	b112      	cbz	r2, 800b954 <_raise_r+0x1e>
 800b94e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b952:	b94b      	cbnz	r3, 800b968 <_raise_r+0x32>
 800b954:	4620      	mov	r0, r4
 800b956:	f000 f831 	bl	800b9bc <_getpid_r>
 800b95a:	462a      	mov	r2, r5
 800b95c:	4601      	mov	r1, r0
 800b95e:	4620      	mov	r0, r4
 800b960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b964:	f000 b818 	b.w	800b998 <_kill_r>
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d00a      	beq.n	800b982 <_raise_r+0x4c>
 800b96c:	1c59      	adds	r1, r3, #1
 800b96e:	d103      	bne.n	800b978 <_raise_r+0x42>
 800b970:	2316      	movs	r3, #22
 800b972:	6003      	str	r3, [r0, #0]
 800b974:	2001      	movs	r0, #1
 800b976:	e7e7      	b.n	800b948 <_raise_r+0x12>
 800b978:	2400      	movs	r4, #0
 800b97a:	4628      	mov	r0, r5
 800b97c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b980:	4798      	blx	r3
 800b982:	2000      	movs	r0, #0
 800b984:	e7e0      	b.n	800b948 <_raise_r+0x12>
	...

0800b988 <raise>:
 800b988:	4b02      	ldr	r3, [pc, #8]	; (800b994 <raise+0xc>)
 800b98a:	4601      	mov	r1, r0
 800b98c:	6818      	ldr	r0, [r3, #0]
 800b98e:	f7ff bfd2 	b.w	800b936 <_raise_r>
 800b992:	bf00      	nop
 800b994:	200001a8 	.word	0x200001a8

0800b998 <_kill_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	2300      	movs	r3, #0
 800b99c:	4d06      	ldr	r5, [pc, #24]	; (800b9b8 <_kill_r+0x20>)
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	602b      	str	r3, [r5, #0]
 800b9a6:	f7f6 f91c 	bl	8001be2 <_kill>
 800b9aa:	1c43      	adds	r3, r0, #1
 800b9ac:	d102      	bne.n	800b9b4 <_kill_r+0x1c>
 800b9ae:	682b      	ldr	r3, [r5, #0]
 800b9b0:	b103      	cbz	r3, 800b9b4 <_kill_r+0x1c>
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	bd38      	pop	{r3, r4, r5, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20000e44 	.word	0x20000e44

0800b9bc <_getpid_r>:
 800b9bc:	f7f6 b90a 	b.w	8001bd4 <_getpid>

0800b9c0 <__sread>:
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c8:	f000 f89c 	bl	800bb04 <_read_r>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	bfab      	itete	ge
 800b9d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9d4:	181b      	addge	r3, r3, r0
 800b9d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9da:	bfac      	ite	ge
 800b9dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9de:	81a3      	strhlt	r3, [r4, #12]
 800b9e0:	bd10      	pop	{r4, pc}

0800b9e2 <__swrite>:
 800b9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e6:	461f      	mov	r7, r3
 800b9e8:	898b      	ldrh	r3, [r1, #12]
 800b9ea:	4605      	mov	r5, r0
 800b9ec:	05db      	lsls	r3, r3, #23
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	4616      	mov	r6, r2
 800b9f2:	d505      	bpl.n	800ba00 <__swrite+0x1e>
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fc:	f000 f868 	bl	800bad0 <_lseek_r>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	4632      	mov	r2, r6
 800ba04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba08:	81a3      	strh	r3, [r4, #12]
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	463b      	mov	r3, r7
 800ba0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba16:	f000 b817 	b.w	800ba48 <_write_r>

0800ba1a <__sseek>:
 800ba1a:	b510      	push	{r4, lr}
 800ba1c:	460c      	mov	r4, r1
 800ba1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba22:	f000 f855 	bl	800bad0 <_lseek_r>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	bf15      	itete	ne
 800ba2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba36:	81a3      	strheq	r3, [r4, #12]
 800ba38:	bf18      	it	ne
 800ba3a:	81a3      	strhne	r3, [r4, #12]
 800ba3c:	bd10      	pop	{r4, pc}

0800ba3e <__sclose>:
 800ba3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba42:	f000 b813 	b.w	800ba6c <_close_r>
	...

0800ba48 <_write_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	4611      	mov	r1, r2
 800ba50:	2200      	movs	r2, #0
 800ba52:	4d05      	ldr	r5, [pc, #20]	; (800ba68 <_write_r+0x20>)
 800ba54:	602a      	str	r2, [r5, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f7f6 f8fa 	bl	8001c50 <_write>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_write_r+0x1e>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_write_r+0x1e>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20000e44 	.word	0x20000e44

0800ba6c <_close_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	2300      	movs	r3, #0
 800ba70:	4d05      	ldr	r5, [pc, #20]	; (800ba88 <_close_r+0x1c>)
 800ba72:	4604      	mov	r4, r0
 800ba74:	4608      	mov	r0, r1
 800ba76:	602b      	str	r3, [r5, #0]
 800ba78:	f7f6 f906 	bl	8001c88 <_close>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_close_r+0x1a>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_close_r+0x1a>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	20000e44 	.word	0x20000e44

0800ba8c <_fstat_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	2300      	movs	r3, #0
 800ba90:	4d06      	ldr	r5, [pc, #24]	; (800baac <_fstat_r+0x20>)
 800ba92:	4604      	mov	r4, r0
 800ba94:	4608      	mov	r0, r1
 800ba96:	4611      	mov	r1, r2
 800ba98:	602b      	str	r3, [r5, #0]
 800ba9a:	f7f6 f900 	bl	8001c9e <_fstat>
 800ba9e:	1c43      	adds	r3, r0, #1
 800baa0:	d102      	bne.n	800baa8 <_fstat_r+0x1c>
 800baa2:	682b      	ldr	r3, [r5, #0]
 800baa4:	b103      	cbz	r3, 800baa8 <_fstat_r+0x1c>
 800baa6:	6023      	str	r3, [r4, #0]
 800baa8:	bd38      	pop	{r3, r4, r5, pc}
 800baaa:	bf00      	nop
 800baac:	20000e44 	.word	0x20000e44

0800bab0 <_isatty_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	2300      	movs	r3, #0
 800bab4:	4d05      	ldr	r5, [pc, #20]	; (800bacc <_isatty_r+0x1c>)
 800bab6:	4604      	mov	r4, r0
 800bab8:	4608      	mov	r0, r1
 800baba:	602b      	str	r3, [r5, #0]
 800babc:	f7f6 f8fe 	bl	8001cbc <_isatty>
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	d102      	bne.n	800baca <_isatty_r+0x1a>
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	b103      	cbz	r3, 800baca <_isatty_r+0x1a>
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	bd38      	pop	{r3, r4, r5, pc}
 800bacc:	20000e44 	.word	0x20000e44

0800bad0 <_lseek_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	4611      	mov	r1, r2
 800bad8:	2200      	movs	r2, #0
 800bada:	4d05      	ldr	r5, [pc, #20]	; (800baf0 <_lseek_r+0x20>)
 800badc:	602a      	str	r2, [r5, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	f7f6 f8f6 	bl	8001cd0 <_lseek>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_lseek_r+0x1e>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_lseek_r+0x1e>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20000e44 	.word	0x20000e44

0800baf4 <_malloc_usable_size_r>:
 800baf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baf8:	1f18      	subs	r0, r3, #4
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	bfbc      	itt	lt
 800bafe:	580b      	ldrlt	r3, [r1, r0]
 800bb00:	18c0      	addlt	r0, r0, r3
 800bb02:	4770      	bx	lr

0800bb04 <_read_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4d05      	ldr	r5, [pc, #20]	; (800bb24 <_read_r+0x20>)
 800bb10:	602a      	str	r2, [r5, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	f7f6 f87f 	bl	8001c16 <_read>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_read_r+0x1e>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_read_r+0x1e>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	20000e44 	.word	0x20000e44

0800bb28 <_init>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	bf00      	nop
 800bb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2e:	bc08      	pop	{r3}
 800bb30:	469e      	mov	lr, r3
 800bb32:	4770      	bx	lr

0800bb34 <_fini>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	bf00      	nop
 800bb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3a:	bc08      	pop	{r3}
 800bb3c:	469e      	mov	lr, r3
 800bb3e:	4770      	bx	lr


FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b47c  0800b47c  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800b47c  0800b47c  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b47c  0800b47c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b47c  0800b47c  0001b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b480  0800b480  0001b480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800b484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c40  20000228  0800b6a8  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e68  0800b6a8  00020e68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118a5  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373a  00000000  00000000  00031af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00035230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b699  00000000  00000000  000370a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001418f  00000000  00000000  00052741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd4f  00000000  00000000  000668d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f461f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  000f4670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000228 	.word	0x20000228
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b1ac 	.word	0x0800b1ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000022c 	.word	0x2000022c
 8000148:	0800b1ac 	.word	0x0800b1ac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_d2uiz>:
 8000a08:	004a      	lsls	r2, r1, #1
 8000a0a:	d211      	bcs.n	8000a30 <__aeabi_d2uiz+0x28>
 8000a0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a10:	d211      	bcs.n	8000a36 <__aeabi_d2uiz+0x2e>
 8000a12:	d50d      	bpl.n	8000a30 <__aeabi_d2uiz+0x28>
 8000a14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a1c:	d40e      	bmi.n	8000a3c <__aeabi_d2uiz+0x34>
 8000a1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2e:	4770      	bx	lr
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_d2uiz+0x3a>
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0000 	mov.w	r0, #0
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2f>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a50:	bf24      	itt	cs
 8000a52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5a:	d90d      	bls.n	8000a78 <__aeabi_d2f+0x30>
 8000a5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a70:	bf08      	it	eq
 8000a72:	f020 0001 	biceq.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a7c:	d121      	bne.n	8000ac2 <__aeabi_d2f+0x7a>
 8000a7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a82:	bfbc      	itt	lt
 8000a84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	4770      	bxlt	lr
 8000a8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a92:	f1c2 0218 	rsb	r2, r2, #24
 8000a96:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa2:	bf18      	it	ne
 8000aa4:	f040 0001 	orrne.w	r0, r0, #1
 8000aa8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab4:	ea40 000c 	orr.w	r0, r0, ip
 8000ab8:	fa23 f302 	lsr.w	r3, r3, r2
 8000abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac0:	e7cc      	b.n	8000a5c <__aeabi_d2f+0x14>
 8000ac2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac6:	d107      	bne.n	8000ad8 <__aeabi_d2f+0x90>
 8000ac8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000acc:	bf1e      	ittt	ne
 8000ace:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad6:	4770      	bxne	lr
 8000ad8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_f2uiz>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	d20e      	bcs.n	8000b0a <__aeabi_f2uiz+0x22>
 8000aec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000af0:	d30b      	bcc.n	8000b0a <__aeabi_f2uiz+0x22>
 8000af2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000af6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000afa:	d409      	bmi.n	8000b10 <__aeabi_f2uiz+0x28>
 8000afc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b04:	fa23 f002 	lsr.w	r0, r3, r2
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0000 	mov.w	r0, #0
 8000b0e:	4770      	bx	lr
 8000b10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b14:	d101      	bne.n	8000b1a <__aeabi_f2uiz+0x32>
 8000b16:	0242      	lsls	r2, r0, #9
 8000b18:	d102      	bne.n	8000b20 <__aeabi_f2uiz+0x38>
 8000b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000b3a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d020      	beq.n	8000b8c <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	0a19      	lsrs	r1, r3, #8
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	0c19      	lsrs	r1, r3, #16
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	0e19      	lsrs	r1, r3, #24
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3303      	adds	r3, #3
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b92:	d1cf      	bne.n	8000b34 <read_flash+0xc>
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <update_data_from_flash>:
		{0, 200, 400, 600, 800, 1000}
		};

uint8_t inverter_config[3] = {0, 0, 0};

void update_data_from_flash(uint16_t (*sliders_data)[6], uint16_t (*range_x_data)[6], uint8_t (*inverter_config)){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0bc      	sub	sp, #240	; 0xf0
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	char data[0xC0];
	read_flash((uint8_t *)data);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ffb9 	bl	8000b28 <read_flash>
    char * token = strtok(data,",");				//first strtok go to variable directly
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	498c      	ldr	r1, [pc, #560]	; (8000dec <update_data_from_flash+0x24c>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f009 fa13 	bl	8009fe8 <strtok>
 8000bc2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    sliders_data[0][0] = atoi(token)*10;
 8000bc6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000bca:	f009 f9c1 	bl	8009f50 <atoi>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	801a      	strh	r2, [r3, #0]

    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 8000be0:	2301      	movs	r3, #1
 8000be2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000be6:	e01a      	b.n	8000c1e <update_data_from_flash+0x7e>
    	token = strtok(NULL,",");
 8000be8:	4980      	ldr	r1, [pc, #512]	; (8000dec <update_data_from_flash+0x24c>)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f009 f9fc 	bl	8009fe8 <strtok>
 8000bf0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    	sliders_data[0][i] = atoi(token)*10;
 8000bf4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000bf8:	f009 f9aa 	bl	8009f50 <atoi>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000c10:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 8000c14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c18:	3301      	adds	r3, #1
 8000c1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000c1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	dde0      	ble.n	8000be8 <update_data_from_flash+0x48>
    }

	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000c2c:	e01a      	b.n	8000c64 <update_data_from_flash+0xc4>
		token = strtok(NULL,",");
 8000c2e:	496f      	ldr	r1, [pc, #444]	; (8000dec <update_data_from_flash+0x24c>)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f009 f9d9 	bl	8009fe8 <strtok>
 8000c36:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[0][i] = atoi(token)*10;
 8000c3a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000c3e:	f009 f987 	bl	8009f50 <atoi>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b299      	uxth	r1, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 8000c5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000c5e:	3301      	adds	r3, #1
 8000c60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000c64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	dde0      	ble.n	8000c2e <update_data_from_flash+0x8e>
	}

	token = strtok(NULL,",");						// inverted for first pedal
 8000c6c:	495f      	ldr	r1, [pc, #380]	; (8000dec <update_data_from_flash+0x24c>)
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f009 f9ba 	bl	8009fe8 <strtok>
 8000c74:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[0] = atoi(token);
 8000c78:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000c7c:	f009 f968 	bl	8009f50 <atoi>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	701a      	strb	r2, [r3, #0]


	for (int i=0; i<6; i++){						// until all arrays be full filled
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000c8e:	e01b      	b.n	8000cc8 <update_data_from_flash+0x128>
		token = strtok(NULL,",");
 8000c90:	4956      	ldr	r1, [pc, #344]	; (8000dec <update_data_from_flash+0x24c>)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f009 f9a8 	bl	8009fe8 <strtok>
 8000c98:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[1][i] = atoi(token)*10;
 8000c9c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000ca0:	f009 f956 	bl	8009f50 <atoi>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	330c      	adds	r3, #12
 8000cac:	4611      	mov	r1, r2
 8000cae:	0089      	lsls	r1, r1, #2
 8000cb0:	440a      	add	r2, r1
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	b291      	uxth	r1, r2
 8000cb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000cba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 8000cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ccc:	2b05      	cmp	r3, #5
 8000cce:	dddf      	ble.n	8000c90 <update_data_from_flash+0xf0>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000cd6:	e01b      	b.n	8000d10 <update_data_from_flash+0x170>
		token = strtok(NULL,",");
 8000cd8:	4944      	ldr	r1, [pc, #272]	; (8000dec <update_data_from_flash+0x24c>)
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f009 f984 	bl	8009fe8 <strtok>
 8000ce0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[1][i] = atoi(token)*10;
 8000ce4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000ce8:	f009 f932 	bl	8009f50 <atoi>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	330c      	adds	r3, #12
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	0089      	lsls	r1, r1, #2
 8000cf8:	440a      	add	r2, r1
 8000cfa:	0052      	lsls	r2, r2, #1
 8000cfc:	b291      	uxth	r1, r2
 8000cfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000d02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 8000d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	dddf      	ble.n	8000cd8 <update_data_from_flash+0x138>
	}

	token = strtok(NULL,",");						// inverted for second pedal
 8000d18:	4934      	ldr	r1, [pc, #208]	; (8000dec <update_data_from_flash+0x24c>)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f009 f964 	bl	8009fe8 <strtok>
 8000d20:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[1] = atoi(token);
 8000d24:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000d28:	f009 f912 	bl	8009f50 <atoi>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3301      	adds	r3, #1
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<6; i++){						// until all arrays be full filled
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000d3c:	e01b      	b.n	8000d76 <update_data_from_flash+0x1d6>
		token = strtok(NULL,",");
 8000d3e:	492b      	ldr	r1, [pc, #172]	; (8000dec <update_data_from_flash+0x24c>)
 8000d40:	2000      	movs	r0, #0
 8000d42:	f009 f951 	bl	8009fe8 <strtok>
 8000d46:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[2][i] = atoi(token)*10;
 8000d4a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000d4e:	f009 f8ff 	bl	8009f50 <atoi>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3318      	adds	r3, #24
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	0089      	lsls	r1, r1, #2
 8000d5e:	440a      	add	r2, r1
 8000d60:	0052      	lsls	r2, r2, #1
 8000d62:	b291      	uxth	r1, r2
 8000d64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000d68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 8000d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000d70:	3301      	adds	r3, #1
 8000d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	dddf      	ble.n	8000d3e <update_data_from_flash+0x19e>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000d84:	e01b      	b.n	8000dbe <update_data_from_flash+0x21e>
		token = strtok(NULL,",");
 8000d86:	4919      	ldr	r1, [pc, #100]	; (8000dec <update_data_from_flash+0x24c>)
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f009 f92d 	bl	8009fe8 <strtok>
 8000d8e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[2][i] = atoi(token)*10;
 8000d92:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000d96:	f009 f8db 	bl	8009f50 <atoi>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3318      	adds	r3, #24
 8000da2:	4611      	mov	r1, r2
 8000da4:	0089      	lsls	r1, r1, #2
 8000da6:	440a      	add	r2, r1
 8000da8:	0052      	lsls	r2, r2, #1
 8000daa:	b291      	uxth	r1, r2
 8000dac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000db0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 8000db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000db8:	3301      	adds	r3, #1
 8000dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	dddf      	ble.n	8000d86 <update_data_from_flash+0x1e6>
	}

	token = strtok(NULL,",");						// inverted for third pedal
 8000dc6:	4909      	ldr	r1, [pc, #36]	; (8000dec <update_data_from_flash+0x24c>)
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f009 f90d 	bl	8009fe8 <strtok>
 8000dce:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[2] = atoi(token);
 8000dd2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000dd6:	f009 f8bb 	bl	8009f50 <atoi>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3302      	adds	r3, #2
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	701a      	strb	r2, [r3, #0]

}
 8000de4:	bf00      	nop
 8000de6:	37f0      	adds	r7, #240	; 0xf0
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	0800b1c4 	.word	0x0800b1c4

08000df0 <interpolacao_linear>:

float interpolacao_linear(double x, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 8000df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	461a      	mov	r2, r3
 8000e00:	460b      	mov	r3, r1
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80bb      	strh	r3, [r7, #4]
	//"""Realiza a interpolação de x sobre uma reta dada por [(x0,y0),(x1,y1)] e retorna o valor em y"""
	double y;
//	x = x*100;
	y = (double)y0 + ( (double)y1 - (double)y0 ) * ( x-(double)x0 ) / ( (double)x1-(double)x0 );
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fae8 	bl	80003e0 <__aeabi_ui2d>
 8000e10:	4604      	mov	r4, r0
 8000e12:	460d      	mov	r5, r1
 8000e14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fae2 	bl	80003e0 <__aeabi_ui2d>
 8000e1c:	4680      	mov	r8, r0
 8000e1e:	4689      	mov	r9, r1
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fadc 	bl	80003e0 <__aeabi_ui2d>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	4649      	mov	r1, r9
 8000e30:	f7ff f998 	bl	8000164 <__aeabi_dsub>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4690      	mov	r8, r2
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff face 	bl	80003e0 <__aeabi_ui2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e4c:	f7ff f98a 	bl	8000164 <__aeabi_dsub>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4640      	mov	r0, r8
 8000e56:	4649      	mov	r1, r9
 8000e58:	f7ff fb3c 	bl	80004d4 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4692      	mov	sl, r2
 8000e62:	469b      	mov	fp, r3
 8000e64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff faba 	bl	80003e0 <__aeabi_ui2d>
 8000e6c:	4680      	mov	r8, r0
 8000e6e:	4689      	mov	r9, r1
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fab4 	bl	80003e0 <__aeabi_ui2d>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	4649      	mov	r1, r9
 8000e80:	f7ff f970 	bl	8000164 <__aeabi_dsub>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4650      	mov	r0, sl
 8000e8a:	4659      	mov	r1, fp
 8000e8c:	f7ff fc4c 	bl	8000728 <__aeabi_ddiv>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4620      	mov	r0, r4
 8000e96:	4629      	mov	r1, r5
 8000e98:	f7ff f966 	bl	8000168 <__adddf3>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
//	y = y/100;
	return y;
 8000ea4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ea8:	f7ff fdce 	bl	8000a48 <__aeabi_d2f>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000eb8 <ret_x0_y0_x1_y1>:

uint16_t * ret_x0_y0_x1_y1(double x, uint16_t * x_array, uint16_t * y_array){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
    //a funcao retorna o conjunto de pontos [(xa,ya),(xb,yb)] que formam uma reta
    //na qual o ponto x possa ser interpolado.\n
    //Os pontos precisam estar alistados em ordem crescente, e as listas de x e y precisam ter o mesmo tamanho."""
	static uint16_t x0y0x1y1array[4] = {0, 0, 0, 0};

	for (int i=0; i<6; i++){
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e036      	b.n	8000f3a <ret_x0_y0_x1_y1+0x82>
		if (x < (double)x_array[i]){
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fa82 	bl	80003e0 <__aeabi_ui2d>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ee4:	f7ff fd68 	bl	80009b8 <__aeabi_dcmplt>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d022      	beq.n	8000f34 <ret_x0_y0_x1_y1+0x7c>
			x0y0x1y1array[0] = x_array[i-1];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <ret_x0_y0_x1_y1+0x94>)
 8000f00:	801a      	strh	r2, [r3, #0]
			x0y0x1y1array[1] = y_array[i-1];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	881a      	ldrh	r2, [r3, #0]
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <ret_x0_y0_x1_y1+0x94>)
 8000f14:	805a      	strh	r2, [r3, #2]
			x0y0x1y1array[2] = x_array[i];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	881a      	ldrh	r2, [r3, #0]
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <ret_x0_y0_x1_y1+0x94>)
 8000f22:	809a      	strh	r2, [r3, #4]
			x0y0x1y1array[3] = y_array[i];
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <ret_x0_y0_x1_y1+0x94>)
 8000f30:	80da      	strh	r2, [r3, #6]
			break;
 8000f32:	e005      	b.n	8000f40 <ret_x0_y0_x1_y1+0x88>
	for (int i=0; i<6; i++){
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	ddc5      	ble.n	8000ecc <ret_x0_y0_x1_y1+0x14>
		}
	}
	return x0y0x1y1array;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <ret_x0_y0_x1_y1+0x94>)
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000310 	.word	0x20000310

08000f50 <set_output>:

uint16_t* set_output(uint16_t * valor_entrada, uint16_t (*sliders_data)[6], uint16_t (*range_x_data)[6], uint8_t * inverter_config){
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b08e      	sub	sp, #56	; 0x38
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
	//"""Método que calcula e atualiza o valor de saída de acordo com o valor da entrada"""

	static uint16_t valor_saida[3] = {0, 0, 0};
	double entrada_invertida[3] = {0, 0, 0};        //alterei pra usar menor memoria
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	for (int i=0; i<3; i++){
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f86:	e11a      	b.n	80011be <set_output+0x26e>
		entrada_invertida[i] = (valor_entrada[i]*1000)/4095;		//converte o valor de entrada de 12bits para um range de 0,0 a 100,0
 8000f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4a8c      	ldr	r2, [pc, #560]	; (80011d0 <set_output+0x280>)
 8000f9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa2:	441a      	add	r2, r3
 8000fa4:	12d2      	asrs	r2, r2, #11
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fa28 	bl	8000400 <__aeabi_i2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fb6:	00c9      	lsls	r1, r1, #3
 8000fb8:	3130      	adds	r1, #48	; 0x30
 8000fba:	4439      	add	r1, r7
 8000fbc:	3920      	subs	r1, #32
 8000fbe:	e9c1 2300 	strd	r2, r3, [r1]

		if (inverter_config[i] == 1){
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d114      	bne.n	8000ff8 <set_output+0xa8>
			entrada_invertida[i] = 1000 - entrada_invertida[i];		// inverte a entrada caso o bit de inversao esteja ligado
 8000fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	3330      	adds	r3, #48	; 0x30
 8000fd4:	443b      	add	r3, r7
 8000fd6:	3b20      	subs	r3, #32
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	497c      	ldr	r1, [pc, #496]	; (80011d4 <set_output+0x284>)
 8000fe2:	f7ff f8bf 	bl	8000164 <__aeabi_dsub>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fec:	00c9      	lsls	r1, r1, #3
 8000fee:	3130      	adds	r1, #48	; 0x30
 8000ff0:	4439      	add	r1, r7
 8000ff2:	3920      	subs	r1, #32
 8000ff4:	e9c1 2300 	strd	r2, r3, [r1]
		}
//		char buffer[12];
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", (uint16_t)entrada_invertida[i]), 100);
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", range_x_data[i][0]), 100);

		if (calibracao){
 8000ff8:	4b77      	ldr	r3, [pc, #476]	; (80011d8 <set_output+0x288>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d03f      	beq.n	8001080 <set_output+0x130>
			sliders_data[i][0] = 0;
 8001000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4413      	add	r3, r2
 8001010:	2200      	movs	r2, #0
 8001012:	801a      	strh	r2, [r3, #0]
			sliders_data[i][1] = 200;
 8001014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	461a      	mov	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4413      	add	r3, r2
 8001024:	22c8      	movs	r2, #200	; 0xc8
 8001026:	805a      	strh	r2, [r3, #2]
			sliders_data[i][2] = 400;
 8001028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	461a      	mov	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800103c:	809a      	strh	r2, [r3, #4]
			sliders_data[i][3] = 600;
 800103e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001052:	80da      	strh	r2, [r3, #6]
			sliders_data[i][4] = 800;
 8001054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	461a      	mov	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4413      	add	r3, r2
 8001064:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001068:	811a      	strh	r2, [r3, #8]
			sliders_data[i][5] = 1000;
 800106a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	461a      	mov	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4413      	add	r3, r2
 800107a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107e:	815a      	strh	r2, [r3, #10]
		}

		if ((uint16_t)entrada_invertida[i] <= range_x_data[i][0]){			// caso entrada esteja abaixa da calibracao minima
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	3330      	adds	r3, #48	; 0x30
 8001086:	443b      	add	r3, r7
 8001088:	3b20      	subs	r3, #32
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fcb9 	bl	8000a08 <__aeabi_d2uiz>
 8001096:	4603      	mov	r3, r0
 8001098:	b299      	uxth	r1, r3
 800109a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4299      	cmp	r1, r3
 80010ae:	d80d      	bhi.n	80010cc <set_output+0x17c>
			valor_saida[i] = sliders_data[i][0];
 80010b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	461a      	mov	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4413      	add	r3, r2
 80010c0:	8819      	ldrh	r1, [r3, #0]
 80010c2:	4a46      	ldr	r2, [pc, #280]	; (80011dc <set_output+0x28c>)
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010ca:	e062      	b.n	8001192 <set_output+0x242>
		}
		else if ((uint16_t)entrada_invertida[i] >= range_x_data[i][5]){			// caso a entrada esteja acima da calibracao maxima
 80010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	3330      	adds	r3, #48	; 0x30
 80010d2:	443b      	add	r3, r7
 80010d4:	3b20      	subs	r3, #32
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fc93 	bl	8000a08 <__aeabi_d2uiz>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b299      	uxth	r1, r3
 80010e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	461a      	mov	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	895b      	ldrh	r3, [r3, #10]
 80010f8:	4299      	cmp	r1, r3
 80010fa:	d30d      	bcc.n	8001118 <set_output+0x1c8>
			valor_saida[i] = sliders_data[i][5];
 80010fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	461a      	mov	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4413      	add	r3, r2
 800110c:	8959      	ldrh	r1, [r3, #10]
 800110e:	4a33      	ldr	r2, [pc, #204]	; (80011dc <set_output+0x28c>)
 8001110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001112:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001116:	e03c      	b.n	8001192 <set_output+0x242>
		}
		else{
			uint16_t * x0y0x1y1_list = ret_x0_y0_x1_y1(entrada_invertida[i], range_x_data[i], sliders_data[i]);
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	3330      	adds	r3, #48	; 0x30
 800111e:	443b      	add	r3, r7
 8001120:	3b20      	subs	r3, #32
 8001122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	461a      	mov	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	189c      	adds	r4, r3, r2
 8001136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	4622      	mov	r2, r4
 8001148:	f7ff feb6 	bl	8000eb8 <ret_x0_y0_x1_y1>
 800114c:	62b8      	str	r0, [r7, #40]	; 0x28
			valor_saida[i] = interpolacao_linear(entrada_invertida[i], x0y0x1y1_list[0], x0y0x1y1_list[1], x0y0x1y1_list[2], x0y0x1y1_list[3]);
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	3330      	adds	r3, #48	; 0x30
 8001154:	443b      	add	r3, r7
 8001156:	3b20      	subs	r3, #32
 8001158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	881c      	ldrh	r4, [r3, #0]
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	3302      	adds	r3, #2
 8001164:	881d      	ldrh	r5, [r3, #0]
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	3304      	adds	r3, #4
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116e:	3206      	adds	r2, #6
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	9201      	str	r2, [sp, #4]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	462b      	mov	r3, r5
 8001178:	4622      	mov	r2, r4
 800117a:	f7ff fe39 	bl	8000df0 <interpolacao_linear>
 800117e:	4603      	mov	r3, r0
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fcb1 	bl	8000ae8 <__aeabi_f2uiz>
 8001186:	4603      	mov	r3, r0
 8001188:	b299      	uxth	r1, r3
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <set_output+0x28c>)
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		valor_saida[i] = (valor_saida[i]*4095)/1000;         //transforma o valor de saida de 0-100 em 12 bits
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <set_output+0x28c>)
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119a:	461a      	mov	r2, r3
 800119c:	4613      	mov	r3, r2
 800119e:	031b      	lsls	r3, r3, #12
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <set_output+0x290>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1192      	asrs	r2, r2, #6
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b299      	uxth	r1, r3
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <set_output+0x28c>)
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<3; i++){
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	3301      	adds	r3, #1
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	f77f aee1 	ble.w	8000f88 <set_output+0x38>
//		char buffer[8];
//	    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", valor_saida[0]), 100);
	}
	return valor_saida;
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <set_output+0x28c>)
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	80080081 	.word	0x80080081
 80011d4:	408f4000 	.word	0x408f4000
 80011d8:	2000030b 	.word	0x2000030b
 80011dc:	20000318 	.word	0x20000318
 80011e0:	10624dd3 	.word	0x10624dd3

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f000 fbc1 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f86b 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f000 f96b 	bl	80014cc <MX_GPIO_Init>
  MX_DMA_Init();
 80011f6:	f000 f94b 	bl	8001490 <MX_DMA_Init>
  MX_ADC1_Init();
 80011fa:	f000 f8c3 	bl	8001384 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80011fe:	f008 f9c3 	bl	8009588 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001202:	f000 f91b 	bl	800143c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 8001206:	2203      	movs	r2, #3
 8001208:	4927      	ldr	r1, [pc, #156]	; (80012a8 <main+0xc4>)
 800120a:	4828      	ldr	r0, [pc, #160]	; (80012ac <main+0xc8>)
 800120c:	f000 fd0e 	bl	8001c2c <HAL_ADC_Start_DMA>
  update_data_from_flash(sliders_data, range_x_data, inverter_config);
 8001210:	4a27      	ldr	r2, [pc, #156]	; (80012b0 <main+0xcc>)
 8001212:	4928      	ldr	r1, [pc, #160]	; (80012b4 <main+0xd0>)
 8001214:	4828      	ldr	r0, [pc, #160]	; (80012b8 <main+0xd4>)
 8001216:	f7ff fcc3 	bl	8000ba0 <update_data_from_flash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (updating){
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <main+0xd8>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <main+0x4e>
		  updating = 0;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <main+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
		  update_data_from_flash(sliders_data, range_x_data, inverter_config);
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <main+0xcc>)
 800122a:	4922      	ldr	r1, [pc, #136]	; (80012b4 <main+0xd0>)
 800122c:	4822      	ldr	r0, [pc, #136]	; (80012b8 <main+0xd4>)
 800122e:	f7ff fcb7 	bl	8000ba0 <update_data_from_flash>
	  }
	  uint16_t * OutputValue = set_output(ADCValue, sliders_data, range_x_data, inverter_config);
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <main+0xcc>)
 8001234:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <main+0xd0>)
 8001236:	4920      	ldr	r1, [pc, #128]	; (80012b8 <main+0xd4>)
 8001238:	481b      	ldr	r0, [pc, #108]	; (80012a8 <main+0xc4>)
 800123a:	f7ff fe89 	bl	8000f50 <set_output>
 800123e:	6078      	str	r0, [r7, #4]
	  joystickhid.rx_8lsb = (OutputValue[0]);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <main+0xdc>)
 8001248:	701a      	strb	r2, [r3, #0]
	  joystickhid.ry_4lsb_rx_4msb = ((OutputValue[1] & 0xf) << 4 | OutputValue[0] >> 8);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3302      	adds	r3, #2
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	b25a      	sxtb	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	b29b      	uxth	r3, r3
 800125c:	b25b      	sxtb	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b25b      	sxtb	r3, r3
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <main+0xdc>)
 8001266:	705a      	strb	r2, [r3, #1]
	  joystickhid.ry_8msb = OutputValue[1] >> 4;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3302      	adds	r3, #2
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	b29b      	uxth	r3, r3
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <main+0xdc>)
 8001276:	709a      	strb	r2, [r3, #2]
	  joystickhid.rz_8lsb = OutputValue[2];
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3304      	adds	r3, #4
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <main+0xdc>)
 8001282:	70da      	strb	r2, [r3, #3]
	  joystickhid.rz_4msb = OutputValue[2] >> 8;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3304      	adds	r3, #4
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	0a1b      	lsrs	r3, r3, #8
 800128c:	b29b      	uxth	r3, r3
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <main+0xdc>)
 8001292:	711a      	strb	r2, [r3, #4]
//  	  uint8_t Test[] = "Fim\r\n"; //Data to send
//  	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 8001294:	2208      	movs	r2, #8
 8001296:	490a      	ldr	r1, [pc, #40]	; (80012c0 <main+0xdc>)
 8001298:	480a      	ldr	r0, [pc, #40]	; (80012c4 <main+0xe0>)
 800129a:	f007 f813 	bl	80082c4 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fbc8 	bl	8001a34 <HAL_Delay>
  {
 80012a4:	e7b9      	b.n	800121a <main+0x36>
 80012a6:	bf00      	nop
 80012a8:	20000304 	.word	0x20000304
 80012ac:	20000244 	.word	0x20000244
 80012b0:	2000030c 	.word	0x2000030c
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000024 	.word	0x20000024
 80012bc:	2000030a 	.word	0x2000030a
 80012c0:	200002fc 	.word	0x200002fc
 80012c4:	2000034c 	.word	0x2000034c

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d2:	2228      	movs	r2, #40	; 0x28
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f008 fe76 	bl	8009fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001314:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fae8 	bl	80048f4 <HAL_RCC_OscConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800132a:	f000 f91b 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	230f      	movs	r3, #15
 8001330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2101      	movs	r1, #1
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fd54 	bl	8004df8 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001356:	f000 f905 	bl	8001564 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800135a:	2312      	movs	r3, #18
 800135c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800135e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001362:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001368:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f003 fedb 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001378:	f000 f8f4 	bl	8001564 <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3750      	adds	r7, #80	; 0x50
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <MX_ADC1_Init+0xb0>)
 8001396:	4a28      	ldr	r2, [pc, #160]	; (8001438 <MX_ADC1_Init+0xb4>)
 8001398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <MX_ADC1_Init+0xb0>)
 800139c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013be:	2203      	movs	r2, #3
 80013c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013c4:	f000 fb5a 	bl	8001a7c <HAL_ADC_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80013ce:	f000 f8c9 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80013da:	2306      	movs	r3, #6
 80013dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <MX_ADC1_Init+0xb0>)
 80013e4:	f000 fd1c 	bl	8001e20 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 f8b9 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_ADC1_Init+0xb0>)
 8001400:	f000 fd0e 	bl	8001e20 <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800140a:	f000 f8ab 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800140e:	2302      	movs	r3, #2
 8001410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001412:	2303      	movs	r3, #3
 8001414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_ADC1_Init+0xb0>)
 800141c:	f000 fd00 	bl	8001e20 <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001426:	f000 f89d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000244 	.word	0x20000244
 8001438:	40012400 	.word	0x40012400

0800143c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_USART1_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001474:	f003 ff0e 	bl	8005294 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f000 f871 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200002b8 	.word	0x200002b8
 800148c:	40013800 	.word	0x40013800

08001490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_DMA_Init+0x38>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <MX_DMA_Init+0x38>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6153      	str	r3, [r2, #20]
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_DMA_Init+0x38>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	200b      	movs	r0, #11
 80014b4:	f000 ff85 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b8:	200b      	movs	r0, #11
 80014ba:	f000 ff9e 	bl	80023fa <HAL_NVIC_EnableIRQ>

}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_GPIO_Init+0x90>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <MX_GPIO_Init+0x90>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_GPIO_Init+0x90>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_GPIO_Init+0x90>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <MX_GPIO_Init+0x90>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_GPIO_Init+0x90>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_GPIO_Init+0x90>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <MX_GPIO_Init+0x90>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_GPIO_Init+0x90>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <MX_GPIO_Init+0x94>)
 8001530:	f001 fd1c 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2302      	movs	r3, #2
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4619      	mov	r1, r3
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_GPIO_Init+0x94>)
 800154e:	f001 fb89 	bl	8002c64 <HAL_GPIO_Init>

}
 8001552:	bf00      	nop
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40011000 	.word	0x40011000

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_MspInit+0x40>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_MspInit+0x40>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6193      	str	r3, [r2, #24]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_MspInit+0x40>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_MspInit+0x40>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_MspInit+0x40>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_MspInit+0x40>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a29      	ldr	r2, [pc, #164]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d14a      	bne.n	800166a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_ADC_MspInit+0xc4>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a27      	ldr	r2, [pc, #156]	; (8001678 <HAL_ADC_MspInit+0xc4>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_ADC_MspInit+0xc4>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_ADC_MspInit+0xc4>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a21      	ldr	r2, [pc, #132]	; (8001678 <HAL_ADC_MspInit+0xc4>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_ADC_MspInit+0xc4>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001604:	2307      	movs	r3, #7
 8001606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001608:	2303      	movs	r3, #3
 800160a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	481a      	ldr	r0, [pc, #104]	; (800167c <HAL_ADC_MspInit+0xc8>)
 8001614:	f001 fb26 	bl	8002c64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 800161a:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <HAL_ADC_MspInit+0xd0>)
 800161c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 8001632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001636:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 800163a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 8001642:	2220      	movs	r2, #32
 8001644:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 8001648:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800164c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 8001650:	f000 feee 	bl	8002430 <HAL_DMA_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800165a:	f7ff ff83 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 8001662:	621a      	str	r2, [r3, #32]
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_ADC_MspInit+0xcc>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40012400 	.word	0x40012400
 8001678:	40021000 	.word	0x40021000
 800167c:	40010800 	.word	0x40010800
 8001680:	20000274 	.word	0x20000274
 8001684:	40020008 	.word	0x40020008

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <HAL_UART_MspInit+0x8c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d131      	bne.n	800170c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_UART_MspInit+0x90>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_UART_MspInit+0x90>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_UART_MspInit+0x90>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_UART_MspInit+0x90>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <HAL_UART_MspInit+0x90>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_UART_MspInit+0x90>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <HAL_UART_MspInit+0x94>)
 80016ee:	f001 fab9 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_UART_MspInit+0x94>)
 8001708:	f001 faac 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40013800 	.word	0x40013800
 8001718:	40021000 	.word	0x40021000
 800171c:	40010800 	.word	0x40010800

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001766:	f000 f949 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <DMA1_Channel1_IRQHandler+0x10>)
 8001776:	f000 ff15 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000274 	.word	0x20000274

08001784 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800178a:	f001 fd38 	bl	80031fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000b14 	.word	0x20000b14

08001798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
	return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <_kill>:

int _kill(int pid, int sig)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b0:	f008 fbd2 	bl	8009f58 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2216      	movs	r2, #22
 80017b8:	601a      	str	r2, [r3, #0]
	return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_exit>:

void _exit (int status)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017ce:	f04f 31ff 	mov.w	r1, #4294967295
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffe7 	bl	80017a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d8:	e7fe      	b.n	80017d8 <_exit+0x12>

080017da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e00a      	b.n	8001802 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ec:	f3af 8000 	nop.w
 80017f0:	4601      	mov	r1, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	b2ca      	uxtb	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbf0      	blt.n	80017ec <_read+0x12>
	}

return len;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	60ba      	str	r2, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf1      	blt.n	8001826 <_write+0x12>
	}
	return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_close>:

int _close(int file)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <_isatty>:

int _isatty(int file)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f008 fb3c 	bl	8009f58 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20005000 	.word	0x20005000
 800190c:	00000400 	.word	0x00000400
 8001910:	20000320 	.word	0x20000320
 8001914:	20000e68 	.word	0x20000e68

08001918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	; (800195c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	; (8001968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800194a:	f7ff ffe5 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f008 fb09 	bl	8009f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001952:	f7ff fc47 	bl	80011e4 <main>
  bx lr
 8001956:	4770      	bx	lr
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001960:	0800b484 	.word	0x0800b484
  ldr r2, =_sbss
 8001964:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001968:	20000e68 	.word	0x20000e68

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_Init+0x28>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_Init+0x28>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 fd13 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fdf0 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40022000 	.word	0x40022000

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fd2b 	bl	8002416 <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 fcf3 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000048 	.word	0x20000048
 80019f4:	20000050 	.word	0x20000050
 80019f8:	2000004c 	.word	0x2000004c

080019fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_IncTick+0x1c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x20>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_IncTick+0x20>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	20000050 	.word	0x20000050
 8001a1c:	20000324 	.word	0x20000324

08001a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_GetTick+0x10>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000324 	.word	0x20000324

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffe0 	bl	8001a20 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000050 	.word	0x20000050

08001a7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0be      	b.n	8001c1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fd7a 	bl	80015b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 faff 	bl	80020c4 <ADC_ConversionStop_Disable>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 8099 	bne.w	8001c0a <HAL_ADC_Init+0x18e>
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 8095 	bne.w	8001c0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ae8:	f023 0302 	bic.w	r3, r3, #2
 8001aec:	f043 0202 	orr.w	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001afc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7b1b      	ldrb	r3, [r3, #12]
 8001b02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b14:	d003      	beq.n	8001b1e <HAL_ADC_Init+0xa2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d102      	bne.n	8001b24 <HAL_ADC_Init+0xa8>
 8001b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b22:	e000      	b.n	8001b26 <HAL_ADC_Init+0xaa>
 8001b24:	2300      	movs	r3, #0
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7d1b      	ldrb	r3, [r3, #20]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d119      	bne.n	8001b68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7b1b      	ldrb	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	035a      	lsls	r2, r3, #13
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	e00b      	b.n	8001b68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	f043 0220 	orr.w	r2, r3, #32
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <HAL_ADC_Init+0x1a8>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b98:	d003      	beq.n	8001ba2 <HAL_ADC_Init+0x126>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d104      	bne.n	8001bac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	051b      	lsls	r3, r3, #20
 8001baa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_ADC_Init+0x1ac>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d10b      	bne.n	8001be8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	f023 0303 	bic.w	r3, r3, #3
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001be6:	e018      	b.n	8001c1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	f023 0312 	bic.w	r3, r3, #18
 8001bf0:	f043 0210 	orr.w	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	f043 0201 	orr.w	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c08:	e007      	b.n	8001c1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	f043 0210 	orr.w	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	ffe1f7fd 	.word	0xffe1f7fd
 8001c28:	ff1f0efe 	.word	0xff1f0efe

08001c2c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a64      	ldr	r2, [pc, #400]	; (8001dd4 <HAL_ADC_Start_DMA+0x1a8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_ADC_Start_DMA+0x24>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a63      	ldr	r2, [pc, #396]	; (8001dd8 <HAL_ADC_Start_DMA+0x1ac>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_Start_DMA+0x32>
 8001c50:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <HAL_ADC_Start_DMA+0x1a8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 80b3 	bne.w	8001dc4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_Start_DMA+0x40>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e0ae      	b.n	8001dca <HAL_ADC_Start_DMA+0x19e>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f9cb 	bl	8002010 <ADC_Enable>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f040 809a 	bne.w	8001dba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_ADC_Start_DMA+0x1ac>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_Start_DMA+0x84>
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_ADC_Start_DMA+0x1a8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d115      	bne.n	8001cdc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d026      	beq.n	8001d18 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cda:	e01d      	b.n	8001d18 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a39      	ldr	r2, [pc, #228]	; (8001dd4 <HAL_ADC_Start_DMA+0x1a8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADC_Start_DMA+0xd0>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a38      	ldr	r2, [pc, #224]	; (8001dd8 <HAL_ADC_Start_DMA+0x1ac>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d10d      	bne.n	8001d18 <HAL_ADC_Start_DMA+0xec>
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_ADC_Start_DMA+0x1a8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	f023 0206 	bic.w	r2, r3, #6
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d30:	e002      	b.n	8001d38 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <HAL_ADC_Start_DMA+0x1b0>)
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <HAL_ADC_Start_DMA+0x1b4>)
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <HAL_ADC_Start_DMA+0x1b8>)
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0202 	mvn.w	r2, #2
 8001d60:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d70:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a18      	ldr	r0, [r3, #32]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	334c      	adds	r3, #76	; 0x4c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f000 fbaf 	bl	80024e4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d90:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d94:	d108      	bne.n	8001da8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001da4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001da6:	e00f      	b.n	8001dc8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001db6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001db8:	e006      	b.n	8001dc8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001dc2:	e001      	b.n	8001dc8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40012400 	.word	0x40012400
 8001dd8:	40012800 	.word	0x40012800
 8001ddc:	08002147 	.word	0x08002147
 8001de0:	080021c3 	.word	0x080021c3
 8001de4:	080021df 	.word	0x080021df

08001de8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x20>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0dc      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1da>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d81c      	bhi.n	8001e8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b05      	subs	r3, #5
 8001e62:	221f      	movs	r2, #31
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4019      	ands	r1, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b05      	subs	r3, #5
 8001e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34
 8001e88:	e03c      	b.n	8001f04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d81c      	bhi.n	8001ecc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b23      	subs	r3, #35	; 0x23
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4019      	ands	r1, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b23      	subs	r3, #35	; 0x23
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eca:	e01b      	b.n	8001f04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b41      	subs	r3, #65	; 0x41
 8001ede:	221f      	movs	r2, #31
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4019      	ands	r1, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b41      	subs	r3, #65	; 0x41
 8001ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d91c      	bls.n	8001f46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68d9      	ldr	r1, [r3, #12]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b1e      	subs	r3, #30
 8001f1e:	2207      	movs	r2, #7
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4019      	ands	r1, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6898      	ldr	r0, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	e019      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6919      	ldr	r1, [r3, #16]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	2207      	movs	r2, #7
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4019      	ands	r1, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6898      	ldr	r0, [r3, #8]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d003      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f86:	2b11      	cmp	r3, #17
 8001f88:	d132      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d125      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d126      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_ADC_ConfigChannel+0x1ec>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9a      	lsrs	r2, r3, #18
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fde:	e007      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40012400 	.word	0x40012400
 8002008:	20000048 	.word	0x20000048
 800200c:	431bde83 	.word	0x431bde83

08002010 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d040      	beq.n	80020b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <ADC_Enable+0xac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <ADC_Enable+0xb0>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9b      	lsrs	r3, r3, #18
 800204a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800204c:	e002      	b.n	8002054 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3b01      	subs	r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f9      	bne.n	800204e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800205a:	f7ff fce1 	bl	8001a20 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002060:	e01f      	b.n	80020a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002062:	f7ff fcdd 	bl	8001a20 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d918      	bls.n	80020a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d011      	beq.n	80020a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e007      	b.n	80020b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d1d8      	bne.n	8002062 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000048 	.word	0x20000048
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d12e      	bne.n	800213c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ee:	f7ff fc97 	bl	8001a20 <HAL_GetTick>
 80020f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f4:	e01b      	b.n	800212e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020f6:	f7ff fc93 	bl	8001a20 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d914      	bls.n	800212e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10d      	bne.n	800212e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e007      	b.n	800213e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	d0dc      	beq.n	80020f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800215c:	2b00      	cmp	r3, #0
 800215e:	d127      	bne.n	80021b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002176:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800217a:	d115      	bne.n	80021a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002180:	2b00      	cmp	r3, #0
 8002182:	d111      	bne.n	80021a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fe1d 	bl	8001de8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021ae:	e004      	b.n	80021ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff fe12 	bl	8001dfa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f043 0204 	orr.w	r2, r3, #4
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fe01 	bl	8001e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4906      	ldr	r1, [pc, #24]	; (80022ac <__NVIC_EnableIRQ+0x34>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff90 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff2d 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff42 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff90 	bl	8002304 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5f 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff35 	bl	8002278 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffa2 	bl	8002368 <SysTick_Config>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e043      	b.n	80024ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_DMA_Init+0xa8>)
 800244e:	4413      	add	r3, r2
 8002450:	4a22      	ldr	r2, [pc, #136]	; (80024dc <HAL_DMA_Init+0xac>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	009a      	lsls	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <HAL_DMA_Init+0xb0>)
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800247a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800247e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	bffdfff8 	.word	0xbffdfff8
 80024dc:	cccccccd 	.word	0xcccccccd
 80024e0:	40020000 	.word	0x40020000

080024e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_DMA_Start_IT+0x20>
 8002500:	2302      	movs	r3, #2
 8002502:	e04a      	b.n	800259a <HAL_DMA_Start_IT+0xb6>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002512:	2b01      	cmp	r3, #1
 8002514:	d13a      	bne.n	800258c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f938 	bl	80027b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 020e 	orr.w	r2, r2, #14
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e00f      	b.n	800257a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0204 	bic.w	r2, r2, #4
 8002568:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 020a 	orr.w	r2, r2, #10
 8002578:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e005      	b.n	8002598 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002598:	7dfb      	ldrb	r3, [r7, #23]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2204      	movs	r2, #4
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d04f      	beq.n	800266c <HAL_DMA_IRQHandler+0xc8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d04a      	beq.n	800266c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a66      	ldr	r2, [pc, #408]	; (8002794 <HAL_DMA_IRQHandler+0x1f0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d029      	beq.n	8002652 <HAL_DMA_IRQHandler+0xae>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a65      	ldr	r2, [pc, #404]	; (8002798 <HAL_DMA_IRQHandler+0x1f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <HAL_DMA_IRQHandler+0xaa>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a63      	ldr	r2, [pc, #396]	; (800279c <HAL_DMA_IRQHandler+0x1f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_IRQHandler+0xa4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a62      	ldr	r2, [pc, #392]	; (80027a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0x9e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a60      	ldr	r2, [pc, #384]	; (80027a4 <HAL_DMA_IRQHandler+0x200>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00a      	beq.n	800263c <HAL_DMA_IRQHandler+0x98>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5f      	ldr	r2, [pc, #380]	; (80027a8 <HAL_DMA_IRQHandler+0x204>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d102      	bne.n	8002636 <HAL_DMA_IRQHandler+0x92>
 8002630:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002634:	e00e      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002636:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800263a:	e00b      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 800263c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002640:	e008      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002646:	e005      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264c:	e002      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	e000      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002652:	2304      	movs	r3, #4
 8002654:	4a55      	ldr	r2, [pc, #340]	; (80027ac <HAL_DMA_IRQHandler+0x208>)
 8002656:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8094 	beq.w	800278a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800266a:	e08e      	b.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	2202      	movs	r2, #2
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d056      	beq.n	800272a <HAL_DMA_IRQHandler+0x186>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d051      	beq.n	800272a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020a 	bic.w	r2, r2, #10
 80026a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a38      	ldr	r2, [pc, #224]	; (8002794 <HAL_DMA_IRQHandler+0x1f0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d029      	beq.n	800270a <HAL_DMA_IRQHandler+0x166>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a37      	ldr	r2, [pc, #220]	; (8002798 <HAL_DMA_IRQHandler+0x1f4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_DMA_IRQHandler+0x162>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a35      	ldr	r2, [pc, #212]	; (800279c <HAL_DMA_IRQHandler+0x1f8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01a      	beq.n	8002700 <HAL_DMA_IRQHandler+0x15c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_DMA_IRQHandler+0x1fc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d012      	beq.n	80026fa <HAL_DMA_IRQHandler+0x156>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <HAL_DMA_IRQHandler+0x200>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00a      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x150>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a31      	ldr	r2, [pc, #196]	; (80027a8 <HAL_DMA_IRQHandler+0x204>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d102      	bne.n	80026ee <HAL_DMA_IRQHandler+0x14a>
 80026e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026ec:	e00e      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	e00b      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f8:	e008      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fe:	e005      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 8002700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002704:	e002      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 8002706:	2320      	movs	r3, #32
 8002708:	e000      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 800270a:	2302      	movs	r3, #2
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_DMA_IRQHandler+0x208>)
 800270e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d034      	beq.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002728:	e02f      	b.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2208      	movs	r2, #8
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d023      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 020e 	bic.w	r2, r2, #14
 8002752:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
    }
  }
  return;
 800278a:	bf00      	nop
 800278c:	bf00      	nop
}
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40020008 	.word	0x40020008
 8002798:	4002001c 	.word	0x4002001c
 800279c:	40020030 	.word	0x40020030
 80027a0:	40020044 	.word	0x40020044
 80027a4:	40020058 	.word	0x40020058
 80027a8:	4002006c 	.word	0x4002006c
 80027ac:	40020000 	.word	0x40020000

080027b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d108      	bne.n	80027f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027ee:	e007      	b.n	8002800 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
	...

0800280c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_FLASH_Program+0xd8>)
 8002828:	7e1b      	ldrb	r3, [r3, #24]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_FLASH_Program+0x26>
 800282e:	2302      	movs	r3, #2
 8002830:	e054      	b.n	80028dc <HAL_FLASH_Program+0xd0>
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_FLASH_Program+0xd8>)
 8002834:	2201      	movs	r2, #1
 8002836:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002838:	f24c 3050 	movw	r0, #50000	; 0xc350
 800283c:	f000 f8d4 	bl	80029e8 <FLASH_WaitForLastOperation>
 8002840:	4603      	mov	r3, r0
 8002842:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d144      	bne.n	80028d4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002850:	2301      	movs	r3, #1
 8002852:	757b      	strb	r3, [r7, #21]
 8002854:	e007      	b.n	8002866 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d102      	bne.n	8002862 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800285c:	2302      	movs	r3, #2
 800285e:	757b      	strb	r3, [r7, #21]
 8002860:	e001      	b.n	8002866 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002862:	2304      	movs	r3, #4
 8002864:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002866:	2300      	movs	r3, #0
 8002868:	75bb      	strb	r3, [r7, #22]
 800286a:	e02d      	b.n	80028c8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800286c:	7dbb      	ldrb	r3, [r7, #22]
 800286e:	005a      	lsls	r2, r3, #1
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	eb02 0c03 	add.w	ip, r2, r3
 8002876:	7dbb      	ldrb	r3, [r7, #22]
 8002878:	0119      	lsls	r1, r3, #4
 800287a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800287e:	f1c1 0620 	rsb	r6, r1, #32
 8002882:	f1a1 0020 	sub.w	r0, r1, #32
 8002886:	fa22 f401 	lsr.w	r4, r2, r1
 800288a:	fa03 f606 	lsl.w	r6, r3, r6
 800288e:	4334      	orrs	r4, r6
 8002890:	fa23 f000 	lsr.w	r0, r3, r0
 8002894:	4304      	orrs	r4, r0
 8002896:	fa23 f501 	lsr.w	r5, r3, r1
 800289a:	b2a3      	uxth	r3, r4
 800289c:	4619      	mov	r1, r3
 800289e:	4660      	mov	r0, ip
 80028a0:	f000 f886 	bl	80029b0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028a8:	f000 f89e 	bl	80029e8 <FLASH_WaitForLastOperation>
 80028ac:	4603      	mov	r3, r0
 80028ae:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_FLASH_Program+0xdc>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <HAL_FLASH_Program+0xdc>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80028c2:	7dbb      	ldrb	r3, [r7, #22]
 80028c4:	3301      	adds	r3, #1
 80028c6:	75bb      	strb	r3, [r7, #22]
 80028c8:	7dba      	ldrb	r2, [r7, #22]
 80028ca:	7d7b      	ldrb	r3, [r7, #21]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d3cd      	bcc.n	800286c <HAL_FLASH_Program+0x60>
 80028d0:	e000      	b.n	80028d4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80028d2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_FLASH_Program+0xd8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	761a      	strb	r2, [r3, #24]

  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e4:	20000328 	.word	0x20000328
 80028e8:	40022000 	.word	0x40022000

080028ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_FLASH_Unlock+0x40>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_FLASH_Unlock+0x40>)
 8002904:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <HAL_FLASH_Unlock+0x44>)
 8002906:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_FLASH_Unlock+0x40>)
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_FLASH_Unlock+0x48>)
 800290c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_FLASH_Unlock+0x40>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800291e:	79fb      	ldrb	r3, [r7, #7]
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40022000 	.word	0x40022000
 8002930:	45670123 	.word	0x45670123
 8002934:	cdef89ab 	.word	0xcdef89ab

08002938 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_FLASH_Lock+0x1c>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_FLASH_Lock+0x1c>)
 8002942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002946:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_FLASH_OB_Unlock+0x2c>)
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_FLASH_OB_Unlock+0x2c>)
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_FLASH_OB_Unlock+0x30>)
 800296c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_FLASH_OB_Unlock+0x2c>)
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <HAL_FLASH_OB_Unlock+0x34>)
 8002972:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40022000 	.word	0x40022000
 8002988:	45670123 	.word	0x45670123
 800298c:	cdef89ab 	.word	0xcdef89ab

08002990 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_FLASH_OB_Lock+0x1c>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_FLASH_OB_Lock+0x1c>)
 800299a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800299e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40022000 	.word	0x40022000

080029b0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <FLASH_Program_HalfWord+0x30>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <FLASH_Program_HalfWord+0x34>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <FLASH_Program_HalfWord+0x34>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	887a      	ldrh	r2, [r7, #2]
 80029d2:	801a      	strh	r2, [r3, #0]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000328 	.word	0x20000328
 80029e4:	40022000 	.word	0x40022000

080029e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff f816 	bl	8001a20 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80029f6:	e010      	b.n	8002a1a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d00c      	beq.n	8002a1a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <FLASH_WaitForLastOperation+0x2e>
 8002a06:	f7ff f80b 	bl	8001a20 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d201      	bcs.n	8002a1a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e025      	b.n	8002a66 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <FLASH_WaitForLastOperation+0x88>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e8      	bne.n	80029f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <FLASH_WaitForLastOperation+0x88>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <FLASH_WaitForLastOperation+0x88>)
 8002a34:	2220      	movs	r2, #32
 8002a36:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <FLASH_WaitForLastOperation+0x88>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <FLASH_WaitForLastOperation+0x88>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <FLASH_WaitForLastOperation+0x88>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002a5c:	f000 f80a 	bl	8002a74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000

08002a74 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <FLASH_SetErrorCode+0x98>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a8a:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <FLASH_SetErrorCode+0x9c>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <FLASH_SetErrorCode+0x9c>)
 8002a94:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f043 0310 	orr.w	r3, r3, #16
 8002a9c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <FLASH_SetErrorCode+0x98>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <FLASH_SetErrorCode+0x9c>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <FLASH_SetErrorCode+0x9c>)
 8002ab4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <FLASH_SetErrorCode+0x98>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <FLASH_SetErrorCode+0x9c>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <FLASH_SetErrorCode+0x9c>)
 8002ad4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <FLASH_SetErrorCode+0x98>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <FLASH_SetErrorCode+0x98>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f240 1201 	movw	r2, #257	; 0x101
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d106      	bne.n	8002afa <FLASH_SetErrorCode+0x86>
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <FLASH_SetErrorCode+0x98>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <FLASH_SetErrorCode+0x98>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	61d3      	str	r3, [r2, #28]
}  
 8002af8:	e002      	b.n	8002b00 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002afa:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <FLASH_SetErrorCode+0x98>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	60d3      	str	r3, [r2, #12]
}  
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	20000328 	.word	0x20000328

08002b14 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b26:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_FLASHEx_Erase+0xd0>)
 8002b28:	7e1b      	ldrb	r3, [r3, #24]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_FLASHEx_Erase+0x1e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e053      	b.n	8002bda <HAL_FLASHEx_Erase+0xc6>
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_FLASHEx_Erase+0xd0>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d116      	bne.n	8002b6e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b44:	f7ff ff50 	bl	80029e8 <FLASH_WaitForLastOperation>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d141      	bne.n	8002bd2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f000 f84c 	bl	8002bec <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b58:	f7ff ff46 	bl	80029e8 <FLASH_WaitForLastOperation>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_FLASHEx_Erase+0xd4>)
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <HAL_FLASHEx_Erase+0xd4>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6113      	str	r3, [r2, #16]
 8002b6c:	e031      	b.n	8002bd2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b72:	f7ff ff39 	bl	80029e8 <FLASH_WaitForLastOperation>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d12a      	bne.n	8002bd2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b82:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	e019      	b.n	8002bc0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002b8c:	68b8      	ldr	r0, [r7, #8]
 8002b8e:	f000 f849 	bl	8002c24 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b96:	f7ff ff27 	bl	80029e8 <FLASH_WaitForLastOperation>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_FLASHEx_Erase+0xd4>)
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <HAL_FLASHEx_Erase+0xd4>)
 8002ba4:	f023 0302 	bic.w	r3, r3, #2
 8002ba8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	601a      	str	r2, [r3, #0]
            break;
 8002bb6:	e00c      	b.n	8002bd2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bbe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	029a      	lsls	r2, r3, #10
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d3dc      	bcc.n	8002b8c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <HAL_FLASHEx_Erase+0xd0>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	761a      	strb	r2, [r3, #24]

  return status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000328 	.word	0x20000328
 8002be8:	40022000 	.word	0x40022000

08002bec <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <FLASH_MassErase+0x30>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <FLASH_MassErase+0x34>)
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <FLASH_MassErase+0x34>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <FLASH_MassErase+0x34>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <FLASH_MassErase+0x34>)
 8002c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c10:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000328 	.word	0x20000328
 8002c20:	40022000 	.word	0x40022000

08002c24 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <FLASH_PageErase+0x38>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <FLASH_PageErase+0x3c>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <FLASH_PageErase+0x3c>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c3e:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <FLASH_PageErase+0x3c>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <FLASH_PageErase+0x3c>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <FLASH_PageErase+0x3c>)
 8002c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c4e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000328 	.word	0x20000328
 8002c60:	40022000 	.word	0x40022000

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b08b      	sub	sp, #44	; 0x2c
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e169      	b.n	8002f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8158 	bne.w	8002f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a9a      	ldr	r2, [pc, #616]	; (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d05e      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002ca0:	4a98      	ldr	r2, [pc, #608]	; (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d875      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a98      	ldr	r2, [pc, #608]	; (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d058      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cac:	4a96      	ldr	r2, [pc, #600]	; (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d86f      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a96      	ldr	r2, [pc, #600]	; (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d052      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cb8:	4a94      	ldr	r2, [pc, #592]	; (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d869      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a94      	ldr	r2, [pc, #592]	; (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04c      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cc4:	4a92      	ldr	r2, [pc, #584]	; (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d863      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cca:	4a92      	ldr	r2, [pc, #584]	; (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d046      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cd0:	4a90      	ldr	r2, [pc, #576]	; (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d85d      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cd6:	2b12      	cmp	r3, #18
 8002cd8:	d82a      	bhi.n	8002d30 <HAL_GPIO_Init+0xcc>
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d859      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <HAL_GPIO_Init+0x80>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002d4b 	.word	0x08002d4b
 8002cf0:	08002d8d 	.word	0x08002d8d
 8002cf4:	08002d93 	.word	0x08002d93
 8002cf8:	08002d93 	.word	0x08002d93
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002d93 	.word	0x08002d93
 8002d04:	08002d93 	.word	0x08002d93
 8002d08:	08002d93 	.word	0x08002d93
 8002d0c:	08002d93 	.word	0x08002d93
 8002d10:	08002d93 	.word	0x08002d93
 8002d14:	08002d93 	.word	0x08002d93
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d93 	.word	0x08002d93
 8002d20:	08002d93 	.word	0x08002d93
 8002d24:	08002d93 	.word	0x08002d93
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	4a79      	ldr	r2, [pc, #484]	; (8002f18 <HAL_GPIO_Init+0x2b4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d36:	e02c      	b.n	8002d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e029      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e024      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e01f      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e01a      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d66:	2304      	movs	r3, #4
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e013      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	611a      	str	r2, [r3, #16]
          break;
 8002d7e:	e009      	b.n	8002d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d80:	2308      	movs	r3, #8
 8002d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	615a      	str	r2, [r3, #20]
          break;
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          break;
 8002d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d801      	bhi.n	8002d9e <HAL_GPIO_Init+0x13a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_Init+0x13e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d802      	bhi.n	8002db0 <HAL_GPIO_Init+0x14c>
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	e002      	b.n	8002db6 <HAL_GPIO_Init+0x152>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	3b08      	subs	r3, #8
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80b1 	beq.w	8002f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002de4:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a4c      	ldr	r2, [pc, #304]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a40      	ldr	r2, [pc, #256]	; (8002f24 <HAL_GPIO_Init+0x2c0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1ec>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_GPIO_Init+0x2c4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1e8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <HAL_GPIO_Init+0x2c8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <HAL_GPIO_Init+0x2cc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e0>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e004      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e50:	2300      	movs	r3, #0
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	f002 0203 	and.w	r2, r2, #3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4093      	lsls	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e62:	492f      	ldr	r1, [pc, #188]	; (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	492c      	ldr	r1, [pc, #176]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4928      	ldr	r1, [pc, #160]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4922      	ldr	r1, [pc, #136]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	491e      	ldr	r1, [pc, #120]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4918      	ldr	r1, [pc, #96]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4914      	ldr	r1, [pc, #80]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
 8002f00:	e021      	b.n	8002f46 <HAL_GPIO_Init+0x2e2>
 8002f02:	bf00      	nop
 8002f04:	10320000 	.word	0x10320000
 8002f08:	10310000 	.word	0x10310000
 8002f0c:	10220000 	.word	0x10220000
 8002f10:	10210000 	.word	0x10210000
 8002f14:	10120000 	.word	0x10120000
 8002f18:	10110000 	.word	0x10110000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	40010c00 	.word	0x40010c00
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4909      	ldr	r1, [pc, #36]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f47f ae8e 	bne.w	8002c78 <HAL_GPIO_Init+0x14>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	372c      	adds	r7, #44	; 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f7c:	787b      	ldrb	r3, [r7, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f88:	e003      	b.n	8002f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	041a      	lsls	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9e:	b08b      	sub	sp, #44	; 0x2c
 8002fa0:	af06      	add	r7, sp, #24
 8002fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0fd      	b.n	80031aa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f006 fd36 	bl	8009a34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f002 fa5f 	bl	8005498 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	687e      	ldr	r6, [r7, #4]
 8002fe2:	466d      	mov	r5, sp
 8002fe4:	f106 0410 	add.w	r4, r6, #16
 8002fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	1d33      	adds	r3, r6, #4
 8002ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff4:	6838      	ldr	r0, [r7, #0]
 8002ff6:	f002 fa29 	bl	800544c <USB_CoreInit>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0ce      	b.n	80031aa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f002 fa5a 	bl	80054cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e04c      	b.n	80030b8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	440b      	add	r3, r1
 800302e:	3301      	adds	r3, #1
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	440b      	add	r3, r1
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	b298      	uxth	r0, r3
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	3336      	adds	r3, #54	; 0x36
 800305c:	4602      	mov	r2, r0
 800305e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	3303      	adds	r3, #3
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	3338      	adds	r3, #56	; 0x38
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	333c      	adds	r3, #60	; 0x3c
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	3340      	adds	r3, #64	; 0x40
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	3301      	adds	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3ad      	bcc.n	800301e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e044      	b.n	8003152 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	3301      	adds	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d3b5      	bcc.n	80030c8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	687e      	ldr	r6, [r7, #4]
 8003164:	466d      	mov	r5, sp
 8003166:	f106 0410 	add.w	r4, r6, #16
 800316a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800316c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	602b      	str	r3, [r5, #0]
 8003172:	1d33      	adds	r3, r6, #4
 8003174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003176:	6838      	ldr	r0, [r7, #0]
 8003178:	f002 f9b4 	bl	80054e4 <USB_DevInit>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e00d      	b.n	80031aa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f004 fe66 	bl	8007e74 <USB_DevDisconnect>

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_PCD_Start+0x16>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e016      	b.n	80031f6 <HAL_PCD_Start+0x44>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 f949 	bl	800546c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80031da:	2101      	movs	r1, #1
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f006 fe80 	bl	8009ee2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 fe3a 	bl	8007e60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b088      	sub	sp, #32
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f004 fe3c 	bl	8007e88 <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321a:	d102      	bne.n	8003222 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fb48 	bl	80038b2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f004 fe2e 	bl	8007e88 <USB_ReadInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d112      	bne.n	800325e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324a:	b292      	uxth	r2, r2
 800324c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f006 fc6a 	bl	8009b2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003256:	2100      	movs	r1, #0
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f923 	bl	80034a4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 fe10 	bl	8007e88 <USB_ReadInterrupts>
 8003268:	4603      	mov	r3, r0
 800326a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003272:	d10b      	bne.n	800328c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003286:	b292      	uxth	r2, r2
 8003288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f004 fdf9 	bl	8007e88 <USB_ReadInterrupts>
 8003296:	4603      	mov	r3, r0
 8003298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a0:	d10b      	bne.n	80032ba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b4:	b292      	uxth	r2, r2
 80032b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fde2 	bl	8007e88 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	d126      	bne.n	800331e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	b292      	uxth	r2, r2
 80032e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0208 	bic.w	r2, r2, #8
 80032fa:	b292      	uxth	r2, r2
 80032fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f006 fc4b 	bl	8009b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003318:	b292      	uxth	r2, r2
 800331a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fdb0 	bl	8007e88 <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003332:	f040 8082 	bne.w	800343a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003336:	2300      	movs	r3, #0
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e010      	b.n	800335e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	441a      	add	r2, r3
 8003348:	7ffb      	ldrb	r3, [r7, #31]
 800334a:	8812      	ldrh	r2, [r2, #0]
 800334c:	b292      	uxth	r2, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	3320      	adds	r3, #32
 8003352:	443b      	add	r3, r7
 8003354:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003358:	7ffb      	ldrb	r3, [r7, #31]
 800335a:	3301      	adds	r3, #1
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	2b07      	cmp	r3, #7
 8003362:	d9eb      	bls.n	800333c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800336c:	b29a      	uxth	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	b292      	uxth	r2, r2
 8003378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003384:	b29a      	uxth	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	b292      	uxth	r2, r2
 8003390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003394:	bf00      	nop
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f6      	beq.n	8003396 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ba:	b292      	uxth	r2, r2
 80033bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e00f      	b.n	80033e6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80033c6:	7ffb      	ldrb	r3, [r7, #31]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	4611      	mov	r1, r2
 80033ce:	7ffa      	ldrb	r2, [r7, #31]
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	440a      	add	r2, r1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	3320      	adds	r3, #32
 80033d8:	443b      	add	r3, r7
 80033da:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80033de:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80033e0:	7ffb      	ldrb	r3, [r7, #31]
 80033e2:	3301      	adds	r3, #1
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	2b07      	cmp	r3, #7
 80033ea:	d9ec      	bls.n	80033c6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0208 	orr.w	r2, r2, #8
 80033fe:	b292      	uxth	r2, r2
 8003400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800340c:	b29a      	uxth	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003416:	b292      	uxth	r2, r2
 8003418:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0204 	orr.w	r2, r2, #4
 800342e:	b292      	uxth	r2, r2
 8003430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f006 fb97 	bl	8009b68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f004 fd22 	bl	8007e88 <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344e:	d10e      	bne.n	800346e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003458:	b29a      	uxth	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003462:	b292      	uxth	r2, r2
 8003464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f006 fb50 	bl	8009b0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f004 fd08 	bl	8007e88 <USB_ReadInterrupts>
 8003478:	4603      	mov	r3, r0
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003482:	d10b      	bne.n	800349c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003496:	b292      	uxth	r2, r2
 8003498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800349c:	bf00      	nop
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_PCD_SetAddress+0x1a>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e013      	b.n	80034e6 <HAL_PCD_SetAddress+0x42>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f004 fcaf 	bl	8007e3a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	4608      	mov	r0, r1
 80034f8:	4611      	mov	r1, r2
 80034fa:	461a      	mov	r2, r3
 80034fc:	4603      	mov	r3, r0
 80034fe:	70fb      	strb	r3, [r7, #3]
 8003500:	460b      	mov	r3, r1
 8003502:	803b      	strh	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800350c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003510:	2b00      	cmp	r3, #0
 8003512:	da0e      	bge.n	8003532 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	705a      	strb	r2, [r3, #1]
 8003530:	e00e      	b.n	8003550 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 0207 	and.w	r2, r3, #7
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800355c:	883a      	ldrh	r2, [r7, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	78ba      	ldrb	r2, [r7, #2]
 8003566:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	785b      	ldrb	r3, [r3, #1]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800357a:	78bb      	ldrb	r3, [r7, #2]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d102      	bne.n	8003586 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_PCD_EP_Open+0xa6>
 8003590:	2302      	movs	r3, #2
 8003592:	e00e      	b.n	80035b2 <HAL_PCD_EP_Open+0xc4>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 ffbe 	bl	8005524 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80035b0:	7afb      	ldrb	r3, [r7, #11]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da0e      	bge.n	80035ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	705a      	strb	r2, [r3, #1]
 80035ea:	e00e      	b.n	800360a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	f003 0207 	and.w	r2, r3, #7
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	b2da      	uxtb	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_PCD_EP_Close+0x6a>
 8003620:	2302      	movs	r3, #2
 8003622:	e00e      	b.n	8003642 <HAL_PCD_EP_Close+0x88>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	4618      	mov	r0, r3
 8003634:	f002 fae0 	bl	8005bf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	460b      	mov	r3, r1
 8003658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f003 0207 	and.w	r2, r3, #7
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2200      	movs	r2, #0
 8003682:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2200      	movs	r2, #0
 8003688:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	b2da      	uxtb	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003696:	7afb      	ldrb	r3, [r7, #11]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6979      	ldr	r1, [r7, #20]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f002 fc92 	bl	8005fd0 <USB_EPStartXfer>
 80036ac:	e005      	b.n	80036ba <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6979      	ldr	r1, [r7, #20]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f002 fc8b 	bl	8005fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	460b      	mov	r3, r1
 80036d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d4:	7afb      	ldrb	r3, [r7, #11]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2201      	movs	r2, #1
 800370e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003710:	7afb      	ldrb	r3, [r7, #11]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	b2da      	uxtb	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800371c:	7afb      	ldrb	r3, [r7, #11]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	4618      	mov	r0, r3
 800372e:	f002 fc4f 	bl	8005fd0 <USB_EPStartXfer>
 8003732:	e005      	b.n	8003740 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6979      	ldr	r1, [r7, #20]
 800373a:	4618      	mov	r0, r3
 800373c:	f002 fc48 	bl	8005fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 0207 	and.w	r2, r3, #7
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d901      	bls.n	8003768 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e04c      	b.n	8003802 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376c:	2b00      	cmp	r3, #0
 800376e:	da0e      	bge.n	800378e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	705a      	strb	r2, [r3, #1]
 800378c:	e00c      	b.n	80037a8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_PCD_EP_SetStall+0x7e>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e01c      	b.n	8003802 <HAL_PCD_EP_SetStall+0xb8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68f9      	ldr	r1, [r7, #12]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 fa32 	bl	8007c40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d108      	bne.n	80037f8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f004 fb57 	bl	8007ea6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d901      	bls.n	8003828 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e040      	b.n	80038aa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800382c:	2b00      	cmp	r3, #0
 800382e:	da0e      	bge.n	800384e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	705a      	strb	r2, [r3, #1]
 800384c:	e00e      	b.n	800386c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	f003 0207 	and.w	r2, r3, #7
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_PCD_EP_ClrStall+0x82>
 8003888:	2302      	movs	r3, #2
 800388a:	e00e      	b.n	80038aa <HAL_PCD_EP_ClrStall+0xa0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68f9      	ldr	r1, [r7, #12]
 800389a:	4618      	mov	r0, r3
 800389c:	f004 fa20 	bl	8007ce0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b08e      	sub	sp, #56	; 0x38
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038ba:	e2ec      	b.n	8003e96 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038c4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80038c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80038d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 8161 	bne.w	8003b9e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80038dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d152      	bne.n	800398c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	81fb      	strh	r3, [r7, #14]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003906:	b29b      	uxth	r3, r3
 8003908:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3328      	adds	r3, #40	; 0x28
 800390e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003918:	b29b      	uxth	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	3302      	adds	r3, #2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	441a      	add	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800394a:	2100      	movs	r1, #0
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f006 f8c4 	bl	8009ada <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 829b 	beq.w	8003e96 <PCD_EP_ISR_Handler+0x5e4>
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 8296 	bne.w	8003e96 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003976:	b2da      	uxtb	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	b292      	uxth	r2, r2
 800397e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800398a:	e284      	b.n	8003e96 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800399c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800399e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d034      	beq.n	8003a10 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	3306      	adds	r3, #6
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f004 faae 	bl	8007f46 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039f6:	4013      	ands	r3, r2
 80039f8:	823b      	strh	r3, [r7, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	8a3a      	ldrh	r2, [r7, #16]
 8003a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a04:	b292      	uxth	r2, r2
 8003a06:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f006 f839 	bl	8009a80 <HAL_PCD_SetupStageCallback>
 8003a0e:	e242      	b.n	8003e96 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a10:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f280 823e 	bge.w	8003e96 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a26:	4013      	ands	r3, r2
 8003a28:	83bb      	strh	r3, [r7, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	8bba      	ldrh	r2, [r7, #28]
 8003a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a34:	b292      	uxth	r2, r2
 8003a36:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3306      	adds	r3, #6
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d019      	beq.n	8003aa0 <PCD_EP_ISR_Handler+0x1ee>
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	6959      	ldr	r1, [r3, #20]
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f004 fa5e 	bl	8007f46 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	441a      	add	r2, r3
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a98:	2100      	movs	r1, #0
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f006 f802 	bl	8009aa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 81f2 	bne.w	8003e96 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d112      	bne.n	8003b00 <PCD_EP_ISR_Handler+0x24e>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	801a      	strh	r2, [r3, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	e02f      	b.n	8003b60 <PCD_EP_ISR_Handler+0x2ae>
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b3e      	cmp	r3, #62	; 0x3e
 8003b06:	d813      	bhi.n	8003b30 <PCD_EP_ISR_Handler+0x27e>
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <PCD_EP_ISR_Handler+0x270>
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	3301      	adds	r3, #1
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	029b      	lsls	r3, r3, #10
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e017      	b.n	8003b60 <PCD_EP_ISR_Handler+0x2ae>
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	633b      	str	r3, [r7, #48]	; 0x30
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <PCD_EP_ISR_Handler+0x298>
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	3b01      	subs	r3, #1
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	029b      	lsls	r3, r3, #10
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	827b      	strh	r3, [r7, #18]
 8003b72:	8a7b      	ldrh	r3, [r7, #18]
 8003b74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b78:	827b      	strh	r3, [r7, #18]
 8003b7a:	8a7b      	ldrh	r3, [r7, #18]
 8003b7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b80:	827b      	strh	r3, [r7, #18]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	8a7b      	ldrh	r3, [r7, #18]
 8003b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	8013      	strh	r3, [r2, #0]
 8003b9c:	e17b      	b.n	8003e96 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bb0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f280 80ea 	bge.w	8003d8e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003be4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003be8:	b292      	uxth	r2, r2
 8003bea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003bec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	7b1b      	ldrb	r3, [r3, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d122      	bne.n	8003c50 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3306      	adds	r3, #6
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c32:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003c34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8087 	beq.w	8003d4a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	6959      	ldr	r1, [r3, #20]
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	88da      	ldrh	r2, [r3, #6]
 8003c48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c4a:	f004 f97c 	bl	8007f46 <USB_ReadPMA>
 8003c4e:	e07c      	b.n	8003d4a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d108      	bne.n	8003c6a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f927 	bl	8003eb2 <HAL_PCD_EP_DB_Receive>
 8003c64:	4603      	mov	r3, r0
 8003c66:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c68:	e06f      	b.n	8003d4a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c84:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	441a      	add	r2, r3
 8003c94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d021      	beq.n	8003d08 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003cee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d02a      	beq.n	8003d4a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	6959      	ldr	r1, [r3, #20]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	891a      	ldrh	r2, [r3, #8]
 8003d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d02:	f004 f920 	bl	8007f46 <USB_ReadPMA>
 8003d06:	e020      	b.n	8003d4a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3306      	adds	r3, #6
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	6959      	ldr	r1, [r3, #20]
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	895a      	ldrh	r2, [r3, #10]
 8003d44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d46:	f004 f8fe 	bl	8007f46 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d50:	441a      	add	r2, r3
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d5c:	441a      	add	r2, r3
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <PCD_EP_ISR_Handler+0x4c2>
 8003d6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d206      	bcs.n	8003d82 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f005 fe92 	bl	8009aa4 <HAL_PCD_DataOutStageCallback>
 8003d80:	e005      	b.n	8003d8e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f002 f921 	bl	8005fd0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d07e      	beq.n	8003e96 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	843b      	strh	r3, [r7, #32]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	8c3b      	ldrh	r3, [r7, #32]
 8003dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	78db      	ldrb	r3, [r3, #3]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d00c      	beq.n	8003e06 <PCD_EP_ISR_Handler+0x554>
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	78db      	ldrb	r3, [r3, #3]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d146      	bne.n	8003e8a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003dfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d141      	bne.n	8003e8a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e2e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	8bfb      	ldrh	r3, [r7, #30]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d906      	bls.n	8003e48 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	8bfb      	ldrh	r3, [r7, #30]
 8003e40:	1ad2      	subs	r2, r2, r3
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	619a      	str	r2, [r3, #24]
 8003e46:	e002      	b.n	8003e4e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f005 fe3c 	bl	8009ada <HAL_PCD_DataInStageCallback>
 8003e62:	e018      	b.n	8003e96 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	8bfb      	ldrh	r3, [r7, #30]
 8003e6a:	441a      	add	r2, r3
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	8bfb      	ldrh	r3, [r7, #30]
 8003e76:	441a      	add	r2, r3
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e82:	4618      	mov	r0, r3
 8003e84:	f002 f8a4 	bl	8005fd0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003e88:	e005      	b.n	8003e96 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f91b 	bl	80040cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	b21b      	sxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f6ff ad0a 	blt.w	80038bc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3738      	adds	r7, #56	; 0x38
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b088      	sub	sp, #32
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d07e      	beq.n	8003fc8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	8b7b      	ldrh	r3, [r7, #26]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d306      	bcc.n	8003f0c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	8b7b      	ldrh	r3, [r7, #26]
 8003f04:	1ad2      	subs	r2, r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	619a      	str	r2, [r3, #24]
 8003f0a:	e002      	b.n	8003f12 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d123      	bne.n	8003f62 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f34:	833b      	strh	r3, [r7, #24]
 8003f36:	8b3b      	ldrh	r3, [r7, #24]
 8003f38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f3c:	833b      	strh	r3, [r7, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	441a      	add	r2, r3
 8003f4c:	8b3b      	ldrh	r3, [r7, #24]
 8003f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01f      	beq.n	8003fac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	82fb      	strh	r3, [r7, #22]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fac:	8b7b      	ldrh	r3, [r7, #26]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8087 	beq.w	80040c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6959      	ldr	r1, [r3, #20]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	891a      	ldrh	r2, [r3, #8]
 8003fc0:	8b7b      	ldrh	r3, [r7, #26]
 8003fc2:	f003 ffc0 	bl	8007f46 <USB_ReadPMA>
 8003fc6:	e07c      	b.n	80040c2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	3306      	adds	r3, #6
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	8b7b      	ldrh	r3, [r7, #26]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d306      	bcc.n	800400a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	8b7b      	ldrh	r3, [r7, #26]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	619a      	str	r2, [r3, #24]
 8004008:	e002      	b.n	8004010 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d123      	bne.n	8004060 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	83fb      	strh	r3, [r7, #30]
 8004034:	8bfb      	ldrh	r3, [r7, #30]
 8004036:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800403a:	83fb      	strh	r3, [r7, #30]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	8bfb      	ldrh	r3, [r7, #30]
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11f      	bne.n	80040aa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	83bb      	strh	r3, [r7, #28]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	8bbb      	ldrh	r3, [r7, #28]
 8004096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040aa:	8b7b      	ldrh	r3, [r7, #26]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6959      	ldr	r1, [r3, #20]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	895a      	ldrh	r2, [r3, #10]
 80040bc:	8b7b      	ldrh	r3, [r7, #26]
 80040be:	f003 ff42 	bl	8007f46 <USB_ReadPMA>
    }
  }

  return count;
 80040c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b0a2      	sub	sp, #136	; 0x88
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 81c7 	beq.w	8004474 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	3302      	adds	r3, #2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800410e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800411a:	429a      	cmp	r2, r3
 800411c:	d907      	bls.n	800412e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	619a      	str	r2, [r3, #24]
 800412c:	e002      	b.n	8004134 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 80b9 	bne.w	80042b0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d126      	bne.n	8004194 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	4413      	add	r3, r2
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	011a      	lsls	r2, r3, #4
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	4413      	add	r3, r2
 8004168:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004178:	b29a      	uxth	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418c:	b29a      	uxth	r2, r3
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e01a      	b.n	80041ca <HAL_PCD_EP_DB_Transmit+0xfe>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d116      	bne.n	80041ca <HAL_PCD_EP_DB_Transmit+0xfe>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	4413      	add	r3, r2
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	011a      	lsls	r2, r3, #4
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	4413      	add	r3, r2
 80041be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c6:	2200      	movs	r2, #0
 80041c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d126      	bne.n	8004226 <HAL_PCD_EP_DB_Transmit+0x15a>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	4413      	add	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	011a      	lsls	r2, r3, #4
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	4413      	add	r3, r2
 80041fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800420a:	b29a      	uxth	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	801a      	strh	r2, [r3, #0]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800421a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800421e:	b29a      	uxth	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	e017      	b.n	8004256 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d113      	bne.n	8004256 <HAL_PCD_EP_DB_Transmit+0x18a>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	4413      	add	r3, r2
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	011a      	lsls	r2, r3, #4
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	4413      	add	r3, r2
 800424a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2200      	movs	r2, #0
 8004254:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f005 fc3c 	bl	8009ada <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 82d4 	beq.w	8004816 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	827b      	strh	r3, [r7, #18]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	8a7b      	ldrh	r3, [r7, #18]
 800429a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	8013      	strh	r3, [r2, #0]
 80042ae:	e2b2      	b.n	8004816 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d021      	beq.n	80042fe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004304:	2b01      	cmp	r3, #1
 8004306:	f040 8286 	bne.w	8004816 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004312:	441a      	add	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004320:	441a      	add	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6a1a      	ldr	r2, [r3, #32]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	429a      	cmp	r2, r3
 8004330:	d309      	bcc.n	8004346 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6a1a      	ldr	r2, [r3, #32]
 800433c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	621a      	str	r2, [r3, #32]
 8004344:	e015      	b.n	8004372 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d107      	bne.n	800435e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800434e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004352:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800435c:	e009      	b.n	8004372 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d155      	bne.n	8004426 <HAL_PCD_EP_DB_Transmit+0x35a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004388:	b29b      	uxth	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	4413      	add	r3, r2
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	011a      	lsls	r2, r3, #4
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	4413      	add	r3, r2
 800439c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
 80043a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d112      	bne.n	80043ce <HAL_PCD_EP_DB_Transmit+0x302>
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e047      	b.n	800445e <HAL_PCD_EP_DB_Transmit+0x392>
 80043ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d0:	2b3e      	cmp	r3, #62	; 0x3e
 80043d2:	d811      	bhi.n	80043f8 <HAL_PCD_EP_DB_Transmit+0x32c>
 80043d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80043da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_PCD_EP_DB_Transmit+0x31e>
 80043e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e6:	3301      	adds	r3, #1
 80043e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	029b      	lsls	r3, r3, #10
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	e032      	b.n	800445e <HAL_PCD_EP_DB_Transmit+0x392>
 80043f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80043fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <HAL_PCD_EP_DB_Transmit+0x342>
 8004408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440a:	3b01      	subs	r3, #1
 800440c:	64bb      	str	r3, [r7, #72]	; 0x48
 800440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004410:	b29b      	uxth	r3, r3
 8004412:	029b      	lsls	r3, r3, #10
 8004414:	b29b      	uxth	r3, r3
 8004416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441e:	b29a      	uxth	r2, r3
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e01b      	b.n	800445e <HAL_PCD_EP_DB_Transmit+0x392>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d117      	bne.n	800445e <HAL_PCD_EP_DB_Transmit+0x392>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004442:	4413      	add	r3, r2
 8004444:	643b      	str	r3, [r7, #64]	; 0x40
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444e:	4413      	add	r3, r2
 8004450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004458:	b29a      	uxth	r2, r3
 800445a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6959      	ldr	r1, [r3, #20]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	891a      	ldrh	r2, [r3, #8]
 800446a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446c:	b29b      	uxth	r3, r3
 800446e:	f003 fd25 	bl	8007ebc <USB_WritePMA>
 8004472:	e1d0      	b.n	8004816 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447c:	b29b      	uxth	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	3306      	adds	r3, #6
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d307      	bcc.n	80044bc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044b4:	1ad2      	subs	r2, r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	619a      	str	r2, [r3, #24]
 80044ba:	e002      	b.n	80044c2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 80c4 	bne.w	8004654 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	785b      	ldrb	r3, [r3, #1]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d126      	bne.n	8004522 <HAL_PCD_EP_DB_Transmit+0x456>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	4413      	add	r3, r2
 80044ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	011a      	lsls	r2, r3, #4
 80044f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f4:	4413      	add	r3, r2
 80044f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80044fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004506:	b29a      	uxth	r2, r3
 8004508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800451a:	b29a      	uxth	r2, r3
 800451c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	e01a      	b.n	8004558 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d116      	bne.n	8004558 <HAL_PCD_EP_DB_Transmit+0x48c>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	677b      	str	r3, [r7, #116]	; 0x74
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004538:	b29b      	uxth	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453e:	4413      	add	r3, r2
 8004540:	677b      	str	r3, [r7, #116]	; 0x74
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	011a      	lsls	r2, r3, #4
 8004548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454a:	4413      	add	r3, r2
 800454c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004550:	673b      	str	r3, [r7, #112]	; 0x70
 8004552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004554:	2200      	movs	r2, #0
 8004556:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	67bb      	str	r3, [r7, #120]	; 0x78
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	785b      	ldrb	r3, [r3, #1]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d12f      	bne.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004576:	b29b      	uxth	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800457e:	4413      	add	r3, r2
 8004580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	011a      	lsls	r2, r3, #4
 800458a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800458e:	4413      	add	r3, r2
 8004590:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004598:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045aa:	801a      	strh	r2, [r3, #0]
 80045ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045bc:	b29a      	uxth	r2, r3
 80045be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e017      	b.n	80045f6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d113      	bne.n	80045f6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045dc:	4413      	add	r3, r2
 80045de:	67bb      	str	r3, [r7, #120]	; 0x78
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	011a      	lsls	r2, r3, #4
 80045e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e8:	4413      	add	r3, r2
 80045ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045f2:	2200      	movs	r2, #0
 80045f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f005 fa6c 	bl	8009ada <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 8104 	bne.w	8004816 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800463e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]
 8004652:	e0e0      	b.n	8004816 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d121      	bne.n	80046a2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	f040 80b4 	bne.w	8004816 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046b6:	441a      	add	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046c4:	441a      	add	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d309      	bcc.n	80046ea <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	621a      	str	r2, [r3, #32]
 80046e8:	e015      	b.n	8004716 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80046f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004700:	e009      	b.n	8004716 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	667b      	str	r3, [r7, #100]	; 0x64
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d155      	bne.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x704>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004738:	4413      	add	r3, r2
 800473a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	011a      	lsls	r2, r3, #4
 8004742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004744:	4413      	add	r3, r2
 8004746:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800474a:	65bb      	str	r3, [r7, #88]	; 0x58
 800474c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474e:	2b00      	cmp	r3, #0
 8004750:	d112      	bne.n	8004778 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800475c:	b29a      	uxth	r2, r3
 800475e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004770:	b29a      	uxth	r2, r3
 8004772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e044      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x736>
 8004778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477a:	2b3e      	cmp	r3, #62	; 0x3e
 800477c:	d811      	bhi.n	80047a2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800477e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	657b      	str	r3, [r7, #84]	; 0x54
 8004784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800478e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004790:	3301      	adds	r3, #1
 8004792:	657b      	str	r3, [r7, #84]	; 0x54
 8004794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004796:	b29b      	uxth	r3, r3
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	b29a      	uxth	r2, r3
 800479c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	e02f      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x736>
 80047a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	657b      	str	r3, [r7, #84]	; 0x54
 80047a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80047b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b4:	3b01      	subs	r3, #1
 80047b6:	657b      	str	r3, [r7, #84]	; 0x54
 80047b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	b29b      	uxth	r3, r3
 80047c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047cc:	801a      	strh	r2, [r3, #0]
 80047ce:	e018      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x736>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d114      	bne.n	8004802 <HAL_PCD_EP_DB_Transmit+0x736>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e6:	4413      	add	r3, r2
 80047e8:	667b      	str	r3, [r7, #100]	; 0x64
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	011a      	lsls	r2, r3, #4
 80047f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f2:	4413      	add	r3, r2
 80047f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047f8:	663b      	str	r3, [r7, #96]	; 0x60
 80047fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004800:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6959      	ldr	r1, [r3, #20]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	895a      	ldrh	r2, [r3, #10]
 800480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004810:	b29b      	uxth	r3, r3
 8004812:	f003 fb53 	bl	8007ebc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	823b      	strh	r3, [r7, #16]
 8004832:	8a3b      	ldrh	r3, [r7, #16]
 8004834:	f083 0310 	eor.w	r3, r3, #16
 8004838:	823b      	strh	r3, [r7, #16]
 800483a:	8a3b      	ldrh	r3, [r7, #16]
 800483c:	f083 0320 	eor.w	r3, r3, #32
 8004840:	823b      	strh	r3, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	441a      	add	r2, r3
 8004850:	8a3b      	ldrh	r3, [r7, #16]
 8004852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004862:	b29b      	uxth	r3, r3
 8004864:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3788      	adds	r7, #136	; 0x88
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	4613      	mov	r3, r2
 8004880:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004882:	897b      	ldrh	r3, [r7, #10]
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800488e:	897b      	ldrh	r3, [r7, #10]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e009      	b.n	80048ba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048a6:	897a      	ldrh	r2, [r7, #10]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048ba:	893b      	ldrh	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d107      	bne.n	80048d0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2200      	movs	r2, #0
 80048c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	80da      	strh	r2, [r3, #6]
 80048ce:	e00b      	b.n	80048e8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2201      	movs	r2, #1
 80048d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	b29a      	uxth	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e272      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8087 	beq.w	8004a22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004914:	4b92      	ldr	r3, [pc, #584]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b04      	cmp	r3, #4
 800491e:	d00c      	beq.n	800493a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004920:	4b8f      	ldr	r3, [pc, #572]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b08      	cmp	r3, #8
 800492a:	d112      	bne.n	8004952 <HAL_RCC_OscConfig+0x5e>
 800492c:	4b8c      	ldr	r3, [pc, #560]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004938:	d10b      	bne.n	8004952 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800493a:	4b89      	ldr	r3, [pc, #548]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d06c      	beq.n	8004a20 <HAL_RCC_OscConfig+0x12c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d168      	bne.n	8004a20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e24c      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495a:	d106      	bne.n	800496a <HAL_RCC_OscConfig+0x76>
 800495c:	4b80      	ldr	r3, [pc, #512]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a7f      	ldr	r2, [pc, #508]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e02e      	b.n	80049c8 <HAL_RCC_OscConfig+0xd4>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0x98>
 8004972:	4b7b      	ldr	r3, [pc, #492]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7a      	ldr	r2, [pc, #488]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b78      	ldr	r3, [pc, #480]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a77      	ldr	r2, [pc, #476]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e01d      	b.n	80049c8 <HAL_RCC_OscConfig+0xd4>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0xbc>
 8004996:	4b72      	ldr	r3, [pc, #456]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a71      	ldr	r2, [pc, #452]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 800499c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b6f      	ldr	r3, [pc, #444]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a6e      	ldr	r2, [pc, #440]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0xd4>
 80049b0:	4b6b      	ldr	r3, [pc, #428]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6a      	ldr	r2, [pc, #424]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b68      	ldr	r3, [pc, #416]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a67      	ldr	r2, [pc, #412]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fd f826 	bl	8001a20 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fd f822 	bl	8001a20 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e200      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b5d      	ldr	r3, [pc, #372]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0xe4>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd f812 	bl	8001a20 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fd f80e 	bl	8001a20 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1ec      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x10c>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d063      	beq.n	8004af6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a2e:	4b4c      	ldr	r3, [pc, #304]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a3a:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x18c>
 8004a46:	4b46      	ldr	r3, [pc, #280]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	4b43      	ldr	r3, [pc, #268]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_RCC_OscConfig+0x176>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e1c0      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4939      	ldr	r1, [pc, #228]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	e03a      	b.n	8004af6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a88:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fc ffc7 	bl	8001a20 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fc ffc3 	bl	8001a20 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e1a1      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	4b2d      	ldr	r3, [pc, #180]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4927      	ldr	r1, [pc, #156]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
 8004ac8:	e015      	b.n	8004af6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <HAL_RCC_OscConfig+0x270>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fc ffa6 	bl	8001a20 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fc ffa2 	bl	8001a20 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e180      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03a      	beq.n	8004b78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d019      	beq.n	8004b3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0a:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b10:	f7fc ff86 	bl	8001a20 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b18:	f7fc ff82 	bl	8001a20 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e160      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b36:	2001      	movs	r0, #1
 8004b38:	f000 fad8 	bl	80050ec <RCC_Delay>
 8004b3c:	e01c      	b.n	8004b78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <HAL_RCC_OscConfig+0x274>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b44:	f7fc ff6c 	bl	8001a20 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b4a:	e00f      	b.n	8004b6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b4c:	f7fc ff68 	bl	8001a20 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d908      	bls.n	8004b6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e146      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
 8004b5e:	bf00      	nop
 8004b60:	40021000 	.word	0x40021000
 8004b64:	42420000 	.word	0x42420000
 8004b68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	4b92      	ldr	r3, [pc, #584]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e9      	bne.n	8004b4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80a6 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8a:	4b8b      	ldr	r3, [pc, #556]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10d      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	4a87      	ldr	r2, [pc, #540]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	61d3      	str	r3, [r2, #28]
 8004ba2:	4b85      	ldr	r3, [pc, #532]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb2:	4b82      	ldr	r3, [pc, #520]	; (8004dbc <HAL_RCC_OscConfig+0x4c8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d118      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bbe:	4b7f      	ldr	r3, [pc, #508]	; (8004dbc <HAL_RCC_OscConfig+0x4c8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7e      	ldr	r2, [pc, #504]	; (8004dbc <HAL_RCC_OscConfig+0x4c8>)
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bca:	f7fc ff29 	bl	8001a20 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd2:	f7fc ff25 	bl	8001a20 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b64      	cmp	r3, #100	; 0x64
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e103      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	4b75      	ldr	r3, [pc, #468]	; (8004dbc <HAL_RCC_OscConfig+0x4c8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d106      	bne.n	8004c06 <HAL_RCC_OscConfig+0x312>
 8004bf8:	4b6f      	ldr	r3, [pc, #444]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4a6e      	ldr	r2, [pc, #440]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6213      	str	r3, [r2, #32]
 8004c04:	e02d      	b.n	8004c62 <HAL_RCC_OscConfig+0x36e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x334>
 8004c0e:	4b6a      	ldr	r3, [pc, #424]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4a69      	ldr	r2, [pc, #420]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	6213      	str	r3, [r2, #32]
 8004c1a:	4b67      	ldr	r3, [pc, #412]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	4a66      	ldr	r2, [pc, #408]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	f023 0304 	bic.w	r3, r3, #4
 8004c24:	6213      	str	r3, [r2, #32]
 8004c26:	e01c      	b.n	8004c62 <HAL_RCC_OscConfig+0x36e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	2b05      	cmp	r3, #5
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCC_OscConfig+0x356>
 8004c30:	4b61      	ldr	r3, [pc, #388]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	4a60      	ldr	r2, [pc, #384]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c36:	f043 0304 	orr.w	r3, r3, #4
 8004c3a:	6213      	str	r3, [r2, #32]
 8004c3c:	4b5e      	ldr	r3, [pc, #376]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	4a5d      	ldr	r2, [pc, #372]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6213      	str	r3, [r2, #32]
 8004c48:	e00b      	b.n	8004c62 <HAL_RCC_OscConfig+0x36e>
 8004c4a:	4b5b      	ldr	r3, [pc, #364]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4a5a      	ldr	r2, [pc, #360]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	6213      	str	r3, [r2, #32]
 8004c56:	4b58      	ldr	r3, [pc, #352]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	4a57      	ldr	r2, [pc, #348]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d015      	beq.n	8004c96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6a:	f7fc fed9 	bl	8001a20 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fc fed5 	bl	8001a20 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0b1      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	4b4b      	ldr	r3, [pc, #300]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ee      	beq.n	8004c72 <HAL_RCC_OscConfig+0x37e>
 8004c94:	e014      	b.n	8004cc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c96:	f7fc fec3 	bl	8001a20 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fc febf 	bl	8001a20 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e09b      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb4:	4b40      	ldr	r3, [pc, #256]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ee      	bne.n	8004c9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d105      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc6:	4b3c      	ldr	r3, [pc, #240]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	4a3b      	ldr	r2, [pc, #236]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8087 	beq.w	8004dea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cdc:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d061      	beq.n	8004dac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d146      	bne.n	8004d7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf0:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <HAL_RCC_OscConfig+0x4cc>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf6:	f7fc fe93 	bl	8001a20 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfe:	f7fc fe8f 	bl	8001a20 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e06d      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d10:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f0      	bne.n	8004cfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d108      	bne.n	8004d38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d26:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4921      	ldr	r1, [pc, #132]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d38:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a19      	ldr	r1, [r3, #32]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	491b      	ldr	r1, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d50:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <HAL_RCC_OscConfig+0x4cc>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d56:	f7fc fe63 	bl	8001a20 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5e:	f7fc fe5f 	bl	8001a20 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e03d      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x46a>
 8004d7c:	e035      	b.n	8004dea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <HAL_RCC_OscConfig+0x4cc>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fc fe4c 	bl	8001a20 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fc fe48 	bl	8001a20 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e026      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x498>
 8004daa:	e01e      	b.n	8004dea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e019      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_OscConfig+0x500>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d106      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000

08004df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0d0      	b.n	8004fae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d910      	bls.n	8004e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b67      	ldr	r3, [pc, #412]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 0207 	bic.w	r2, r3, #7
 8004e22:	4965      	ldr	r1, [pc, #404]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b63      	ldr	r3, [pc, #396]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0b8      	b.n	8004fae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d020      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e54:	4b59      	ldr	r3, [pc, #356]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4a58      	ldr	r2, [pc, #352]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004e5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e6c:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a52      	ldr	r2, [pc, #328]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004e72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b50      	ldr	r3, [pc, #320]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	494d      	ldr	r1, [pc, #308]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d040      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d115      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e07f      	b.n	8004fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb6:	4b41      	ldr	r3, [pc, #260]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e073      	b.n	8004fae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec6:	4b3d      	ldr	r3, [pc, #244]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06b      	b.n	8004fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f023 0203 	bic.w	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4936      	ldr	r1, [pc, #216]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee8:	f7fc fd9a 	bl	8001a20 <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef0:	f7fc fd96 	bl	8001a20 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e053      	b.n	8004fae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 020c 	and.w	r2, r3, #12
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d1eb      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f18:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d210      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 0207 	bic.w	r2, r3, #7
 8004f2e:	4922      	ldr	r1, [pc, #136]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e032      	b.n	8004fae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4916      	ldr	r1, [pc, #88]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	490e      	ldr	r1, [pc, #56]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f86:	f000 f821 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	490a      	ldr	r1, [pc, #40]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f98:	5ccb      	ldrb	r3, [r1, r3]
 8004f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <HAL_RCC_ClockConfig+0x1cc>)
 8004fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_ClockConfig+0x1d0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fc fcf8 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40022000 	.word	0x40022000
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	0800b21c 	.word	0x0800b21c
 8004fc4:	20000048 	.word	0x20000048
 8004fc8:	2000004c 	.word	0x2000004c

08004fcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fcc:	b490      	push	{r4, r7}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004fd2:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCC_GetSysClockFreq+0xac>)
 8004fd4:	1d3c      	adds	r4, r7, #4
 8004fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004fdc:	f240 2301 	movw	r3, #513	; 0x201
 8004fe0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ff6:	4b21      	ldr	r3, [pc, #132]	; (800507c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b04      	cmp	r3, #4
 8005004:	d002      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x40>
 8005006:	2b08      	cmp	r3, #8
 8005008:	d003      	beq.n	8005012 <HAL_RCC_GetSysClockFreq+0x46>
 800500a:	e02b      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800500c:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <HAL_RCC_GetSysClockFreq+0xb4>)
 800500e:	623b      	str	r3, [r7, #32]
      break;
 8005010:	e02b      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	0c9b      	lsrs	r3, r3, #18
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3328      	adds	r3, #40	; 0x28
 800501c:	443b      	add	r3, r7
 800501e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005022:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d012      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	0c5b      	lsrs	r3, r3, #17
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	3328      	adds	r3, #40	; 0x28
 800503a:	443b      	add	r3, r7
 800503c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005040:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	4a0e      	ldr	r2, [pc, #56]	; (8005080 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005046:	fb03 f202 	mul.w	r2, r3, r2
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
 8005052:	e004      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4a0b      	ldr	r2, [pc, #44]	; (8005084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	623b      	str	r3, [r7, #32]
      break;
 8005062:	e002      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005066:	623b      	str	r3, [r7, #32]
      break;
 8005068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506a:	6a3b      	ldr	r3, [r7, #32]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	; 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bc90      	pop	{r4, r7}
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	0800b1c8 	.word	0x0800b1c8
 800507c:	40021000 	.word	0x40021000
 8005080:	007a1200 	.word	0x007a1200
 8005084:	003d0900 	.word	0x003d0900

08005088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800508c:	4b02      	ldr	r3, [pc, #8]	; (8005098 <HAL_RCC_GetHCLKFreq+0x10>)
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr
 8005098:	20000048 	.word	0x20000048

0800509c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050a0:	f7ff fff2 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4903      	ldr	r1, [pc, #12]	; (80050c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40021000 	.word	0x40021000
 80050c0:	0800b22c 	.word	0x0800b22c

080050c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050c8:	f7ff ffde 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	0adb      	lsrs	r3, r3, #11
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	; (80050e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40021000 	.word	0x40021000
 80050e8:	0800b22c 	.word	0x0800b22c

080050ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <RCC_Delay+0x34>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <RCC_Delay+0x38>)
 80050fa:	fba2 2303 	umull	r2, r3, r2, r3
 80050fe:	0a5b      	lsrs	r3, r3, #9
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005108:	bf00      	nop
  }
  while (Delay --);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1e5a      	subs	r2, r3, #1
 800510e:	60fa      	str	r2, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f9      	bne.n	8005108 <RCC_Delay+0x1c>
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	20000048 	.word	0x20000048
 8005124:	10624dd3 	.word	0x10624dd3

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d07d      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005148:	4b4f      	ldr	r3, [pc, #316]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005154:	4b4c      	ldr	r3, [pc, #304]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	4a4b      	ldr	r2, [pc, #300]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515e:	61d3      	str	r3, [r2, #28]
 8005160:	4b49      	ldr	r3, [pc, #292]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b46      	ldr	r3, [pc, #280]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d118      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517c:	4b43      	ldr	r3, [pc, #268]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a42      	ldr	r2, [pc, #264]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005188:	f7fc fc4a 	bl	8001a20 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518e:	e008      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005190:	f7fc fc46 	bl	8001a20 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	; 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e06d      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a2:	4b3a      	ldr	r3, [pc, #232]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051ae:	4b36      	ldr	r3, [pc, #216]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d02e      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d027      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051cc:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051d6:	4b2e      	ldr	r3, [pc, #184]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051dc:	4b2c      	ldr	r3, [pc, #176]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051e2:	4a29      	ldr	r2, [pc, #164]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d014      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f2:	f7fc fc15 	bl	8001a20 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	e00a      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fc fc11 	bl	8001a20 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f241 3288 	movw	r2, #5000	; 0x1388
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e036      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ee      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800521c:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4917      	ldr	r1, [pc, #92]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522a:	4313      	orrs	r3, r2
 800522c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d105      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005234:	4b14      	ldr	r3, [pc, #80]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	4a13      	ldr	r2, [pc, #76]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	490b      	ldr	r1, [pc, #44]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525a:	4313      	orrs	r3, r2
 800525c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800526a:	4b07      	ldr	r3, [pc, #28]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4904      	ldr	r1, [pc, #16]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005278:	4313      	orrs	r3, r2
 800527a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40021000 	.word	0x40021000
 800528c:	40007000 	.word	0x40007000
 8005290:	42420440 	.word	0x42420440

08005294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e03f      	b.n	8005326 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fc f9e4 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2224      	movs	r2, #36	; 0x24
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f829 	bl	8005330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800530c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800536a:	f023 030c 	bic.w	r3, r3, #12
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	430b      	orrs	r3, r1
 8005376:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2c      	ldr	r2, [pc, #176]	; (8005444 <UART_SetConfig+0x114>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d103      	bne.n	80053a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005398:	f7ff fe94 	bl	80050c4 <HAL_RCC_GetPCLK2Freq>
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	e002      	b.n	80053a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053a0:	f7ff fe7c 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 80053a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009a      	lsls	r2, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	4a22      	ldr	r2, [pc, #136]	; (8005448 <UART_SetConfig+0x118>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	0119      	lsls	r1, r3, #4
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009a      	lsls	r2, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053dc:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <UART_SetConfig+0x118>)
 80053de:	fba3 0302 	umull	r0, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2064      	movs	r0, #100	; 0x64
 80053e6:	fb00 f303 	mul.w	r3, r0, r3
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	4a15      	ldr	r2, [pc, #84]	; (8005448 <UART_SetConfig+0x118>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053fc:	4419      	add	r1, r3
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009a      	lsls	r2, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	fbb2 f2f3 	udiv	r2, r2, r3
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <UART_SetConfig+0x118>)
 8005416:	fba3 0302 	umull	r0, r3, r3, r2
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2064      	movs	r0, #100	; 0x64
 800541e:	fb00 f303 	mul.w	r3, r0, r3
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	3332      	adds	r3, #50	; 0x32
 8005428:	4a07      	ldr	r2, [pc, #28]	; (8005448 <UART_SetConfig+0x118>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	440a      	add	r2, r1
 800543a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40013800 	.word	0x40013800
 8005448:	51eb851f 	.word	0x51eb851f

0800544c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800544c:	b084      	sub	sp, #16
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	f107 0014 	add.w	r0, r7, #20
 800545a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	b004      	add	sp, #16
 800546a:	4770      	bx	lr

0800546c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800547c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005480:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80054a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	4013      	ands	r3, r2
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054e4:	b084      	sub	sp, #16
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	f107 0014 	add.w	r0, r7, #20
 80054f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	b004      	add	sp, #16
 8005522:	4770      	bx	lr

08005524 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005524:	b480      	push	{r7}
 8005526:	b09b      	sub	sp, #108	; 0x6c
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	78db      	ldrb	r3, [r3, #3]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d81f      	bhi.n	8005596 <USB_ActivateEndpoint+0x72>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <USB_ActivateEndpoint+0x38>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	08005589 	.word	0x08005589
 8005564:	0800559f 	.word	0x0800559f
 8005568:	0800557b 	.word	0x0800557b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800556c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005574:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005578:	e012      	b.n	80055a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800557a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800557e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005582:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005586:	e00b      	b.n	80055a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005588:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800558c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005590:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005594:	e004      	b.n	80055a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800559c:	e000      	b.n	80055a0 <USB_ActivateEndpoint+0x7c>
      break;
 800559e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80055ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	b29a      	uxth	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80055f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	b29b      	uxth	r3, r3
 8005606:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	7b1b      	ldrb	r3, [r3, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f040 8149 	bne.w	80058a4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8084 	beq.w	8005724 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005626:	b29b      	uxth	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	4413      	add	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	011a      	lsls	r2, r3, #4
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	88db      	ldrh	r3, [r3, #6]
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	b29b      	uxth	r3, r3
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	81fb      	strh	r3, [r7, #14]
 800565e:	89fb      	ldrh	r3, [r7, #14]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01b      	beq.n	80056a0 <USB_ActivateEndpoint+0x17c>
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	81bb      	strh	r3, [r7, #12]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	89bb      	ldrh	r3, [r7, #12]
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005698:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	78db      	ldrb	r3, [r3, #3]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d020      	beq.n	80056ea <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	813b      	strh	r3, [r7, #8]
 80056c0:	893b      	ldrh	r3, [r7, #8]
 80056c2:	f083 0320 	eor.w	r3, r3, #32
 80056c6:	813b      	strh	r3, [r7, #8]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	441a      	add	r2, r3
 80056d2:	893b      	ldrh	r3, [r7, #8]
 80056d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	8013      	strh	r3, [r2, #0]
 80056e8:	e27f      	b.n	8005bea <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005700:	817b      	strh	r3, [r7, #10]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	441a      	add	r2, r3
 800570c:	897b      	ldrh	r3, [r7, #10]
 800570e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571e:	b29b      	uxth	r3, r3
 8005720:	8013      	strh	r3, [r2, #0]
 8005722:	e262      	b.n	8005bea <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572e:	b29b      	uxth	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	4413      	add	r3, r2
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	011a      	lsls	r2, r3, #4
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	4413      	add	r3, r2
 8005742:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	88db      	ldrh	r3, [r3, #6]
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	b29b      	uxth	r3, r3
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005762:	b29b      	uxth	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	4413      	add	r3, r2
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	011a      	lsls	r2, r3, #4
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	4413      	add	r3, r2
 8005776:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800577a:	623b      	str	r3, [r7, #32]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d112      	bne.n	80057aa <USB_ActivateEndpoint+0x286>
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800578e:	b29a      	uxth	r2, r3
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e02f      	b.n	800580a <USB_ActivateEndpoint+0x2e6>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b3e      	cmp	r3, #62	; 0x3e
 80057b0:	d813      	bhi.n	80057da <USB_ActivateEndpoint+0x2b6>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	663b      	str	r3, [r7, #96]	; 0x60
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <USB_ActivateEndpoint+0x2a8>
 80057c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057c8:	3301      	adds	r3, #1
 80057ca:	663b      	str	r3, [r7, #96]	; 0x60
 80057cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	029b      	lsls	r3, r3, #10
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	e017      	b.n	800580a <USB_ActivateEndpoint+0x2e6>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	663b      	str	r3, [r7, #96]	; 0x60
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <USB_ActivateEndpoint+0x2d0>
 80057ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057f0:	3b01      	subs	r3, #1
 80057f2:	663b      	str	r3, [r7, #96]	; 0x60
 80057f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005804:	b29a      	uxth	r2, r3
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	83fb      	strh	r3, [r7, #30]
 8005818:	8bfb      	ldrh	r3, [r7, #30]
 800581a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01b      	beq.n	800585a <USB_ActivateEndpoint+0x336>
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005838:	83bb      	strh	r3, [r7, #28]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	8bbb      	ldrh	r3, [r7, #28]
 8005846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005856:	b29b      	uxth	r3, r3
 8005858:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	837b      	strh	r3, [r7, #26]
 8005872:	8b7b      	ldrh	r3, [r7, #26]
 8005874:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005878:	837b      	strh	r3, [r7, #26]
 800587a:	8b7b      	ldrh	r3, [r7, #26]
 800587c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005880:	837b      	strh	r3, [r7, #26]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	8b7b      	ldrh	r3, [r7, #26]
 800588e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8013      	strh	r3, [r2, #0]
 80058a2:	e1a2      	b.n	8005bea <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	441a      	add	r2, r3
 80058c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80058cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	b29b      	uxth	r3, r3
 80058de:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058f0:	4413      	add	r3, r2
 80058f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	011a      	lsls	r2, r3, #4
 80058fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005902:	657b      	str	r3, [r7, #84]	; 0x54
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	891b      	ldrh	r3, [r3, #8]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	653b      	str	r3, [r7, #80]	; 0x50
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591e:	b29b      	uxth	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005924:	4413      	add	r3, r2
 8005926:	653b      	str	r3, [r7, #80]	; 0x50
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	011a      	lsls	r2, r3, #4
 800592e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005930:	4413      	add	r3, r2
 8005932:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	895b      	ldrh	r3, [r3, #10]
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005946:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 8091 	bne.w	8005a74 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005960:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01b      	beq.n	80059a2 <USB_ActivateEndpoint+0x47e>
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80059b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01b      	beq.n	80059f2 <USB_ActivateEndpoint+0x4ce>
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	441a      	add	r2, r3
 80059dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a08:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005a0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005a12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a18:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a50:	867b      	strh	r3, [r7, #50]	; 0x32
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]
 8005a72:	e0ba      	b.n	8005bea <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005a84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01d      	beq.n	8005acc <USB_ActivateEndpoint+0x5a8>
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005adc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01d      	beq.n	8005b24 <USB_ActivateEndpoint+0x600>
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d024      	beq.n	8005b76 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005b46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b4a:	f083 0320 	eor.w	r3, r3, #32
 8005b4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	8013      	strh	r3, [r2, #0]
 8005b74:	e01d      	b.n	8005bb2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	441a      	add	r2, r3
 8005bd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005bea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	376c      	adds	r7, #108	; 0x6c
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b08d      	sub	sp, #52	; 0x34
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	7b1b      	ldrb	r3, [r3, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 808e 	bne.w	8005d28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d044      	beq.n	8005c9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	81bb      	strh	r3, [r7, #12]
 8005c22:	89bb      	ldrh	r3, [r7, #12]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01b      	beq.n	8005c64 <USB_DeactivateEndpoint+0x6c>
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	817b      	strh	r3, [r7, #10]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	897b      	ldrh	r3, [r7, #10]
 8005c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7a:	813b      	strh	r3, [r7, #8]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	441a      	add	r2, r3
 8005c86:	893b      	ldrh	r3, [r7, #8]
 8005c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	8013      	strh	r3, [r2, #0]
 8005c9c:	e192      	b.n	8005fc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	827b      	strh	r3, [r7, #18]
 8005cac:	8a7b      	ldrh	r3, [r7, #18]
 8005cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01b      	beq.n	8005cee <USB_DeactivateEndpoint+0xf6>
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	823b      	strh	r3, [r7, #16]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8a3b      	ldrh	r3, [r7, #16]
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	81fb      	strh	r3, [r7, #14]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	89fb      	ldrh	r3, [r7, #14]
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
 8005d26:	e14d      	b.n	8005fc4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f040 80a5 	bne.w	8005e7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	843b      	strh	r3, [r7, #32]
 8005d40:	8c3b      	ldrh	r3, [r7, #32]
 8005d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01b      	beq.n	8005d82 <USB_DeactivateEndpoint+0x18a>
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	83fb      	strh	r3, [r7, #30]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	441a      	add	r2, r3
 8005d6c:	8bfb      	ldrh	r3, [r7, #30]
 8005d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	83bb      	strh	r3, [r7, #28]
 8005d90:	8bbb      	ldrh	r3, [r7, #28]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01b      	beq.n	8005dd2 <USB_DeactivateEndpoint+0x1da>
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db0:	837b      	strh	r3, [r7, #26]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	441a      	add	r2, r3
 8005dbc:	8b7b      	ldrh	r3, [r7, #26]
 8005dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de8:	833b      	strh	r3, [r7, #24]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	8b3b      	ldrh	r3, [r7, #24]
 8005df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e20:	82fb      	strh	r3, [r7, #22]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	8afb      	ldrh	r3, [r7, #22]
 8005e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e58:	82bb      	strh	r3, [r7, #20]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	8abb      	ldrh	r3, [r7, #20]
 8005e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	8013      	strh	r3, [r2, #0]
 8005e7a:	e0a3      	b.n	8005fc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01b      	beq.n	8005ecc <USB_DeactivateEndpoint+0x2d4>
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	441a      	add	r2, r3
 8005eb6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005eda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <USB_DeactivateEndpoint+0x324>
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	853b      	strh	r3, [r7, #40]	; 0x28
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	441a      	add	r2, r3
 8005f3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3734      	adds	r7, #52	; 0x34
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0cc      	sub	sp, #304	; 0x130
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fde:	6018      	str	r0, [r3, #0]
 8005fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	f041 817d 	bne.w	80072f6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699a      	ldr	r2, [r3, #24]
 8006008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	429a      	cmp	r2, r3
 8006016:	d908      	bls.n	800602a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006028:	e007      	b.n	800603a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800602a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800603a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	7b1b      	ldrb	r3, [r3, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d152      	bne.n	80060f0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800604a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6959      	ldr	r1, [r3, #20]
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	88da      	ldrh	r2, [r3, #6]
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	b29b      	uxth	r3, r3
 8006068:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800606c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006070:	6800      	ldr	r0, [r0, #0]
 8006072:	f001 ff23 	bl	8007ebc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800607e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006082:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006098:	b29b      	uxth	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80060a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060a8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	440a      	add	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	011a      	lsls	r2, r3, #4
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80060d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	f001 b8b5 	b.w	800725a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	f040 84c6 	bne.w	8006a8e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	429a      	cmp	r2, r3
 800611c:	f240 8443 	bls.w	80069a6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006170:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	b29b      	uxth	r3, r3
 800617a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618c:	1ad2      	subs	r2, r2, r3
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800619a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 823e 	beq.w	800663e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80061ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061ce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f040 809a 	bne.w	800631c <USB_EPStartXfer+0x34c>
 80061e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620a:	b29b      	uxth	r3, r3
 800620c:	4619      	mov	r1, r3
 800620e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006216:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800621a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	440a      	add	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	011a      	lsls	r2, r3, #4
 8006232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4413      	add	r3, r2
 800623e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006246:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d122      	bne.n	800629a <USB_EPStartXfer+0x2ca>
 8006254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006258:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006266:	b29a      	uxth	r2, r3
 8006268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006278:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628a:	b29a      	uxth	r2, r3
 800628c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006290:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e079      	b.n	800638e <USB_EPStartXfer+0x3be>
 800629a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629e:	2b3e      	cmp	r3, #62	; 0x3e
 80062a0:	d81b      	bhi.n	80062da <USB_EPStartXfer+0x30a>
 80062a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <USB_EPStartXfer+0x2f2>
 80062b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062bc:	3301      	adds	r3, #1
 80062be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	029b      	lsls	r3, r3, #10
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	e059      	b.n	800638e <USB_EPStartXfer+0x3be>
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d104      	bne.n	80062fa <USB_EPStartXfer+0x32a>
 80062f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062f4:	3b01      	subs	r3, #1
 80062f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062fe:	b29b      	uxth	r3, r3
 8006300:	029b      	lsls	r3, r3, #10
 8006302:	b29b      	uxth	r3, r3
 8006304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630c:	b29a      	uxth	r2, r3
 800630e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006312:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e038      	b.n	800638e <USB_EPStartXfer+0x3be>
 800631c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d130      	bne.n	800638e <USB_EPStartXfer+0x3be>
 800632c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633a:	b29b      	uxth	r3, r3
 800633c:	4619      	mov	r1, r3
 800633e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006342:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006346:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800634a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	440a      	add	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	011a      	lsls	r2, r3, #4
 8006362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006366:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4413      	add	r3, r2
 800636e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006380:	b29a      	uxth	r2, r3
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	895b      	ldrh	r3, [r3, #10]
 800639a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6959      	ldr	r1, [r3, #20]
 80063aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80063bc:	6800      	ldr	r0, [r0, #0]
 80063be:	f001 fd7d 	bl	8007ebc <USB_WritePMA>
            ep->xfer_buff += len;
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d2:	441a      	add	r2, r3
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6a1a      	ldr	r2, [r3, #32]
 80063ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d90f      	bls.n	800641c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80063fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640c:	1ad2      	subs	r2, r2, r3
 800640e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	621a      	str	r2, [r3, #32]
 800641a:	e00e      	b.n	800643a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800641c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800642c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f040 809a 	bne.w	8006580 <USB_EPStartXfer+0x5b0>
 800644c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006450:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006458:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646e:	b29b      	uxth	r3, r3
 8006470:	4619      	mov	r1, r3
 8006472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006476:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800647a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800647e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	440a      	add	r2, r1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	011a      	lsls	r2, r3, #4
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80064a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d122      	bne.n	80064fe <USB_EPStartXfer+0x52e>
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	e083      	b.n	8006606 <USB_EPStartXfer+0x636>
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	2b3e      	cmp	r3, #62	; 0x3e
 8006504:	d81b      	bhi.n	800653e <USB_EPStartXfer+0x56e>
 8006506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <USB_EPStartXfer+0x556>
 800651c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006520:	3301      	adds	r3, #1
 8006522:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006526:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29a      	uxth	r2, r3
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	e063      	b.n	8006606 <USB_EPStartXfer+0x636>
 800653e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <USB_EPStartXfer+0x58e>
 8006554:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006558:	3b01      	subs	r3, #1
 800655a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800655e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006562:	b29b      	uxth	r3, r3
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	b29b      	uxth	r3, r3
 8006568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006570:	b29a      	uxth	r2, r3
 8006572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006576:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	e042      	b.n	8006606 <USB_EPStartXfer+0x636>
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d13a      	bne.n	8006606 <USB_EPStartXfer+0x636>
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006598:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800659c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	4619      	mov	r1, r3
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065c2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	440a      	add	r2, r1
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	011a      	lsls	r2, r3, #4
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	891b      	ldrh	r3, [r3, #8]
 8006612:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6959      	ldr	r1, [r3, #20]
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	b29b      	uxth	r3, r3
 8006628:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800662c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006630:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006634:	6800      	ldr	r0, [r0, #0]
 8006636:	f001 fc41 	bl	8007ebc <USB_WritePMA>
 800663a:	f000 be0e 	b.w	800725a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d16d      	bne.n	800672a <USB_EPStartXfer+0x75a>
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	64bb      	str	r3, [r7, #72]	; 0x48
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666e:	4413      	add	r3, r2
 8006670:	64bb      	str	r3, [r7, #72]	; 0x48
 8006672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	011a      	lsls	r2, r3, #4
 8006680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006682:	4413      	add	r3, r2
 8006684:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006688:	647b      	str	r3, [r7, #68]	; 0x44
 800668a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d112      	bne.n	80066b8 <USB_EPStartXfer+0x6e8>
 8006692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800669c:	b29a      	uxth	r2, r3
 800669e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e063      	b.n	8006780 <USB_EPStartXfer+0x7b0>
 80066b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066bc:	2b3e      	cmp	r3, #62	; 0x3e
 80066be:	d817      	bhi.n	80066f0 <USB_EPStartXfer+0x720>
 80066c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c4:	085b      	lsrs	r3, r3, #1
 80066c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80066ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <USB_EPStartXfer+0x710>
 80066d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80066da:	3301      	adds	r3, #1
 80066dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80066e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	029b      	lsls	r3, r3, #10
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e047      	b.n	8006780 <USB_EPStartXfer+0x7b0>
 80066f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <USB_EPStartXfer+0x740>
 8006706:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800670a:	3b01      	subs	r3, #1
 800670c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006710:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006714:	b29b      	uxth	r3, r3
 8006716:	029b      	lsls	r3, r3, #10
 8006718:	b29b      	uxth	r3, r3
 800671a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006722:	b29a      	uxth	r2, r3
 8006724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e02a      	b.n	8006780 <USB_EPStartXfer+0x7b0>
 800672a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d122      	bne.n	8006780 <USB_EPStartXfer+0x7b0>
 800673a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	653b      	str	r3, [r7, #80]	; 0x50
 8006746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006754:	b29b      	uxth	r3, r3
 8006756:	461a      	mov	r2, r3
 8006758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800675a:	4413      	add	r3, r2
 800675c:	653b      	str	r3, [r7, #80]	; 0x50
 800675e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	011a      	lsls	r2, r3, #4
 800676c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800676e:	4413      	add	r3, r2
 8006770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800677a:	b29a      	uxth	r2, r3
 800677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	891b      	ldrh	r3, [r3, #8]
 800678c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6959      	ldr	r1, [r3, #20]
 800679c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067a6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067aa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067ae:	6800      	ldr	r0, [r0, #0]
 80067b0:	f001 fb84 	bl	8007ebc <USB_WritePMA>
            ep->xfer_buff += len;
 80067b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c4:	441a      	add	r2, r3
 80067c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d90f      	bls.n	800680e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80067ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	621a      	str	r2, [r3, #32]
 800680c:	e00e      	b.n	800682c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2200      	movs	r2, #0
 800682a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	643b      	str	r3, [r7, #64]	; 0x40
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d16d      	bne.n	8006924 <USB_EPStartXfer+0x954>
 8006848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	63bb      	str	r3, [r7, #56]	; 0x38
 8006854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006858:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006862:	b29b      	uxth	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	4413      	add	r3, r2
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
 800686c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	011a      	lsls	r2, r3, #4
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	4413      	add	r3, r2
 800687e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
 8006884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d112      	bne.n	80068b2 <USB_EPStartXfer+0x8e2>
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006896:	b29a      	uxth	r2, r3
 8006898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	e05d      	b.n	800696e <USB_EPStartXfer+0x99e>
 80068b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b6:	2b3e      	cmp	r3, #62	; 0x3e
 80068b8:	d817      	bhi.n	80068ea <USB_EPStartXfer+0x91a>
 80068ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80068c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <USB_EPStartXfer+0x90a>
 80068d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068d4:	3301      	adds	r3, #1
 80068d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80068da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068de:	b29b      	uxth	r3, r3
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	e041      	b.n	800696e <USB_EPStartXfer+0x99e>
 80068ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80068f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <USB_EPStartXfer+0x93a>
 8006900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006904:	3b01      	subs	r3, #1
 8006906:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800690a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800690e:	b29b      	uxth	r3, r3
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	b29b      	uxth	r3, r3
 8006914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691c:	b29a      	uxth	r2, r3
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e024      	b.n	800696e <USB_EPStartXfer+0x99e>
 8006924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d11c      	bne.n	800696e <USB_EPStartXfer+0x99e>
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006948:	4413      	add	r3, r2
 800694a:	643b      	str	r3, [r7, #64]	; 0x40
 800694c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	011a      	lsls	r2, r3, #4
 800695a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695c:	4413      	add	r3, r2
 800695e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006968:	b29a      	uxth	r2, r3
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800696e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	895b      	ldrh	r3, [r3, #10]
 800697a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800697e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6959      	ldr	r1, [r3, #20]
 800698a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698e:	b29b      	uxth	r3, r3
 8006990:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006994:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006998:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f001 fa8d 	bl	8007ebc <USB_WritePMA>
 80069a2:	f000 bc5a 	b.w	800725a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80069a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80069fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a32:	4413      	add	r3, r2
 8006a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	011a      	lsls	r2, r3, #4
 8006a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a46:	4413      	add	r3, r2
 8006a48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	891b      	ldrh	r3, [r3, #8]
 8006a64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6959      	ldr	r1, [r3, #20]
 8006a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a7e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a82:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	f001 fa18 	bl	8007ebc <USB_WritePMA>
 8006a8c:	e3e5      	b.n	800725a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 81bc 	beq.w	8006ea8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d16d      	bne.n	8006c2a <USB_EPStartXfer+0xc5a>
 8006b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6e:	4413      	add	r3, r2
 8006b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	011a      	lsls	r2, r3, #4
 8006b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b82:	4413      	add	r3, r2
 8006b84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b88:	677b      	str	r3, [r7, #116]	; 0x74
 8006b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d112      	bne.n	8006bb8 <USB_EPStartXfer+0xbe8>
 8006b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bb4:	801a      	strh	r2, [r3, #0]
 8006bb6:	e060      	b.n	8006c7a <USB_EPStartXfer+0xcaa>
 8006bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bbe:	d817      	bhi.n	8006bf0 <USB_EPStartXfer+0xc20>
 8006bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <USB_EPStartXfer+0xc10>
 8006bd6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bda:	3301      	adds	r3, #1
 8006bdc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006be0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	029b      	lsls	r3, r3, #10
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	e044      	b.n	8006c7a <USB_EPStartXfer+0xcaa>
 8006bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfe:	f003 031f 	and.w	r3, r3, #31
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d104      	bne.n	8006c10 <USB_EPStartXfer+0xc40>
 8006c06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006c10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	029b      	lsls	r3, r3, #10
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	e027      	b.n	8006c7a <USB_EPStartXfer+0xcaa>
 8006c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d11f      	bne.n	8006c7a <USB_EPStartXfer+0xcaa>
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c50:	4413      	add	r3, r2
 8006c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	011a      	lsls	r2, r3, #4
 8006c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c68:	4413      	add	r3, r2
 8006c6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	895b      	ldrh	r3, [r3, #10]
 8006c86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6959      	ldr	r1, [r3, #20]
 8006c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ca0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ca4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ca8:	6800      	ldr	r0, [r0, #0]
 8006caa:	f001 f907 	bl	8007ebc <USB_WritePMA>
          ep->xfer_buff += len;
 8006cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbe:	441a      	add	r2, r3
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6a1a      	ldr	r2, [r3, #32]
 8006cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d90f      	bls.n	8006d08 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6a1a      	ldr	r2, [r3, #32]
 8006cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf8:	1ad2      	subs	r2, r2, r3
 8006cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	621a      	str	r2, [r3, #32]
 8006d06:	e00e      	b.n	8006d26 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8295 	beq.w	800725a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d16d      	bne.n	8006e1c <USB_EPStartXfer+0xe4c>
 8006d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d60:	4413      	add	r3, r2
 8006d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	011a      	lsls	r2, r3, #4
 8006d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d74:	4413      	add	r3, r2
 8006d76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8006d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d112      	bne.n	8006daa <USB_EPStartXfer+0xdda>
 8006d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	e063      	b.n	8006e72 <USB_EPStartXfer+0xea2>
 8006daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dae:	2b3e      	cmp	r3, #62	; 0x3e
 8006db0:	d817      	bhi.n	8006de2 <USB_EPStartXfer+0xe12>
 8006db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <USB_EPStartXfer+0xe02>
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dcc:	3301      	adds	r3, #1
 8006dce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	029b      	lsls	r3, r3, #10
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e047      	b.n	8006e72 <USB_EPStartXfer+0xea2>
 8006de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <USB_EPStartXfer+0xe32>
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	029b      	lsls	r3, r3, #10
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e18:	801a      	strh	r2, [r3, #0]
 8006e1a:	e02a      	b.n	8006e72 <USB_EPStartXfer+0xea2>
 8006e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d122      	bne.n	8006e72 <USB_EPStartXfer+0xea2>
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	673b      	str	r3, [r7, #112]	; 0x70
 8006e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e4c:	4413      	add	r3, r2
 8006e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8006e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	011a      	lsls	r2, r3, #4
 8006e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e60:	4413      	add	r3, r2
 8006e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	891b      	ldrh	r3, [r3, #8]
 8006e7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6959      	ldr	r1, [r3, #20]
 8006e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ea0:	6800      	ldr	r0, [r0, #0]
 8006ea2:	f001 f80b 	bl	8007ebc <USB_WritePMA>
 8006ea6:	e1d8      	b.n	800725a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d178      	bne.n	8006faa <USB_EPStartXfer+0xfda>
 8006eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006edc:	4413      	add	r3, r2
 8006ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	011a      	lsls	r2, r3, #4
 8006ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006efa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d116      	bne.n	8006f34 <USB_EPStartXfer+0xf64>
 8006f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	e06b      	b.n	800700c <USB_EPStartXfer+0x103c>
 8006f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f38:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3a:	d818      	bhi.n	8006f6e <USB_EPStartXfer+0xf9e>
 8006f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f40:	085b      	lsrs	r3, r3, #1
 8006f42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d004      	beq.n	8006f5c <USB_EPStartXfer+0xf8c>
 8006f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f56:	3301      	adds	r3, #1
 8006f58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	029b      	lsls	r3, r3, #10
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	e04e      	b.n	800700c <USB_EPStartXfer+0x103c>
 8006f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <USB_EPStartXfer+0xfbe>
 8006f84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	029b      	lsls	r3, r3, #10
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e030      	b.n	800700c <USB_EPStartXfer+0x103c>
 8006faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d128      	bne.n	800700c <USB_EPStartXfer+0x103c>
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fde:	4413      	add	r3, r2
 8006fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	011a      	lsls	r2, r3, #4
 8006ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007004:	b29a      	uxth	r2, r3
 8007006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800700a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800700c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	891b      	ldrh	r3, [r3, #8]
 8007018:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800701c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6959      	ldr	r1, [r3, #20]
 8007028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702c:	b29b      	uxth	r3, r3
 800702e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007032:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007036:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	f000 ff3e 	bl	8007ebc <USB_WritePMA>
          ep->xfer_buff += len;
 8007040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	695a      	ldr	r2, [r3, #20]
 800704c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007050:	441a      	add	r2, r3
 8007052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800705e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6a1a      	ldr	r2, [r3, #32]
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	429a      	cmp	r2, r3
 8007078:	d90f      	bls.n	800709a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800707a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6a1a      	ldr	r2, [r3, #32]
 8007086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	621a      	str	r2, [r3, #32]
 8007098:	e00e      	b.n	80070b8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80070aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2200      	movs	r2, #0
 80070b6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80070b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80cc 	beq.w	800725a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d178      	bne.n	80071d2 <USB_EPStartXfer+0x1202>
 80070e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007104:	4413      	add	r3, r2
 8007106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800710a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	011a      	lsls	r2, r3, #4
 8007118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800711c:	4413      	add	r3, r2
 800711e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d116      	bne.n	800715c <USB_EPStartXfer+0x118c>
 800712e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800713a:	b29a      	uxth	r2, r3
 800713c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007152:	b29a      	uxth	r2, r3
 8007154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	e064      	b.n	8007226 <USB_EPStartXfer+0x1256>
 800715c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007160:	2b3e      	cmp	r3, #62	; 0x3e
 8007162:	d818      	bhi.n	8007196 <USB_EPStartXfer+0x11c6>
 8007164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800716e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <USB_EPStartXfer+0x11b4>
 800717a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800717e:	3301      	adds	r3, #1
 8007180:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007188:	b29b      	uxth	r3, r3
 800718a:	029b      	lsls	r3, r3, #10
 800718c:	b29a      	uxth	r2, r3
 800718e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	e047      	b.n	8007226 <USB_EPStartXfer+0x1256>
 8007196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80071a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <USB_EPStartXfer+0x11e6>
 80071ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071b0:	3b01      	subs	r3, #1
 80071b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80071b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	029b      	lsls	r3, r3, #10
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e029      	b.n	8007226 <USB_EPStartXfer+0x1256>
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d121      	bne.n	8007226 <USB_EPStartXfer+0x1256>
 80071e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071f8:	4413      	add	r3, r2
 80071fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	011a      	lsls	r2, r3, #4
 800720c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007210:	4413      	add	r3, r2
 8007212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800721a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721e:	b29a      	uxth	r2, r3
 8007220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007224:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	895b      	ldrh	r3, [r3, #10]
 8007232:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6959      	ldr	r1, [r3, #20]
 8007242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007246:	b29b      	uxth	r3, r3
 8007248:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800724c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007250:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007254:	6800      	ldr	r0, [r0, #0]
 8007256:	f000 fe31 	bl	8007ebc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800725a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800727c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007288:	8013      	strh	r3, [r2, #0]
 800728a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007292:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007296:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800729a:	8812      	ldrh	r2, [r2, #0]
 800729c:	f082 0210 	eor.w	r2, r2, #16
 80072a0:	801a      	strh	r2, [r3, #0]
 80072a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80072aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072ae:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80072b2:	8812      	ldrh	r2, [r2, #0]
 80072b4:	f082 0220 	eor.w	r2, r2, #32
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	441a      	add	r2, r3
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	8013      	strh	r3, [r2, #0]
 80072f2:	f000 bc9f 	b.w	8007c34 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	7b1b      	ldrb	r3, [r3, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 80ae 	bne.w	8007464 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	429a      	cmp	r2, r3
 8007322:	d917      	bls.n	8007354 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699a      	ldr	r2, [r3, #24]
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	1ad2      	subs	r2, r2, r3
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	619a      	str	r2, [r3, #24]
 8007352:	e00e      	b.n	8007372 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2200      	movs	r2, #0
 8007370:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007384:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738e:	b29b      	uxth	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007396:	4413      	add	r3, r2
 8007398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800739c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	011a      	lsls	r2, r3, #4
 80073aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073ae:	4413      	add	r3, r2
 80073b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d116      	bne.n	80073ee <USB_EPStartXfer+0x141e>
 80073c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	e3e8      	b.n	8007bc0 <USB_EPStartXfer+0x1bf0>
 80073ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f2:	2b3e      	cmp	r3, #62	; 0x3e
 80073f4:	d818      	bhi.n	8007428 <USB_EPStartXfer+0x1458>
 80073f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <USB_EPStartXfer+0x1446>
 800740c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007410:	3301      	adds	r3, #1
 8007412:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007416:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800741a:	b29b      	uxth	r3, r3
 800741c:	029b      	lsls	r3, r3, #10
 800741e:	b29a      	uxth	r2, r3
 8007420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007424:	801a      	strh	r2, [r3, #0]
 8007426:	e3cb      	b.n	8007bc0 <USB_EPStartXfer+0x1bf0>
 8007428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <USB_EPStartXfer+0x1478>
 800743e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007442:	3b01      	subs	r3, #1
 8007444:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007448:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800744c:	b29b      	uxth	r3, r3
 800744e:	029b      	lsls	r3, r3, #10
 8007450:	b29b      	uxth	r3, r3
 8007452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	e3ad      	b.n	8007bc0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	78db      	ldrb	r3, [r3, #3]
 8007470:	2b02      	cmp	r3, #2
 8007472:	f040 8200 	bne.w	8007876 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f040 8091 	bne.w	80075aa <USB_EPStartXfer+0x15da>
 8007488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074ac:	4413      	add	r3, r2
 80074ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	011a      	lsls	r2, r3, #4
 80074c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074c4:	4413      	add	r3, r2
 80074c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d116      	bne.n	800750c <USB_EPStartXfer+0x153c>
 80074de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	e083      	b.n	8007614 <USB_EPStartXfer+0x1644>
 800750c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b3e      	cmp	r3, #62	; 0x3e
 800751a:	d820      	bhi.n	800755e <USB_EPStartXfer+0x158e>
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d004      	beq.n	800754c <USB_EPStartXfer+0x157c>
 8007542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007546:	3301      	adds	r3, #1
 8007548:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007550:	b29b      	uxth	r3, r3
 8007552:	029b      	lsls	r3, r3, #10
 8007554:	b29a      	uxth	r2, r3
 8007556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e05a      	b.n	8007614 <USB_EPStartXfer+0x1644>
 800755e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <USB_EPStartXfer+0x15be>
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007588:	3b01      	subs	r3, #1
 800758a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007592:	b29b      	uxth	r3, r3
 8007594:	029b      	lsls	r3, r3, #10
 8007596:	b29b      	uxth	r3, r3
 8007598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	e034      	b.n	8007614 <USB_EPStartXfer+0x1644>
 80075aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d12c      	bne.n	8007614 <USB_EPStartXfer+0x1644>
 80075ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80075c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075de:	4413      	add	r3, r2
 80075e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80075e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	011a      	lsls	r2, r3, #4
 80075f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075f6:	4413      	add	r3, r2
 80075f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f040 8091 	bne.w	8007756 <USB_EPStartXfer+0x1786>
 8007634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007650:	b29b      	uxth	r3, r3
 8007652:	461a      	mov	r2, r3
 8007654:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007658:	4413      	add	r3, r2
 800765a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800765e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	011a      	lsls	r2, r3, #4
 800766c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007670:	4413      	add	r3, r2
 8007672:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007676:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800767a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d116      	bne.n	80076b8 <USB_EPStartXfer+0x16e8>
 800768a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	e07c      	b.n	80077b2 <USB_EPStartXfer+0x17e2>
 80076b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b3e      	cmp	r3, #62	; 0x3e
 80076c6:	d820      	bhi.n	800770a <USB_EPStartXfer+0x173a>
 80076c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <USB_EPStartXfer+0x1728>
 80076ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076f2:	3301      	adds	r3, #1
 80076f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	029b      	lsls	r3, r3, #10
 8007700:	b29a      	uxth	r2, r3
 8007702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e053      	b.n	80077b2 <USB_EPStartXfer+0x17e2>
 800770a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	095b      	lsrs	r3, r3, #5
 8007718:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f003 031f 	and.w	r3, r3, #31
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <USB_EPStartXfer+0x176a>
 8007730:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007734:	3b01      	subs	r3, #1
 8007736:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800773a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800773e:	b29b      	uxth	r3, r3
 8007740:	029b      	lsls	r3, r3, #10
 8007742:	b29b      	uxth	r3, r3
 8007744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800774c:	b29a      	uxth	r2, r3
 800774e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	e02d      	b.n	80077b2 <USB_EPStartXfer+0x17e2>
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d125      	bne.n	80077b2 <USB_EPStartXfer+0x17e2>
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007774:	b29b      	uxth	r3, r3
 8007776:	461a      	mov	r2, r3
 8007778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800777c:	4413      	add	r3, r2
 800777e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	011a      	lsls	r2, r3, #4
 8007790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007794:	4413      	add	r3, r2
 8007796:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800779a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800779e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077b0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 81fe 	beq.w	8007bc0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80077c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80077e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80077e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <USB_EPStartXfer+0x182c>
 80077f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10d      	bne.n	8007818 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077fc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007804:	2b00      	cmp	r3, #0
 8007806:	f040 81db 	bne.w	8007bc0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800780a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 81d4 	bne.w	8007bc0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	441a      	add	r2, r3
 800785c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800786c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007870:	b29b      	uxth	r3, r3
 8007872:	8013      	strh	r3, [r2, #0]
 8007874:	e1a4      	b.n	8007bc0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	78db      	ldrb	r3, [r3, #3]
 8007882:	2b01      	cmp	r3, #1
 8007884:	f040 819a 	bne.w	8007bbc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d917      	bls.n	80078d4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80078b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c4:	1ad2      	subs	r2, r2, r3
 80078c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	619a      	str	r2, [r3, #24]
 80078d2:	e00e      	b.n	80078f2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80078d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2200      	movs	r2, #0
 80078f0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80078f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	785b      	ldrb	r3, [r3, #1]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d178      	bne.n	80079f4 <USB_EPStartXfer+0x1a24>
 8007902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007926:	4413      	add	r3, r2
 8007928:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800792c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	011a      	lsls	r2, r3, #4
 800793a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800793e:	4413      	add	r3, r2
 8007940:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007944:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d116      	bne.n	800797e <USB_EPStartXfer+0x19ae>
 8007950:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800795c:	b29a      	uxth	r2, r3
 800795e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007962:	801a      	strh	r2, [r3, #0]
 8007964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007974:	b29a      	uxth	r2, r3
 8007976:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	e06b      	b.n	8007a56 <USB_EPStartXfer+0x1a86>
 800797e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007982:	2b3e      	cmp	r3, #62	; 0x3e
 8007984:	d818      	bhi.n	80079b8 <USB_EPStartXfer+0x19e8>
 8007986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <USB_EPStartXfer+0x19d6>
 800799c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a0:	3301      	adds	r3, #1
 80079a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	029b      	lsls	r3, r3, #10
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	e04e      	b.n	8007a56 <USB_EPStartXfer+0x1a86>
 80079b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <USB_EPStartXfer+0x1a08>
 80079ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079d2:	3b01      	subs	r3, #1
 80079d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079dc:	b29b      	uxth	r3, r3
 80079de:	029b      	lsls	r3, r3, #10
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	e030      	b.n	8007a56 <USB_EPStartXfer+0x1a86>
 80079f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d128      	bne.n	8007a56 <USB_EPStartXfer+0x1a86>
 8007a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a28:	4413      	add	r3, r2
 8007a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	011a      	lsls	r2, r3, #4
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a40:	4413      	add	r3, r2
 8007a42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	785b      	ldrb	r3, [r3, #1]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d178      	bne.n	8007b66 <USB_EPStartXfer+0x1b96>
 8007a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a98:	4413      	add	r3, r2
 8007a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	011a      	lsls	r2, r3, #4
 8007aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d116      	bne.n	8007af0 <USB_EPStartXfer+0x1b20>
 8007ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad4:	801a      	strh	r2, [r3, #0]
 8007ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aec:	801a      	strh	r2, [r3, #0]
 8007aee:	e067      	b.n	8007bc0 <USB_EPStartXfer+0x1bf0>
 8007af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af4:	2b3e      	cmp	r3, #62	; 0x3e
 8007af6:	d818      	bhi.n	8007b2a <USB_EPStartXfer+0x1b5a>
 8007af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d004      	beq.n	8007b18 <USB_EPStartXfer+0x1b48>
 8007b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b12:	3301      	adds	r3, #1
 8007b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	029b      	lsls	r3, r3, #10
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	e04a      	b.n	8007bc0 <USB_EPStartXfer+0x1bf0>
 8007b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <USB_EPStartXfer+0x1b7a>
 8007b40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b44:	3b01      	subs	r3, #1
 8007b46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	029b      	lsls	r3, r3, #10
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b62:	801a      	strh	r2, [r3, #0]
 8007b64:	e02c      	b.n	8007bc0 <USB_EPStartXfer+0x1bf0>
 8007b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	785b      	ldrb	r3, [r3, #1]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d124      	bne.n	8007bc0 <USB_EPStartXfer+0x1bf0>
 8007b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	011a      	lsls	r2, r3, #4
 8007ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007baa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	e001      	b.n	8007bc0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e03a      	b.n	8007c36 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007bea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007bee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bf2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007bf6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007bfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bfe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d020      	beq.n	8007c94 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c68:	81bb      	strh	r3, [r7, #12]
 8007c6a:	89bb      	ldrh	r3, [r7, #12]
 8007c6c:	f083 0310 	eor.w	r3, r3, #16
 8007c70:	81bb      	strh	r3, [r7, #12]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	441a      	add	r2, r3
 8007c7c:	89bb      	ldrh	r3, [r7, #12]
 8007c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	8013      	strh	r3, [r2, #0]
 8007c92:	e01f      	b.n	8007cd4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	81fb      	strh	r3, [r7, #14]
 8007cac:	89fb      	ldrh	r3, [r7, #14]
 8007cae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cb2:	81fb      	strh	r3, [r7, #14]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	441a      	add	r2, r3
 8007cbe:	89fb      	ldrh	r3, [r7, #14]
 8007cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	7b1b      	ldrb	r3, [r3, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f040 809d 	bne.w	8007e2e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d04c      	beq.n	8007d96 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	823b      	strh	r3, [r7, #16]
 8007d0a:	8a3b      	ldrh	r3, [r7, #16]
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01b      	beq.n	8007d4c <USB_EPClearStall+0x6c>
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2a:	81fb      	strh	r3, [r7, #14]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	441a      	add	r2, r3
 8007d36:	89fb      	ldrh	r3, [r7, #14]
 8007d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	78db      	ldrb	r3, [r3, #3]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d06c      	beq.n	8007e2e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d6a:	81bb      	strh	r3, [r7, #12]
 8007d6c:	89bb      	ldrh	r3, [r7, #12]
 8007d6e:	f083 0320 	eor.w	r3, r3, #32
 8007d72:	81bb      	strh	r3, [r7, #12]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	441a      	add	r2, r3
 8007d7e:	89bb      	ldrh	r3, [r7, #12]
 8007d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	8013      	strh	r3, [r2, #0]
 8007d94:	e04b      	b.n	8007e2e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	82fb      	strh	r3, [r7, #22]
 8007da4:	8afb      	ldrh	r3, [r7, #22]
 8007da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01b      	beq.n	8007de6 <USB_EPClearStall+0x106>
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc4:	82bb      	strh	r3, [r7, #20]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	441a      	add	r2, r3
 8007dd0:	8abb      	ldrh	r3, [r7, #20]
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfc:	827b      	strh	r3, [r7, #18]
 8007dfe:	8a7b      	ldrh	r3, [r7, #18]
 8007e00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e04:	827b      	strh	r3, [r7, #18]
 8007e06:	8a7b      	ldrh	r3, [r7, #18]
 8007e08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e0c:	827b      	strh	r3, [r7, #18]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	441a      	add	r2, r3
 8007e18:	8a7b      	ldrh	r3, [r7, #18]
 8007e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr

08007e3a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2280      	movs	r2, #128	; 0x80
 8007e50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr

08007e60 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bc80      	pop	{r7}
 8007e86:	4770      	bx	lr

08007e88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc80      	pop	{r7}
 8007ea4:	4770      	bx	lr

08007ea6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr

08007ebc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b08d      	sub	sp, #52	; 0x34
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	461a      	mov	r2, r3
 8007eca:	460b      	mov	r3, r1
 8007ecc:	80fb      	strh	r3, [r7, #6]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ed2:	88bb      	ldrh	r3, [r7, #4]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	005a      	lsls	r2, r3, #1
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef4:	e01e      	b.n	8007f34 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	3301      	adds	r3, #1
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	3302      	adds	r3, #2
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	3302      	adds	r3, #2
 8007f26:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	3b01      	subs	r3, #1
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1dd      	bne.n	8007ef6 <USB_WritePMA+0x3a>
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	3734      	adds	r7, #52	; 0x34
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bc80      	pop	{r7}
 8007f44:	4770      	bx	lr

08007f46 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b08b      	sub	sp, #44	; 0x2c
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	4611      	mov	r1, r2
 8007f52:	461a      	mov	r2, r3
 8007f54:	460b      	mov	r3, r1
 8007f56:	80fb      	strh	r3, [r7, #6]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f5c:	88bb      	ldrh	r3, [r7, #4]
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	005a      	lsls	r2, r3, #1
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f78:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f7e:	e01b      	b.n	8007fb8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	0a1b      	lsrs	r3, r3, #8
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	3302      	adds	r3, #2
 8007fb0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e0      	bne.n	8007f80 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007fbe:	88bb      	ldrh	r3, [r7, #4]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	701a      	strb	r2, [r3, #0]
  }
}
 8007fda:	bf00      	nop
 8007fdc:	372c      	adds	r7, #44	; 0x2c
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	2181      	movs	r1, #129	; 0x81
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 fe47 	bl	8009c8e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008006:	2302      	movs	r3, #2
 8008008:	2203      	movs	r2, #3
 800800a:	2101      	movs	r1, #1
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fe3e 	bl	8009c8e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800801a:	2054      	movs	r0, #84	; 0x54
 800801c:	f001 ff4c 	bl	8009eb8 <USBD_static_malloc>
 8008020:	4602      	mov	r2, r0
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d102      	bne.n	8008038 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008032:	2301      	movs	r3, #1
 8008034:	73fb      	strb	r3, [r7, #15]
 8008036:	e012      	b.n	800805e <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803e:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	2101      	movs	r1, #1
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f001 ff09 	bl	8009e70 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008074:	2181      	movs	r1, #129	; 0x81
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 fe2f 	bl	8009cda <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008082:	2101      	movs	r1, #1
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 fe28 	bl	8009cda <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00e      	beq.n	80080ba <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 ff0f 	bl	8009ed0 <USBD_static_free>
    pdev->pClassData = NULL;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d051      	beq.n	8008196 <USBD_CUSTOM_HID_Setup+0xd2>
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	f040 80d8 	bne.w	80082a8 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	3b02      	subs	r3, #2
 80080fe:	2b09      	cmp	r3, #9
 8008100:	d841      	bhi.n	8008186 <USBD_CUSTOM_HID_Setup+0xc2>
 8008102:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <USBD_CUSTOM_HID_Setup+0x44>)
 8008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008108:	08008161 	.word	0x08008161
 800810c:	0800813f 	.word	0x0800813f
 8008110:	08008187 	.word	0x08008187
 8008114:	08008187 	.word	0x08008187
 8008118:	08008187 	.word	0x08008187
 800811c:	08008187 	.word	0x08008187
 8008120:	08008187 	.word	0x08008187
 8008124:	08008171 	.word	0x08008171
 8008128:	0800814f 	.word	0x0800814f
 800812c:	08008131 	.word	0x08008131
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	885b      	ldrh	r3, [r3, #2]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800813c:	e02a      	b.n	8008194 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	3340      	adds	r3, #64	; 0x40
 8008142:	2201      	movs	r2, #1
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 f999 	bl	800947e <USBD_CtlSendData>
          break;
 800814c:	e022      	b.n	8008194 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	885b      	ldrh	r3, [r3, #2]
 8008152:	0a1b      	lsrs	r3, r3, #8
 8008154:	b29b      	uxth	r3, r3
 8008156:	b2db      	uxtb	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800815e:	e019      	b.n	8008194 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	3344      	adds	r3, #68	; 0x44
 8008164:	2201      	movs	r2, #1
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f988 	bl	800947e <USBD_CtlSendData>
          break;
 800816e:	e011      	b.n	8008194 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2201      	movs	r2, #1
 8008174:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008176:	6939      	ldr	r1, [r7, #16]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	88db      	ldrh	r3, [r3, #6]
 800817c:	461a      	mov	r2, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f9ab 	bl	80094da <USBD_CtlPrepareRx>
          break;
 8008184:	e006      	b.n	8008194 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f90e 	bl	80093aa <USBD_CtlError>
          ret = USBD_FAIL;
 800818e:	2302      	movs	r3, #2
 8008190:	75fb      	strb	r3, [r7, #23]
          break;
 8008192:	bf00      	nop
      }
      break;
 8008194:	e08f      	b.n	80082b6 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b0b      	cmp	r3, #11
 800819c:	d87c      	bhi.n	8008298 <USBD_CUSTOM_HID_Setup+0x1d4>
 800819e:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <USBD_CUSTOM_HID_Setup+0xe0>)
 80081a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a4:	080081d5 	.word	0x080081d5
 80081a8:	08008299 	.word	0x08008299
 80081ac:	08008299 	.word	0x08008299
 80081b0:	08008299 	.word	0x08008299
 80081b4:	08008299 	.word	0x08008299
 80081b8:	08008299 	.word	0x08008299
 80081bc:	080081fd 	.word	0x080081fd
 80081c0:	08008299 	.word	0x08008299
 80081c4:	08008299 	.word	0x08008299
 80081c8:	08008299 	.word	0x08008299
 80081cc:	0800824b 	.word	0x0800824b
 80081d0:	08008273 	.word	0x08008273
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d107      	bne.n	80081ee <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80081de:	f107 030e 	add.w	r3, r7, #14
 80081e2:	2202      	movs	r2, #2
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 f949 	bl	800947e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081ec:	e05b      	b.n	80082a6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f8da 	bl	80093aa <USBD_CtlError>
            ret = USBD_FAIL;
 80081f6:	2302      	movs	r3, #2
 80081f8:	75fb      	strb	r3, [r7, #23]
          break;
 80081fa:	e054      	b.n	80082a6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	885b      	ldrh	r3, [r3, #2]
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b22      	cmp	r3, #34	; 0x22
 8008206:	d10b      	bne.n	8008220 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	88db      	ldrh	r3, [r3, #6]
 800820c:	2b36      	cmp	r3, #54	; 0x36
 800820e:	bf28      	it	cs
 8008210:	2336      	movcs	r3, #54	; 0x36
 8008212:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	61bb      	str	r3, [r7, #24]
 800821e:	e00d      	b.n	800823c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	885b      	ldrh	r3, [r3, #2]
 8008224:	0a1b      	lsrs	r3, r3, #8
 8008226:	b29b      	uxth	r3, r3
 8008228:	2b21      	cmp	r3, #33	; 0x21
 800822a:	d107      	bne.n	800823c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800822c:	4b24      	ldr	r3, [pc, #144]	; (80082c0 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800822e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	2b09      	cmp	r3, #9
 8008236:	bf28      	it	cs
 8008238:	2309      	movcs	r3, #9
 800823a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800823c:	8bfb      	ldrh	r3, [r7, #30]
 800823e:	461a      	mov	r2, r3
 8008240:	69b9      	ldr	r1, [r7, #24]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 f91b 	bl	800947e <USBD_CtlSendData>
          break;
 8008248:	e02d      	b.n	80082a6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008250:	2b03      	cmp	r3, #3
 8008252:	d107      	bne.n	8008264 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3348      	adds	r3, #72	; 0x48
 8008258:	2201      	movs	r2, #1
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 f90e 	bl	800947e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008262:	e020      	b.n	80082a6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 f89f 	bl	80093aa <USBD_CtlError>
            ret = USBD_FAIL;
 800826c:	2302      	movs	r3, #2
 800826e:	75fb      	strb	r3, [r7, #23]
          break;
 8008270:	e019      	b.n	80082a6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008278:	2b03      	cmp	r3, #3
 800827a:	d106      	bne.n	800828a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	885b      	ldrh	r3, [r3, #2]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008288:	e00d      	b.n	80082a6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 f88c 	bl	80093aa <USBD_CtlError>
            ret = USBD_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	75fb      	strb	r3, [r7, #23]
          break;
 8008296:	e006      	b.n	80082a6 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 f885 	bl	80093aa <USBD_CtlError>
          ret = USBD_FAIL;
 80082a0:	2302      	movs	r3, #2
 80082a2:	75fb      	strb	r3, [r7, #23]
          break;
 80082a4:	bf00      	nop
      }
      break;
 80082a6:	e006      	b.n	80082b6 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 f87d 	bl	80093aa <USBD_CtlError>
      ret = USBD_FAIL;
 80082b0:	2302      	movs	r3, #2
 80082b2:	75fb      	strb	r3, [r7, #23]
      break;
 80082b4:	bf00      	nop
  }
  return ret;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000110 	.word	0x20000110

080082c4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d111      	bne.n	8008308 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	2181      	movs	r1, #129	; 0x81
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f001 fd94 	bl	8009e2a <USBD_LL_Transmit>
 8008302:	e001      	b.n	8008308 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2229      	movs	r2, #41	; 0x29
 8008320:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008322:	4b03      	ldr	r3, [pc, #12]	; (8008330 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	bc80      	pop	{r7}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	2000008c 	.word	0x2000008c

08008334 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2229      	movs	r2, #41	; 0x29
 8008340:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008342:	4b03      	ldr	r3, [pc, #12]	; (8008350 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	200000b8 	.word	0x200000b8

08008354 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2229      	movs	r2, #41	; 0x29
 8008360:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008362:	4b03      	ldr	r3, [pc, #12]	; (8008370 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	200000e4 	.word	0x200000e4

08008374 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr

08008398 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083aa:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4610      	mov	r0, r2
 80083b8:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	2340      	movs	r3, #64	; 0x40
 80083be:	2101      	movs	r1, #1
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 fd55 	bl	8009e70 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083de:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d109      	bne.n	80083fc <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4610      	mov	r0, r2
 80083f4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	220a      	movs	r2, #10
 8008414:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008416:	4b03      	ldr	r3, [pc, #12]	; (8008424 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	2000011c 	.word	0x2000011c

08008428 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008432:	2302      	movs	r3, #2
 8008434:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr

08008454 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4613      	mov	r3, r2
 8008460:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008468:	2302      	movs	r3, #2
 800846a:	e01a      	b.n	80084a2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	79fa      	ldrb	r2, [r7, #7]
 8008498:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f001 fb8c 	bl	8009bb8 <USBD_LL_Init>

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b085      	sub	sp, #20
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d006      	beq.n	80084cc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]
 80084ca:	e001      	b.n	80084d0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80084cc:	2302      	movs	r3, #2
 80084ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr

080084dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 fbb7 	bl	8009c58 <USBD_LL_Start>

  return USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr

08008508 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008514:	2302      	movs	r3, #2
 8008516:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00c      	beq.n	800853c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	4611      	mov	r1, r2
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fed7 	bl	8009332 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008592:	461a      	mov	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d016      	beq.n	80085d6 <USBD_LL_SetupStage+0x6a>
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d81c      	bhi.n	80085e6 <USBD_LL_SetupStage+0x7a>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <USBD_LL_SetupStage+0x4a>
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d008      	beq.n	80085c6 <USBD_LL_SetupStage+0x5a>
 80085b4:	e017      	b.n	80085e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9ca 	bl	8008958 <USBD_StdDevReq>
      break;
 80085c4:	e01a      	b.n	80085fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa2c 	bl	8008a2c <USBD_StdItfReq>
      break;
 80085d4:	e012      	b.n	80085fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa6c 	bl	8008abc <USBD_StdEPReq>
      break;
 80085e4:	e00a      	b.n	80085fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f001 fb8f 	bl	8009d18 <USBD_LL_StallEP>
      break;
 80085fa:	bf00      	nop
  }

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	460b      	mov	r3, r1
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d14b      	bne.n	80086b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008620:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008628:	2b03      	cmp	r3, #3
 800862a:	d134      	bne.n	8008696 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d919      	bls.n	800866c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	1ad2      	subs	r2, r2, r3
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800864e:	429a      	cmp	r2, r3
 8008650:	d203      	bcs.n	800865a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008656:	b29b      	uxth	r3, r3
 8008658:	e002      	b.n	8008660 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800865e:	b29b      	uxth	r3, r3
 8008660:	461a      	mov	r2, r3
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 ff56 	bl	8009516 <USBD_CtlContinueRx>
 800866a:	e038      	b.n	80086de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800867e:	2b03      	cmp	r3, #3
 8008680:	d105      	bne.n	800868e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 ff53 	bl	800953a <USBD_CtlSendStatus>
 8008694:	e023      	b.n	80086de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800869c:	2b05      	cmp	r3, #5
 800869e:	d11e      	bne.n	80086de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80086a8:	2100      	movs	r1, #0
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f001 fb34 	bl	8009d18 <USBD_LL_StallEP>
 80086b0:	e015      	b.n	80086de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00d      	beq.n	80086da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d108      	bne.n	80086da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	7afa      	ldrb	r2, [r7, #11]
 80086d2:	4611      	mov	r1, r2
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	4798      	blx	r3
 80086d8:	e001      	b.n	80086de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086da:	2302      	movs	r3, #2
 80086dc:	e000      	b.n	80086e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	460b      	mov	r3, r1
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d17f      	bne.n	80087fc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3314      	adds	r3, #20
 8008700:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008708:	2b02      	cmp	r3, #2
 800870a:	d15c      	bne.n	80087c6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	429a      	cmp	r2, r3
 8008716:	d915      	bls.n	8008744 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	1ad2      	subs	r2, r2, r3
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	b29b      	uxth	r3, r3
 800872c:	461a      	mov	r2, r3
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 fec0 	bl	80094b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008736:	2300      	movs	r3, #0
 8008738:	2200      	movs	r2, #0
 800873a:	2100      	movs	r1, #0
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f001 fb97 	bl	8009e70 <USBD_LL_PrepareReceive>
 8008742:	e04e      	b.n	80087e2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	6912      	ldr	r2, [r2, #16]
 800874c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008750:	fb01 f202 	mul.w	r2, r1, r2
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d11c      	bne.n	8008794 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008762:	429a      	cmp	r2, r3
 8008764:	d316      	bcc.n	8008794 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008770:	429a      	cmp	r2, r3
 8008772:	d20f      	bcs.n	8008794 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008774:	2200      	movs	r2, #0
 8008776:	2100      	movs	r1, #0
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 fe9c 	bl	80094b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008786:	2300      	movs	r3, #0
 8008788:	2200      	movs	r2, #0
 800878a:	2100      	movs	r1, #0
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f001 fb6f 	bl	8009e70 <USBD_LL_PrepareReceive>
 8008792:	e026      	b.n	80087e2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00a      	beq.n	80087b6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d105      	bne.n	80087b6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80087b6:	2180      	movs	r1, #128	; 0x80
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f001 faad 	bl	8009d18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fece 	bl	8009560 <USBD_CtlReceiveStatus>
 80087c4:	e00d      	b.n	80087e2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d004      	beq.n	80087da <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d103      	bne.n	80087e2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80087da:	2180      	movs	r1, #128	; 0x80
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f001 fa9b 	bl	8009d18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d11d      	bne.n	8008828 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f7ff fe81 	bl	80084f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087fa:	e015      	b.n	8008828 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00d      	beq.n	8008824 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800880e:	2b03      	cmp	r3, #3
 8008810:	d108      	bne.n	8008824 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	7afa      	ldrb	r2, [r7, #11]
 800881c:	4611      	mov	r1, r2
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	4798      	blx	r3
 8008822:	e001      	b.n	8008828 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008824:	2302      	movs	r3, #2
 8008826:	e000      	b.n	800882a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800883a:	2340      	movs	r3, #64	; 0x40
 800883c:	2200      	movs	r2, #0
 800883e:	2100      	movs	r1, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fa24 	bl	8009c8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2240      	movs	r2, #64	; 0x40
 8008852:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008856:	2340      	movs	r3, #64	; 0x40
 8008858:	2200      	movs	r2, #0
 800885a:	2180      	movs	r1, #128	; 0x80
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 fa16 	bl	8009c8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2240      	movs	r2, #64	; 0x40
 800886c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6852      	ldr	r2, [r2, #4]
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	4611      	mov	r1, r2
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
  }

  return USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr

080088d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2204      	movs	r2, #4
 80088ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bc80      	pop	{r7}
 80088f8:	4770      	bx	lr

080088fa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008908:	2b04      	cmp	r3, #4
 800890a:	d105      	bne.n	8008918 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr

08008924 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008932:	2b03      	cmp	r3, #3
 8008934:	d10b      	bne.n	800894e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800896e:	2b40      	cmp	r3, #64	; 0x40
 8008970:	d005      	beq.n	800897e <USBD_StdDevReq+0x26>
 8008972:	2b40      	cmp	r3, #64	; 0x40
 8008974:	d84f      	bhi.n	8008a16 <USBD_StdDevReq+0xbe>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d009      	beq.n	800898e <USBD_StdDevReq+0x36>
 800897a:	2b20      	cmp	r3, #32
 800897c:	d14b      	bne.n	8008a16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	4798      	blx	r3
      break;
 800898c:	e048      	b.n	8008a20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b09      	cmp	r3, #9
 8008994:	d839      	bhi.n	8008a0a <USBD_StdDevReq+0xb2>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <USBD_StdDevReq+0x44>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089ed 	.word	0x080089ed
 80089a0:	08008a01 	.word	0x08008a01
 80089a4:	08008a0b 	.word	0x08008a0b
 80089a8:	080089f7 	.word	0x080089f7
 80089ac:	08008a0b 	.word	0x08008a0b
 80089b0:	080089cf 	.word	0x080089cf
 80089b4:	080089c5 	.word	0x080089c5
 80089b8:	08008a0b 	.word	0x08008a0b
 80089bc:	080089e3 	.word	0x080089e3
 80089c0:	080089d9 	.word	0x080089d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f9dc 	bl	8008d84 <USBD_GetDescriptor>
          break;
 80089cc:	e022      	b.n	8008a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fb3f 	bl	8009054 <USBD_SetAddress>
          break;
 80089d6:	e01d      	b.n	8008a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fb7e 	bl	80090dc <USBD_SetConfig>
          break;
 80089e0:	e018      	b.n	8008a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fc07 	bl	80091f8 <USBD_GetConfig>
          break;
 80089ea:	e013      	b.n	8008a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fc37 	bl	8009262 <USBD_GetStatus>
          break;
 80089f4:	e00e      	b.n	8008a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fc65 	bl	80092c8 <USBD_SetFeature>
          break;
 80089fe:	e009      	b.n	8008a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fc74 	bl	80092f0 <USBD_ClrFeature>
          break;
 8008a08:	e004      	b.n	8008a14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fccc 	bl	80093aa <USBD_CtlError>
          break;
 8008a12:	bf00      	nop
      }
      break;
 8008a14:	e004      	b.n	8008a20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fcc6 	bl	80093aa <USBD_CtlError>
      break;
 8008a1e:	bf00      	nop
  }

  return ret;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop

08008a2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a42:	2b40      	cmp	r3, #64	; 0x40
 8008a44:	d005      	beq.n	8008a52 <USBD_StdItfReq+0x26>
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d82e      	bhi.n	8008aa8 <USBD_StdItfReq+0x7c>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <USBD_StdItfReq+0x26>
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d12a      	bne.n	8008aa8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d81d      	bhi.n	8008a9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	889b      	ldrh	r3, [r3, #4]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d813      	bhi.n	8008a90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	4798      	blx	r3
 8008a76:	4603      	mov	r3, r0
 8008a78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	88db      	ldrh	r3, [r3, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d110      	bne.n	8008aa4 <USBD_StdItfReq+0x78>
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10d      	bne.n	8008aa4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fd56 	bl	800953a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a8e:	e009      	b.n	8008aa4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fc89 	bl	80093aa <USBD_CtlError>
          break;
 8008a98:	e004      	b.n	8008aa4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fc84 	bl	80093aa <USBD_CtlError>
          break;
 8008aa2:	e000      	b.n	8008aa6 <USBD_StdItfReq+0x7a>
          break;
 8008aa4:	bf00      	nop
      }
      break;
 8008aa6:	e004      	b.n	8008ab2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fc7d 	bl	80093aa <USBD_CtlError>
      break;
 8008ab0:	bf00      	nop
  }

  return USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	889b      	ldrh	r3, [r3, #4]
 8008ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad8:	2b40      	cmp	r3, #64	; 0x40
 8008ada:	d007      	beq.n	8008aec <USBD_StdEPReq+0x30>
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	f200 8146 	bhi.w	8008d6e <USBD_StdEPReq+0x2b2>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <USBD_StdEPReq+0x40>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	f040 8141 	bne.w	8008d6e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
      break;
 8008afa:	e13d      	b.n	8008d78 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	d10a      	bne.n	8008b1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	4798      	blx	r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	e12d      	b.n	8008d7a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	785b      	ldrb	r3, [r3, #1]
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d007      	beq.n	8008b36 <USBD_StdEPReq+0x7a>
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	f300 811b 	bgt.w	8008d62 <USBD_StdEPReq+0x2a6>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d072      	beq.n	8008c16 <USBD_StdEPReq+0x15a>
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d03a      	beq.n	8008baa <USBD_StdEPReq+0xee>
 8008b34:	e115      	b.n	8008d62 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d002      	beq.n	8008b46 <USBD_StdEPReq+0x8a>
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d015      	beq.n	8008b70 <USBD_StdEPReq+0xb4>
 8008b44:	e02b      	b.n	8008b9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00c      	beq.n	8008b66 <USBD_StdEPReq+0xaa>
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	2b80      	cmp	r3, #128	; 0x80
 8008b50:	d009      	beq.n	8008b66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 f8de 	bl	8009d18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b5c:	2180      	movs	r1, #128	; 0x80
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 f8da 	bl	8009d18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b64:	e020      	b.n	8008ba8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fc1e 	bl	80093aa <USBD_CtlError>
              break;
 8008b6e:	e01b      	b.n	8008ba8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	885b      	ldrh	r3, [r3, #2]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10e      	bne.n	8008b96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <USBD_StdEPReq+0xda>
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	2b80      	cmp	r3, #128	; 0x80
 8008b82:	d008      	beq.n	8008b96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	88db      	ldrh	r3, [r3, #6]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 f8c1 	bl	8009d18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fccf 	bl	800953a <USBD_CtlSendStatus>

              break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fc02 	bl	80093aa <USBD_CtlError>
              break;
 8008ba6:	bf00      	nop
          }
          break;
 8008ba8:	e0e0      	b.n	8008d6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d002      	beq.n	8008bba <USBD_StdEPReq+0xfe>
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d015      	beq.n	8008be4 <USBD_StdEPReq+0x128>
 8008bb8:	e026      	b.n	8008c08 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00c      	beq.n	8008bda <USBD_StdEPReq+0x11e>
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d009      	beq.n	8008bda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 f8a4 	bl	8009d18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bd0:	2180      	movs	r1, #128	; 0x80
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 f8a0 	bl	8009d18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bd8:	e01c      	b.n	8008c14 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fbe4 	bl	80093aa <USBD_CtlError>
              break;
 8008be2:	e017      	b.n	8008c14 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	885b      	ldrh	r3, [r3, #2]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d112      	bne.n	8008c12 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d004      	beq.n	8008c00 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f001 f8ab 	bl	8009d56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fc9a 	bl	800953a <USBD_CtlSendStatus>
              }
              break;
 8008c06:	e004      	b.n	8008c12 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fbcd 	bl	80093aa <USBD_CtlError>
              break;
 8008c10:	e000      	b.n	8008c14 <USBD_StdEPReq+0x158>
              break;
 8008c12:	bf00      	nop
          }
          break;
 8008c14:	e0aa      	b.n	8008d6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d002      	beq.n	8008c26 <USBD_StdEPReq+0x16a>
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d032      	beq.n	8008c8a <USBD_StdEPReq+0x1ce>
 8008c24:	e097      	b.n	8008d56 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d007      	beq.n	8008c3c <USBD_StdEPReq+0x180>
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d004      	beq.n	8008c3c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fbb8 	bl	80093aa <USBD_CtlError>
                break;
 8008c3a:	e091      	b.n	8008d60 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da0b      	bge.n	8008c5c <USBD_StdEPReq+0x1a0>
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	3310      	adds	r3, #16
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	4413      	add	r3, r2
 8008c58:	3304      	adds	r3, #4
 8008c5a:	e00b      	b.n	8008c74 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4413      	add	r3, r2
 8008c72:	3304      	adds	r3, #4
 8008c74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fbfb 	bl	800947e <USBD_CtlSendData>
              break;
 8008c88:	e06a      	b.n	8008d60 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da11      	bge.n	8008cb6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3318      	adds	r3, #24
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d117      	bne.n	8008cdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fb7b 	bl	80093aa <USBD_CtlError>
                  break;
 8008cb4:	e054      	b.n	8008d60 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	f003 020f 	and.w	r2, r3, #15
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fb68 	bl	80093aa <USBD_CtlError>
                  break;
 8008cda:	e041      	b.n	8008d60 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	da0b      	bge.n	8008cfc <USBD_StdEPReq+0x240>
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	3310      	adds	r3, #16
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	e00b      	b.n	8008d14 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	4413      	add	r3, r2
 8008d12:	3304      	adds	r3, #4
 8008d14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <USBD_StdEPReq+0x266>
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	2b80      	cmp	r3, #128	; 0x80
 8008d20:	d103      	bne.n	8008d2a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	e00e      	b.n	8008d48 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 f830 	bl	8009d94 <USBD_LL_IsStallEP>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e002      	b.n	8008d48 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fb95 	bl	800947e <USBD_CtlSendData>
              break;
 8008d54:	e004      	b.n	8008d60 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fb26 	bl	80093aa <USBD_CtlError>
              break;
 8008d5e:	bf00      	nop
          }
          break;
 8008d60:	e004      	b.n	8008d6c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fb20 	bl	80093aa <USBD_CtlError>
          break;
 8008d6a:	bf00      	nop
      }
      break;
 8008d6c:	e004      	b.n	8008d78 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fb1a 	bl	80093aa <USBD_CtlError>
      break;
 8008d76:	bf00      	nop
  }

  return ret;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	885b      	ldrh	r3, [r3, #2]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	2b06      	cmp	r3, #6
 8008da6:	f200 8128 	bhi.w	8008ffa <USBD_GetDescriptor+0x276>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <USBD_GetDescriptor+0x2c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dcd 	.word	0x08008dcd
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008e25 	.word	0x08008e25
 8008dbc:	08008ffb 	.word	0x08008ffb
 8008dc0:	08008ffb 	.word	0x08008ffb
 8008dc4:	08008f9b 	.word	0x08008f9b
 8008dc8:	08008fc7 	.word	0x08008fc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7c12      	ldrb	r2, [r2, #16]
 8008dd8:	f107 0108 	add.w	r1, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
      break;
 8008de2:	e112      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7c1b      	ldrb	r3, [r3, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10d      	bne.n	8008e08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df4:	f107 0208 	add.w	r2, r7, #8
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	2202      	movs	r2, #2
 8008e04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e06:	e100      	b.n	800900a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	f107 0208 	add.w	r2, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
      break;
 8008e22:	e0f2      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	885b      	ldrh	r3, [r3, #2]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	f200 80ac 	bhi.w	8008f88 <USBD_GetDescriptor+0x204>
 8008e30:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <USBD_GetDescriptor+0xb4>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e51 	.word	0x08008e51
 8008e3c:	08008e85 	.word	0x08008e85
 8008e40:	08008eb9 	.word	0x08008eb9
 8008e44:	08008eed 	.word	0x08008eed
 8008e48:	08008f21 	.word	0x08008f21
 8008e4c:	08008f55 	.word	0x08008f55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7c12      	ldrb	r2, [r2, #16]
 8008e68:	f107 0108 	add.w	r1, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e72:	e091      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa97 	bl	80093aa <USBD_CtlError>
            err++;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	72fb      	strb	r3, [r7, #11]
          break;
 8008e82:	e089      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7c12      	ldrb	r2, [r2, #16]
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ea6:	e077      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa7d 	bl	80093aa <USBD_CtlError>
            err++;
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008eb6:	e06f      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	7c12      	ldrb	r2, [r2, #16]
 8008ed0:	f107 0108 	add.w	r1, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eda:	e05d      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa63 	bl	80093aa <USBD_CtlError>
            err++;
 8008ee4:	7afb      	ldrb	r3, [r7, #11]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eea:	e055      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0e:	e043      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa49 	bl	80093aa <USBD_CtlError>
            err++;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1e:	e03b      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f42:	e029      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa2f 	bl	80093aa <USBD_CtlError>
            err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
          break;
 8008f52:	e021      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e00f      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa15 	bl	80093aa <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e007      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa0d 	bl	80093aa <USBD_CtlError>
          err++;
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	3301      	adds	r3, #1
 8008f94:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f96:	e038      	b.n	800900a <USBD_GetDescriptor+0x286>
 8008f98:	e037      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7c1b      	ldrb	r3, [r3, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	f107 0208 	add.w	r2, r7, #8
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4798      	blx	r3
 8008fb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fb4:	e029      	b.n	800900a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f9f6 	bl	80093aa <USBD_CtlError>
        err++;
 8008fbe:	7afb      	ldrb	r3, [r7, #11]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc4:	e021      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7c1b      	ldrb	r3, [r3, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10d      	bne.n	8008fea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	f107 0208 	add.w	r2, r7, #8
 8008fda:	4610      	mov	r0, r2
 8008fdc:	4798      	blx	r3
 8008fde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	2207      	movs	r2, #7
 8008fe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe8:	e00f      	b.n	800900a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f9dc 	bl	80093aa <USBD_CtlError>
        err++;
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff8:	e007      	b.n	800900a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f9d4 	bl	80093aa <USBD_CtlError>
      err++;
 8009002:	7afb      	ldrb	r3, [r7, #11]
 8009004:	3301      	adds	r3, #1
 8009006:	72fb      	strb	r3, [r7, #11]
      break;
 8009008:	bf00      	nop
  }

  if (err != 0U)
 800900a:	7afb      	ldrb	r3, [r7, #11]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11c      	bne.n	800904a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009010:	893b      	ldrh	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d011      	beq.n	800903a <USBD_GetDescriptor+0x2b6>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	88db      	ldrh	r3, [r3, #6]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00d      	beq.n	800903a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	88da      	ldrh	r2, [r3, #6]
 8009022:	893b      	ldrh	r3, [r7, #8]
 8009024:	4293      	cmp	r3, r2
 8009026:	bf28      	it	cs
 8009028:	4613      	movcs	r3, r2
 800902a:	b29b      	uxth	r3, r3
 800902c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800902e:	893b      	ldrh	r3, [r7, #8]
 8009030:	461a      	mov	r2, r3
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fa22 	bl	800947e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	88db      	ldrh	r3, [r3, #6]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa79 	bl	800953a <USBD_CtlSendStatus>
 8009048:	e000      	b.n	800904c <USBD_GetDescriptor+0x2c8>
    return;
 800904a:	bf00      	nop
    }
  }
}
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop

08009054 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	889b      	ldrh	r3, [r3, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d130      	bne.n	80090c8 <USBD_SetAddress+0x74>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	88db      	ldrh	r3, [r3, #6]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d12c      	bne.n	80090c8 <USBD_SetAddress+0x74>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	885b      	ldrh	r3, [r3, #2]
 8009072:	2b7f      	cmp	r3, #127	; 0x7f
 8009074:	d828      	bhi.n	80090c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	885b      	ldrh	r3, [r3, #2]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009088:	2b03      	cmp	r3, #3
 800908a:	d104      	bne.n	8009096 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f98b 	bl	80093aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009094:	e01d      	b.n	80090d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	7bfa      	ldrb	r2, [r7, #15]
 800909a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fea2 	bl	8009dec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fa46 	bl	800953a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090bc:	e009      	b.n	80090d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c6:	e004      	b.n	80090d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f96d 	bl	80093aa <USBD_CtlError>
  }
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	885b      	ldrh	r3, [r3, #2]
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	4b41      	ldr	r3, [pc, #260]	; (80091f4 <USBD_SetConfig+0x118>)
 80090ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090f0:	4b40      	ldr	r3, [pc, #256]	; (80091f4 <USBD_SetConfig+0x118>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d904      	bls.n	8009102 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f955 	bl	80093aa <USBD_CtlError>
 8009100:	e075      	b.n	80091ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009108:	2b02      	cmp	r3, #2
 800910a:	d002      	beq.n	8009112 <USBD_SetConfig+0x36>
 800910c:	2b03      	cmp	r3, #3
 800910e:	d023      	beq.n	8009158 <USBD_SetConfig+0x7c>
 8009110:	e062      	b.n	80091d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009112:	4b38      	ldr	r3, [pc, #224]	; (80091f4 <USBD_SetConfig+0x118>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d01a      	beq.n	8009150 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800911a:	4b36      	ldr	r3, [pc, #216]	; (80091f4 <USBD_SetConfig+0x118>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2203      	movs	r2, #3
 8009128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800912c:	4b31      	ldr	r3, [pc, #196]	; (80091f4 <USBD_SetConfig+0x118>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7ff f9e8 	bl	8008508 <USBD_SetClassConfig>
 8009138:	4603      	mov	r3, r0
 800913a:	2b02      	cmp	r3, #2
 800913c:	d104      	bne.n	8009148 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f932 	bl	80093aa <USBD_CtlError>
            return;
 8009146:	e052      	b.n	80091ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9f6 	bl	800953a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800914e:	e04e      	b.n	80091ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f9f2 	bl	800953a <USBD_CtlSendStatus>
        break;
 8009156:	e04a      	b.n	80091ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009158:	4b26      	ldr	r3, [pc, #152]	; (80091f4 <USBD_SetConfig+0x118>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d112      	bne.n	8009186 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009168:	4b22      	ldr	r3, [pc, #136]	; (80091f4 <USBD_SetConfig+0x118>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009172:	4b20      	ldr	r3, [pc, #128]	; (80091f4 <USBD_SetConfig+0x118>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff f9e4 	bl	8008546 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9db 	bl	800953a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009184:	e033      	b.n	80091ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009186:	4b1b      	ldr	r3, [pc, #108]	; (80091f4 <USBD_SetConfig+0x118>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	429a      	cmp	r2, r3
 8009192:	d01d      	beq.n	80091d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff f9d2 	bl	8008546 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80091a2:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <USBD_SetConfig+0x118>)
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091ac:	4b11      	ldr	r3, [pc, #68]	; (80091f4 <USBD_SetConfig+0x118>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff f9a8 	bl	8008508 <USBD_SetClassConfig>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d104      	bne.n	80091c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f8f2 	bl	80093aa <USBD_CtlError>
            return;
 80091c6:	e012      	b.n	80091ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f9b6 	bl	800953a <USBD_CtlSendStatus>
        break;
 80091ce:	e00e      	b.n	80091ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f9b2 	bl	800953a <USBD_CtlSendStatus>
        break;
 80091d6:	e00a      	b.n	80091ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8e5 	bl	80093aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091e0:	4b04      	ldr	r3, [pc, #16]	; (80091f4 <USBD_SetConfig+0x118>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff f9ad 	bl	8008546 <USBD_ClrClassConfig>
        break;
 80091ec:	bf00      	nop
    }
  }
}
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000348 	.word	0x20000348

080091f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d004      	beq.n	8009214 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f8cc 	bl	80093aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009212:	e022      	b.n	800925a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800921a:	2b02      	cmp	r3, #2
 800921c:	dc02      	bgt.n	8009224 <USBD_GetConfig+0x2c>
 800921e:	2b00      	cmp	r3, #0
 8009220:	dc03      	bgt.n	800922a <USBD_GetConfig+0x32>
 8009222:	e015      	b.n	8009250 <USBD_GetConfig+0x58>
 8009224:	2b03      	cmp	r3, #3
 8009226:	d00b      	beq.n	8009240 <USBD_GetConfig+0x48>
 8009228:	e012      	b.n	8009250 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3308      	adds	r3, #8
 8009234:	2201      	movs	r2, #1
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f920 	bl	800947e <USBD_CtlSendData>
        break;
 800923e:	e00c      	b.n	800925a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	2201      	movs	r2, #1
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f918 	bl	800947e <USBD_CtlSendData>
        break;
 800924e:	e004      	b.n	800925a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f8a9 	bl	80093aa <USBD_CtlError>
        break;
 8009258:	bf00      	nop
}
 800925a:	bf00      	nop
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009272:	3b01      	subs	r3, #1
 8009274:	2b02      	cmp	r3, #2
 8009276:	d81e      	bhi.n	80092b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	88db      	ldrh	r3, [r3, #6]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d004      	beq.n	800928a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f891 	bl	80093aa <USBD_CtlError>
        break;
 8009288:	e01a      	b.n	80092c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f043 0202 	orr.w	r2, r3, #2
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	330c      	adds	r3, #12
 80092aa:	2202      	movs	r2, #2
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f8e5 	bl	800947e <USBD_CtlSendData>
      break;
 80092b4:	e004      	b.n	80092c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f876 	bl	80093aa <USBD_CtlError>
      break;
 80092be:	bf00      	nop
  }
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	885b      	ldrh	r3, [r3, #2]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d106      	bne.n	80092e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f929 	bl	800953a <USBD_CtlSendStatus>
  }
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009300:	3b01      	subs	r3, #1
 8009302:	2b02      	cmp	r3, #2
 8009304:	d80b      	bhi.n	800931e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	885b      	ldrh	r3, [r3, #2]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d10c      	bne.n	8009328 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f90f 	bl	800953a <USBD_CtlSendStatus>
      }
      break;
 800931c:	e004      	b.n	8009328 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f842 	bl	80093aa <USBD_CtlError>
      break;
 8009326:	e000      	b.n	800932a <USBD_ClrFeature+0x3a>
      break;
 8009328:	bf00      	nop
  }
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	781a      	ldrb	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	785a      	ldrb	r2, [r3, #1]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	3302      	adds	r3, #2
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	b29a      	uxth	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	3303      	adds	r3, #3
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	b29b      	uxth	r3, r3
 8009360:	4413      	add	r3, r2
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	3304      	adds	r3, #4
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b29a      	uxth	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	3305      	adds	r3, #5
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	b29b      	uxth	r3, r3
 8009378:	021b      	lsls	r3, r3, #8
 800937a:	b29b      	uxth	r3, r3
 800937c:	4413      	add	r3, r2
 800937e:	b29a      	uxth	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	3306      	adds	r3, #6
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	b29a      	uxth	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	3307      	adds	r3, #7
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	b29b      	uxth	r3, r3
 8009394:	021b      	lsls	r3, r3, #8
 8009396:	b29b      	uxth	r3, r3
 8009398:	4413      	add	r3, r2
 800939a:	b29a      	uxth	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	80da      	strh	r2, [r3, #6]

}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr

080093aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80093b4:	2180      	movs	r1, #128	; 0x80
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fcae 	bl	8009d18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80093bc:	2100      	movs	r1, #0
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fcaa 	bl	8009d18 <USBD_LL_StallEP>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d032      	beq.n	8009448 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f834 	bl	8009450 <USBD_GetLen>
 80093e8:	4603      	mov	r3, r0
 80093ea:	3301      	adds	r3, #1
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	75fa      	strb	r2, [r7, #23]
 80093fc:	461a      	mov	r2, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4413      	add	r3, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	7812      	ldrb	r2, [r2, #0]
 8009406:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	75fa      	strb	r2, [r7, #23]
 800940e:	461a      	mov	r2, r3
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	4413      	add	r3, r2
 8009414:	2203      	movs	r2, #3
 8009416:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009418:	e012      	b.n	8009440 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	60fa      	str	r2, [r7, #12]
 8009420:	7dfa      	ldrb	r2, [r7, #23]
 8009422:	1c51      	adds	r1, r2, #1
 8009424:	75f9      	strb	r1, [r7, #23]
 8009426:	4611      	mov	r1, r2
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	440a      	add	r2, r1
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	75fa      	strb	r2, [r7, #23]
 8009436:	461a      	mov	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	4413      	add	r3, r2
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e8      	bne.n	800941a <USBD_GetString+0x4e>
    }
  }
}
 8009448:	bf00      	nop
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800945c:	e005      	b.n	800946a <USBD_GetLen+0x1a>
  {
    len++;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	3301      	adds	r3, #1
 8009462:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3301      	adds	r3, #1
 8009468:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f5      	bne.n	800945e <USBD_GetLen+0xe>
  }

  return len;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	bc80      	pop	{r7}
 800947c:	4770      	bx	lr

0800947e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	60f8      	str	r0, [r7, #12]
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	4613      	mov	r3, r2
 800948a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2202      	movs	r2, #2
 8009490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009494:	88fa      	ldrh	r2, [r7, #6]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800949a:	88fa      	ldrh	r2, [r7, #6]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	2100      	movs	r1, #0
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 fcbf 	bl	8009e2a <USBD_LL_Transmit>

  return USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	4613      	mov	r3, r2
 80094c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094c4:	88fb      	ldrh	r3, [r7, #6]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	2100      	movs	r1, #0
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 fcad 	bl	8009e2a <USBD_LL_Transmit>

  return USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	60b9      	str	r1, [r7, #8]
 80094e4:	4613      	mov	r3, r2
 80094e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2203      	movs	r2, #3
 80094ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094f0:	88fa      	ldrh	r2, [r7, #6]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80094f8:	88fa      	ldrh	r2, [r7, #6]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	2100      	movs	r1, #0
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 fcb2 	bl	8009e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	4613      	mov	r3, r2
 8009522:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009524:	88fb      	ldrh	r3, [r7, #6]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	2100      	movs	r1, #0
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 fca0 	bl	8009e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2204      	movs	r2, #4
 8009546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800954a:	2300      	movs	r3, #0
 800954c:	2200      	movs	r2, #0
 800954e:	2100      	movs	r1, #0
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fc6a 	bl	8009e2a <USBD_LL_Transmit>

  return USBD_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2205      	movs	r2, #5
 800956c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009570:	2300      	movs	r3, #0
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fc7a 	bl	8009e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800958c:	2200      	movs	r2, #0
 800958e:	4912      	ldr	r1, [pc, #72]	; (80095d8 <MX_USB_DEVICE_Init+0x50>)
 8009590:	4812      	ldr	r0, [pc, #72]	; (80095dc <MX_USB_DEVICE_Init+0x54>)
 8009592:	f7fe ff5f 	bl	8008454 <USBD_Init>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800959c:	f7f7 ffe2 	bl	8001564 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80095a0:	490f      	ldr	r1, [pc, #60]	; (80095e0 <MX_USB_DEVICE_Init+0x58>)
 80095a2:	480e      	ldr	r0, [pc, #56]	; (80095dc <MX_USB_DEVICE_Init+0x54>)
 80095a4:	f7fe ff81 	bl	80084aa <USBD_RegisterClass>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095ae:	f7f7 ffd9 	bl	8001564 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80095b2:	490c      	ldr	r1, [pc, #48]	; (80095e4 <MX_USB_DEVICE_Init+0x5c>)
 80095b4:	4809      	ldr	r0, [pc, #36]	; (80095dc <MX_USB_DEVICE_Init+0x54>)
 80095b6:	f7fe ff37 	bl	8008428 <USBD_CUSTOM_HID_RegisterInterface>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095c0:	f7f7 ffd0 	bl	8001564 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095c4:	4805      	ldr	r0, [pc, #20]	; (80095dc <MX_USB_DEVICE_Init+0x54>)
 80095c6:	f7fe ff89 	bl	80084dc <USBD_Start>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095d0:	f7f7 ffc8 	bl	8001564 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095d4:	bf00      	nop
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	20000170 	.word	0x20000170
 80095dc:	2000034c 	.word	0x2000034c
 80095e0:	20000054 	.word	0x20000054
 80095e4:	20000160 	.word	0x20000160

080095e8 <save_to_flash>:
  */

/* USER CODE BEGIN PRIVATE_MACRO */

void save_to_flash(uint8_t *data)
{
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	b08f      	sub	sp, #60	; 0x3c
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	466b      	mov	r3, sp
 80095f4:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7f6 fda8 	bl	800014c <strlen>
 80095fc:	4603      	mov	r3, r0
 80095fe:	089e      	lsrs	r6, r3, #2
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7f6 fda3 	bl	800014c <strlen>
 8009606:	4603      	mov	r3, r0
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	2b00      	cmp	r3, #0
 800960e:	bf14      	ite	ne
 8009610:	2301      	movne	r3, #1
 8009612:	2300      	moveq	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	18f1      	adds	r1, r6, r3
 8009618:	460b      	mov	r3, r1
 800961a:	3b01      	subs	r3, #1
 800961c:	637b      	str	r3, [r7, #52]	; 0x34
 800961e:	2300      	movs	r3, #0
 8009620:	4688      	mov	r8, r1
 8009622:	4699      	mov	r9, r3
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009630:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009634:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009638:	2300      	movs	r3, #0
 800963a:	460c      	mov	r4, r1
 800963c:	461d      	mov	r5, r3
 800963e:	f04f 0200 	mov.w	r2, #0
 8009642:	f04f 0300 	mov.w	r3, #0
 8009646:	016b      	lsls	r3, r5, #5
 8009648:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800964c:	0162      	lsls	r2, r4, #5
 800964e:	008b      	lsls	r3, r1, #2
 8009650:	3307      	adds	r3, #7
 8009652:	08db      	lsrs	r3, r3, #3
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	ebad 0d03 	sub.w	sp, sp, r3
 800965a:	466b      	mov	r3, sp
 800965c:	3303      	adds	r3, #3
 800965e:	089b      	lsrs	r3, r3, #2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8009664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009666:	f7f6 fd71 	bl	800014c <strlen>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	2100      	movs	r1, #0
 8009670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009672:	f000 fca9 	bl	8009fc8 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800967a:	f000 fcad 	bl	8009fd8 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 800967e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009680:	f7f6 fd64 	bl	800014c <strlen>
 8009684:	4603      	mov	r3, r0
 8009686:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8009688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800968a:	f7f6 fd5f 	bl	800014c <strlen>
 800968e:	4603      	mov	r3, r0
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf14      	ite	ne
 8009698:	2301      	movne	r3, #1
 800969a:	2300      	moveq	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80096a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7f6 fd52 	bl	800014c <strlen>
 80096a8:	4603      	mov	r3, r0
 80096aa:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 80096ac:	b29c      	uxth	r4, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f6 fd4c 	bl	800014c <strlen>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	bf14      	ite	ne
 80096be:	2301      	movne	r3, #1
 80096c0:	2300      	moveq	r3, #0
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	4423      	add	r3, r4
 80096c8:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80096ca:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80096cc:	f7f9 f90e 	bl	80028ec <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 80096d0:	f7f9 f942 	bl	8002958 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80096d4:	2300      	movs	r3, #0
 80096d6:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 80096d8:	4b21      	ldr	r3, [pc, #132]	; (8009760 <save_to_flash+0x178>)
 80096da:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 80096dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096de:	b29b      	uxth	r3, r3
 80096e0:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	613b      	str	r3, [r7, #16]
 80096e6:	2300      	movs	r3, #0
 80096e8:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80096ea:	f107 0214 	add.w	r2, r7, #20
 80096ee:	f107 0318 	add.w	r3, r7, #24
 80096f2:	4611      	mov	r1, r2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f9 fa0d 	bl	8002b14 <HAL_FLASHEx_Erase>
 80096fa:	4603      	mov	r3, r0
 80096fc:	72fb      	strb	r3, [r7, #11]
	  while(index < data_length)
 80096fe:	e020      	b.n	8009742 <save_to_flash+0x15a>
	  {
		  if (status == HAL_OK)
 8009700:	7afb      	ldrb	r3, [r7, #11]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11c      	bne.n	8009742 <save_to_flash+0x15a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800970e:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971a:	2200      	movs	r2, #0
 800971c:	469a      	mov	sl, r3
 800971e:	4693      	mov	fp, r2
 8009720:	4652      	mov	r2, sl
 8009722:	465b      	mov	r3, fp
 8009724:	2002      	movs	r0, #2
 8009726:	f7f9 f871 	bl	800280c <HAL_FLASH_Program>
 800972a:	4603      	mov	r3, r0
 800972c:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 800972e:	7afb      	ldrb	r3, [r7, #11]
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d105      	bne.n	8009742 <save_to_flash+0x15a>
			  {
				  write_cnt += 4;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	3304      	adds	r3, #4
 800973a:	613b      	str	r3, [r7, #16]
				  index++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
	  while(index < data_length)
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	429a      	cmp	r2, r3
 8009748:	d3da      	bcc.n	8009700 <save_to_flash+0x118>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 800974a:	f7f9 f921 	bl	8002990 <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 800974e:	f7f9 f8f3 	bl	8002938 <HAL_FLASH_Lock>
 8009752:	f8d7 d000 	ldr.w	sp, [r7]
}
 8009756:	bf00      	nop
 8009758:	373c      	adds	r7, #60	; 0x3c
 800975a:	46bd      	mov	sp, r7
 800975c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009760:	08019000 	.word	0x08019000

08009764 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009764:	b480      	push	{r7}
 8009766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009768:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800976a:	4618      	mov	r0, r3
 800976c:	46bd      	mov	sp, r7
 800976e:	bc80      	pop	{r7}
 8009770:	4770      	bx	lr

08009772 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009772:	b480      	push	{r7}
 8009774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009776:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009778:	4618      	mov	r0, r3
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr

08009780 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
	//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

    static uint8_t position;
	static char * data_to_send[0xC0]; //0x40 * 3

    if (state[0] == 'I'){
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b49      	cmp	r3, #73	; 0x49
 800978e:	d104      	bne.n	800979a <CUSTOM_HID_OutEvent_FS+0x1a>
		position = 0;
 8009790:	4b1d      	ldr	r3, [pc, #116]	; (8009808 <CUSTOM_HID_OutEvent_FS+0x88>)
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
		return 0;
 8009796:	2300      	movs	r3, #0
 8009798:	e032      	b.n	8009800 <CUSTOM_HID_OutEvent_FS+0x80>
	}

    else if (state[0] == 'C'){
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b43      	cmp	r3, #67	; 0x43
 80097a0:	d104      	bne.n	80097ac <CUSTOM_HID_OutEvent_FS+0x2c>
		calibracao = 1;
 80097a2:	4b1a      	ldr	r3, [pc, #104]	; (800980c <CUSTOM_HID_OutEvent_FS+0x8c>)
 80097a4:	2201      	movs	r2, #1
 80097a6:	701a      	strb	r2, [r3, #0]
		return 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	e029      	b.n	8009800 <CUSTOM_HID_OutEvent_FS+0x80>
	}

    else if (state[0] == 'N'){
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2b4e      	cmp	r3, #78	; 0x4e
 80097b2:	d107      	bne.n	80097c4 <CUSTOM_HID_OutEvent_FS+0x44>
		calibracao = 0;
 80097b4:	4b15      	ldr	r3, [pc, #84]	; (800980c <CUSTOM_HID_OutEvent_FS+0x8c>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	701a      	strb	r2, [r3, #0]
		updating = 1;
 80097ba:	4b15      	ldr	r3, [pc, #84]	; (8009810 <CUSTOM_HID_OutEvent_FS+0x90>)
 80097bc:	2201      	movs	r2, #1
 80097be:	701a      	strb	r2, [r3, #0]
		return 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	e01d      	b.n	8009800 <CUSTOM_HID_OutEvent_FS+0x80>
	}

    memcpy(&data_to_send[position], state, 0x40);
 80097c4:	4b10      	ldr	r3, [pc, #64]	; (8009808 <CUSTOM_HID_OutEvent_FS+0x88>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4a12      	ldr	r2, [pc, #72]	; (8009814 <CUSTOM_HID_OutEvent_FS+0x94>)
 80097cc:	4413      	add	r3, r2
 80097ce:	2240      	movs	r2, #64	; 0x40
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fbea 	bl	8009fac <memcpy>
    position = position+16;
 80097d8:	4b0b      	ldr	r3, [pc, #44]	; (8009808 <CUSTOM_HID_OutEvent_FS+0x88>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	3310      	adds	r3, #16
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	4b09      	ldr	r3, [pc, #36]	; (8009808 <CUSTOM_HID_OutEvent_FS+0x88>)
 80097e2:	701a      	strb	r2, [r3, #0]

	if (position >= 48){  //informa que a terceira linha foi recebida
 80097e4:	4b08      	ldr	r3, [pc, #32]	; (8009808 <CUSTOM_HID_OutEvent_FS+0x88>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b2f      	cmp	r3, #47	; 0x2f
 80097ea:	d908      	bls.n	80097fe <CUSTOM_HID_OutEvent_FS+0x7e>
	    position = 0;
 80097ec:	4b06      	ldr	r3, [pc, #24]	; (8009808 <CUSTOM_HID_OutEvent_FS+0x88>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
		save_to_flash((uint8_t *)data_to_send);
 80097f2:	4808      	ldr	r0, [pc, #32]	; (8009814 <CUSTOM_HID_OutEvent_FS+0x94>)
 80097f4:	f7ff fef8 	bl	80095e8 <save_to_flash>
		updating = 1;
 80097f8:	4b05      	ldr	r3, [pc, #20]	; (8009810 <CUSTOM_HID_OutEvent_FS+0x90>)
 80097fa:	2201      	movs	r2, #1
 80097fc:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(5); delay aqui trava o stm
	}
	return (USBD_OK);
 80097fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000610 	.word	0x20000610
 800980c:	2000030b 	.word	0x2000030b
 8009810:	2000030a 	.word	0x2000030a
 8009814:	20000614 	.word	0x20000614

08009818 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2212      	movs	r2, #18
 8009828:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800982a:	4b03      	ldr	r3, [pc, #12]	; (8009838 <USBD_FS_DeviceDescriptor+0x20>)
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	2000018c 	.word	0x2000018c

0800983c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	6039      	str	r1, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2204      	movs	r2, #4
 800984c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800984e:	4b03      	ldr	r3, [pc, #12]	; (800985c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	200001a0 	.word	0x200001a0

08009860 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4907      	ldr	r1, [pc, #28]	; (8009894 <USBD_FS_ProductStrDescriptor+0x34>)
 8009876:	4808      	ldr	r0, [pc, #32]	; (8009898 <USBD_FS_ProductStrDescriptor+0x38>)
 8009878:	f7ff fda8 	bl	80093cc <USBD_GetString>
 800987c:	e004      	b.n	8009888 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4904      	ldr	r1, [pc, #16]	; (8009894 <USBD_FS_ProductStrDescriptor+0x34>)
 8009882:	4805      	ldr	r0, [pc, #20]	; (8009898 <USBD_FS_ProductStrDescriptor+0x38>)
 8009884:	f7ff fda2 	bl	80093cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009888:	4b02      	ldr	r3, [pc, #8]	; (8009894 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20000914 	.word	0x20000914
 8009898:	0800b1d8 	.word	0x0800b1d8

0800989c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	6039      	str	r1, [r7, #0]
 80098a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	4904      	ldr	r1, [pc, #16]	; (80098bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098ac:	4804      	ldr	r0, [pc, #16]	; (80098c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098ae:	f7ff fd8d 	bl	80093cc <USBD_GetString>
  return USBD_StrDesc;
 80098b2:	4b02      	ldr	r3, [pc, #8]	; (80098bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20000914 	.word	0x20000914
 80098c0:	0800b1ec 	.word	0x0800b1ec

080098c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	6039      	str	r1, [r7, #0]
 80098ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	221a      	movs	r2, #26
 80098d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098d6:	f000 f843 	bl	8009960 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098da:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	200001a4 	.word	0x200001a4

080098e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098f4:	79fb      	ldrb	r3, [r7, #7]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	4907      	ldr	r1, [pc, #28]	; (800991c <USBD_FS_ConfigStrDescriptor+0x34>)
 80098fe:	4808      	ldr	r0, [pc, #32]	; (8009920 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009900:	f7ff fd64 	bl	80093cc <USBD_GetString>
 8009904:	e004      	b.n	8009910 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	4904      	ldr	r1, [pc, #16]	; (800991c <USBD_FS_ConfigStrDescriptor+0x34>)
 800990a:	4805      	ldr	r0, [pc, #20]	; (8009920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800990c:	f7ff fd5e 	bl	80093cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000914 	.word	0x20000914
 8009920:	0800b1fc 	.word	0x0800b1fc

08009924 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	6039      	str	r1, [r7, #0]
 800992e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d105      	bne.n	8009942 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	4907      	ldr	r1, [pc, #28]	; (8009958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800993a:	4808      	ldr	r0, [pc, #32]	; (800995c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800993c:	f7ff fd46 	bl	80093cc <USBD_GetString>
 8009940:	e004      	b.n	800994c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	4904      	ldr	r1, [pc, #16]	; (8009958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009946:	4805      	ldr	r0, [pc, #20]	; (800995c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009948:	f7ff fd40 	bl	80093cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800994c:	4b02      	ldr	r3, [pc, #8]	; (8009958 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20000914 	.word	0x20000914
 800995c:	0800b208 	.word	0x0800b208

08009960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009966:	4b0f      	ldr	r3, [pc, #60]	; (80099a4 <Get_SerialNum+0x44>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800996c:	4b0e      	ldr	r3, [pc, #56]	; (80099a8 <Get_SerialNum+0x48>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009972:	4b0e      	ldr	r3, [pc, #56]	; (80099ac <Get_SerialNum+0x4c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4413      	add	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d009      	beq.n	800999a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009986:	2208      	movs	r2, #8
 8009988:	4909      	ldr	r1, [pc, #36]	; (80099b0 <Get_SerialNum+0x50>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f814 	bl	80099b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009990:	2204      	movs	r2, #4
 8009992:	4908      	ldr	r1, [pc, #32]	; (80099b4 <Get_SerialNum+0x54>)
 8009994:	68b8      	ldr	r0, [r7, #8]
 8009996:	f000 f80f 	bl	80099b8 <IntToUnicode>
  }
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	1ffff7e8 	.word	0x1ffff7e8
 80099a8:	1ffff7ec 	.word	0x1ffff7ec
 80099ac:	1ffff7f0 	.word	0x1ffff7f0
 80099b0:	200001a6 	.word	0x200001a6
 80099b4:	200001b6 	.word	0x200001b6

080099b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	4613      	mov	r3, r2
 80099c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099ca:	2300      	movs	r3, #0
 80099cc:	75fb      	strb	r3, [r7, #23]
 80099ce:	e027      	b.n	8009a20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	0f1b      	lsrs	r3, r3, #28
 80099d4:	2b09      	cmp	r3, #9
 80099d6:	d80b      	bhi.n	80099f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	0f1b      	lsrs	r3, r3, #28
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	4619      	mov	r1, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	440b      	add	r3, r1
 80099e8:	3230      	adds	r2, #48	; 0x30
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	e00a      	b.n	8009a06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	0f1b      	lsrs	r3, r3, #28
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	4619      	mov	r1, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	440b      	add	r3, r1
 8009a00:	3237      	adds	r2, #55	; 0x37
 8009a02:	b2d2      	uxtb	r2, r2
 8009a04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	011b      	lsls	r3, r3, #4
 8009a0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	3301      	adds	r3, #1
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	4413      	add	r3, r2
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	75fb      	strb	r3, [r7, #23]
 8009a20:	7dfa      	ldrb	r2, [r7, #23]
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d3d3      	bcc.n	80099d0 <IntToUnicode+0x18>
  }
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr

08009a34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a0d      	ldr	r2, [pc, #52]	; (8009a78 <HAL_PCD_MspInit+0x44>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d113      	bne.n	8009a6e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a46:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <HAL_PCD_MspInit+0x48>)
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	4a0c      	ldr	r2, [pc, #48]	; (8009a7c <HAL_PCD_MspInit+0x48>)
 8009a4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a50:	61d3      	str	r3, [r2, #28]
 8009a52:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <HAL_PCD_MspInit+0x48>)
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2100      	movs	r1, #0
 8009a62:	2014      	movs	r0, #20
 8009a64:	f7f8 fcad 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009a68:	2014      	movs	r0, #20
 8009a6a:	f7f8 fcc6 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	40005c00 	.word	0x40005c00
 8009a7c:	40021000 	.word	0x40021000

08009a80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009a94:	4619      	mov	r1, r3
 8009a96:	4610      	mov	r0, r2
 8009a98:	f7fe fd68 	bl	800856c <USBD_LL_SetupStage>
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	00db      	lsls	r3, r3, #3
 8009ac2:	440b      	add	r3, r1
 8009ac4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	78fb      	ldrb	r3, [r7, #3]
 8009acc:	4619      	mov	r1, r3
 8009ace:	f7fe fd9a 	bl	8008606 <USBD_LL_DataOutStage>
}
 8009ad2:	bf00      	nop
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	440b      	add	r3, r1
 8009afa:	333c      	adds	r3, #60	; 0x3c
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	4619      	mov	r1, r3
 8009b02:	f7fe fdf1 	bl	80086e8 <USBD_LL_DataInStage>
}
 8009b06:	bf00      	nop
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe ff01 	bl	8008924 <USBD_LL_SOF>
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b32:	2301      	movs	r3, #1
 8009b34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d001      	beq.n	8009b42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b3e:	f7f7 fd11 	bl	8001564 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b48:	7bfa      	ldrb	r2, [r7, #15]
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe feb1 	bl	80088b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe fe6a 	bl	8008832 <USBD_LL_Reset>
}
 8009b5e:	bf00      	nop
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe feab 	bl	80088d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b84:	4b04      	ldr	r3, [pc, #16]	; (8009b98 <HAL_PCD_SuspendCallback+0x30>)
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	4a03      	ldr	r2, [pc, #12]	; (8009b98 <HAL_PCD_SuspendCallback+0x30>)
 8009b8a:	f043 0306 	orr.w	r3, r3, #6
 8009b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	e000ed00 	.word	0xe000ed00

08009b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe fea5 	bl	80088fa <USBD_LL_Resume>
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009bc0:	4a23      	ldr	r2, [pc, #140]	; (8009c50 <USBD_LL_Init+0x98>)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a21      	ldr	r2, [pc, #132]	; (8009c50 <USBD_LL_Init+0x98>)
 8009bcc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009bd0:	4b1f      	ldr	r3, [pc, #124]	; (8009c50 <USBD_LL_Init+0x98>)
 8009bd2:	4a20      	ldr	r2, [pc, #128]	; (8009c54 <USBD_LL_Init+0x9c>)
 8009bd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bd6:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <USBD_LL_Init+0x98>)
 8009bd8:	2208      	movs	r2, #8
 8009bda:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bdc:	4b1c      	ldr	r3, [pc, #112]	; (8009c50 <USBD_LL_Init+0x98>)
 8009bde:	2202      	movs	r2, #2
 8009be0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009be2:	4b1b      	ldr	r3, [pc, #108]	; (8009c50 <USBD_LL_Init+0x98>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009be8:	4b19      	ldr	r3, [pc, #100]	; (8009c50 <USBD_LL_Init+0x98>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bee:	4b18      	ldr	r3, [pc, #96]	; (8009c50 <USBD_LL_Init+0x98>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009bf4:	4816      	ldr	r0, [pc, #88]	; (8009c50 <USBD_LL_Init+0x98>)
 8009bf6:	f7f9 f9d1 	bl	8002f9c <HAL_PCD_Init>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009c00:	f7f7 fcb0 	bl	8001564 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c0a:	2318      	movs	r3, #24
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2100      	movs	r1, #0
 8009c10:	f7fa fe2e 	bl	8004870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c1a:	2358      	movs	r3, #88	; 0x58
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2180      	movs	r1, #128	; 0x80
 8009c20:	f7fa fe26 	bl	8004870 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c2a:	2398      	movs	r3, #152	; 0x98
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2181      	movs	r1, #129	; 0x81
 8009c30:	f7fa fe1e 	bl	8004870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c3a:	23d8      	movs	r3, #216	; 0xd8
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2101      	movs	r1, #1
 8009c40:	f7fa fe16 	bl	8004870 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000b14 	.word	0x20000b14
 8009c54:	40005c00 	.word	0x40005c00

08009c58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7f9 fa9f 	bl	80031b2 <HAL_PCD_Start>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f93c 	bl	8009ef8 <USBD_Get_USB_Status>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	4608      	mov	r0, r1
 8009c98:	4611      	mov	r1, r2
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	70fb      	strb	r3, [r7, #3]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70bb      	strb	r3, [r7, #2]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cb6:	78bb      	ldrb	r3, [r7, #2]
 8009cb8:	883a      	ldrh	r2, [r7, #0]
 8009cba:	78f9      	ldrb	r1, [r7, #3]
 8009cbc:	f7f9 fc17 	bl	80034ee <HAL_PCD_EP_Open>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f916 	bl	8009ef8 <USBD_Get_USB_Status>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cf4:	78fa      	ldrb	r2, [r7, #3]
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f9 fc5e 	bl	80035ba <HAL_PCD_EP_Close>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 f8f7 	bl	8009ef8 <USBD_Get_USB_Status>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d32:	78fa      	ldrb	r2, [r7, #3]
 8009d34:	4611      	mov	r1, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7f9 fd07 	bl	800374a <HAL_PCD_EP_SetStall>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f8d8 	bl	8009ef8 <USBD_Get_USB_Status>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d70:	78fa      	ldrb	r2, [r7, #3]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7f9 fd48 	bl	800380a <HAL_PCD_EP_ClrStall>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 f8b9 	bl	8009ef8 <USBD_Get_USB_Status>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009da6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	da0c      	bge.n	8009dca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	440b      	add	r3, r1
 8009dc4:	3302      	adds	r3, #2
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	e00b      	b.n	8009de2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dd0:	68f9      	ldr	r1, [r7, #12]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	00db      	lsls	r3, r3, #3
 8009dda:	440b      	add	r3, r1
 8009ddc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009de0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bc80      	pop	{r7}
 8009dea:	4770      	bx	lr

08009dec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7f9 fb4a 	bl	80034a4 <HAL_PCD_SetAddress>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f86e 	bl	8009ef8 <USBD_Get_USB_Status>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b086      	sub	sp, #24
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	461a      	mov	r2, r3
 8009e36:	460b      	mov	r3, r1
 8009e38:	72fb      	strb	r3, [r7, #11]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e4c:	893b      	ldrh	r3, [r7, #8]
 8009e4e:	7af9      	ldrb	r1, [r7, #11]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	f7f9 fc37 	bl	80036c4 <HAL_PCD_EP_Transmit>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 f84b 	bl	8009ef8 <USBD_Get_USB_Status>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e66:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	72fb      	strb	r3, [r7, #11]
 8009e80:	4613      	mov	r3, r2
 8009e82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e92:	893b      	ldrh	r3, [r7, #8]
 8009e94:	7af9      	ldrb	r1, [r7, #11]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	f7f9 fbd7 	bl	800364a <HAL_PCD_EP_Receive>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 f828 	bl	8009ef8 <USBD_Get_USB_Status>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eac:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009ec0:	4b02      	ldr	r3, [pc, #8]	; (8009ecc <USBD_static_malloc+0x14>)
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bc80      	pop	{r7}
 8009eca:	4770      	bx	lr
 8009ecc:	20000e00 	.word	0x20000e00

08009ed0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]

}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bc80      	pop	{r7}
 8009ee0:	4770      	bx	lr

08009ee2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	460b      	mov	r3, r1
 8009eec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bc80      	pop	{r7}
 8009ef6:	4770      	bx	lr

08009ef8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d817      	bhi.n	8009f3c <USBD_Get_USB_Status+0x44>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <USBD_Get_USB_Status+0x1c>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f25 	.word	0x08009f25
 8009f18:	08009f2b 	.word	0x08009f2b
 8009f1c:	08009f31 	.word	0x08009f31
 8009f20:	08009f37 	.word	0x08009f37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
    break;
 8009f28:	e00b      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2e:	e008      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f30:	2301      	movs	r3, #1
 8009f32:	73fb      	strb	r3, [r7, #15]
    break;
 8009f34:	e005      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f36:	2302      	movs	r3, #2
 8009f38:	73fb      	strb	r3, [r7, #15]
    break;
 8009f3a:	e002      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f40:	bf00      	nop
  }
  return usb_status;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bc80      	pop	{r7}
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop

08009f50 <atoi>:
 8009f50:	220a      	movs	r2, #10
 8009f52:	2100      	movs	r1, #0
 8009f54:	f000 b920 	b.w	800a198 <strtol>

08009f58 <__errno>:
 8009f58:	4b01      	ldr	r3, [pc, #4]	; (8009f60 <__errno+0x8>)
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	200001c0 	.word	0x200001c0

08009f64 <__libc_init_array>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	2600      	movs	r6, #0
 8009f68:	4d0c      	ldr	r5, [pc, #48]	; (8009f9c <__libc_init_array+0x38>)
 8009f6a:	4c0d      	ldr	r4, [pc, #52]	; (8009fa0 <__libc_init_array+0x3c>)
 8009f6c:	1b64      	subs	r4, r4, r5
 8009f6e:	10a4      	asrs	r4, r4, #2
 8009f70:	42a6      	cmp	r6, r4
 8009f72:	d109      	bne.n	8009f88 <__libc_init_array+0x24>
 8009f74:	f001 f91a 	bl	800b1ac <_init>
 8009f78:	2600      	movs	r6, #0
 8009f7a:	4d0a      	ldr	r5, [pc, #40]	; (8009fa4 <__libc_init_array+0x40>)
 8009f7c:	4c0a      	ldr	r4, [pc, #40]	; (8009fa8 <__libc_init_array+0x44>)
 8009f7e:	1b64      	subs	r4, r4, r5
 8009f80:	10a4      	asrs	r4, r4, #2
 8009f82:	42a6      	cmp	r6, r4
 8009f84:	d105      	bne.n	8009f92 <__libc_init_array+0x2e>
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8c:	4798      	blx	r3
 8009f8e:	3601      	adds	r6, #1
 8009f90:	e7ee      	b.n	8009f70 <__libc_init_array+0xc>
 8009f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f96:	4798      	blx	r3
 8009f98:	3601      	adds	r6, #1
 8009f9a:	e7f2      	b.n	8009f82 <__libc_init_array+0x1e>
 8009f9c:	0800b47c 	.word	0x0800b47c
 8009fa0:	0800b47c 	.word	0x0800b47c
 8009fa4:	0800b47c 	.word	0x0800b47c
 8009fa8:	0800b480 	.word	0x0800b480

08009fac <memcpy>:
 8009fac:	440a      	add	r2, r1
 8009fae:	4291      	cmp	r1, r2
 8009fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fb4:	d100      	bne.n	8009fb8 <memcpy+0xc>
 8009fb6:	4770      	bx	lr
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fbe:	4291      	cmp	r1, r2
 8009fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fc4:	d1f9      	bne.n	8009fba <memcpy+0xe>
 8009fc6:	bd10      	pop	{r4, pc}

08009fc8 <memset>:
 8009fc8:	4603      	mov	r3, r0
 8009fca:	4402      	add	r2, r0
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d100      	bne.n	8009fd2 <memset+0xa>
 8009fd0:	4770      	bx	lr
 8009fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd6:	e7f9      	b.n	8009fcc <memset+0x4>

08009fd8 <strcpy>:
 8009fd8:	4603      	mov	r3, r0
 8009fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fde:	f803 2b01 	strb.w	r2, [r3], #1
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	d1f9      	bne.n	8009fda <strcpy+0x2>
 8009fe6:	4770      	bx	lr

08009fe8 <strtok>:
 8009fe8:	4b16      	ldr	r3, [pc, #88]	; (800a044 <strtok+0x5c>)
 8009fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	681f      	ldr	r7, [r3, #0]
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009ff4:	460e      	mov	r6, r1
 8009ff6:	b9ec      	cbnz	r4, 800a034 <strtok+0x4c>
 8009ff8:	2050      	movs	r0, #80	; 0x50
 8009ffa:	f000 f907 	bl	800a20c <malloc>
 8009ffe:	4602      	mov	r2, r0
 800a000:	65b8      	str	r0, [r7, #88]	; 0x58
 800a002:	b920      	cbnz	r0, 800a00e <strtok+0x26>
 800a004:	2157      	movs	r1, #87	; 0x57
 800a006:	4b10      	ldr	r3, [pc, #64]	; (800a048 <strtok+0x60>)
 800a008:	4810      	ldr	r0, [pc, #64]	; (800a04c <strtok+0x64>)
 800a00a:	f000 f8cf 	bl	800a1ac <__assert_func>
 800a00e:	e9c0 4400 	strd	r4, r4, [r0]
 800a012:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a016:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a01a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a01e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a022:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a026:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a02a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a02e:	6184      	str	r4, [r0, #24]
 800a030:	7704      	strb	r4, [r0, #28]
 800a032:	6244      	str	r4, [r0, #36]	; 0x24
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a03a:	2301      	movs	r3, #1
 800a03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a040:	f000 b806 	b.w	800a050 <__strtok_r>
 800a044:	200001c0 	.word	0x200001c0
 800a048:	0800b238 	.word	0x0800b238
 800a04c:	0800b24f 	.word	0x0800b24f

0800a050 <__strtok_r>:
 800a050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a052:	b908      	cbnz	r0, 800a058 <__strtok_r+0x8>
 800a054:	6810      	ldr	r0, [r2, #0]
 800a056:	b188      	cbz	r0, 800a07c <__strtok_r+0x2c>
 800a058:	4604      	mov	r4, r0
 800a05a:	460f      	mov	r7, r1
 800a05c:	4620      	mov	r0, r4
 800a05e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a062:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a066:	b91e      	cbnz	r6, 800a070 <__strtok_r+0x20>
 800a068:	b965      	cbnz	r5, 800a084 <__strtok_r+0x34>
 800a06a:	4628      	mov	r0, r5
 800a06c:	6015      	str	r5, [r2, #0]
 800a06e:	e005      	b.n	800a07c <__strtok_r+0x2c>
 800a070:	42b5      	cmp	r5, r6
 800a072:	d1f6      	bne.n	800a062 <__strtok_r+0x12>
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1f0      	bne.n	800a05a <__strtok_r+0xa>
 800a078:	6014      	str	r4, [r2, #0]
 800a07a:	7003      	strb	r3, [r0, #0]
 800a07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a07e:	461c      	mov	r4, r3
 800a080:	e00c      	b.n	800a09c <__strtok_r+0x4c>
 800a082:	b915      	cbnz	r5, 800a08a <__strtok_r+0x3a>
 800a084:	460e      	mov	r6, r1
 800a086:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a08a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a08e:	42ab      	cmp	r3, r5
 800a090:	d1f7      	bne.n	800a082 <__strtok_r+0x32>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f3      	beq.n	800a07e <__strtok_r+0x2e>
 800a096:	2300      	movs	r3, #0
 800a098:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a09c:	6014      	str	r4, [r2, #0]
 800a09e:	e7ed      	b.n	800a07c <__strtok_r+0x2c>

0800a0a0 <_strtol_l.constprop.0>:
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	d001      	beq.n	800a0ae <_strtol_l.constprop.0+0xe>
 800a0aa:	2b24      	cmp	r3, #36	; 0x24
 800a0ac:	d906      	bls.n	800a0bc <_strtol_l.constprop.0+0x1c>
 800a0ae:	f7ff ff53 	bl	8009f58 <__errno>
 800a0b2:	2316      	movs	r3, #22
 800a0b4:	6003      	str	r3, [r0, #0]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0bc:	460d      	mov	r5, r1
 800a0be:	4f35      	ldr	r7, [pc, #212]	; (800a194 <_strtol_l.constprop.0+0xf4>)
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0c6:	5de6      	ldrb	r6, [r4, r7]
 800a0c8:	f016 0608 	ands.w	r6, r6, #8
 800a0cc:	d1f8      	bne.n	800a0c0 <_strtol_l.constprop.0+0x20>
 800a0ce:	2c2d      	cmp	r4, #45	; 0x2d
 800a0d0:	d12f      	bne.n	800a132 <_strtol_l.constprop.0+0x92>
 800a0d2:	2601      	movs	r6, #1
 800a0d4:	782c      	ldrb	r4, [r5, #0]
 800a0d6:	1c85      	adds	r5, r0, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d057      	beq.n	800a18c <_strtol_l.constprop.0+0xec>
 800a0dc:	2b10      	cmp	r3, #16
 800a0de:	d109      	bne.n	800a0f4 <_strtol_l.constprop.0+0x54>
 800a0e0:	2c30      	cmp	r4, #48	; 0x30
 800a0e2:	d107      	bne.n	800a0f4 <_strtol_l.constprop.0+0x54>
 800a0e4:	7828      	ldrb	r0, [r5, #0]
 800a0e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a0ea:	2858      	cmp	r0, #88	; 0x58
 800a0ec:	d149      	bne.n	800a182 <_strtol_l.constprop.0+0xe2>
 800a0ee:	2310      	movs	r3, #16
 800a0f0:	786c      	ldrb	r4, [r5, #1]
 800a0f2:	3502      	adds	r5, #2
 800a0f4:	2700      	movs	r7, #0
 800a0f6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a0fa:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a0fe:	fbbe f9f3 	udiv	r9, lr, r3
 800a102:	4638      	mov	r0, r7
 800a104:	fb03 ea19 	mls	sl, r3, r9, lr
 800a108:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a10c:	f1bc 0f09 	cmp.w	ip, #9
 800a110:	d814      	bhi.n	800a13c <_strtol_l.constprop.0+0x9c>
 800a112:	4664      	mov	r4, ip
 800a114:	42a3      	cmp	r3, r4
 800a116:	dd22      	ble.n	800a15e <_strtol_l.constprop.0+0xbe>
 800a118:	2f00      	cmp	r7, #0
 800a11a:	db1d      	blt.n	800a158 <_strtol_l.constprop.0+0xb8>
 800a11c:	4581      	cmp	r9, r0
 800a11e:	d31b      	bcc.n	800a158 <_strtol_l.constprop.0+0xb8>
 800a120:	d101      	bne.n	800a126 <_strtol_l.constprop.0+0x86>
 800a122:	45a2      	cmp	sl, r4
 800a124:	db18      	blt.n	800a158 <_strtol_l.constprop.0+0xb8>
 800a126:	2701      	movs	r7, #1
 800a128:	fb00 4003 	mla	r0, r0, r3, r4
 800a12c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a130:	e7ea      	b.n	800a108 <_strtol_l.constprop.0+0x68>
 800a132:	2c2b      	cmp	r4, #43	; 0x2b
 800a134:	bf04      	itt	eq
 800a136:	782c      	ldrbeq	r4, [r5, #0]
 800a138:	1c85      	addeq	r5, r0, #2
 800a13a:	e7cd      	b.n	800a0d8 <_strtol_l.constprop.0+0x38>
 800a13c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a140:	f1bc 0f19 	cmp.w	ip, #25
 800a144:	d801      	bhi.n	800a14a <_strtol_l.constprop.0+0xaa>
 800a146:	3c37      	subs	r4, #55	; 0x37
 800a148:	e7e4      	b.n	800a114 <_strtol_l.constprop.0+0x74>
 800a14a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a14e:	f1bc 0f19 	cmp.w	ip, #25
 800a152:	d804      	bhi.n	800a15e <_strtol_l.constprop.0+0xbe>
 800a154:	3c57      	subs	r4, #87	; 0x57
 800a156:	e7dd      	b.n	800a114 <_strtol_l.constprop.0+0x74>
 800a158:	f04f 37ff 	mov.w	r7, #4294967295
 800a15c:	e7e6      	b.n	800a12c <_strtol_l.constprop.0+0x8c>
 800a15e:	2f00      	cmp	r7, #0
 800a160:	da07      	bge.n	800a172 <_strtol_l.constprop.0+0xd2>
 800a162:	2322      	movs	r3, #34	; 0x22
 800a164:	4670      	mov	r0, lr
 800a166:	f8c8 3000 	str.w	r3, [r8]
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	d0a4      	beq.n	800a0b8 <_strtol_l.constprop.0+0x18>
 800a16e:	1e69      	subs	r1, r5, #1
 800a170:	e005      	b.n	800a17e <_strtol_l.constprop.0+0xde>
 800a172:	b106      	cbz	r6, 800a176 <_strtol_l.constprop.0+0xd6>
 800a174:	4240      	negs	r0, r0
 800a176:	2a00      	cmp	r2, #0
 800a178:	d09e      	beq.n	800a0b8 <_strtol_l.constprop.0+0x18>
 800a17a:	2f00      	cmp	r7, #0
 800a17c:	d1f7      	bne.n	800a16e <_strtol_l.constprop.0+0xce>
 800a17e:	6011      	str	r1, [r2, #0]
 800a180:	e79a      	b.n	800a0b8 <_strtol_l.constprop.0+0x18>
 800a182:	2430      	movs	r4, #48	; 0x30
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1b5      	bne.n	800a0f4 <_strtol_l.constprop.0+0x54>
 800a188:	2308      	movs	r3, #8
 800a18a:	e7b3      	b.n	800a0f4 <_strtol_l.constprop.0+0x54>
 800a18c:	2c30      	cmp	r4, #48	; 0x30
 800a18e:	d0a9      	beq.n	800a0e4 <_strtol_l.constprop.0+0x44>
 800a190:	230a      	movs	r3, #10
 800a192:	e7af      	b.n	800a0f4 <_strtol_l.constprop.0+0x54>
 800a194:	0800b2e9 	.word	0x0800b2e9

0800a198 <strtol>:
 800a198:	4613      	mov	r3, r2
 800a19a:	460a      	mov	r2, r1
 800a19c:	4601      	mov	r1, r0
 800a19e:	4802      	ldr	r0, [pc, #8]	; (800a1a8 <strtol+0x10>)
 800a1a0:	6800      	ldr	r0, [r0, #0]
 800a1a2:	f7ff bf7d 	b.w	800a0a0 <_strtol_l.constprop.0>
 800a1a6:	bf00      	nop
 800a1a8:	200001c0 	.word	0x200001c0

0800a1ac <__assert_func>:
 800a1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ae:	4614      	mov	r4, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <__assert_func+0x2c>)
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68d8      	ldr	r0, [r3, #12]
 800a1ba:	b14c      	cbz	r4, 800a1d0 <__assert_func+0x24>
 800a1bc:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <__assert_func+0x30>)
 800a1be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1c2:	9100      	str	r1, [sp, #0]
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	4906      	ldr	r1, [pc, #24]	; (800a1e0 <__assert_func+0x34>)
 800a1c8:	f000 f80e 	bl	800a1e8 <fiprintf>
 800a1cc:	f000 fcc0 	bl	800ab50 <abort>
 800a1d0:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <__assert_func+0x38>)
 800a1d2:	461c      	mov	r4, r3
 800a1d4:	e7f3      	b.n	800a1be <__assert_func+0x12>
 800a1d6:	bf00      	nop
 800a1d8:	200001c0 	.word	0x200001c0
 800a1dc:	0800b2ac 	.word	0x0800b2ac
 800a1e0:	0800b2b9 	.word	0x0800b2b9
 800a1e4:	0800b2e7 	.word	0x0800b2e7

0800a1e8 <fiprintf>:
 800a1e8:	b40e      	push	{r1, r2, r3}
 800a1ea:	b503      	push	{r0, r1, lr}
 800a1ec:	4601      	mov	r1, r0
 800a1ee:	ab03      	add	r3, sp, #12
 800a1f0:	4805      	ldr	r0, [pc, #20]	; (800a208 <fiprintf+0x20>)
 800a1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f6:	6800      	ldr	r0, [r0, #0]
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	f000 f913 	bl	800a424 <_vfiprintf_r>
 800a1fe:	b002      	add	sp, #8
 800a200:	f85d eb04 	ldr.w	lr, [sp], #4
 800a204:	b003      	add	sp, #12
 800a206:	4770      	bx	lr
 800a208:	200001c0 	.word	0x200001c0

0800a20c <malloc>:
 800a20c:	4b02      	ldr	r3, [pc, #8]	; (800a218 <malloc+0xc>)
 800a20e:	4601      	mov	r1, r0
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	f000 b86b 	b.w	800a2ec <_malloc_r>
 800a216:	bf00      	nop
 800a218:	200001c0 	.word	0x200001c0

0800a21c <_free_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4605      	mov	r5, r0
 800a220:	2900      	cmp	r1, #0
 800a222:	d040      	beq.n	800a2a6 <_free_r+0x8a>
 800a224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a228:	1f0c      	subs	r4, r1, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	bfb8      	it	lt
 800a22e:	18e4      	addlt	r4, r4, r3
 800a230:	f000 fec0 	bl	800afb4 <__malloc_lock>
 800a234:	4a1c      	ldr	r2, [pc, #112]	; (800a2a8 <_free_r+0x8c>)
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	b933      	cbnz	r3, 800a248 <_free_r+0x2c>
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	6014      	str	r4, [r2, #0]
 800a23e:	4628      	mov	r0, r5
 800a240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a244:	f000 bebc 	b.w	800afc0 <__malloc_unlock>
 800a248:	42a3      	cmp	r3, r4
 800a24a:	d908      	bls.n	800a25e <_free_r+0x42>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	1821      	adds	r1, r4, r0
 800a250:	428b      	cmp	r3, r1
 800a252:	bf01      	itttt	eq
 800a254:	6819      	ldreq	r1, [r3, #0]
 800a256:	685b      	ldreq	r3, [r3, #4]
 800a258:	1809      	addeq	r1, r1, r0
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	e7ed      	b.n	800a23a <_free_r+0x1e>
 800a25e:	461a      	mov	r2, r3
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	b10b      	cbz	r3, 800a268 <_free_r+0x4c>
 800a264:	42a3      	cmp	r3, r4
 800a266:	d9fa      	bls.n	800a25e <_free_r+0x42>
 800a268:	6811      	ldr	r1, [r2, #0]
 800a26a:	1850      	adds	r0, r2, r1
 800a26c:	42a0      	cmp	r0, r4
 800a26e:	d10b      	bne.n	800a288 <_free_r+0x6c>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	4401      	add	r1, r0
 800a274:	1850      	adds	r0, r2, r1
 800a276:	4283      	cmp	r3, r0
 800a278:	6011      	str	r1, [r2, #0]
 800a27a:	d1e0      	bne.n	800a23e <_free_r+0x22>
 800a27c:	6818      	ldr	r0, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	4401      	add	r1, r0
 800a282:	6011      	str	r1, [r2, #0]
 800a284:	6053      	str	r3, [r2, #4]
 800a286:	e7da      	b.n	800a23e <_free_r+0x22>
 800a288:	d902      	bls.n	800a290 <_free_r+0x74>
 800a28a:	230c      	movs	r3, #12
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	e7d6      	b.n	800a23e <_free_r+0x22>
 800a290:	6820      	ldr	r0, [r4, #0]
 800a292:	1821      	adds	r1, r4, r0
 800a294:	428b      	cmp	r3, r1
 800a296:	bf01      	itttt	eq
 800a298:	6819      	ldreq	r1, [r3, #0]
 800a29a:	685b      	ldreq	r3, [r3, #4]
 800a29c:	1809      	addeq	r1, r1, r0
 800a29e:	6021      	streq	r1, [r4, #0]
 800a2a0:	6063      	str	r3, [r4, #4]
 800a2a2:	6054      	str	r4, [r2, #4]
 800a2a4:	e7cb      	b.n	800a23e <_free_r+0x22>
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	20000e58 	.word	0x20000e58

0800a2ac <sbrk_aligned>:
 800a2ac:	b570      	push	{r4, r5, r6, lr}
 800a2ae:	4e0e      	ldr	r6, [pc, #56]	; (800a2e8 <sbrk_aligned+0x3c>)
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	6831      	ldr	r1, [r6, #0]
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	b911      	cbnz	r1, 800a2be <sbrk_aligned+0x12>
 800a2b8:	f000 fb7a 	bl	800a9b0 <_sbrk_r>
 800a2bc:	6030      	str	r0, [r6, #0]
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f000 fb75 	bl	800a9b0 <_sbrk_r>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	d00a      	beq.n	800a2e0 <sbrk_aligned+0x34>
 800a2ca:	1cc4      	adds	r4, r0, #3
 800a2cc:	f024 0403 	bic.w	r4, r4, #3
 800a2d0:	42a0      	cmp	r0, r4
 800a2d2:	d007      	beq.n	800a2e4 <sbrk_aligned+0x38>
 800a2d4:	1a21      	subs	r1, r4, r0
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 fb6a 	bl	800a9b0 <_sbrk_r>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d101      	bne.n	800a2e4 <sbrk_aligned+0x38>
 800a2e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	20000e5c 	.word	0x20000e5c

0800a2ec <_malloc_r>:
 800a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f0:	1ccd      	adds	r5, r1, #3
 800a2f2:	f025 0503 	bic.w	r5, r5, #3
 800a2f6:	3508      	adds	r5, #8
 800a2f8:	2d0c      	cmp	r5, #12
 800a2fa:	bf38      	it	cc
 800a2fc:	250c      	movcc	r5, #12
 800a2fe:	2d00      	cmp	r5, #0
 800a300:	4607      	mov	r7, r0
 800a302:	db01      	blt.n	800a308 <_malloc_r+0x1c>
 800a304:	42a9      	cmp	r1, r5
 800a306:	d905      	bls.n	800a314 <_malloc_r+0x28>
 800a308:	230c      	movs	r3, #12
 800a30a:	2600      	movs	r6, #0
 800a30c:	603b      	str	r3, [r7, #0]
 800a30e:	4630      	mov	r0, r6
 800a310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a314:	4e2e      	ldr	r6, [pc, #184]	; (800a3d0 <_malloc_r+0xe4>)
 800a316:	f000 fe4d 	bl	800afb4 <__malloc_lock>
 800a31a:	6833      	ldr	r3, [r6, #0]
 800a31c:	461c      	mov	r4, r3
 800a31e:	bb34      	cbnz	r4, 800a36e <_malloc_r+0x82>
 800a320:	4629      	mov	r1, r5
 800a322:	4638      	mov	r0, r7
 800a324:	f7ff ffc2 	bl	800a2ac <sbrk_aligned>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	4604      	mov	r4, r0
 800a32c:	d14d      	bne.n	800a3ca <_malloc_r+0xde>
 800a32e:	6834      	ldr	r4, [r6, #0]
 800a330:	4626      	mov	r6, r4
 800a332:	2e00      	cmp	r6, #0
 800a334:	d140      	bne.n	800a3b8 <_malloc_r+0xcc>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	4631      	mov	r1, r6
 800a33a:	4638      	mov	r0, r7
 800a33c:	eb04 0803 	add.w	r8, r4, r3
 800a340:	f000 fb36 	bl	800a9b0 <_sbrk_r>
 800a344:	4580      	cmp	r8, r0
 800a346:	d13a      	bne.n	800a3be <_malloc_r+0xd2>
 800a348:	6821      	ldr	r1, [r4, #0]
 800a34a:	3503      	adds	r5, #3
 800a34c:	1a6d      	subs	r5, r5, r1
 800a34e:	f025 0503 	bic.w	r5, r5, #3
 800a352:	3508      	adds	r5, #8
 800a354:	2d0c      	cmp	r5, #12
 800a356:	bf38      	it	cc
 800a358:	250c      	movcc	r5, #12
 800a35a:	4638      	mov	r0, r7
 800a35c:	4629      	mov	r1, r5
 800a35e:	f7ff ffa5 	bl	800a2ac <sbrk_aligned>
 800a362:	3001      	adds	r0, #1
 800a364:	d02b      	beq.n	800a3be <_malloc_r+0xd2>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	442b      	add	r3, r5
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	e00e      	b.n	800a38c <_malloc_r+0xa0>
 800a36e:	6822      	ldr	r2, [r4, #0]
 800a370:	1b52      	subs	r2, r2, r5
 800a372:	d41e      	bmi.n	800a3b2 <_malloc_r+0xc6>
 800a374:	2a0b      	cmp	r2, #11
 800a376:	d916      	bls.n	800a3a6 <_malloc_r+0xba>
 800a378:	1961      	adds	r1, r4, r5
 800a37a:	42a3      	cmp	r3, r4
 800a37c:	6025      	str	r5, [r4, #0]
 800a37e:	bf18      	it	ne
 800a380:	6059      	strne	r1, [r3, #4]
 800a382:	6863      	ldr	r3, [r4, #4]
 800a384:	bf08      	it	eq
 800a386:	6031      	streq	r1, [r6, #0]
 800a388:	5162      	str	r2, [r4, r5]
 800a38a:	604b      	str	r3, [r1, #4]
 800a38c:	4638      	mov	r0, r7
 800a38e:	f104 060b 	add.w	r6, r4, #11
 800a392:	f000 fe15 	bl	800afc0 <__malloc_unlock>
 800a396:	f026 0607 	bic.w	r6, r6, #7
 800a39a:	1d23      	adds	r3, r4, #4
 800a39c:	1af2      	subs	r2, r6, r3
 800a39e:	d0b6      	beq.n	800a30e <_malloc_r+0x22>
 800a3a0:	1b9b      	subs	r3, r3, r6
 800a3a2:	50a3      	str	r3, [r4, r2]
 800a3a4:	e7b3      	b.n	800a30e <_malloc_r+0x22>
 800a3a6:	6862      	ldr	r2, [r4, #4]
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	bf0c      	ite	eq
 800a3ac:	6032      	streq	r2, [r6, #0]
 800a3ae:	605a      	strne	r2, [r3, #4]
 800a3b0:	e7ec      	b.n	800a38c <_malloc_r+0xa0>
 800a3b2:	4623      	mov	r3, r4
 800a3b4:	6864      	ldr	r4, [r4, #4]
 800a3b6:	e7b2      	b.n	800a31e <_malloc_r+0x32>
 800a3b8:	4634      	mov	r4, r6
 800a3ba:	6876      	ldr	r6, [r6, #4]
 800a3bc:	e7b9      	b.n	800a332 <_malloc_r+0x46>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	f000 fdfc 	bl	800afc0 <__malloc_unlock>
 800a3c8:	e7a1      	b.n	800a30e <_malloc_r+0x22>
 800a3ca:	6025      	str	r5, [r4, #0]
 800a3cc:	e7de      	b.n	800a38c <_malloc_r+0xa0>
 800a3ce:	bf00      	nop
 800a3d0:	20000e58 	.word	0x20000e58

0800a3d4 <__sfputc_r>:
 800a3d4:	6893      	ldr	r3, [r2, #8]
 800a3d6:	b410      	push	{r4}
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	6093      	str	r3, [r2, #8]
 800a3de:	da07      	bge.n	800a3f0 <__sfputc_r+0x1c>
 800a3e0:	6994      	ldr	r4, [r2, #24]
 800a3e2:	42a3      	cmp	r3, r4
 800a3e4:	db01      	blt.n	800a3ea <__sfputc_r+0x16>
 800a3e6:	290a      	cmp	r1, #10
 800a3e8:	d102      	bne.n	800a3f0 <__sfputc_r+0x1c>
 800a3ea:	bc10      	pop	{r4}
 800a3ec:	f000 baf0 	b.w	800a9d0 <__swbuf_r>
 800a3f0:	6813      	ldr	r3, [r2, #0]
 800a3f2:	1c58      	adds	r0, r3, #1
 800a3f4:	6010      	str	r0, [r2, #0]
 800a3f6:	7019      	strb	r1, [r3, #0]
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	bc10      	pop	{r4}
 800a3fc:	4770      	bx	lr

0800a3fe <__sfputs_r>:
 800a3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a400:	4606      	mov	r6, r0
 800a402:	460f      	mov	r7, r1
 800a404:	4614      	mov	r4, r2
 800a406:	18d5      	adds	r5, r2, r3
 800a408:	42ac      	cmp	r4, r5
 800a40a:	d101      	bne.n	800a410 <__sfputs_r+0x12>
 800a40c:	2000      	movs	r0, #0
 800a40e:	e007      	b.n	800a420 <__sfputs_r+0x22>
 800a410:	463a      	mov	r2, r7
 800a412:	4630      	mov	r0, r6
 800a414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a418:	f7ff ffdc 	bl	800a3d4 <__sfputc_r>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d1f3      	bne.n	800a408 <__sfputs_r+0xa>
 800a420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a424 <_vfiprintf_r>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	460d      	mov	r5, r1
 800a42a:	4614      	mov	r4, r2
 800a42c:	4698      	mov	r8, r3
 800a42e:	4606      	mov	r6, r0
 800a430:	b09d      	sub	sp, #116	; 0x74
 800a432:	b118      	cbz	r0, 800a43c <_vfiprintf_r+0x18>
 800a434:	6983      	ldr	r3, [r0, #24]
 800a436:	b90b      	cbnz	r3, 800a43c <_vfiprintf_r+0x18>
 800a438:	f000 fca8 	bl	800ad8c <__sinit>
 800a43c:	4b89      	ldr	r3, [pc, #548]	; (800a664 <_vfiprintf_r+0x240>)
 800a43e:	429d      	cmp	r5, r3
 800a440:	d11b      	bne.n	800a47a <_vfiprintf_r+0x56>
 800a442:	6875      	ldr	r5, [r6, #4]
 800a444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a446:	07d9      	lsls	r1, r3, #31
 800a448:	d405      	bmi.n	800a456 <_vfiprintf_r+0x32>
 800a44a:	89ab      	ldrh	r3, [r5, #12]
 800a44c:	059a      	lsls	r2, r3, #22
 800a44e:	d402      	bmi.n	800a456 <_vfiprintf_r+0x32>
 800a450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a452:	f000 fd39 	bl	800aec8 <__retarget_lock_acquire_recursive>
 800a456:	89ab      	ldrh	r3, [r5, #12]
 800a458:	071b      	lsls	r3, r3, #28
 800a45a:	d501      	bpl.n	800a460 <_vfiprintf_r+0x3c>
 800a45c:	692b      	ldr	r3, [r5, #16]
 800a45e:	b9eb      	cbnz	r3, 800a49c <_vfiprintf_r+0x78>
 800a460:	4629      	mov	r1, r5
 800a462:	4630      	mov	r0, r6
 800a464:	f000 fb06 	bl	800aa74 <__swsetup_r>
 800a468:	b1c0      	cbz	r0, 800a49c <_vfiprintf_r+0x78>
 800a46a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a46c:	07dc      	lsls	r4, r3, #31
 800a46e:	d50e      	bpl.n	800a48e <_vfiprintf_r+0x6a>
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	b01d      	add	sp, #116	; 0x74
 800a476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47a:	4b7b      	ldr	r3, [pc, #492]	; (800a668 <_vfiprintf_r+0x244>)
 800a47c:	429d      	cmp	r5, r3
 800a47e:	d101      	bne.n	800a484 <_vfiprintf_r+0x60>
 800a480:	68b5      	ldr	r5, [r6, #8]
 800a482:	e7df      	b.n	800a444 <_vfiprintf_r+0x20>
 800a484:	4b79      	ldr	r3, [pc, #484]	; (800a66c <_vfiprintf_r+0x248>)
 800a486:	429d      	cmp	r5, r3
 800a488:	bf08      	it	eq
 800a48a:	68f5      	ldreq	r5, [r6, #12]
 800a48c:	e7da      	b.n	800a444 <_vfiprintf_r+0x20>
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	0598      	lsls	r0, r3, #22
 800a492:	d4ed      	bmi.n	800a470 <_vfiprintf_r+0x4c>
 800a494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a496:	f000 fd18 	bl	800aeca <__retarget_lock_release_recursive>
 800a49a:	e7e9      	b.n	800a470 <_vfiprintf_r+0x4c>
 800a49c:	2300      	movs	r3, #0
 800a49e:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a0:	2320      	movs	r3, #32
 800a4a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4a6:	2330      	movs	r3, #48	; 0x30
 800a4a8:	f04f 0901 	mov.w	r9, #1
 800a4ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a670 <_vfiprintf_r+0x24c>
 800a4b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	469a      	mov	sl, r3
 800a4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4c0:	b10a      	cbz	r2, 800a4c6 <_vfiprintf_r+0xa2>
 800a4c2:	2a25      	cmp	r2, #37	; 0x25
 800a4c4:	d1f9      	bne.n	800a4ba <_vfiprintf_r+0x96>
 800a4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ca:	d00b      	beq.n	800a4e4 <_vfiprintf_r+0xc0>
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff ff93 	bl	800a3fe <__sfputs_r>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f000 80aa 	beq.w	800a632 <_vfiprintf_r+0x20e>
 800a4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e0:	445a      	add	r2, fp
 800a4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 80a2 	beq.w	800a632 <_vfiprintf_r+0x20e>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f8:	f10a 0a01 	add.w	sl, sl, #1
 800a4fc:	9304      	str	r3, [sp, #16]
 800a4fe:	9307      	str	r3, [sp, #28]
 800a500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a504:	931a      	str	r3, [sp, #104]	; 0x68
 800a506:	4654      	mov	r4, sl
 800a508:	2205      	movs	r2, #5
 800a50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50e:	4858      	ldr	r0, [pc, #352]	; (800a670 <_vfiprintf_r+0x24c>)
 800a510:	f000 fd42 	bl	800af98 <memchr>
 800a514:	9a04      	ldr	r2, [sp, #16]
 800a516:	b9d8      	cbnz	r0, 800a550 <_vfiprintf_r+0x12c>
 800a518:	06d1      	lsls	r1, r2, #27
 800a51a:	bf44      	itt	mi
 800a51c:	2320      	movmi	r3, #32
 800a51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a522:	0713      	lsls	r3, r2, #28
 800a524:	bf44      	itt	mi
 800a526:	232b      	movmi	r3, #43	; 0x2b
 800a528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a52c:	f89a 3000 	ldrb.w	r3, [sl]
 800a530:	2b2a      	cmp	r3, #42	; 0x2a
 800a532:	d015      	beq.n	800a560 <_vfiprintf_r+0x13c>
 800a534:	4654      	mov	r4, sl
 800a536:	2000      	movs	r0, #0
 800a538:	f04f 0c0a 	mov.w	ip, #10
 800a53c:	9a07      	ldr	r2, [sp, #28]
 800a53e:	4621      	mov	r1, r4
 800a540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a544:	3b30      	subs	r3, #48	; 0x30
 800a546:	2b09      	cmp	r3, #9
 800a548:	d94e      	bls.n	800a5e8 <_vfiprintf_r+0x1c4>
 800a54a:	b1b0      	cbz	r0, 800a57a <_vfiprintf_r+0x156>
 800a54c:	9207      	str	r2, [sp, #28]
 800a54e:	e014      	b.n	800a57a <_vfiprintf_r+0x156>
 800a550:	eba0 0308 	sub.w	r3, r0, r8
 800a554:	fa09 f303 	lsl.w	r3, r9, r3
 800a558:	4313      	orrs	r3, r2
 800a55a:	46a2      	mov	sl, r4
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	e7d2      	b.n	800a506 <_vfiprintf_r+0xe2>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	1d19      	adds	r1, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9103      	str	r1, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfbb      	ittet	lt
 800a56c:	425b      	neglt	r3, r3
 800a56e:	f042 0202 	orrlt.w	r2, r2, #2
 800a572:	9307      	strge	r3, [sp, #28]
 800a574:	9307      	strlt	r3, [sp, #28]
 800a576:	bfb8      	it	lt
 800a578:	9204      	strlt	r2, [sp, #16]
 800a57a:	7823      	ldrb	r3, [r4, #0]
 800a57c:	2b2e      	cmp	r3, #46	; 0x2e
 800a57e:	d10c      	bne.n	800a59a <_vfiprintf_r+0x176>
 800a580:	7863      	ldrb	r3, [r4, #1]
 800a582:	2b2a      	cmp	r3, #42	; 0x2a
 800a584:	d135      	bne.n	800a5f2 <_vfiprintf_r+0x1ce>
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	3402      	adds	r4, #2
 800a58a:	1d1a      	adds	r2, r3, #4
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	9203      	str	r2, [sp, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	bfb8      	it	lt
 800a594:	f04f 33ff 	movlt.w	r3, #4294967295
 800a598:	9305      	str	r3, [sp, #20]
 800a59a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a674 <_vfiprintf_r+0x250>
 800a59e:	2203      	movs	r2, #3
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	7821      	ldrb	r1, [r4, #0]
 800a5a4:	f000 fcf8 	bl	800af98 <memchr>
 800a5a8:	b140      	cbz	r0, 800a5bc <_vfiprintf_r+0x198>
 800a5aa:	2340      	movs	r3, #64	; 0x40
 800a5ac:	eba0 000a 	sub.w	r0, r0, sl
 800a5b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a5b4:	9b04      	ldr	r3, [sp, #16]
 800a5b6:	3401      	adds	r4, #1
 800a5b8:	4303      	orrs	r3, r0
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c0:	2206      	movs	r2, #6
 800a5c2:	482d      	ldr	r0, [pc, #180]	; (800a678 <_vfiprintf_r+0x254>)
 800a5c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5c8:	f000 fce6 	bl	800af98 <memchr>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d03f      	beq.n	800a650 <_vfiprintf_r+0x22c>
 800a5d0:	4b2a      	ldr	r3, [pc, #168]	; (800a67c <_vfiprintf_r+0x258>)
 800a5d2:	bb1b      	cbnz	r3, 800a61c <_vfiprintf_r+0x1f8>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	3307      	adds	r3, #7
 800a5d8:	f023 0307 	bic.w	r3, r3, #7
 800a5dc:	3308      	adds	r3, #8
 800a5de:	9303      	str	r3, [sp, #12]
 800a5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e2:	443b      	add	r3, r7
 800a5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e6:	e767      	b.n	800a4b8 <_vfiprintf_r+0x94>
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f0:	e7a5      	b.n	800a53e <_vfiprintf_r+0x11a>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f04f 0c0a 	mov.w	ip, #10
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	3401      	adds	r4, #1
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	4620      	mov	r0, r4
 800a600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a604:	3a30      	subs	r2, #48	; 0x30
 800a606:	2a09      	cmp	r2, #9
 800a608:	d903      	bls.n	800a612 <_vfiprintf_r+0x1ee>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d0c5      	beq.n	800a59a <_vfiprintf_r+0x176>
 800a60e:	9105      	str	r1, [sp, #20]
 800a610:	e7c3      	b.n	800a59a <_vfiprintf_r+0x176>
 800a612:	4604      	mov	r4, r0
 800a614:	2301      	movs	r3, #1
 800a616:	fb0c 2101 	mla	r1, ip, r1, r2
 800a61a:	e7f0      	b.n	800a5fe <_vfiprintf_r+0x1da>
 800a61c:	ab03      	add	r3, sp, #12
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	462a      	mov	r2, r5
 800a622:	4630      	mov	r0, r6
 800a624:	4b16      	ldr	r3, [pc, #88]	; (800a680 <_vfiprintf_r+0x25c>)
 800a626:	a904      	add	r1, sp, #16
 800a628:	f3af 8000 	nop.w
 800a62c:	4607      	mov	r7, r0
 800a62e:	1c78      	adds	r0, r7, #1
 800a630:	d1d6      	bne.n	800a5e0 <_vfiprintf_r+0x1bc>
 800a632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a634:	07d9      	lsls	r1, r3, #31
 800a636:	d405      	bmi.n	800a644 <_vfiprintf_r+0x220>
 800a638:	89ab      	ldrh	r3, [r5, #12]
 800a63a:	059a      	lsls	r2, r3, #22
 800a63c:	d402      	bmi.n	800a644 <_vfiprintf_r+0x220>
 800a63e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a640:	f000 fc43 	bl	800aeca <__retarget_lock_release_recursive>
 800a644:	89ab      	ldrh	r3, [r5, #12]
 800a646:	065b      	lsls	r3, r3, #25
 800a648:	f53f af12 	bmi.w	800a470 <_vfiprintf_r+0x4c>
 800a64c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a64e:	e711      	b.n	800a474 <_vfiprintf_r+0x50>
 800a650:	ab03      	add	r3, sp, #12
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	462a      	mov	r2, r5
 800a656:	4630      	mov	r0, r6
 800a658:	4b09      	ldr	r3, [pc, #36]	; (800a680 <_vfiprintf_r+0x25c>)
 800a65a:	a904      	add	r1, sp, #16
 800a65c:	f000 f882 	bl	800a764 <_printf_i>
 800a660:	e7e4      	b.n	800a62c <_vfiprintf_r+0x208>
 800a662:	bf00      	nop
 800a664:	0800b43c 	.word	0x0800b43c
 800a668:	0800b45c 	.word	0x0800b45c
 800a66c:	0800b41c 	.word	0x0800b41c
 800a670:	0800b3e9 	.word	0x0800b3e9
 800a674:	0800b3ef 	.word	0x0800b3ef
 800a678:	0800b3f3 	.word	0x0800b3f3
 800a67c:	00000000 	.word	0x00000000
 800a680:	0800a3ff 	.word	0x0800a3ff

0800a684 <_printf_common>:
 800a684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a688:	4616      	mov	r6, r2
 800a68a:	4699      	mov	r9, r3
 800a68c:	688a      	ldr	r2, [r1, #8]
 800a68e:	690b      	ldr	r3, [r1, #16]
 800a690:	4607      	mov	r7, r0
 800a692:	4293      	cmp	r3, r2
 800a694:	bfb8      	it	lt
 800a696:	4613      	movlt	r3, r2
 800a698:	6033      	str	r3, [r6, #0]
 800a69a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a69e:	460c      	mov	r4, r1
 800a6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6a4:	b10a      	cbz	r2, 800a6aa <_printf_common+0x26>
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	6033      	str	r3, [r6, #0]
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	0699      	lsls	r1, r3, #26
 800a6ae:	bf42      	ittt	mi
 800a6b0:	6833      	ldrmi	r3, [r6, #0]
 800a6b2:	3302      	addmi	r3, #2
 800a6b4:	6033      	strmi	r3, [r6, #0]
 800a6b6:	6825      	ldr	r5, [r4, #0]
 800a6b8:	f015 0506 	ands.w	r5, r5, #6
 800a6bc:	d106      	bne.n	800a6cc <_printf_common+0x48>
 800a6be:	f104 0a19 	add.w	sl, r4, #25
 800a6c2:	68e3      	ldr	r3, [r4, #12]
 800a6c4:	6832      	ldr	r2, [r6, #0]
 800a6c6:	1a9b      	subs	r3, r3, r2
 800a6c8:	42ab      	cmp	r3, r5
 800a6ca:	dc28      	bgt.n	800a71e <_printf_common+0x9a>
 800a6cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6d0:	1e13      	subs	r3, r2, #0
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	bf18      	it	ne
 800a6d6:	2301      	movne	r3, #1
 800a6d8:	0692      	lsls	r2, r2, #26
 800a6da:	d42d      	bmi.n	800a738 <_printf_common+0xb4>
 800a6dc:	4649      	mov	r1, r9
 800a6de:	4638      	mov	r0, r7
 800a6e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6e4:	47c0      	blx	r8
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d020      	beq.n	800a72c <_printf_common+0xa8>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	68e5      	ldr	r5, [r4, #12]
 800a6ee:	f003 0306 	and.w	r3, r3, #6
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	bf18      	it	ne
 800a6f6:	2500      	movne	r5, #0
 800a6f8:	6832      	ldr	r2, [r6, #0]
 800a6fa:	f04f 0600 	mov.w	r6, #0
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	bf08      	it	eq
 800a702:	1aad      	subeq	r5, r5, r2
 800a704:	6922      	ldr	r2, [r4, #16]
 800a706:	bf08      	it	eq
 800a708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a70c:	4293      	cmp	r3, r2
 800a70e:	bfc4      	itt	gt
 800a710:	1a9b      	subgt	r3, r3, r2
 800a712:	18ed      	addgt	r5, r5, r3
 800a714:	341a      	adds	r4, #26
 800a716:	42b5      	cmp	r5, r6
 800a718:	d11a      	bne.n	800a750 <_printf_common+0xcc>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e008      	b.n	800a730 <_printf_common+0xac>
 800a71e:	2301      	movs	r3, #1
 800a720:	4652      	mov	r2, sl
 800a722:	4649      	mov	r1, r9
 800a724:	4638      	mov	r0, r7
 800a726:	47c0      	blx	r8
 800a728:	3001      	adds	r0, #1
 800a72a:	d103      	bne.n	800a734 <_printf_common+0xb0>
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	3501      	adds	r5, #1
 800a736:	e7c4      	b.n	800a6c2 <_printf_common+0x3e>
 800a738:	2030      	movs	r0, #48	; 0x30
 800a73a:	18e1      	adds	r1, r4, r3
 800a73c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a746:	4422      	add	r2, r4
 800a748:	3302      	adds	r3, #2
 800a74a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a74e:	e7c5      	b.n	800a6dc <_printf_common+0x58>
 800a750:	2301      	movs	r3, #1
 800a752:	4622      	mov	r2, r4
 800a754:	4649      	mov	r1, r9
 800a756:	4638      	mov	r0, r7
 800a758:	47c0      	blx	r8
 800a75a:	3001      	adds	r0, #1
 800a75c:	d0e6      	beq.n	800a72c <_printf_common+0xa8>
 800a75e:	3601      	adds	r6, #1
 800a760:	e7d9      	b.n	800a716 <_printf_common+0x92>
	...

0800a764 <_printf_i>:
 800a764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	7e0f      	ldrb	r7, [r1, #24]
 800a76a:	4691      	mov	r9, r2
 800a76c:	2f78      	cmp	r7, #120	; 0x78
 800a76e:	4680      	mov	r8, r0
 800a770:	460c      	mov	r4, r1
 800a772:	469a      	mov	sl, r3
 800a774:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a77a:	d807      	bhi.n	800a78c <_printf_i+0x28>
 800a77c:	2f62      	cmp	r7, #98	; 0x62
 800a77e:	d80a      	bhi.n	800a796 <_printf_i+0x32>
 800a780:	2f00      	cmp	r7, #0
 800a782:	f000 80d9 	beq.w	800a938 <_printf_i+0x1d4>
 800a786:	2f58      	cmp	r7, #88	; 0x58
 800a788:	f000 80a4 	beq.w	800a8d4 <_printf_i+0x170>
 800a78c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a794:	e03a      	b.n	800a80c <_printf_i+0xa8>
 800a796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a79a:	2b15      	cmp	r3, #21
 800a79c:	d8f6      	bhi.n	800a78c <_printf_i+0x28>
 800a79e:	a101      	add	r1, pc, #4	; (adr r1, 800a7a4 <_printf_i+0x40>)
 800a7a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7a4:	0800a7fd 	.word	0x0800a7fd
 800a7a8:	0800a811 	.word	0x0800a811
 800a7ac:	0800a78d 	.word	0x0800a78d
 800a7b0:	0800a78d 	.word	0x0800a78d
 800a7b4:	0800a78d 	.word	0x0800a78d
 800a7b8:	0800a78d 	.word	0x0800a78d
 800a7bc:	0800a811 	.word	0x0800a811
 800a7c0:	0800a78d 	.word	0x0800a78d
 800a7c4:	0800a78d 	.word	0x0800a78d
 800a7c8:	0800a78d 	.word	0x0800a78d
 800a7cc:	0800a78d 	.word	0x0800a78d
 800a7d0:	0800a91f 	.word	0x0800a91f
 800a7d4:	0800a841 	.word	0x0800a841
 800a7d8:	0800a901 	.word	0x0800a901
 800a7dc:	0800a78d 	.word	0x0800a78d
 800a7e0:	0800a78d 	.word	0x0800a78d
 800a7e4:	0800a941 	.word	0x0800a941
 800a7e8:	0800a78d 	.word	0x0800a78d
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a78d 	.word	0x0800a78d
 800a7f4:	0800a78d 	.word	0x0800a78d
 800a7f8:	0800a909 	.word	0x0800a909
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	1d1a      	adds	r2, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	602a      	str	r2, [r5, #0]
 800a804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a80c:	2301      	movs	r3, #1
 800a80e:	e0a4      	b.n	800a95a <_printf_i+0x1f6>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	6829      	ldr	r1, [r5, #0]
 800a814:	0606      	lsls	r6, r0, #24
 800a816:	f101 0304 	add.w	r3, r1, #4
 800a81a:	d50a      	bpl.n	800a832 <_printf_i+0xce>
 800a81c:	680e      	ldr	r6, [r1, #0]
 800a81e:	602b      	str	r3, [r5, #0]
 800a820:	2e00      	cmp	r6, #0
 800a822:	da03      	bge.n	800a82c <_printf_i+0xc8>
 800a824:	232d      	movs	r3, #45	; 0x2d
 800a826:	4276      	negs	r6, r6
 800a828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a82c:	230a      	movs	r3, #10
 800a82e:	485e      	ldr	r0, [pc, #376]	; (800a9a8 <_printf_i+0x244>)
 800a830:	e019      	b.n	800a866 <_printf_i+0x102>
 800a832:	680e      	ldr	r6, [r1, #0]
 800a834:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	bf18      	it	ne
 800a83c:	b236      	sxthne	r6, r6
 800a83e:	e7ef      	b.n	800a820 <_printf_i+0xbc>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	6820      	ldr	r0, [r4, #0]
 800a844:	1d19      	adds	r1, r3, #4
 800a846:	6029      	str	r1, [r5, #0]
 800a848:	0601      	lsls	r1, r0, #24
 800a84a:	d501      	bpl.n	800a850 <_printf_i+0xec>
 800a84c:	681e      	ldr	r6, [r3, #0]
 800a84e:	e002      	b.n	800a856 <_printf_i+0xf2>
 800a850:	0646      	lsls	r6, r0, #25
 800a852:	d5fb      	bpl.n	800a84c <_printf_i+0xe8>
 800a854:	881e      	ldrh	r6, [r3, #0]
 800a856:	2f6f      	cmp	r7, #111	; 0x6f
 800a858:	bf0c      	ite	eq
 800a85a:	2308      	moveq	r3, #8
 800a85c:	230a      	movne	r3, #10
 800a85e:	4852      	ldr	r0, [pc, #328]	; (800a9a8 <_printf_i+0x244>)
 800a860:	2100      	movs	r1, #0
 800a862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a866:	6865      	ldr	r5, [r4, #4]
 800a868:	2d00      	cmp	r5, #0
 800a86a:	bfa8      	it	ge
 800a86c:	6821      	ldrge	r1, [r4, #0]
 800a86e:	60a5      	str	r5, [r4, #8]
 800a870:	bfa4      	itt	ge
 800a872:	f021 0104 	bicge.w	r1, r1, #4
 800a876:	6021      	strge	r1, [r4, #0]
 800a878:	b90e      	cbnz	r6, 800a87e <_printf_i+0x11a>
 800a87a:	2d00      	cmp	r5, #0
 800a87c:	d04d      	beq.n	800a91a <_printf_i+0x1b6>
 800a87e:	4615      	mov	r5, r2
 800a880:	fbb6 f1f3 	udiv	r1, r6, r3
 800a884:	fb03 6711 	mls	r7, r3, r1, r6
 800a888:	5dc7      	ldrb	r7, [r0, r7]
 800a88a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a88e:	4637      	mov	r7, r6
 800a890:	42bb      	cmp	r3, r7
 800a892:	460e      	mov	r6, r1
 800a894:	d9f4      	bls.n	800a880 <_printf_i+0x11c>
 800a896:	2b08      	cmp	r3, #8
 800a898:	d10b      	bne.n	800a8b2 <_printf_i+0x14e>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	07de      	lsls	r6, r3, #31
 800a89e:	d508      	bpl.n	800a8b2 <_printf_i+0x14e>
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	6861      	ldr	r1, [r4, #4]
 800a8a4:	4299      	cmp	r1, r3
 800a8a6:	bfde      	ittt	le
 800a8a8:	2330      	movle	r3, #48	; 0x30
 800a8aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8b2:	1b52      	subs	r2, r2, r5
 800a8b4:	6122      	str	r2, [r4, #16]
 800a8b6:	464b      	mov	r3, r9
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	f8cd a000 	str.w	sl, [sp]
 800a8c0:	aa03      	add	r2, sp, #12
 800a8c2:	f7ff fedf 	bl	800a684 <_printf_common>
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d14c      	bne.n	800a964 <_printf_i+0x200>
 800a8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ce:	b004      	add	sp, #16
 800a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d4:	4834      	ldr	r0, [pc, #208]	; (800a9a8 <_printf_i+0x244>)
 800a8d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8da:	6829      	ldr	r1, [r5, #0]
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8e2:	6029      	str	r1, [r5, #0]
 800a8e4:	061d      	lsls	r5, r3, #24
 800a8e6:	d514      	bpl.n	800a912 <_printf_i+0x1ae>
 800a8e8:	07df      	lsls	r7, r3, #31
 800a8ea:	bf44      	itt	mi
 800a8ec:	f043 0320 	orrmi.w	r3, r3, #32
 800a8f0:	6023      	strmi	r3, [r4, #0]
 800a8f2:	b91e      	cbnz	r6, 800a8fc <_printf_i+0x198>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	f023 0320 	bic.w	r3, r3, #32
 800a8fa:	6023      	str	r3, [r4, #0]
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	e7af      	b.n	800a860 <_printf_i+0xfc>
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	f043 0320 	orr.w	r3, r3, #32
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	2378      	movs	r3, #120	; 0x78
 800a90a:	4828      	ldr	r0, [pc, #160]	; (800a9ac <_printf_i+0x248>)
 800a90c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a910:	e7e3      	b.n	800a8da <_printf_i+0x176>
 800a912:	0659      	lsls	r1, r3, #25
 800a914:	bf48      	it	mi
 800a916:	b2b6      	uxthmi	r6, r6
 800a918:	e7e6      	b.n	800a8e8 <_printf_i+0x184>
 800a91a:	4615      	mov	r5, r2
 800a91c:	e7bb      	b.n	800a896 <_printf_i+0x132>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	6826      	ldr	r6, [r4, #0]
 800a922:	1d18      	adds	r0, r3, #4
 800a924:	6961      	ldr	r1, [r4, #20]
 800a926:	6028      	str	r0, [r5, #0]
 800a928:	0635      	lsls	r5, r6, #24
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	d501      	bpl.n	800a932 <_printf_i+0x1ce>
 800a92e:	6019      	str	r1, [r3, #0]
 800a930:	e002      	b.n	800a938 <_printf_i+0x1d4>
 800a932:	0670      	lsls	r0, r6, #25
 800a934:	d5fb      	bpl.n	800a92e <_printf_i+0x1ca>
 800a936:	8019      	strh	r1, [r3, #0]
 800a938:	2300      	movs	r3, #0
 800a93a:	4615      	mov	r5, r2
 800a93c:	6123      	str	r3, [r4, #16]
 800a93e:	e7ba      	b.n	800a8b6 <_printf_i+0x152>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	2100      	movs	r1, #0
 800a944:	1d1a      	adds	r2, r3, #4
 800a946:	602a      	str	r2, [r5, #0]
 800a948:	681d      	ldr	r5, [r3, #0]
 800a94a:	6862      	ldr	r2, [r4, #4]
 800a94c:	4628      	mov	r0, r5
 800a94e:	f000 fb23 	bl	800af98 <memchr>
 800a952:	b108      	cbz	r0, 800a958 <_printf_i+0x1f4>
 800a954:	1b40      	subs	r0, r0, r5
 800a956:	6060      	str	r0, [r4, #4]
 800a958:	6863      	ldr	r3, [r4, #4]
 800a95a:	6123      	str	r3, [r4, #16]
 800a95c:	2300      	movs	r3, #0
 800a95e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a962:	e7a8      	b.n	800a8b6 <_printf_i+0x152>
 800a964:	462a      	mov	r2, r5
 800a966:	4649      	mov	r1, r9
 800a968:	4640      	mov	r0, r8
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	47d0      	blx	sl
 800a96e:	3001      	adds	r0, #1
 800a970:	d0ab      	beq.n	800a8ca <_printf_i+0x166>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	079b      	lsls	r3, r3, #30
 800a976:	d413      	bmi.n	800a9a0 <_printf_i+0x23c>
 800a978:	68e0      	ldr	r0, [r4, #12]
 800a97a:	9b03      	ldr	r3, [sp, #12]
 800a97c:	4298      	cmp	r0, r3
 800a97e:	bfb8      	it	lt
 800a980:	4618      	movlt	r0, r3
 800a982:	e7a4      	b.n	800a8ce <_printf_i+0x16a>
 800a984:	2301      	movs	r3, #1
 800a986:	4632      	mov	r2, r6
 800a988:	4649      	mov	r1, r9
 800a98a:	4640      	mov	r0, r8
 800a98c:	47d0      	blx	sl
 800a98e:	3001      	adds	r0, #1
 800a990:	d09b      	beq.n	800a8ca <_printf_i+0x166>
 800a992:	3501      	adds	r5, #1
 800a994:	68e3      	ldr	r3, [r4, #12]
 800a996:	9903      	ldr	r1, [sp, #12]
 800a998:	1a5b      	subs	r3, r3, r1
 800a99a:	42ab      	cmp	r3, r5
 800a99c:	dcf2      	bgt.n	800a984 <_printf_i+0x220>
 800a99e:	e7eb      	b.n	800a978 <_printf_i+0x214>
 800a9a0:	2500      	movs	r5, #0
 800a9a2:	f104 0619 	add.w	r6, r4, #25
 800a9a6:	e7f5      	b.n	800a994 <_printf_i+0x230>
 800a9a8:	0800b3fa 	.word	0x0800b3fa
 800a9ac:	0800b40b 	.word	0x0800b40b

0800a9b0 <_sbrk_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4d05      	ldr	r5, [pc, #20]	; (800a9cc <_sbrk_r+0x1c>)
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	602b      	str	r3, [r5, #0]
 800a9bc:	f7f6 ff76 	bl	80018ac <_sbrk>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_sbrk_r+0x1a>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_sbrk_r+0x1a>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	20000e64 	.word	0x20000e64

0800a9d0 <__swbuf_r>:
 800a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d2:	460e      	mov	r6, r1
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	b118      	cbz	r0, 800a9e2 <__swbuf_r+0x12>
 800a9da:	6983      	ldr	r3, [r0, #24]
 800a9dc:	b90b      	cbnz	r3, 800a9e2 <__swbuf_r+0x12>
 800a9de:	f000 f9d5 	bl	800ad8c <__sinit>
 800a9e2:	4b21      	ldr	r3, [pc, #132]	; (800aa68 <__swbuf_r+0x98>)
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	d12b      	bne.n	800aa40 <__swbuf_r+0x70>
 800a9e8:	686c      	ldr	r4, [r5, #4]
 800a9ea:	69a3      	ldr	r3, [r4, #24]
 800a9ec:	60a3      	str	r3, [r4, #8]
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	071a      	lsls	r2, r3, #28
 800a9f2:	d52f      	bpl.n	800aa54 <__swbuf_r+0x84>
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	b36b      	cbz	r3, 800aa54 <__swbuf_r+0x84>
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	6820      	ldr	r0, [r4, #0]
 800a9fc:	b2f6      	uxtb	r6, r6
 800a9fe:	1ac0      	subs	r0, r0, r3
 800aa00:	6963      	ldr	r3, [r4, #20]
 800aa02:	4637      	mov	r7, r6
 800aa04:	4283      	cmp	r3, r0
 800aa06:	dc04      	bgt.n	800aa12 <__swbuf_r+0x42>
 800aa08:	4621      	mov	r1, r4
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f000 f92a 	bl	800ac64 <_fflush_r>
 800aa10:	bb30      	cbnz	r0, 800aa60 <__swbuf_r+0x90>
 800aa12:	68a3      	ldr	r3, [r4, #8]
 800aa14:	3001      	adds	r0, #1
 800aa16:	3b01      	subs	r3, #1
 800aa18:	60a3      	str	r3, [r4, #8]
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	6022      	str	r2, [r4, #0]
 800aa20:	701e      	strb	r6, [r3, #0]
 800aa22:	6963      	ldr	r3, [r4, #20]
 800aa24:	4283      	cmp	r3, r0
 800aa26:	d004      	beq.n	800aa32 <__swbuf_r+0x62>
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	07db      	lsls	r3, r3, #31
 800aa2c:	d506      	bpl.n	800aa3c <__swbuf_r+0x6c>
 800aa2e:	2e0a      	cmp	r6, #10
 800aa30:	d104      	bne.n	800aa3c <__swbuf_r+0x6c>
 800aa32:	4621      	mov	r1, r4
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 f915 	bl	800ac64 <_fflush_r>
 800aa3a:	b988      	cbnz	r0, 800aa60 <__swbuf_r+0x90>
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa40:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <__swbuf_r+0x9c>)
 800aa42:	429c      	cmp	r4, r3
 800aa44:	d101      	bne.n	800aa4a <__swbuf_r+0x7a>
 800aa46:	68ac      	ldr	r4, [r5, #8]
 800aa48:	e7cf      	b.n	800a9ea <__swbuf_r+0x1a>
 800aa4a:	4b09      	ldr	r3, [pc, #36]	; (800aa70 <__swbuf_r+0xa0>)
 800aa4c:	429c      	cmp	r4, r3
 800aa4e:	bf08      	it	eq
 800aa50:	68ec      	ldreq	r4, [r5, #12]
 800aa52:	e7ca      	b.n	800a9ea <__swbuf_r+0x1a>
 800aa54:	4621      	mov	r1, r4
 800aa56:	4628      	mov	r0, r5
 800aa58:	f000 f80c 	bl	800aa74 <__swsetup_r>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d0cb      	beq.n	800a9f8 <__swbuf_r+0x28>
 800aa60:	f04f 37ff 	mov.w	r7, #4294967295
 800aa64:	e7ea      	b.n	800aa3c <__swbuf_r+0x6c>
 800aa66:	bf00      	nop
 800aa68:	0800b43c 	.word	0x0800b43c
 800aa6c:	0800b45c 	.word	0x0800b45c
 800aa70:	0800b41c 	.word	0x0800b41c

0800aa74 <__swsetup_r>:
 800aa74:	4b32      	ldr	r3, [pc, #200]	; (800ab40 <__swsetup_r+0xcc>)
 800aa76:	b570      	push	{r4, r5, r6, lr}
 800aa78:	681d      	ldr	r5, [r3, #0]
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	b125      	cbz	r5, 800aa8a <__swsetup_r+0x16>
 800aa80:	69ab      	ldr	r3, [r5, #24]
 800aa82:	b913      	cbnz	r3, 800aa8a <__swsetup_r+0x16>
 800aa84:	4628      	mov	r0, r5
 800aa86:	f000 f981 	bl	800ad8c <__sinit>
 800aa8a:	4b2e      	ldr	r3, [pc, #184]	; (800ab44 <__swsetup_r+0xd0>)
 800aa8c:	429c      	cmp	r4, r3
 800aa8e:	d10f      	bne.n	800aab0 <__swsetup_r+0x3c>
 800aa90:	686c      	ldr	r4, [r5, #4]
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa98:	0719      	lsls	r1, r3, #28
 800aa9a:	d42c      	bmi.n	800aaf6 <__swsetup_r+0x82>
 800aa9c:	06dd      	lsls	r5, r3, #27
 800aa9e:	d411      	bmi.n	800aac4 <__swsetup_r+0x50>
 800aaa0:	2309      	movs	r3, #9
 800aaa2:	6033      	str	r3, [r6, #0]
 800aaa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	e03e      	b.n	800ab2e <__swsetup_r+0xba>
 800aab0:	4b25      	ldr	r3, [pc, #148]	; (800ab48 <__swsetup_r+0xd4>)
 800aab2:	429c      	cmp	r4, r3
 800aab4:	d101      	bne.n	800aaba <__swsetup_r+0x46>
 800aab6:	68ac      	ldr	r4, [r5, #8]
 800aab8:	e7eb      	b.n	800aa92 <__swsetup_r+0x1e>
 800aaba:	4b24      	ldr	r3, [pc, #144]	; (800ab4c <__swsetup_r+0xd8>)
 800aabc:	429c      	cmp	r4, r3
 800aabe:	bf08      	it	eq
 800aac0:	68ec      	ldreq	r4, [r5, #12]
 800aac2:	e7e6      	b.n	800aa92 <__swsetup_r+0x1e>
 800aac4:	0758      	lsls	r0, r3, #29
 800aac6:	d512      	bpl.n	800aaee <__swsetup_r+0x7a>
 800aac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaca:	b141      	cbz	r1, 800aade <__swsetup_r+0x6a>
 800aacc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aad0:	4299      	cmp	r1, r3
 800aad2:	d002      	beq.n	800aada <__swsetup_r+0x66>
 800aad4:	4630      	mov	r0, r6
 800aad6:	f7ff fba1 	bl	800a21c <_free_r>
 800aada:	2300      	movs	r3, #0
 800aadc:	6363      	str	r3, [r4, #52]	; 0x34
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	2300      	movs	r3, #0
 800aae8:	6063      	str	r3, [r4, #4]
 800aaea:	6923      	ldr	r3, [r4, #16]
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f043 0308 	orr.w	r3, r3, #8
 800aaf4:	81a3      	strh	r3, [r4, #12]
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	b94b      	cbnz	r3, 800ab0e <__swsetup_r+0x9a>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab04:	d003      	beq.n	800ab0e <__swsetup_r+0x9a>
 800ab06:	4621      	mov	r1, r4
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f000 fa05 	bl	800af18 <__smakebuf_r>
 800ab0e:	89a0      	ldrh	r0, [r4, #12]
 800ab10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab14:	f010 0301 	ands.w	r3, r0, #1
 800ab18:	d00a      	beq.n	800ab30 <__swsetup_r+0xbc>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60a3      	str	r3, [r4, #8]
 800ab1e:	6963      	ldr	r3, [r4, #20]
 800ab20:	425b      	negs	r3, r3
 800ab22:	61a3      	str	r3, [r4, #24]
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	b943      	cbnz	r3, 800ab3a <__swsetup_r+0xc6>
 800ab28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab2c:	d1ba      	bne.n	800aaa4 <__swsetup_r+0x30>
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
 800ab30:	0781      	lsls	r1, r0, #30
 800ab32:	bf58      	it	pl
 800ab34:	6963      	ldrpl	r3, [r4, #20]
 800ab36:	60a3      	str	r3, [r4, #8]
 800ab38:	e7f4      	b.n	800ab24 <__swsetup_r+0xb0>
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e7f7      	b.n	800ab2e <__swsetup_r+0xba>
 800ab3e:	bf00      	nop
 800ab40:	200001c0 	.word	0x200001c0
 800ab44:	0800b43c 	.word	0x0800b43c
 800ab48:	0800b45c 	.word	0x0800b45c
 800ab4c:	0800b41c 	.word	0x0800b41c

0800ab50 <abort>:
 800ab50:	2006      	movs	r0, #6
 800ab52:	b508      	push	{r3, lr}
 800ab54:	f000 fa62 	bl	800b01c <raise>
 800ab58:	2001      	movs	r0, #1
 800ab5a:	f7f6 fe34 	bl	80017c6 <_exit>
	...

0800ab60 <__sflush_r>:
 800ab60:	898a      	ldrh	r2, [r1, #12]
 800ab62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab64:	4605      	mov	r5, r0
 800ab66:	0710      	lsls	r0, r2, #28
 800ab68:	460c      	mov	r4, r1
 800ab6a:	d457      	bmi.n	800ac1c <__sflush_r+0xbc>
 800ab6c:	684b      	ldr	r3, [r1, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	dc04      	bgt.n	800ab7c <__sflush_r+0x1c>
 800ab72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	dc01      	bgt.n	800ab7c <__sflush_r+0x1c>
 800ab78:	2000      	movs	r0, #0
 800ab7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab7e:	2e00      	cmp	r6, #0
 800ab80:	d0fa      	beq.n	800ab78 <__sflush_r+0x18>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab88:	682f      	ldr	r7, [r5, #0]
 800ab8a:	602b      	str	r3, [r5, #0]
 800ab8c:	d032      	beq.n	800abf4 <__sflush_r+0x94>
 800ab8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	075a      	lsls	r2, r3, #29
 800ab94:	d505      	bpl.n	800aba2 <__sflush_r+0x42>
 800ab96:	6863      	ldr	r3, [r4, #4]
 800ab98:	1ac0      	subs	r0, r0, r3
 800ab9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab9c:	b10b      	cbz	r3, 800aba2 <__sflush_r+0x42>
 800ab9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aba0:	1ac0      	subs	r0, r0, r3
 800aba2:	2300      	movs	r3, #0
 800aba4:	4602      	mov	r2, r0
 800aba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aba8:	4628      	mov	r0, r5
 800abaa:	6a21      	ldr	r1, [r4, #32]
 800abac:	47b0      	blx	r6
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	d106      	bne.n	800abc2 <__sflush_r+0x62>
 800abb4:	6829      	ldr	r1, [r5, #0]
 800abb6:	291d      	cmp	r1, #29
 800abb8:	d82c      	bhi.n	800ac14 <__sflush_r+0xb4>
 800abba:	4a29      	ldr	r2, [pc, #164]	; (800ac60 <__sflush_r+0x100>)
 800abbc:	40ca      	lsrs	r2, r1
 800abbe:	07d6      	lsls	r6, r2, #31
 800abc0:	d528      	bpl.n	800ac14 <__sflush_r+0xb4>
 800abc2:	2200      	movs	r2, #0
 800abc4:	6062      	str	r2, [r4, #4]
 800abc6:	6922      	ldr	r2, [r4, #16]
 800abc8:	04d9      	lsls	r1, r3, #19
 800abca:	6022      	str	r2, [r4, #0]
 800abcc:	d504      	bpl.n	800abd8 <__sflush_r+0x78>
 800abce:	1c42      	adds	r2, r0, #1
 800abd0:	d101      	bne.n	800abd6 <__sflush_r+0x76>
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	b903      	cbnz	r3, 800abd8 <__sflush_r+0x78>
 800abd6:	6560      	str	r0, [r4, #84]	; 0x54
 800abd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abda:	602f      	str	r7, [r5, #0]
 800abdc:	2900      	cmp	r1, #0
 800abde:	d0cb      	beq.n	800ab78 <__sflush_r+0x18>
 800abe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abe4:	4299      	cmp	r1, r3
 800abe6:	d002      	beq.n	800abee <__sflush_r+0x8e>
 800abe8:	4628      	mov	r0, r5
 800abea:	f7ff fb17 	bl	800a21c <_free_r>
 800abee:	2000      	movs	r0, #0
 800abf0:	6360      	str	r0, [r4, #52]	; 0x34
 800abf2:	e7c2      	b.n	800ab7a <__sflush_r+0x1a>
 800abf4:	6a21      	ldr	r1, [r4, #32]
 800abf6:	2301      	movs	r3, #1
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b0      	blx	r6
 800abfc:	1c41      	adds	r1, r0, #1
 800abfe:	d1c7      	bne.n	800ab90 <__sflush_r+0x30>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0c4      	beq.n	800ab90 <__sflush_r+0x30>
 800ac06:	2b1d      	cmp	r3, #29
 800ac08:	d001      	beq.n	800ac0e <__sflush_r+0xae>
 800ac0a:	2b16      	cmp	r3, #22
 800ac0c:	d101      	bne.n	800ac12 <__sflush_r+0xb2>
 800ac0e:	602f      	str	r7, [r5, #0]
 800ac10:	e7b2      	b.n	800ab78 <__sflush_r+0x18>
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	e7ae      	b.n	800ab7a <__sflush_r+0x1a>
 800ac1c:	690f      	ldr	r7, [r1, #16]
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	d0aa      	beq.n	800ab78 <__sflush_r+0x18>
 800ac22:	0793      	lsls	r3, r2, #30
 800ac24:	bf18      	it	ne
 800ac26:	2300      	movne	r3, #0
 800ac28:	680e      	ldr	r6, [r1, #0]
 800ac2a:	bf08      	it	eq
 800ac2c:	694b      	ldreq	r3, [r1, #20]
 800ac2e:	1bf6      	subs	r6, r6, r7
 800ac30:	600f      	str	r7, [r1, #0]
 800ac32:	608b      	str	r3, [r1, #8]
 800ac34:	2e00      	cmp	r6, #0
 800ac36:	dd9f      	ble.n	800ab78 <__sflush_r+0x18>
 800ac38:	4633      	mov	r3, r6
 800ac3a:	463a      	mov	r2, r7
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	6a21      	ldr	r1, [r4, #32]
 800ac40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ac44:	47e0      	blx	ip
 800ac46:	2800      	cmp	r0, #0
 800ac48:	dc06      	bgt.n	800ac58 <__sflush_r+0xf8>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac54:	81a3      	strh	r3, [r4, #12]
 800ac56:	e790      	b.n	800ab7a <__sflush_r+0x1a>
 800ac58:	4407      	add	r7, r0
 800ac5a:	1a36      	subs	r6, r6, r0
 800ac5c:	e7ea      	b.n	800ac34 <__sflush_r+0xd4>
 800ac5e:	bf00      	nop
 800ac60:	20400001 	.word	0x20400001

0800ac64 <_fflush_r>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	690b      	ldr	r3, [r1, #16]
 800ac68:	4605      	mov	r5, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	b913      	cbnz	r3, 800ac74 <_fflush_r+0x10>
 800ac6e:	2500      	movs	r5, #0
 800ac70:	4628      	mov	r0, r5
 800ac72:	bd38      	pop	{r3, r4, r5, pc}
 800ac74:	b118      	cbz	r0, 800ac7e <_fflush_r+0x1a>
 800ac76:	6983      	ldr	r3, [r0, #24]
 800ac78:	b90b      	cbnz	r3, 800ac7e <_fflush_r+0x1a>
 800ac7a:	f000 f887 	bl	800ad8c <__sinit>
 800ac7e:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <_fflush_r+0x6c>)
 800ac80:	429c      	cmp	r4, r3
 800ac82:	d11b      	bne.n	800acbc <_fflush_r+0x58>
 800ac84:	686c      	ldr	r4, [r5, #4]
 800ac86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0ef      	beq.n	800ac6e <_fflush_r+0xa>
 800ac8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac90:	07d0      	lsls	r0, r2, #31
 800ac92:	d404      	bmi.n	800ac9e <_fflush_r+0x3a>
 800ac94:	0599      	lsls	r1, r3, #22
 800ac96:	d402      	bmi.n	800ac9e <_fflush_r+0x3a>
 800ac98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac9a:	f000 f915 	bl	800aec8 <__retarget_lock_acquire_recursive>
 800ac9e:	4628      	mov	r0, r5
 800aca0:	4621      	mov	r1, r4
 800aca2:	f7ff ff5d 	bl	800ab60 <__sflush_r>
 800aca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aca8:	4605      	mov	r5, r0
 800acaa:	07da      	lsls	r2, r3, #31
 800acac:	d4e0      	bmi.n	800ac70 <_fflush_r+0xc>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	059b      	lsls	r3, r3, #22
 800acb2:	d4dd      	bmi.n	800ac70 <_fflush_r+0xc>
 800acb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acb6:	f000 f908 	bl	800aeca <__retarget_lock_release_recursive>
 800acba:	e7d9      	b.n	800ac70 <_fflush_r+0xc>
 800acbc:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <_fflush_r+0x70>)
 800acbe:	429c      	cmp	r4, r3
 800acc0:	d101      	bne.n	800acc6 <_fflush_r+0x62>
 800acc2:	68ac      	ldr	r4, [r5, #8]
 800acc4:	e7df      	b.n	800ac86 <_fflush_r+0x22>
 800acc6:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <_fflush_r+0x74>)
 800acc8:	429c      	cmp	r4, r3
 800acca:	bf08      	it	eq
 800accc:	68ec      	ldreq	r4, [r5, #12]
 800acce:	e7da      	b.n	800ac86 <_fflush_r+0x22>
 800acd0:	0800b43c 	.word	0x0800b43c
 800acd4:	0800b45c 	.word	0x0800b45c
 800acd8:	0800b41c 	.word	0x0800b41c

0800acdc <std>:
 800acdc:	2300      	movs	r3, #0
 800acde:	b510      	push	{r4, lr}
 800ace0:	4604      	mov	r4, r0
 800ace2:	e9c0 3300 	strd	r3, r3, [r0]
 800ace6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acea:	6083      	str	r3, [r0, #8]
 800acec:	8181      	strh	r1, [r0, #12]
 800acee:	6643      	str	r3, [r0, #100]	; 0x64
 800acf0:	81c2      	strh	r2, [r0, #14]
 800acf2:	6183      	str	r3, [r0, #24]
 800acf4:	4619      	mov	r1, r3
 800acf6:	2208      	movs	r2, #8
 800acf8:	305c      	adds	r0, #92	; 0x5c
 800acfa:	f7ff f965 	bl	8009fc8 <memset>
 800acfe:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <std+0x38>)
 800ad00:	6224      	str	r4, [r4, #32]
 800ad02:	6263      	str	r3, [r4, #36]	; 0x24
 800ad04:	4b04      	ldr	r3, [pc, #16]	; (800ad18 <std+0x3c>)
 800ad06:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad08:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <std+0x40>)
 800ad0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad0c:	4b04      	ldr	r3, [pc, #16]	; (800ad20 <std+0x44>)
 800ad0e:	6323      	str	r3, [r4, #48]	; 0x30
 800ad10:	bd10      	pop	{r4, pc}
 800ad12:	bf00      	nop
 800ad14:	0800b055 	.word	0x0800b055
 800ad18:	0800b077 	.word	0x0800b077
 800ad1c:	0800b0af 	.word	0x0800b0af
 800ad20:	0800b0d3 	.word	0x0800b0d3

0800ad24 <_cleanup_r>:
 800ad24:	4901      	ldr	r1, [pc, #4]	; (800ad2c <_cleanup_r+0x8>)
 800ad26:	f000 b8af 	b.w	800ae88 <_fwalk_reent>
 800ad2a:	bf00      	nop
 800ad2c:	0800ac65 	.word	0x0800ac65

0800ad30 <__sfmoreglue>:
 800ad30:	2268      	movs	r2, #104	; 0x68
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	1e4d      	subs	r5, r1, #1
 800ad36:	4355      	muls	r5, r2
 800ad38:	460e      	mov	r6, r1
 800ad3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad3e:	f7ff fad5 	bl	800a2ec <_malloc_r>
 800ad42:	4604      	mov	r4, r0
 800ad44:	b140      	cbz	r0, 800ad58 <__sfmoreglue+0x28>
 800ad46:	2100      	movs	r1, #0
 800ad48:	e9c0 1600 	strd	r1, r6, [r0]
 800ad4c:	300c      	adds	r0, #12
 800ad4e:	60a0      	str	r0, [r4, #8]
 800ad50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad54:	f7ff f938 	bl	8009fc8 <memset>
 800ad58:	4620      	mov	r0, r4
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}

0800ad5c <__sfp_lock_acquire>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__sfp_lock_acquire+0x8>)
 800ad5e:	f000 b8b3 	b.w	800aec8 <__retarget_lock_acquire_recursive>
 800ad62:	bf00      	nop
 800ad64:	20000e61 	.word	0x20000e61

0800ad68 <__sfp_lock_release>:
 800ad68:	4801      	ldr	r0, [pc, #4]	; (800ad70 <__sfp_lock_release+0x8>)
 800ad6a:	f000 b8ae 	b.w	800aeca <__retarget_lock_release_recursive>
 800ad6e:	bf00      	nop
 800ad70:	20000e61 	.word	0x20000e61

0800ad74 <__sinit_lock_acquire>:
 800ad74:	4801      	ldr	r0, [pc, #4]	; (800ad7c <__sinit_lock_acquire+0x8>)
 800ad76:	f000 b8a7 	b.w	800aec8 <__retarget_lock_acquire_recursive>
 800ad7a:	bf00      	nop
 800ad7c:	20000e62 	.word	0x20000e62

0800ad80 <__sinit_lock_release>:
 800ad80:	4801      	ldr	r0, [pc, #4]	; (800ad88 <__sinit_lock_release+0x8>)
 800ad82:	f000 b8a2 	b.w	800aeca <__retarget_lock_release_recursive>
 800ad86:	bf00      	nop
 800ad88:	20000e62 	.word	0x20000e62

0800ad8c <__sinit>:
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	4604      	mov	r4, r0
 800ad90:	f7ff fff0 	bl	800ad74 <__sinit_lock_acquire>
 800ad94:	69a3      	ldr	r3, [r4, #24]
 800ad96:	b11b      	cbz	r3, 800ada0 <__sinit+0x14>
 800ad98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad9c:	f7ff bff0 	b.w	800ad80 <__sinit_lock_release>
 800ada0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ada4:	6523      	str	r3, [r4, #80]	; 0x50
 800ada6:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <__sinit+0x68>)
 800ada8:	4a13      	ldr	r2, [pc, #76]	; (800adf8 <__sinit+0x6c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	62a2      	str	r2, [r4, #40]	; 0x28
 800adae:	42a3      	cmp	r3, r4
 800adb0:	bf08      	it	eq
 800adb2:	2301      	moveq	r3, #1
 800adb4:	4620      	mov	r0, r4
 800adb6:	bf08      	it	eq
 800adb8:	61a3      	streq	r3, [r4, #24]
 800adba:	f000 f81f 	bl	800adfc <__sfp>
 800adbe:	6060      	str	r0, [r4, #4]
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 f81b 	bl	800adfc <__sfp>
 800adc6:	60a0      	str	r0, [r4, #8]
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 f817 	bl	800adfc <__sfp>
 800adce:	2200      	movs	r2, #0
 800add0:	2104      	movs	r1, #4
 800add2:	60e0      	str	r0, [r4, #12]
 800add4:	6860      	ldr	r0, [r4, #4]
 800add6:	f7ff ff81 	bl	800acdc <std>
 800adda:	2201      	movs	r2, #1
 800addc:	2109      	movs	r1, #9
 800adde:	68a0      	ldr	r0, [r4, #8]
 800ade0:	f7ff ff7c 	bl	800acdc <std>
 800ade4:	2202      	movs	r2, #2
 800ade6:	2112      	movs	r1, #18
 800ade8:	68e0      	ldr	r0, [r4, #12]
 800adea:	f7ff ff77 	bl	800acdc <std>
 800adee:	2301      	movs	r3, #1
 800adf0:	61a3      	str	r3, [r4, #24]
 800adf2:	e7d1      	b.n	800ad98 <__sinit+0xc>
 800adf4:	0800b234 	.word	0x0800b234
 800adf8:	0800ad25 	.word	0x0800ad25

0800adfc <__sfp>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	4607      	mov	r7, r0
 800ae00:	f7ff ffac 	bl	800ad5c <__sfp_lock_acquire>
 800ae04:	4b1e      	ldr	r3, [pc, #120]	; (800ae80 <__sfp+0x84>)
 800ae06:	681e      	ldr	r6, [r3, #0]
 800ae08:	69b3      	ldr	r3, [r6, #24]
 800ae0a:	b913      	cbnz	r3, 800ae12 <__sfp+0x16>
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7ff ffbd 	bl	800ad8c <__sinit>
 800ae12:	3648      	adds	r6, #72	; 0x48
 800ae14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	d503      	bpl.n	800ae24 <__sfp+0x28>
 800ae1c:	6833      	ldr	r3, [r6, #0]
 800ae1e:	b30b      	cbz	r3, 800ae64 <__sfp+0x68>
 800ae20:	6836      	ldr	r6, [r6, #0]
 800ae22:	e7f7      	b.n	800ae14 <__sfp+0x18>
 800ae24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae28:	b9d5      	cbnz	r5, 800ae60 <__sfp+0x64>
 800ae2a:	4b16      	ldr	r3, [pc, #88]	; (800ae84 <__sfp+0x88>)
 800ae2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae30:	60e3      	str	r3, [r4, #12]
 800ae32:	6665      	str	r5, [r4, #100]	; 0x64
 800ae34:	f000 f847 	bl	800aec6 <__retarget_lock_init_recursive>
 800ae38:	f7ff ff96 	bl	800ad68 <__sfp_lock_release>
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	4629      	mov	r1, r5
 800ae40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae48:	6025      	str	r5, [r4, #0]
 800ae4a:	61a5      	str	r5, [r4, #24]
 800ae4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae50:	f7ff f8ba 	bl	8009fc8 <memset>
 800ae54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae60:	3468      	adds	r4, #104	; 0x68
 800ae62:	e7d9      	b.n	800ae18 <__sfp+0x1c>
 800ae64:	2104      	movs	r1, #4
 800ae66:	4638      	mov	r0, r7
 800ae68:	f7ff ff62 	bl	800ad30 <__sfmoreglue>
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	6030      	str	r0, [r6, #0]
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d1d5      	bne.n	800ae20 <__sfp+0x24>
 800ae74:	f7ff ff78 	bl	800ad68 <__sfp_lock_release>
 800ae78:	230c      	movs	r3, #12
 800ae7a:	603b      	str	r3, [r7, #0]
 800ae7c:	e7ee      	b.n	800ae5c <__sfp+0x60>
 800ae7e:	bf00      	nop
 800ae80:	0800b234 	.word	0x0800b234
 800ae84:	ffff0001 	.word	0xffff0001

0800ae88 <_fwalk_reent>:
 800ae88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	4688      	mov	r8, r1
 800ae90:	2700      	movs	r7, #0
 800ae92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae9e:	d505      	bpl.n	800aeac <_fwalk_reent+0x24>
 800aea0:	6824      	ldr	r4, [r4, #0]
 800aea2:	2c00      	cmp	r4, #0
 800aea4:	d1f7      	bne.n	800ae96 <_fwalk_reent+0xe>
 800aea6:	4638      	mov	r0, r7
 800aea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeac:	89ab      	ldrh	r3, [r5, #12]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d907      	bls.n	800aec2 <_fwalk_reent+0x3a>
 800aeb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	d003      	beq.n	800aec2 <_fwalk_reent+0x3a>
 800aeba:	4629      	mov	r1, r5
 800aebc:	4630      	mov	r0, r6
 800aebe:	47c0      	blx	r8
 800aec0:	4307      	orrs	r7, r0
 800aec2:	3568      	adds	r5, #104	; 0x68
 800aec4:	e7e9      	b.n	800ae9a <_fwalk_reent+0x12>

0800aec6 <__retarget_lock_init_recursive>:
 800aec6:	4770      	bx	lr

0800aec8 <__retarget_lock_acquire_recursive>:
 800aec8:	4770      	bx	lr

0800aeca <__retarget_lock_release_recursive>:
 800aeca:	4770      	bx	lr

0800aecc <__swhatbuf_r>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	460e      	mov	r6, r1
 800aed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed4:	4614      	mov	r4, r2
 800aed6:	2900      	cmp	r1, #0
 800aed8:	461d      	mov	r5, r3
 800aeda:	b096      	sub	sp, #88	; 0x58
 800aedc:	da08      	bge.n	800aef0 <__swhatbuf_r+0x24>
 800aede:	2200      	movs	r2, #0
 800aee0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aee4:	602a      	str	r2, [r5, #0]
 800aee6:	061a      	lsls	r2, r3, #24
 800aee8:	d410      	bmi.n	800af0c <__swhatbuf_r+0x40>
 800aeea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeee:	e00e      	b.n	800af0e <__swhatbuf_r+0x42>
 800aef0:	466a      	mov	r2, sp
 800aef2:	f000 f915 	bl	800b120 <_fstat_r>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	dbf1      	blt.n	800aede <__swhatbuf_r+0x12>
 800aefa:	9a01      	ldr	r2, [sp, #4]
 800aefc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af04:	425a      	negs	r2, r3
 800af06:	415a      	adcs	r2, r3
 800af08:	602a      	str	r2, [r5, #0]
 800af0a:	e7ee      	b.n	800aeea <__swhatbuf_r+0x1e>
 800af0c:	2340      	movs	r3, #64	; 0x40
 800af0e:	2000      	movs	r0, #0
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	b016      	add	sp, #88	; 0x58
 800af14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af18 <__smakebuf_r>:
 800af18:	898b      	ldrh	r3, [r1, #12]
 800af1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af1c:	079d      	lsls	r5, r3, #30
 800af1e:	4606      	mov	r6, r0
 800af20:	460c      	mov	r4, r1
 800af22:	d507      	bpl.n	800af34 <__smakebuf_r+0x1c>
 800af24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	6123      	str	r3, [r4, #16]
 800af2c:	2301      	movs	r3, #1
 800af2e:	6163      	str	r3, [r4, #20]
 800af30:	b002      	add	sp, #8
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	466a      	mov	r2, sp
 800af36:	ab01      	add	r3, sp, #4
 800af38:	f7ff ffc8 	bl	800aecc <__swhatbuf_r>
 800af3c:	9900      	ldr	r1, [sp, #0]
 800af3e:	4605      	mov	r5, r0
 800af40:	4630      	mov	r0, r6
 800af42:	f7ff f9d3 	bl	800a2ec <_malloc_r>
 800af46:	b948      	cbnz	r0, 800af5c <__smakebuf_r+0x44>
 800af48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4c:	059a      	lsls	r2, r3, #22
 800af4e:	d4ef      	bmi.n	800af30 <__smakebuf_r+0x18>
 800af50:	f023 0303 	bic.w	r3, r3, #3
 800af54:	f043 0302 	orr.w	r3, r3, #2
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	e7e3      	b.n	800af24 <__smakebuf_r+0xc>
 800af5c:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <__smakebuf_r+0x7c>)
 800af5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	6020      	str	r0, [r4, #0]
 800af64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af68:	81a3      	strh	r3, [r4, #12]
 800af6a:	9b00      	ldr	r3, [sp, #0]
 800af6c:	6120      	str	r0, [r4, #16]
 800af6e:	6163      	str	r3, [r4, #20]
 800af70:	9b01      	ldr	r3, [sp, #4]
 800af72:	b15b      	cbz	r3, 800af8c <__smakebuf_r+0x74>
 800af74:	4630      	mov	r0, r6
 800af76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af7a:	f000 f8e3 	bl	800b144 <_isatty_r>
 800af7e:	b128      	cbz	r0, 800af8c <__smakebuf_r+0x74>
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	f043 0301 	orr.w	r3, r3, #1
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	89a0      	ldrh	r0, [r4, #12]
 800af8e:	4305      	orrs	r5, r0
 800af90:	81a5      	strh	r5, [r4, #12]
 800af92:	e7cd      	b.n	800af30 <__smakebuf_r+0x18>
 800af94:	0800ad25 	.word	0x0800ad25

0800af98 <memchr>:
 800af98:	4603      	mov	r3, r0
 800af9a:	b510      	push	{r4, lr}
 800af9c:	b2c9      	uxtb	r1, r1
 800af9e:	4402      	add	r2, r0
 800afa0:	4293      	cmp	r3, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	d101      	bne.n	800afaa <memchr+0x12>
 800afa6:	2000      	movs	r0, #0
 800afa8:	e003      	b.n	800afb2 <memchr+0x1a>
 800afaa:	7804      	ldrb	r4, [r0, #0]
 800afac:	3301      	adds	r3, #1
 800afae:	428c      	cmp	r4, r1
 800afb0:	d1f6      	bne.n	800afa0 <memchr+0x8>
 800afb2:	bd10      	pop	{r4, pc}

0800afb4 <__malloc_lock>:
 800afb4:	4801      	ldr	r0, [pc, #4]	; (800afbc <__malloc_lock+0x8>)
 800afb6:	f7ff bf87 	b.w	800aec8 <__retarget_lock_acquire_recursive>
 800afba:	bf00      	nop
 800afbc:	20000e60 	.word	0x20000e60

0800afc0 <__malloc_unlock>:
 800afc0:	4801      	ldr	r0, [pc, #4]	; (800afc8 <__malloc_unlock+0x8>)
 800afc2:	f7ff bf82 	b.w	800aeca <__retarget_lock_release_recursive>
 800afc6:	bf00      	nop
 800afc8:	20000e60 	.word	0x20000e60

0800afcc <_raise_r>:
 800afcc:	291f      	cmp	r1, #31
 800afce:	b538      	push	{r3, r4, r5, lr}
 800afd0:	4604      	mov	r4, r0
 800afd2:	460d      	mov	r5, r1
 800afd4:	d904      	bls.n	800afe0 <_raise_r+0x14>
 800afd6:	2316      	movs	r3, #22
 800afd8:	6003      	str	r3, [r0, #0]
 800afda:	f04f 30ff 	mov.w	r0, #4294967295
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afe2:	b112      	cbz	r2, 800afea <_raise_r+0x1e>
 800afe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afe8:	b94b      	cbnz	r3, 800affe <_raise_r+0x32>
 800afea:	4620      	mov	r0, r4
 800afec:	f000 f830 	bl	800b050 <_getpid_r>
 800aff0:	462a      	mov	r2, r5
 800aff2:	4601      	mov	r1, r0
 800aff4:	4620      	mov	r0, r4
 800aff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800affa:	f000 b817 	b.w	800b02c <_kill_r>
 800affe:	2b01      	cmp	r3, #1
 800b000:	d00a      	beq.n	800b018 <_raise_r+0x4c>
 800b002:	1c59      	adds	r1, r3, #1
 800b004:	d103      	bne.n	800b00e <_raise_r+0x42>
 800b006:	2316      	movs	r3, #22
 800b008:	6003      	str	r3, [r0, #0]
 800b00a:	2001      	movs	r0, #1
 800b00c:	e7e7      	b.n	800afde <_raise_r+0x12>
 800b00e:	2400      	movs	r4, #0
 800b010:	4628      	mov	r0, r5
 800b012:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b016:	4798      	blx	r3
 800b018:	2000      	movs	r0, #0
 800b01a:	e7e0      	b.n	800afde <_raise_r+0x12>

0800b01c <raise>:
 800b01c:	4b02      	ldr	r3, [pc, #8]	; (800b028 <raise+0xc>)
 800b01e:	4601      	mov	r1, r0
 800b020:	6818      	ldr	r0, [r3, #0]
 800b022:	f7ff bfd3 	b.w	800afcc <_raise_r>
 800b026:	bf00      	nop
 800b028:	200001c0 	.word	0x200001c0

0800b02c <_kill_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	2300      	movs	r3, #0
 800b030:	4d06      	ldr	r5, [pc, #24]	; (800b04c <_kill_r+0x20>)
 800b032:	4604      	mov	r4, r0
 800b034:	4608      	mov	r0, r1
 800b036:	4611      	mov	r1, r2
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	f7f6 fbb4 	bl	80017a6 <_kill>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	d102      	bne.n	800b048 <_kill_r+0x1c>
 800b042:	682b      	ldr	r3, [r5, #0]
 800b044:	b103      	cbz	r3, 800b048 <_kill_r+0x1c>
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	bd38      	pop	{r3, r4, r5, pc}
 800b04a:	bf00      	nop
 800b04c:	20000e64 	.word	0x20000e64

0800b050 <_getpid_r>:
 800b050:	f7f6 bba2 	b.w	8001798 <_getpid>

0800b054 <__sread>:
 800b054:	b510      	push	{r4, lr}
 800b056:	460c      	mov	r4, r1
 800b058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b05c:	f000 f894 	bl	800b188 <_read_r>
 800b060:	2800      	cmp	r0, #0
 800b062:	bfab      	itete	ge
 800b064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b066:	89a3      	ldrhlt	r3, [r4, #12]
 800b068:	181b      	addge	r3, r3, r0
 800b06a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b06e:	bfac      	ite	ge
 800b070:	6563      	strge	r3, [r4, #84]	; 0x54
 800b072:	81a3      	strhlt	r3, [r4, #12]
 800b074:	bd10      	pop	{r4, pc}

0800b076 <__swrite>:
 800b076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07a:	461f      	mov	r7, r3
 800b07c:	898b      	ldrh	r3, [r1, #12]
 800b07e:	4605      	mov	r5, r0
 800b080:	05db      	lsls	r3, r3, #23
 800b082:	460c      	mov	r4, r1
 800b084:	4616      	mov	r6, r2
 800b086:	d505      	bpl.n	800b094 <__swrite+0x1e>
 800b088:	2302      	movs	r3, #2
 800b08a:	2200      	movs	r2, #0
 800b08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b090:	f000 f868 	bl	800b164 <_lseek_r>
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	4632      	mov	r2, r6
 800b098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	4628      	mov	r0, r5
 800b0a0:	463b      	mov	r3, r7
 800b0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0aa:	f000 b817 	b.w	800b0dc <_write_r>

0800b0ae <__sseek>:
 800b0ae:	b510      	push	{r4, lr}
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b6:	f000 f855 	bl	800b164 <_lseek_r>
 800b0ba:	1c43      	adds	r3, r0, #1
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	bf15      	itete	ne
 800b0c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0ca:	81a3      	strheq	r3, [r4, #12]
 800b0cc:	bf18      	it	ne
 800b0ce:	81a3      	strhne	r3, [r4, #12]
 800b0d0:	bd10      	pop	{r4, pc}

0800b0d2 <__sclose>:
 800b0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d6:	f000 b813 	b.w	800b100 <_close_r>
	...

0800b0dc <_write_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	4d05      	ldr	r5, [pc, #20]	; (800b0fc <_write_r+0x20>)
 800b0e8:	602a      	str	r2, [r5, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f7f6 fb92 	bl	8001814 <_write>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d102      	bne.n	800b0fa <_write_r+0x1e>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b103      	cbz	r3, 800b0fa <_write_r+0x1e>
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	20000e64 	.word	0x20000e64

0800b100 <_close_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	2300      	movs	r3, #0
 800b104:	4d05      	ldr	r5, [pc, #20]	; (800b11c <_close_r+0x1c>)
 800b106:	4604      	mov	r4, r0
 800b108:	4608      	mov	r0, r1
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	f7f6 fb9e 	bl	800184c <_close>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d102      	bne.n	800b11a <_close_r+0x1a>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	b103      	cbz	r3, 800b11a <_close_r+0x1a>
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	20000e64 	.word	0x20000e64

0800b120 <_fstat_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	2300      	movs	r3, #0
 800b124:	4d06      	ldr	r5, [pc, #24]	; (800b140 <_fstat_r+0x20>)
 800b126:	4604      	mov	r4, r0
 800b128:	4608      	mov	r0, r1
 800b12a:	4611      	mov	r1, r2
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	f7f6 fb98 	bl	8001862 <_fstat>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	d102      	bne.n	800b13c <_fstat_r+0x1c>
 800b136:	682b      	ldr	r3, [r5, #0]
 800b138:	b103      	cbz	r3, 800b13c <_fstat_r+0x1c>
 800b13a:	6023      	str	r3, [r4, #0]
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	bf00      	nop
 800b140:	20000e64 	.word	0x20000e64

0800b144 <_isatty_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	2300      	movs	r3, #0
 800b148:	4d05      	ldr	r5, [pc, #20]	; (800b160 <_isatty_r+0x1c>)
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	f7f6 fb96 	bl	8001880 <_isatty>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_isatty_r+0x1a>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_isatty_r+0x1a>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	20000e64 	.word	0x20000e64

0800b164 <_lseek_r>:
 800b164:	b538      	push	{r3, r4, r5, lr}
 800b166:	4604      	mov	r4, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	4611      	mov	r1, r2
 800b16c:	2200      	movs	r2, #0
 800b16e:	4d05      	ldr	r5, [pc, #20]	; (800b184 <_lseek_r+0x20>)
 800b170:	602a      	str	r2, [r5, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	f7f6 fb8e 	bl	8001894 <_lseek>
 800b178:	1c43      	adds	r3, r0, #1
 800b17a:	d102      	bne.n	800b182 <_lseek_r+0x1e>
 800b17c:	682b      	ldr	r3, [r5, #0]
 800b17e:	b103      	cbz	r3, 800b182 <_lseek_r+0x1e>
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	bd38      	pop	{r3, r4, r5, pc}
 800b184:	20000e64 	.word	0x20000e64

0800b188 <_read_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	2200      	movs	r2, #0
 800b192:	4d05      	ldr	r5, [pc, #20]	; (800b1a8 <_read_r+0x20>)
 800b194:	602a      	str	r2, [r5, #0]
 800b196:	461a      	mov	r2, r3
 800b198:	f7f6 fb1f 	bl	80017da <_read>
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	d102      	bne.n	800b1a6 <_read_r+0x1e>
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	b103      	cbz	r3, 800b1a6 <_read_r+0x1e>
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	bd38      	pop	{r3, r4, r5, pc}
 800b1a8:	20000e64 	.word	0x20000e64

0800b1ac <_init>:
 800b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ae:	bf00      	nop
 800b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b2:	bc08      	pop	{r3}
 800b1b4:	469e      	mov	lr, r3
 800b1b6:	4770      	bx	lr

0800b1b8 <_fini>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	bf00      	nop
 800b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1be:	bc08      	pop	{r3}
 800b1c0:	469e      	mov	lr, r3
 800b1c2:	4770      	bx	lr


FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  0800bb74  0800bb74  0001bb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be38  0800be38  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800be38  0800be38  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be38  0800be38  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be38  0800be38  0001be38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be3c  0800be3c  0001be3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800be40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c38  20000210  0800c04c  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  0800c04c  00020e48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b12  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e1  00000000  00000000  00031d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00035528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b699  00000000  00000000  000373b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141e5  00000000  00000000  00052a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd48  00000000  00000000  00066c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e94  00000000  00000000  000f49c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb5c 	.word	0x0800bb5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800bb5c 	.word	0x0800bb5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2uiz>:
 8000fa8:	0042      	lsls	r2, r0, #1
 8000faa:	d20e      	bcs.n	8000fca <__aeabi_f2uiz+0x22>
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30b      	bcc.n	8000fca <__aeabi_f2uiz+0x22>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d409      	bmi.n	8000fd0 <__aeabi_f2uiz+0x28>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2uiz+0x32>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d102      	bne.n	8000fe0 <__aeabi_f2uiz+0x38>
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000ffa:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d020      	beq.n	800104c <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800100a:	68f9      	ldr	r1, [r7, #12]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	b2ca      	uxtb	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	0a19      	lsrs	r1, r3, #8
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3301      	adds	r3, #1
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	0c19      	lsrs	r1, r3, #16
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3302      	adds	r3, #2
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	0e19      	lsrs	r1, r3, #24
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3303      	adds	r3, #3
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3304      	adds	r3, #4
 800104a:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001052:	d1cf      	bne.n	8000ff4 <read_flash+0xc>
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <update_data_from_flash>:
		{0, 20, 40, 60, 80, 100}
		};

uint8_t inverter_config[3] = {0, 0, 0};

void update_data_from_flash(uint8_t (*sliders_data)[6], uint8_t (*range_x_data)[6], uint8_t (*inverter_config)){
 8001060:	b580      	push	{r7, lr}
 8001062:	b0bc      	sub	sp, #240	; 0xf0
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
	char data[0xC0];
	read_flash((uint8_t *)data);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffb9 	bl	8000fe8 <read_flash>
    char * token = strtok(data,",");				//first strtok go to variable directly
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	497f      	ldr	r1, [pc, #508]	; (8001278 <update_data_from_flash+0x218>)
 800107c:	4618      	mov	r0, r3
 800107e:	f009 fadd 	bl	800a63c <strtok>
 8001082:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    sliders_data[0][0] = atoi(token);
 8001086:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800108a:	f009 fa6b 	bl	800a564 <atoi>
 800108e:	4603      	mov	r3, r0
 8001090:	b2da      	uxtb	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	701a      	strb	r2, [r3, #0]

    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 8001096:	2301      	movs	r3, #1
 8001098:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800109c:	e016      	b.n	80010cc <update_data_from_flash+0x6c>
    	token = strtok(NULL,",");
 800109e:	4976      	ldr	r1, [pc, #472]	; (8001278 <update_data_from_flash+0x218>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f009 facb 	bl	800a63c <strtok>
 80010a6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    	sliders_data[0][i] = atoi(token);
 80010aa:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80010ae:	f009 fa59 	bl	800a564 <atoi>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80010bc:	4413      	add	r3, r2
 80010be:	460a      	mov	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 80010c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80010c6:	3301      	adds	r3, #1
 80010c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80010cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	dde4      	ble.n	800109e <update_data_from_flash+0x3e>
    }

	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80010da:	e016      	b.n	800110a <update_data_from_flash+0xaa>
		token = strtok(NULL,",");
 80010dc:	4966      	ldr	r1, [pc, #408]	; (8001278 <update_data_from_flash+0x218>)
 80010de:	2000      	movs	r0, #0
 80010e0:	f009 faac 	bl	800a63c <strtok>
 80010e4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[0][i] = atoi(token);
 80010e8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80010ec:	f009 fa3a 	bl	800a564 <atoi>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010fa:	4413      	add	r3, r2
 80010fc:	460a      	mov	r2, r1
 80010fe:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 8001100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001104:	3301      	adds	r3, #1
 8001106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800110a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800110e:	2b05      	cmp	r3, #5
 8001110:	dde4      	ble.n	80010dc <update_data_from_flash+0x7c>
	}

	token = strtok(NULL,",");						// inverted for first pedal
 8001112:	4959      	ldr	r1, [pc, #356]	; (8001278 <update_data_from_flash+0x218>)
 8001114:	2000      	movs	r0, #0
 8001116:	f009 fa91 	bl	800a63c <strtok>
 800111a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[0] = atoi(token);
 800111e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001122:	f009 fa1f 	bl	800a564 <atoi>
 8001126:	4603      	mov	r3, r0
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	701a      	strb	r2, [r3, #0]


	for (int i=0; i<6; i++){						// until all arrays be full filled
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001134:	e017      	b.n	8001166 <update_data_from_flash+0x106>
		token = strtok(NULL,",");
 8001136:	4950      	ldr	r1, [pc, #320]	; (8001278 <update_data_from_flash+0x218>)
 8001138:	2000      	movs	r0, #0
 800113a:	f009 fa7f 	bl	800a63c <strtok>
 800113e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[1][i] = atoi(token);
 8001142:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001146:	f009 fa0d 	bl	800a564 <atoi>
 800114a:	4601      	mov	r1, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1d9a      	adds	r2, r3, #6
 8001150:	b2c9      	uxtb	r1, r1
 8001152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001156:	4413      	add	r3, r2
 8001158:	460a      	mov	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800115c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800116a:	2b05      	cmp	r3, #5
 800116c:	dde3      	ble.n	8001136 <update_data_from_flash+0xd6>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001174:	e017      	b.n	80011a6 <update_data_from_flash+0x146>
		token = strtok(NULL,",");
 8001176:	4940      	ldr	r1, [pc, #256]	; (8001278 <update_data_from_flash+0x218>)
 8001178:	2000      	movs	r0, #0
 800117a:	f009 fa5f 	bl	800a63c <strtok>
 800117e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[1][i] = atoi(token);
 8001182:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001186:	f009 f9ed 	bl	800a564 <atoi>
 800118a:	4601      	mov	r1, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1d9a      	adds	r2, r3, #6
 8001190:	b2c9      	uxtb	r1, r1
 8001192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001196:	4413      	add	r3, r2
 8001198:	460a      	mov	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800119c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011a0:	3301      	adds	r3, #1
 80011a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80011a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	dde3      	ble.n	8001176 <update_data_from_flash+0x116>
	}

	token = strtok(NULL,",");						// inverted for second pedal
 80011ae:	4932      	ldr	r1, [pc, #200]	; (8001278 <update_data_from_flash+0x218>)
 80011b0:	2000      	movs	r0, #0
 80011b2:	f009 fa43 	bl	800a63c <strtok>
 80011b6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[1] = atoi(token);
 80011ba:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80011be:	f009 f9d1 	bl	800a564 <atoi>
 80011c2:	4602      	mov	r2, r0
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80011d2:	e018      	b.n	8001206 <update_data_from_flash+0x1a6>
		token = strtok(NULL,",");
 80011d4:	4928      	ldr	r1, [pc, #160]	; (8001278 <update_data_from_flash+0x218>)
 80011d6:	2000      	movs	r0, #0
 80011d8:	f009 fa30 	bl	800a63c <strtok>
 80011dc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[2][i] = atoi(token);
 80011e0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80011e4:	f009 f9be 	bl	800a564 <atoi>
 80011e8:	4601      	mov	r1, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f103 020c 	add.w	r2, r3, #12
 80011f0:	b2c9      	uxtb	r1, r1
 80011f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011f6:	4413      	add	r3, r2
 80011f8:	460a      	mov	r2, r1
 80011fa:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001200:	3301      	adds	r3, #1
 8001202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800120a:	2b05      	cmp	r3, #5
 800120c:	dde2      	ble.n	80011d4 <update_data_from_flash+0x174>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001214:	e018      	b.n	8001248 <update_data_from_flash+0x1e8>
		token = strtok(NULL,",");
 8001216:	4918      	ldr	r1, [pc, #96]	; (8001278 <update_data_from_flash+0x218>)
 8001218:	2000      	movs	r0, #0
 800121a:	f009 fa0f 	bl	800a63c <strtok>
 800121e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[2][i] = atoi(token);
 8001222:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001226:	f009 f99d 	bl	800a564 <atoi>
 800122a:	4601      	mov	r1, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f103 020c 	add.w	r2, r3, #12
 8001232:	b2c9      	uxtb	r1, r1
 8001234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001238:	4413      	add	r3, r2
 800123a:	460a      	mov	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800123e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001242:	3301      	adds	r3, #1
 8001244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800124c:	2b05      	cmp	r3, #5
 800124e:	dde2      	ble.n	8001216 <update_data_from_flash+0x1b6>
	}

	token = strtok(NULL,",");						// inverted for third pedal
 8001250:	4909      	ldr	r1, [pc, #36]	; (8001278 <update_data_from_flash+0x218>)
 8001252:	2000      	movs	r0, #0
 8001254:	f009 f9f2 	bl	800a63c <strtok>
 8001258:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[2] = atoi(token);
 800125c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001260:	f009 f980 	bl	800a564 <atoi>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3302      	adds	r3, #2
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]

}
 800126e:	bf00      	nop
 8001270:	37f0      	adds	r7, #240	; 0xf0
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	0800bb74 	.word	0x0800bb74

0800127c <interpolacao_linear>:

float interpolacao_linear(float x, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	460b      	mov	r3, r1
 8001290:	70bb      	strb	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	707b      	strb	r3, [r7, #1]
	//"""Realiza a interpolação de x sobre uma reta dada por [(x0,y0),(x1,y1)] e retorna o valor em y"""
	float y;
	y = (float)y0 + ((float)y1 - (float)y0) * (x-(float)x0)/((float)x1-(float)x0);
 8001296:	78bb      	ldrb	r3, [r7, #2]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcdd 	bl	8000c58 <__aeabi_ui2f>
 800129e:	4604      	mov	r4, r0
 80012a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fcd7 	bl	8000c58 <__aeabi_ui2f>
 80012aa:	4605      	mov	r5, r0
 80012ac:	78bb      	ldrb	r3, [r7, #2]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcd2 	bl	8000c58 <__aeabi_ui2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4628      	mov	r0, r5
 80012ba:	f7ff fc1b 	bl	8000af4 <__aeabi_fsub>
 80012be:	4603      	mov	r3, r0
 80012c0:	461d      	mov	r5, r3
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fcc7 	bl	8000c58 <__aeabi_ui2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fc10 	bl	8000af4 <__aeabi_fsub>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4628      	mov	r0, r5
 80012da:	f7ff fd15 	bl	8000d08 <__aeabi_fmul>
 80012de:	4603      	mov	r3, r0
 80012e0:	461e      	mov	r6, r3
 80012e2:	787b      	ldrb	r3, [r7, #1]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fcb7 	bl	8000c58 <__aeabi_ui2f>
 80012ea:	4605      	mov	r5, r0
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fcb2 	bl	8000c58 <__aeabi_ui2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	4628      	mov	r0, r5
 80012fa:	f7ff fbfb 	bl	8000af4 <__aeabi_fsub>
 80012fe:	4603      	mov	r3, r0
 8001300:	4619      	mov	r1, r3
 8001302:	4630      	mov	r0, r6
 8001304:	f7ff fdb4 	bl	8000e70 <__aeabi_fdiv>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff fbf3 	bl	8000af8 <__addsf3>
 8001312:	4603      	mov	r3, r0
 8001314:	60fb      	str	r3, [r7, #12]
	return y;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001320 <ret_x0_y0_x1_y1>:

uint8_t * ret_x0_y0_x1_y1(double x, uint8_t * x_array, uint8_t * y_array){
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
    //a funcao retorna o conjunto de pontos [(xa,ya),(xb,yb)] que formam uma reta
    //na qual o ponto x possa ser interpolado.\n
    //Os pontos precisam estar alistados em ordem crescente, e as listas de x e y precisam ter o mesmo tamanho."""
	static uint8_t x0y0x1y1array[4] = {0, 0, 0, 0};

	for (int i=0; i<6; i++){
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e02d      	b.n	8001390 <ret_x0_y0_x1_y1+0x70>
		if (x < (double)x_array[i]){
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f851 	bl	80003e4 <__aeabi_ui2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800134a:	f7ff fb37 	bl	80009bc <__aeabi_dcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01a      	beq.n	800138a <ret_x0_y0_x1_y1+0x6a>
			x0y0x1y1array[0] = x_array[i-1];
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3b01      	subs	r3, #1
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
 8001360:	701a      	strb	r2, [r3, #0]
			x0y0x1y1array[1] = y_array[i-1];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3b01      	subs	r3, #1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
 800136e:	705a      	strb	r2, [r3, #1]
			x0y0x1y1array[2] = x_array[i];
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
 800137a:	709a      	strb	r2, [r3, #2]
			x0y0x1y1array[3] = y_array[i];
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
 8001386:	70da      	strb	r2, [r3, #3]
			break;
 8001388:	e005      	b.n	8001396 <ret_x0_y0_x1_y1+0x76>
	for (int i=0; i<6; i++){
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b05      	cmp	r3, #5
 8001394:	ddce      	ble.n	8001334 <ret_x0_y0_x1_y1+0x14>
		}
	}
	return x0y0x1y1array;
 8001396:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <ret_x0_y0_x1_y1+0x80>)
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002f8 	.word	0x200002f8
 80013a4:	00000000 	.word	0x00000000

080013a8 <set_output>:

uint16_t* set_output(uint16_t * valor_entrada, uint8_t (*sliders_data)[6], uint8_t (*range_x_data)[6], uint8_t * inverter_config){
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b093      	sub	sp, #76	; 0x4c
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	//"""Método que calcula e atualiza o valor de saída de acordo com o valor da entrada"""

	static uint16_t valor_saida[3] = {10, 20, 30};
	double entrada_invertida[3] = {0, 0, 0};
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	for (int i=0; i<3; i++){
 80013da:	2300      	movs	r3, #0
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013de:	e114      	b.n	800160a <set_output+0x262>
		entrada_invertida[i] = ((double)valor_entrada[i])*100/4095;		//converte o valor de entrada de 12bits para um range de 0,0 a 100,0
 80013e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fffa 	bl	80003e4 <__aeabi_ui2d>
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b8c      	ldr	r3, [pc, #560]	; (8001628 <set_output+0x280>)
 80013f6:	f7ff f86f 	bl	80004d8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	a387      	add	r3, pc, #540	; (adr r3, 8001620 <set_output+0x278>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f990 	bl	800072c <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001412:	00c9      	lsls	r1, r1, #3
 8001414:	3140      	adds	r1, #64	; 0x40
 8001416:	4439      	add	r1, r7
 8001418:	3920      	subs	r1, #32
 800141a:	e9c1 2300 	strd	r2, r3, [r1]

		if (inverter_config[i] == 1){
 800141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d114      	bne.n	8001454 <set_output+0xac>
			entrada_invertida[i] = 100 - entrada_invertida[i];		// inverte a entrada caso o bit de inversao esteja ligado
 800142a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	3340      	adds	r3, #64	; 0x40
 8001430:	443b      	add	r3, r7
 8001432:	3b20      	subs	r3, #32
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f04f 0000 	mov.w	r0, #0
 800143c:	497a      	ldr	r1, [pc, #488]	; (8001628 <set_output+0x280>)
 800143e:	f7fe fe93 	bl	8000168 <__aeabi_dsub>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001448:	00c9      	lsls	r1, r1, #3
 800144a:	3140      	adds	r1, #64	; 0x40
 800144c:	4439      	add	r1, r7
 800144e:	3920      	subs	r1, #32
 8001450:	e9c1 2300 	strd	r2, r3, [r1]
		}
		char buffer[12];
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", (uint16_t)entrada_invertida[i]), 100);
 8001454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	3340      	adds	r3, #64	; 0x40
 800145a:	443b      	add	r3, r7
 800145c:	3b20      	subs	r3, #32
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fad1 	bl	8000a0c <__aeabi_d2uiz>
 800146a:	4603      	mov	r3, r0
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	496d      	ldr	r1, [pc, #436]	; (800162c <set_output+0x284>)
 8001476:	4618      	mov	r0, r3
 8001478:	f009 f8b8 	bl	800a5ec <siprintf>
 800147c:	4603      	mov	r3, r0
 800147e:	b29a      	uxth	r2, r3
 8001480:	f107 0114 	add.w	r1, r7, #20
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	486a      	ldr	r0, [pc, #424]	; (8001630 <set_output+0x288>)
 8001488:	f004 f97f 	bl	800578a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", range_x_data[i][0]), 100);
 800148c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4961      	ldr	r1, [pc, #388]	; (800162c <set_output+0x284>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f009 f8a0 	bl	800a5ec <siprintf>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f107 0114 	add.w	r1, r7, #20
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	485e      	ldr	r0, [pc, #376]	; (8001630 <set_output+0x288>)
 80014b8:	f004 f967 	bl	800578a <HAL_UART_Transmit>

		if ((uint16_t)entrada_invertida[i] <= range_x_data[i][0]){			// caso entrada esteja abaixa da calibracao minima
 80014bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	3340      	adds	r3, #64	; 0x40
 80014c2:	443b      	add	r3, r7
 80014c4:	3b20      	subs	r3, #32
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fa9d 	bl	8000a0c <__aeabi_d2uiz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b299      	uxth	r1, r3
 80014d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4299      	cmp	r1, r3
 80014ec:	d80e      	bhi.n	800150c <set_output+0x164>
			valor_saida[i] = (uint16_t)sliders_data[i][0];
 80014ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	461a      	mov	r2, r3
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b299      	uxth	r1, r3
 8001502:	4a4c      	ldr	r2, [pc, #304]	; (8001634 <set_output+0x28c>)
 8001504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001506:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			continue;
 800150a:	e07b      	b.n	8001604 <set_output+0x25c>
		}
		if ((uint16_t)entrada_invertida[i] >= range_x_data[i][5]){			// caso a entrada esteja acima da calibracao maxima
 800150c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	3340      	adds	r3, #64	; 0x40
 8001512:	443b      	add	r3, r7
 8001514:	3b20      	subs	r3, #32
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fa75 	bl	8000a0c <__aeabi_d2uiz>
 8001522:	4603      	mov	r3, r0
 8001524:	b299      	uxth	r1, r3
 8001526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	795b      	ldrb	r3, [r3, #5]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4299      	cmp	r1, r3
 800153c:	d30e      	bcc.n	800155c <set_output+0x1b4>
			valor_saida[i] = (uint16_t)sliders_data[i][5];
 800153e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	461a      	mov	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	4413      	add	r3, r2
 800154e:	795b      	ldrb	r3, [r3, #5]
 8001550:	b299      	uxth	r1, r3
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <set_output+0x28c>)
 8001554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001556:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			continue;
 800155a:	e053      	b.n	8001604 <set_output+0x25c>
		}
		uint8_t * x0y0x1y1_list = ret_x0_y0_x1_y1(entrada_invertida[i], range_x_data[i], sliders_data[i]);
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	3340      	adds	r3, #64	; 0x40
 8001562:	443b      	add	r3, r7
 8001564:	3b20      	subs	r3, #32
 8001566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800156a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	189c      	adds	r4, r3, r2
 800157a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4413      	add	r3, r2
 800158a:	4622      	mov	r2, r4
 800158c:	f7ff fec8 	bl	8001320 <ret_x0_y0_x1_y1>
 8001590:	63b8      	str	r0, [r7, #56]	; 0x38

		valor_saida[i] = interpolacao_linear(entrada_invertida[i], x0y0x1y1_list[0], x0y0x1y1_list[1], x0y0x1y1_list[2], x0y0x1y1_list[3]);
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	3340      	adds	r3, #64	; 0x40
 8001598:	443b      	add	r3, r7
 800159a:	3b20      	subs	r3, #32
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fa52 	bl	8000a4c <__aeabi_d2f>
 80015a8:	4604      	mov	r4, r0
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	7819      	ldrb	r1, [r3, #0]
 80015ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b0:	3301      	adds	r3, #1
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b6:	3302      	adds	r3, #2
 80015b8:	7818      	ldrb	r0, [r3, #0]
 80015ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015bc:	3303      	adds	r3, #3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4603      	mov	r3, r0
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff fe59 	bl	800127c <interpolacao_linear>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fceb 	bl	8000fa8 <__aeabi_f2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b299      	uxth	r1, r3
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <set_output+0x28c>)
 80015d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//valor_saida[i] = 100;
		valor_saida[i] = valor_saida[i]*4095/100;
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <set_output+0x28c>)
 80015e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4613      	mov	r3, r2
 80015ea:	031b      	lsls	r3, r3, #12
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <set_output+0x290>)
 80015f0:	fb82 1203 	smull	r1, r2, r2, r3
 80015f4:	1152      	asrs	r2, r2, #5
 80015f6:	17db      	asrs	r3, r3, #31
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b299      	uxth	r1, r3
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <set_output+0x28c>)
 80015fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<3; i++){
 8001604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001606:	3301      	adds	r3, #1
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800160c:	2b02      	cmp	r3, #2
 800160e:	f77f aee7 	ble.w	80013e0 <set_output+0x38>
//		char buffer[8];
//	    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", valor_saida[0]), 100);
	}
	return valor_saida;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <set_output+0x28c>)
}
 8001614:	4618      	mov	r0, r3
 8001616:	3744      	adds	r7, #68	; 0x44
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	f3af 8000 	nop.w
 8001620:	00000000 	.word	0x00000000
 8001624:	40affe00 	.word	0x40affe00
 8001628:	40590000 	.word	0x40590000
 800162c:	0800bb78 	.word	0x0800bb78
 8001630:	200002a0 	.word	0x200002a0
 8001634:	20000028 	.word	0x20000028
 8001638:	51eb851f 	.word	0x51eb851f

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001642:	f000 fbc3 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001646:	f000 f86d 	bl	8001724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164a:	f000 f96d 	bl	8001928 <MX_GPIO_Init>
  MX_DMA_Init();
 800164e:	f000 f94d 	bl	80018ec <MX_DMA_Init>
  MX_ADC1_Init();
 8001652:	f000 f8c5 	bl	80017e0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001656:	f008 faa1 	bl	8009b9c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800165a:	f000 f91d 	bl	8001898 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 800165e:	2203      	movs	r2, #3
 8001660:	4927      	ldr	r1, [pc, #156]	; (8001700 <main+0xc4>)
 8001662:	4828      	ldr	r0, [pc, #160]	; (8001704 <main+0xc8>)
 8001664:	f000 fd10 	bl	8002088 <HAL_ADC_Start_DMA>
  update_data_from_flash(sliders_data, range_x_data, inverter_config);
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <main+0xcc>)
 800166a:	4928      	ldr	r1, [pc, #160]	; (800170c <main+0xd0>)
 800166c:	4828      	ldr	r0, [pc, #160]	; (8001710 <main+0xd4>)
 800166e:	f7ff fcf7 	bl	8001060 <update_data_from_flash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t * OutputValue = set_output(ADCValue, sliders_data, range_x_data, inverter_config);
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <main+0xcc>)
 8001674:	4a25      	ldr	r2, [pc, #148]	; (800170c <main+0xd0>)
 8001676:	4926      	ldr	r1, [pc, #152]	; (8001710 <main+0xd4>)
 8001678:	4821      	ldr	r0, [pc, #132]	; (8001700 <main+0xc4>)
 800167a:	f7ff fe95 	bl	80013a8 <set_output>
 800167e:	60f8      	str	r0, [r7, #12]
	  joystickhid.rx_8lsb = (OutputValue[0]);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <main+0xd8>)
 8001688:	701a      	strb	r2, [r3, #0]
	  joystickhid.ry_4lsb_rx_4msb = ((OutputValue[1] & 0xf) << 4 | OutputValue[0] >> 8);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3302      	adds	r3, #2
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	b25a      	sxtb	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	b29b      	uxth	r3, r3
 800169c:	b25b      	sxtb	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <main+0xd8>)
 80016a6:	705a      	strb	r2, [r3, #1]
	  joystickhid.ry_8msb = OutputValue[1] >> 4;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3302      	adds	r3, #2
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <main+0xd8>)
 80016b6:	709a      	strb	r2, [r3, #2]
	  joystickhid.rz_8lsb = OutputValue[2];
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3304      	adds	r3, #4
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <main+0xd8>)
 80016c2:	70da      	strb	r2, [r3, #3]
	  joystickhid.rz_4msb = OutputValue[2] >> 8;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3304      	adds	r3, #4
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <main+0xd8>)
 80016d2:	711a      	strb	r2, [r3, #4]
  	  uint8_t Test[] = "Fim\r\n"; //Data to send
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <main+0xdc>)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016dc:	6018      	str	r0, [r3, #0]
 80016de:	3304      	adds	r3, #4
 80016e0:	8019      	strh	r1, [r3, #0]
  	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 80016e2:	1d39      	adds	r1, r7, #4
 80016e4:	230a      	movs	r3, #10
 80016e6:	2206      	movs	r2, #6
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <main+0xe0>)
 80016ea:	f004 f84e 	bl	800578a <HAL_UART_Transmit>
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 80016ee:	2208      	movs	r2, #8
 80016f0:	4908      	ldr	r1, [pc, #32]	; (8001714 <main+0xd8>)
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <main+0xe4>)
 80016f4:	f007 f8f0 	bl	80088d8 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f000 fbc9 	bl	8001e90 <HAL_Delay>
  {
 80016fe:	e7b8      	b.n	8001672 <main+0x36>
 8001700:	200002ec 	.word	0x200002ec
 8001704:	2000022c 	.word	0x2000022c
 8001708:	200002f4 	.word	0x200002f4
 800170c:	20000000 	.word	0x20000000
 8001710:	20000014 	.word	0x20000014
 8001714:	200002e4 	.word	0x200002e4
 8001718:	0800bb7c 	.word	0x0800bb7c
 800171c:	200002a0 	.word	0x200002a0
 8001720:	2000032c 	.word	0x2000032c

08001724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b094      	sub	sp, #80	; 0x50
 8001728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172e:	2228      	movs	r2, #40	; 0x28
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f008 ff52 	bl	800a5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001754:	2301      	movs	r3, #1
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001762:	2301      	movs	r3, #1
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	2302      	movs	r3, #2
 8001768:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001770:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001774:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fae8 	bl	8004d50 <HAL_RCC_OscConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001786:	f000 f91b 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178a:	230f      	movs	r3, #15
 800178c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2101      	movs	r1, #1
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 fd54 	bl	8005254 <HAL_RCC_ClockConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017b2:	f000 f905 	bl	80019c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80017b6:	2312      	movs	r3, #18
 80017b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80017ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80017c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fedb 	bl	8005584 <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017d4:	f000 f8f4 	bl	80019c0 <Error_Handler>
  }
}
 80017d8:	bf00      	nop
 80017da:	3750      	adds	r7, #80	; 0x50
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <MX_ADC1_Init+0xb0>)
 80017f2:	4a28      	ldr	r2, [pc, #160]	; (8001894 <MX_ADC1_Init+0xb4>)
 80017f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <MX_ADC1_Init+0xb0>)
 80017f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_ADC1_Init+0xb0>)
 8001800:	2201      	movs	r2, #1
 8001802:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_ADC1_Init+0xb0>)
 8001806:	2200      	movs	r2, #0
 8001808:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_ADC1_Init+0xb0>)
 800180c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001810:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_ADC1_Init+0xb0>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <MX_ADC1_Init+0xb0>)
 800181a:	2203      	movs	r2, #3
 800181c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <MX_ADC1_Init+0xb0>)
 8001820:	f000 fb5a 	bl	8001ed8 <HAL_ADC_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800182a:	f000 f8c9 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001832:	2301      	movs	r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001836:	2306      	movs	r3, #6
 8001838:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <MX_ADC1_Init+0xb0>)
 8001840:	f000 fd1c 	bl	800227c <HAL_ADC_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800184a:	f000 f8b9 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800184e:	2301      	movs	r3, #1
 8001850:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001852:	2302      	movs	r3, #2
 8001854:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_ADC1_Init+0xb0>)
 800185c:	f000 fd0e 	bl	800227c <HAL_ADC_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001866:	f000 f8ab 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800186a:	2302      	movs	r3, #2
 800186c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800186e:	2303      	movs	r3, #3
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_ADC1_Init+0xb0>)
 8001878:	f000 fd00 	bl	800227c <HAL_ADC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001882:	f000 f89d 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000022c 	.word	0x2000022c
 8001894:	40012400 	.word	0x40012400

08001898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART1_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f003 ff0e 	bl	80056f0 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f000 f871 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002a0 	.word	0x200002a0
 80018e8:	40013800 	.word	0x40013800

080018ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_DMA_Init+0x38>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <MX_DMA_Init+0x38>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6153      	str	r3, [r2, #20]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_DMA_Init+0x38>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	200b      	movs	r0, #11
 8001910:	f000 ff85 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001914:	200b      	movs	r0, #11
 8001916:	f000 ff9e 	bl	8002856 <HAL_NVIC_EnableIRQ>

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_GPIO_Init+0x90>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <MX_GPIO_Init+0x90>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_GPIO_Init+0x90>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_GPIO_Init+0x90>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <MX_GPIO_Init+0x90>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_GPIO_Init+0x90>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_GPIO_Init+0x90>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <MX_GPIO_Init+0x90>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_GPIO_Init+0x90>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198a:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_GPIO_Init+0x94>)
 800198c:	f001 fd1c 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2302      	movs	r3, #2
 80019a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4619      	mov	r1, r3
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_GPIO_Init+0x94>)
 80019aa:	f001 fb89 	bl	80030c0 <HAL_GPIO_Init>

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40011000 	.word	0x40011000

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_MspInit+0x40>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_MspInit+0x40>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6193      	str	r3, [r2, #24]
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_MspInit+0x40>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_MspInit+0x40>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_MspInit+0x40>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_MspInit+0x40>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d14a      	bne.n	8001ac6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_ADC_MspInit+0xc4>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <HAL_ADC_MspInit+0xc4>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_ADC_MspInit+0xc4>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_ADC_MspInit+0xc4>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_ADC_MspInit+0xc4>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_ADC_MspInit+0xc4>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a60:	2307      	movs	r3, #7
 8001a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a64:	2303      	movs	r3, #3
 8001a66:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481a      	ldr	r0, [pc, #104]	; (8001ad8 <HAL_ADC_MspInit+0xc8>)
 8001a70:	f001 fb26 	bl	80030c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a76:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_ADC_MspInit+0xd0>)
 8001a78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001aa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aaa:	480c      	ldr	r0, [pc, #48]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001aac:	f000 feee 	bl	800288c <HAL_DMA_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001ab6:	f7ff ff83 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001abe:	621a      	str	r2, [r3, #32]
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_ADC_MspInit+0xcc>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40012400 	.word	0x40012400
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010800 	.word	0x40010800
 8001adc:	2000025c 	.word	0x2000025c
 8001ae0:	40020008 	.word	0x40020008

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_UART_MspInit+0x8c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d131      	bne.n	8001b68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_UART_MspInit+0x90>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <HAL_UART_MspInit+0x94>)
 8001b4a:	f001 fab9 	bl	80030c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_UART_MspInit+0x94>)
 8001b64:	f001 faac 	bl	80030c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010800 	.word	0x40010800

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f000 f949 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <DMA1_Channel1_IRQHandler+0x10>)
 8001bd2:	f000 ff15 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000025c 	.word	0x2000025c

08001be0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001be6:	f001 fd38 	bl	800365a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000af4 	.word	0x20000af4

08001bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	return 1;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <_kill>:

int _kill(int pid, int sig)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c0c:	f008 fcae 	bl	800a56c <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2216      	movs	r2, #22
 8001c14:	601a      	str	r2, [r3, #0]
	return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_exit>:

void _exit (int status)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffe7 	bl	8001c02 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c34:	e7fe      	b.n	8001c34 <_exit+0x12>

08001c36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e00a      	b.n	8001c5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c48:	f3af 8000 	nop.w
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	b2ca      	uxtb	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dbf0      	blt.n	8001c48 <_read+0x12>
	}

return len;
 8001c66:	687b      	ldr	r3, [r7, #4]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e009      	b.n	8001c96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	60ba      	str	r2, [r7, #8]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dbf1      	blt.n	8001c82 <_write+0x12>
	}
	return len;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_close>:

int _close(int file)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cce:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <_isatty>:

int _isatty(int file)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
	return 0;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f008 fc18 	bl	800a56c <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20005000 	.word	0x20005000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	200002fc 	.word	0x200002fc
 8001d70:	20000e48 	.word	0x20000e48

08001d74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d82:	490d      	ldr	r1, [pc, #52]	; (8001db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d98:	4c0a      	ldr	r4, [pc, #40]	; (8001dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001da6:	f7ff ffe5 	bl	8001d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f008 fbe5 	bl	800a578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dae:	f7ff fc45 	bl	800163c <main>
  bx lr
 8001db2:	4770      	bx	lr
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001dbc:	0800be40 	.word	0x0800be40
  ldr r2, =_sbss
 8001dc0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001dc4:	20000e48 	.word	0x20000e48

08001dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC1_2_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_Init+0x28>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_Init+0x28>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 fd13 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fdf0 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fd2b 	bl	8002872 <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f000 fcf3 	bl	800281e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000030 	.word	0x20000030
 8001e50:	20000038 	.word	0x20000038
 8001e54:	20000034 	.word	0x20000034

08001e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_IncTick+0x1c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_IncTick+0x20>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_IncTick+0x20>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	20000038 	.word	0x20000038
 8001e78:	20000300 	.word	0x20000300

08001e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <HAL_GetTick+0x10>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000300 	.word	0x20000300

08001e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_GetTick>
 8001e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d005      	beq.n	8001eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_Delay+0x44>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eb6:	bf00      	nop
 8001eb8:	f7ff ffe0 	bl	8001e7c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8f7      	bhi.n	8001eb8 <HAL_Delay+0x28>
  {
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000038 	.word	0x20000038

08001ed8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0be      	b.n	8002078 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fd7a 	bl	8001a10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 faff 	bl	8002520 <ADC_ConversionStop_Disable>
 8001f22:	4603      	mov	r3, r0
 8001f24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 8099 	bne.w	8002066 <HAL_ADC_Init+0x18e>
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 8095 	bne.w	8002066 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f44:	f023 0302 	bic.w	r3, r3, #2
 8001f48:	f043 0202 	orr.w	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7b1b      	ldrb	r3, [r3, #12]
 8001f5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f70:	d003      	beq.n	8001f7a <HAL_ADC_Init+0xa2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_ADC_Init+0xa8>
 8001f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7e:	e000      	b.n	8001f82 <HAL_ADC_Init+0xaa>
 8001f80:	2300      	movs	r3, #0
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7d1b      	ldrb	r3, [r3, #20]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d119      	bne.n	8001fc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d109      	bne.n	8001fac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	035a      	lsls	r2, r3, #13
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e00b      	b.n	8001fc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_ADC_Init+0x1a8>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff4:	d003      	beq.n	8001ffe <HAL_ADC_Init+0x126>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d104      	bne.n	8002008 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	3b01      	subs	r3, #1
 8002004:	051b      	lsls	r3, r3, #20
 8002006:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	430a      	orrs	r2, r1
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_ADC_Init+0x1ac>)
 8002024:	4013      	ands	r3, r2
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	429a      	cmp	r2, r3
 800202a:	d10b      	bne.n	8002044 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002042:	e018      	b.n	8002076 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	f023 0312 	bic.w	r3, r3, #18
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002064:	e007      	b.n	8002076 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002076:	7dfb      	ldrb	r3, [r7, #23]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	ffe1f7fd 	.word	0xffe1f7fd
 8002084:	ff1f0efe 	.word	0xff1f0efe

08002088 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_ADC_Start_DMA+0x1a8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_ADC_Start_DMA+0x24>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_ADC_Start_DMA+0x1ac>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d106      	bne.n	80020ba <HAL_ADC_Start_DMA+0x32>
 80020ac:	4b60      	ldr	r3, [pc, #384]	; (8002230 <HAL_ADC_Start_DMA+0x1a8>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 80b3 	bne.w	8002220 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_Start_DMA+0x40>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e0ae      	b.n	8002226 <HAL_ADC_Start_DMA+0x19e>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f9cb 	bl	800246c <ADC_Enable>
 80020d6:	4603      	mov	r3, r0
 80020d8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 809a 	bne.w	8002216 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_ADC_Start_DMA+0x1ac>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d105      	bne.n	800210c <HAL_ADC_Start_DMA+0x84>
 8002100:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <HAL_ADC_Start_DMA+0x1a8>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d115      	bne.n	8002138 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d026      	beq.n	8002174 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800212e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002136:	e01d      	b.n	8002174 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a39      	ldr	r2, [pc, #228]	; (8002230 <HAL_ADC_Start_DMA+0x1a8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_ADC_Start_DMA+0xd0>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a38      	ldr	r2, [pc, #224]	; (8002234 <HAL_ADC_Start_DMA+0x1ac>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d10d      	bne.n	8002174 <HAL_ADC_Start_DMA+0xec>
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_ADC_Start_DMA+0x1a8>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800216c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f023 0206 	bic.w	r2, r3, #6
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
 800218c:	e002      	b.n	8002194 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_ADC_Start_DMA+0x1b0>)
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <HAL_ADC_Start_DMA+0x1b4>)
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a23      	ldr	r2, [pc, #140]	; (8002240 <HAL_ADC_Start_DMA+0x1b8>)
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0202 	mvn.w	r2, #2
 80021bc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021cc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a18      	ldr	r0, [r3, #32]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	334c      	adds	r3, #76	; 0x4c
 80021d8:	4619      	mov	r1, r3
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f000 fbaf 	bl	8002940 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021f0:	d108      	bne.n	8002204 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002200:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002202:	e00f      	b.n	8002224 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002212:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002214:	e006      	b.n	8002224 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800221e:	e001      	b.n	8002224 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002224:	7dfb      	ldrb	r3, [r7, #23]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40012400 	.word	0x40012400
 8002234:	40012800 	.word	0x40012800
 8002238:	080025a3 	.word	0x080025a3
 800223c:	0800261f 	.word	0x0800261f
 8002240:	0800263b 	.word	0x0800263b

08002244 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
	...

0800227c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x20>
 8002298:	2302      	movs	r3, #2
 800229a:	e0dc      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1da>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d81c      	bhi.n	80022e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b05      	subs	r3, #5
 80022be:	221f      	movs	r2, #31
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4019      	ands	r1, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	3b05      	subs	r3, #5
 80022d8:	fa00 f203 	lsl.w	r2, r0, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
 80022e4:	e03c      	b.n	8002360 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d81c      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b23      	subs	r3, #35	; 0x23
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	4019      	ands	r1, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b23      	subs	r3, #35	; 0x23
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
 8002326:	e01b      	b.n	8002360 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3b41      	subs	r3, #65	; 0x41
 800233a:	221f      	movs	r2, #31
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	4019      	ands	r1, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3b41      	subs	r3, #65	; 0x41
 8002354:	fa00 f203 	lsl.w	r2, r0, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d91c      	bls.n	80023a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	3b1e      	subs	r3, #30
 800237a:	2207      	movs	r2, #7
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6898      	ldr	r0, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	3b1e      	subs	r3, #30
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	e019      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6919      	ldr	r1, [r3, #16]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6898      	ldr	r0, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d003      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023e2:	2b11      	cmp	r3, #17
 80023e4:	d132      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_ADC_ConfigChannel+0x1e4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d125      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d126      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800240c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b10      	cmp	r3, #16
 8002414:	d11a      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_ADC_ConfigChannel+0x1e8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a13      	ldr	r2, [pc, #76]	; (8002468 <HAL_ADC_ConfigChannel+0x1ec>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0c9a      	lsrs	r2, r3, #18
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800242c:	e002      	b.n	8002434 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b01      	subs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_ConfigChannel+0x1b2>
 800243a:	e007      	b.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40012400 	.word	0x40012400
 8002464:	20000030 	.word	0x20000030
 8002468:	431bde83 	.word	0x431bde83

0800246c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d040      	beq.n	800250c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <ADC_Enable+0xac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <ADC_Enable+0xb0>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	0c9b      	lsrs	r3, r3, #18
 80024a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a8:	e002      	b.n	80024b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024b6:	f7ff fce1 	bl	8001e7c <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	e01f      	b.n	80024fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024be:	f7ff fcdd 	bl	8001e7c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d918      	bls.n	80024fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d011      	beq.n	80024fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e007      	b.n	800250e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d1d8      	bne.n	80024be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000030 	.word	0x20000030
 800251c:	431bde83 	.word	0x431bde83

08002520 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12e      	bne.n	8002598 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800254a:	f7ff fc97 	bl	8001e7c <HAL_GetTick>
 800254e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002550:	e01b      	b.n	800258a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002552:	f7ff fc93 	bl	8001e7c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d914      	bls.n	800258a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10d      	bne.n	800258a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	f043 0210 	orr.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e007      	b.n	800259a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d0dc      	beq.n	8002552 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d127      	bne.n	800260c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025d6:	d115      	bne.n	8002604 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d111      	bne.n	8002604 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff fe1d 	bl	8002244 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800260a:	e004      	b.n	8002616 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fe12 	bl	8002256 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f7ff fe01 	bl	8002268 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800268c:	4013      	ands	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800269c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	60d3      	str	r3, [r2, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <__NVIC_GetPriorityGrouping+0x18>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	f003 0307 	and.w	r3, r3, #7
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	db0b      	blt.n	80026fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4906      	ldr	r1, [pc, #24]	; (8002708 <__NVIC_EnableIRQ+0x34>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	2001      	movs	r0, #1
 80026f6:	fa00 f202 	lsl.w	r2, r0, r2
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff90 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff2d 	bl	8002670 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff42 	bl	80026b8 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff90 	bl	8002760 <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5f 	bl	800270c <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff35 	bl	80026d4 <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa2 	bl	80027c4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e043      	b.n	800292a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <HAL_DMA_Init+0xa8>)
 80028aa:	4413      	add	r3, r2
 80028ac:	4a22      	ldr	r2, [pc, #136]	; (8002938 <HAL_DMA_Init+0xac>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_DMA_Init+0xb0>)
 80028be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	bffdfff8 	.word	0xbffdfff8
 8002938:	cccccccd 	.word	0xcccccccd
 800293c:	40020000 	.word	0x40020000

08002940 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_DMA_Start_IT+0x20>
 800295c:	2302      	movs	r3, #2
 800295e:	e04a      	b.n	80029f6 <HAL_DMA_Start_IT+0xb6>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800296e:	2b01      	cmp	r3, #1
 8002970:	d13a      	bne.n	80029e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f938 	bl	8002c0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 020e 	orr.w	r2, r2, #14
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e00f      	b.n	80029d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0204 	bic.w	r2, r2, #4
 80029c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 020a 	orr.w	r2, r2, #10
 80029d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e005      	b.n	80029f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
 80029f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d04f      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0xc8>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d04a      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a66      	ldr	r2, [pc, #408]	; (8002bf0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d029      	beq.n	8002aae <HAL_DMA_IRQHandler+0xae>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_DMA_IRQHandler+0x1f4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xaa>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a63      	ldr	r2, [pc, #396]	; (8002bf8 <HAL_DMA_IRQHandler+0x1f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01a      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0xa4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a62      	ldr	r2, [pc, #392]	; (8002bfc <HAL_DMA_IRQHandler+0x1fc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d012      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x9e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a60      	ldr	r2, [pc, #384]	; (8002c00 <HAL_DMA_IRQHandler+0x200>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x98>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a5f      	ldr	r2, [pc, #380]	; (8002c04 <HAL_DMA_IRQHandler+0x204>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d102      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x92>
 8002a8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a90:	e00e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002a92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a96:	e00b      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002a98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a9c:	e008      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002a9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aa2:	e005      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa8:	e002      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002aaa:	2340      	movs	r3, #64	; 0x40
 8002aac:	e000      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_DMA_IRQHandler+0x208>)
 8002ab2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8094 	beq.w	8002be6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ac6:	e08e      	b.n	8002be6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	2202      	movs	r2, #2
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d056      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x186>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d051      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020a 	bic.w	r2, r2, #10
 8002afe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <HAL_DMA_IRQHandler+0x1f0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d029      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x166>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a37      	ldr	r2, [pc, #220]	; (8002bf4 <HAL_DMA_IRQHandler+0x1f4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x162>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a35      	ldr	r2, [pc, #212]	; (8002bf8 <HAL_DMA_IRQHandler+0x1f8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x15c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <HAL_DMA_IRQHandler+0x1fc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d012      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x156>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a32      	ldr	r2, [pc, #200]	; (8002c00 <HAL_DMA_IRQHandler+0x200>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00a      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x150>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_DMA_IRQHandler+0x204>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <HAL_DMA_IRQHandler+0x14a>
 8002b44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b48:	e00e      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4e:	e00b      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b54:	e008      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b5a:	e005      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b60:	e002      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b62:	2320      	movs	r3, #32
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b66:	2302      	movs	r3, #2
 8002b68:	4a27      	ldr	r2, [pc, #156]	; (8002c08 <HAL_DMA_IRQHandler+0x208>)
 8002b6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d034      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b84:	e02f      	b.n	8002be6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d028      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x1e8>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d023      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 020e 	bic.w	r2, r2, #14
 8002bae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
    }
  }
  return;
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
}
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40020008 	.word	0x40020008
 8002bf4:	4002001c 	.word	0x4002001c
 8002bf8:	40020030 	.word	0x40020030
 8002bfc:	40020044 	.word	0x40020044
 8002c00:	40020058 	.word	0x40020058
 8002c04:	4002006c 	.word	0x4002006c
 8002c08:	40020000 	.word	0x40020000

08002c0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d108      	bne.n	8002c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c4a:	e007      	b.n	8002c5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <HAL_FLASH_Program+0xd8>)
 8002c84:	7e1b      	ldrb	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_FLASH_Program+0x26>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e054      	b.n	8002d38 <HAL_FLASH_Program+0xd0>
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_FLASH_Program+0xd8>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c98:	f000 f8d4 	bl	8002e44 <FLASH_WaitForLastOperation>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d144      	bne.n	8002d30 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002cac:	2301      	movs	r3, #1
 8002cae:	757b      	strb	r3, [r7, #21]
 8002cb0:	e007      	b.n	8002cc2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d102      	bne.n	8002cbe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	757b      	strb	r3, [r7, #21]
 8002cbc:	e001      	b.n	8002cc2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75bb      	strb	r3, [r7, #22]
 8002cc6:	e02d      	b.n	8002d24 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002cc8:	7dbb      	ldrb	r3, [r7, #22]
 8002cca:	005a      	lsls	r2, r3, #1
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	eb02 0c03 	add.w	ip, r2, r3
 8002cd2:	7dbb      	ldrb	r3, [r7, #22]
 8002cd4:	0119      	lsls	r1, r3, #4
 8002cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cda:	f1c1 0620 	rsb	r6, r1, #32
 8002cde:	f1a1 0020 	sub.w	r0, r1, #32
 8002ce2:	fa22 f401 	lsr.w	r4, r2, r1
 8002ce6:	fa03 f606 	lsl.w	r6, r3, r6
 8002cea:	4334      	orrs	r4, r6
 8002cec:	fa23 f000 	lsr.w	r0, r3, r0
 8002cf0:	4304      	orrs	r4, r0
 8002cf2:	fa23 f501 	lsr.w	r5, r3, r1
 8002cf6:	b2a3      	uxth	r3, r4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4660      	mov	r0, ip
 8002cfc:	f000 f886 	bl	8002e0c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d04:	f000 f89e 	bl	8002e44 <FLASH_WaitForLastOperation>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_FLASH_Program+0xdc>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <HAL_FLASH_Program+0xdc>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002d1e:	7dbb      	ldrb	r3, [r7, #22]
 8002d20:	3301      	adds	r3, #1
 8002d22:	75bb      	strb	r3, [r7, #22]
 8002d24:	7dba      	ldrb	r2, [r7, #22]
 8002d26:	7d7b      	ldrb	r3, [r7, #21]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d3cd      	bcc.n	8002cc8 <HAL_FLASH_Program+0x60>
 8002d2c:	e000      	b.n	8002d30 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002d2e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_FLASH_Program+0xd8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	761a      	strb	r2, [r3, #24]

  return status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d40:	20000308 	.word	0x20000308
 8002d44:	40022000 	.word	0x40022000

08002d48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_FLASH_Unlock+0x44>)
 8002d62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_FLASH_Unlock+0x48>)
 8002d68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	45670123 	.word	0x45670123
 8002d90:	cdef89ab 	.word	0xcdef89ab

08002d94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_FLASH_Lock+0x1c>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_FLASH_Lock+0x1c>)
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40022000 	.word	0x40022000

08002db4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002dc6:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <HAL_FLASH_OB_Unlock+0x30>)
 8002dc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <HAL_FLASH_OB_Unlock+0x34>)
 8002dce:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40022000 	.word	0x40022000
 8002de4:	45670123 	.word	0x45670123
 8002de8:	cdef89ab 	.word	0xcdef89ab

08002dec <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_FLASH_OB_Lock+0x1c>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_FLASH_OB_Lock+0x1c>)
 8002df6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dfa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000

08002e0c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <FLASH_Program_HalfWord+0x30>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <FLASH_Program_HalfWord+0x34>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <FLASH_Program_HalfWord+0x34>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	887a      	ldrh	r2, [r7, #2]
 8002e2e:	801a      	strh	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000308 	.word	0x20000308
 8002e40:	40022000 	.word	0x40022000

08002e44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff f816 	bl	8001e7c <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e52:	e010      	b.n	8002e76 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d00c      	beq.n	8002e76 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <FLASH_WaitForLastOperation+0x2e>
 8002e62:	f7ff f80b 	bl	8001e7c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d201      	bcs.n	8002e76 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e025      	b.n	8002ec2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <FLASH_WaitForLastOperation+0x88>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e8      	bne.n	8002e54 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <FLASH_WaitForLastOperation+0x88>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <FLASH_WaitForLastOperation+0x88>)
 8002e90:	2220      	movs	r2, #32
 8002e92:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <FLASH_WaitForLastOperation+0x88>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <FLASH_WaitForLastOperation+0x88>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <FLASH_WaitForLastOperation+0x88>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002eb8:	f000 f80a 	bl	8002ed0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40022000 	.word	0x40022000

08002ed0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002eda:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <FLASH_SetErrorCode+0x98>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <FLASH_SetErrorCode+0x9c>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <FLASH_SetErrorCode+0x9c>)
 8002ef0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f043 0310 	orr.w	r3, r3, #16
 8002ef8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <FLASH_SetErrorCode+0x98>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <FLASH_SetErrorCode+0x9c>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <FLASH_SetErrorCode+0x9c>)
 8002f10:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <FLASH_SetErrorCode+0x98>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <FLASH_SetErrorCode+0x9c>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <FLASH_SetErrorCode+0x9c>)
 8002f30:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <FLASH_SetErrorCode+0x98>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <FLASH_SetErrorCode+0x98>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f240 1201 	movw	r2, #257	; 0x101
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d106      	bne.n	8002f56 <FLASH_SetErrorCode+0x86>
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <FLASH_SetErrorCode+0x98>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <FLASH_SetErrorCode+0x98>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	61d3      	str	r3, [r2, #28]
}  
 8002f54:	e002      	b.n	8002f5c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <FLASH_SetErrorCode+0x98>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60d3      	str	r3, [r2, #12]
}  
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	20000308 	.word	0x20000308

08002f70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f82:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_FLASHEx_Erase+0xd0>)
 8002f84:	7e1b      	ldrb	r3, [r3, #24]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_FLASHEx_Erase+0x1e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e053      	b.n	8003036 <HAL_FLASHEx_Erase+0xc6>
 8002f8e:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <HAL_FLASHEx_Erase+0xd0>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d116      	bne.n	8002fca <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fa0:	f7ff ff50 	bl	8002e44 <FLASH_WaitForLastOperation>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d141      	bne.n	800302e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f000 f84c 	bl	8003048 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fb4:	f7ff ff46 	bl	8002e44 <FLASH_WaitForLastOperation>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <HAL_FLASHEx_Erase+0xd4>)
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_FLASHEx_Erase+0xd4>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6113      	str	r3, [r2, #16]
 8002fc8:	e031      	b.n	800302e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fce:	f7ff ff39 	bl	8002e44 <FLASH_WaitForLastOperation>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d12a      	bne.n	800302e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f04f 32ff 	mov.w	r2, #4294967295
 8002fde:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	e019      	b.n	800301c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002fe8:	68b8      	ldr	r0, [r7, #8]
 8002fea:	f000 f849 	bl	8003080 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ff2:	f7ff ff27 	bl	8002e44 <FLASH_WaitForLastOperation>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_FLASHEx_Erase+0xd4>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_FLASHEx_Erase+0xd4>)
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	601a      	str	r2, [r3, #0]
            break;
 8003012:	e00c      	b.n	800302e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800301a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	029a      	lsls	r2, r3, #10
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	d3dc      	bcc.n	8002fe8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_FLASHEx_Erase+0xd0>)
 8003030:	2200      	movs	r2, #0
 8003032:	761a      	strb	r2, [r3, #24]

  return status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000308 	.word	0x20000308
 8003044:	40022000 	.word	0x40022000

08003048 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <FLASH_MassErase+0x30>)
 8003052:	2200      	movs	r2, #0
 8003054:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <FLASH_MassErase+0x34>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <FLASH_MassErase+0x34>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <FLASH_MassErase+0x34>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <FLASH_MassErase+0x34>)
 8003068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	20000308 	.word	0x20000308
 800307c:	40022000 	.word	0x40022000

08003080 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <FLASH_PageErase+0x38>)
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <FLASH_PageErase+0x3c>)
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <FLASH_PageErase+0x3c>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <FLASH_PageErase+0x3c>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <FLASH_PageErase+0x3c>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	4a05      	ldr	r2, [pc, #20]	; (80030bc <FLASH_PageErase+0x3c>)
 80030a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000308 	.word	0x20000308
 80030bc:	40022000 	.word	0x40022000

080030c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b08b      	sub	sp, #44	; 0x2c
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d2:	e169      	b.n	80033a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030d4:	2201      	movs	r2, #1
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8158 	bne.w	80033a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a9a      	ldr	r2, [pc, #616]	; (8003360 <HAL_GPIO_Init+0x2a0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d05e      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 80030fc:	4a98      	ldr	r2, [pc, #608]	; (8003360 <HAL_GPIO_Init+0x2a0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d875      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003102:	4a98      	ldr	r2, [pc, #608]	; (8003364 <HAL_GPIO_Init+0x2a4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d058      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003108:	4a96      	ldr	r2, [pc, #600]	; (8003364 <HAL_GPIO_Init+0x2a4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d86f      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800310e:	4a96      	ldr	r2, [pc, #600]	; (8003368 <HAL_GPIO_Init+0x2a8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d052      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003114:	4a94      	ldr	r2, [pc, #592]	; (8003368 <HAL_GPIO_Init+0x2a8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d869      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800311a:	4a94      	ldr	r2, [pc, #592]	; (800336c <HAL_GPIO_Init+0x2ac>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d04c      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003120:	4a92      	ldr	r2, [pc, #584]	; (800336c <HAL_GPIO_Init+0x2ac>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d863      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003126:	4a92      	ldr	r2, [pc, #584]	; (8003370 <HAL_GPIO_Init+0x2b0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d046      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 800312c:	4a90      	ldr	r2, [pc, #576]	; (8003370 <HAL_GPIO_Init+0x2b0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d85d      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003132:	2b12      	cmp	r3, #18
 8003134:	d82a      	bhi.n	800318c <HAL_GPIO_Init+0xcc>
 8003136:	2b12      	cmp	r3, #18
 8003138:	d859      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <HAL_GPIO_Init+0x80>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	080031bb 	.word	0x080031bb
 8003144:	08003195 	.word	0x08003195
 8003148:	080031a7 	.word	0x080031a7
 800314c:	080031e9 	.word	0x080031e9
 8003150:	080031ef 	.word	0x080031ef
 8003154:	080031ef 	.word	0x080031ef
 8003158:	080031ef 	.word	0x080031ef
 800315c:	080031ef 	.word	0x080031ef
 8003160:	080031ef 	.word	0x080031ef
 8003164:	080031ef 	.word	0x080031ef
 8003168:	080031ef 	.word	0x080031ef
 800316c:	080031ef 	.word	0x080031ef
 8003170:	080031ef 	.word	0x080031ef
 8003174:	080031ef 	.word	0x080031ef
 8003178:	080031ef 	.word	0x080031ef
 800317c:	080031ef 	.word	0x080031ef
 8003180:	080031ef 	.word	0x080031ef
 8003184:	0800319d 	.word	0x0800319d
 8003188:	080031b1 	.word	0x080031b1
 800318c:	4a79      	ldr	r2, [pc, #484]	; (8003374 <HAL_GPIO_Init+0x2b4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003192:	e02c      	b.n	80031ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	623b      	str	r3, [r7, #32]
          break;
 800319a:	e029      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	3304      	adds	r3, #4
 80031a2:	623b      	str	r3, [r7, #32]
          break;
 80031a4:	e024      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	3308      	adds	r3, #8
 80031ac:	623b      	str	r3, [r7, #32]
          break;
 80031ae:	e01f      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	330c      	adds	r3, #12
 80031b6:	623b      	str	r3, [r7, #32]
          break;
 80031b8:	e01a      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031c2:	2304      	movs	r3, #4
 80031c4:	623b      	str	r3, [r7, #32]
          break;
 80031c6:	e013      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d0:	2308      	movs	r3, #8
 80031d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	611a      	str	r2, [r3, #16]
          break;
 80031da:	e009      	b.n	80031f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031dc:	2308      	movs	r3, #8
 80031de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	615a      	str	r2, [r3, #20]
          break;
 80031e6:	e003      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
          break;
 80031ec:	e000      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          break;
 80031ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2bff      	cmp	r3, #255	; 0xff
 80031f4:	d801      	bhi.n	80031fa <HAL_GPIO_Init+0x13a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	e001      	b.n	80031fe <HAL_GPIO_Init+0x13e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2bff      	cmp	r3, #255	; 0xff
 8003204:	d802      	bhi.n	800320c <HAL_GPIO_Init+0x14c>
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	e002      	b.n	8003212 <HAL_GPIO_Init+0x152>
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	3b08      	subs	r3, #8
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	210f      	movs	r1, #15
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	401a      	ands	r2, r3
 8003224:	6a39      	ldr	r1, [r7, #32]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	431a      	orrs	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80b1 	beq.w	80033a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003240:	4b4d      	ldr	r3, [pc, #308]	; (8003378 <HAL_GPIO_Init+0x2b8>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a4c      	ldr	r2, [pc, #304]	; (8003378 <HAL_GPIO_Init+0x2b8>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6193      	str	r3, [r2, #24]
 800324c:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_GPIO_Init+0x2b8>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003258:	4a48      	ldr	r2, [pc, #288]	; (800337c <HAL_GPIO_Init+0x2bc>)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a40      	ldr	r2, [pc, #256]	; (8003380 <HAL_GPIO_Init+0x2c0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_GPIO_Init+0x1ec>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3f      	ldr	r2, [pc, #252]	; (8003384 <HAL_GPIO_Init+0x2c4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00d      	beq.n	80032a8 <HAL_GPIO_Init+0x1e8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3e      	ldr	r2, [pc, #248]	; (8003388 <HAL_GPIO_Init+0x2c8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <HAL_GPIO_Init+0x1e4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3d      	ldr	r2, [pc, #244]	; (800338c <HAL_GPIO_Init+0x2cc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_GPIO_Init+0x1e0>
 800329c:	2303      	movs	r3, #3
 800329e:	e006      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a0:	2304      	movs	r3, #4
 80032a2:	e004      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e002      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032ac:	2300      	movs	r3, #0
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	f002 0203 	and.w	r2, r2, #3
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	4093      	lsls	r3, r2
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032be:	492f      	ldr	r1, [pc, #188]	; (800337c <HAL_GPIO_Init+0x2bc>)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d006      	beq.n	80032e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	492c      	ldr	r1, [pc, #176]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4928      	ldr	r1, [pc, #160]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003300:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	4922      	ldr	r1, [pc, #136]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	43db      	mvns	r3, r3
 8003316:	491e      	ldr	r1, [pc, #120]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 8003318:	4013      	ands	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	4918      	ldr	r1, [pc, #96]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	43db      	mvns	r3, r3
 800333e:	4914      	ldr	r1, [pc, #80]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 8003340:	4013      	ands	r3, r2
 8003342:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d021      	beq.n	8003394 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	490e      	ldr	r1, [pc, #56]	; (8003390 <HAL_GPIO_Init+0x2d0>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	60cb      	str	r3, [r1, #12]
 800335c:	e021      	b.n	80033a2 <HAL_GPIO_Init+0x2e2>
 800335e:	bf00      	nop
 8003360:	10320000 	.word	0x10320000
 8003364:	10310000 	.word	0x10310000
 8003368:	10220000 	.word	0x10220000
 800336c:	10210000 	.word	0x10210000
 8003370:	10120000 	.word	0x10120000
 8003374:	10110000 	.word	0x10110000
 8003378:	40021000 	.word	0x40021000
 800337c:	40010000 	.word	0x40010000
 8003380:	40010800 	.word	0x40010800
 8003384:	40010c00 	.word	0x40010c00
 8003388:	40011000 	.word	0x40011000
 800338c:	40011400 	.word	0x40011400
 8003390:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_GPIO_Init+0x304>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	43db      	mvns	r3, r3
 800339c:	4909      	ldr	r1, [pc, #36]	; (80033c4 <HAL_GPIO_Init+0x304>)
 800339e:	4013      	ands	r3, r2
 80033a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	3301      	adds	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f47f ae8e 	bne.w	80030d4 <HAL_GPIO_Init+0x14>
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	372c      	adds	r7, #44	; 0x2c
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40010400 	.word	0x40010400

080033c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033e4:	e003      	b.n	80033ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	041a      	lsls	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	b08b      	sub	sp, #44	; 0x2c
 80033fc:	af06      	add	r7, sp, #24
 80033fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0fd      	b.n	8003606 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f006 fe12 	bl	800a048 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f002 fb3b 	bl	8005aac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	687e      	ldr	r6, [r7, #4]
 800343e:	466d      	mov	r5, sp
 8003440:	f106 0410 	add.w	r4, r6, #16
 8003444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	1d33      	adds	r3, r6, #4
 800344e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003450:	6838      	ldr	r0, [r7, #0]
 8003452:	f002 fb05 	bl	8005a60 <USB_CoreInit>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0ce      	b.n	8003606 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f002 fb36 	bl	8005ae0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e04c      	b.n	8003514 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	3301      	adds	r3, #1
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	440b      	add	r3, r1
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	b298      	uxth	r0, r3
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	440b      	add	r3, r1
 80034b6:	3336      	adds	r3, #54	; 0x36
 80034b8:	4602      	mov	r2, r0
 80034ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	440b      	add	r3, r1
 80034cc:	3303      	adds	r3, #3
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	3338      	adds	r3, #56	; 0x38
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	333c      	adds	r3, #60	; 0x3c
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	3340      	adds	r3, #64	; 0x40
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	3301      	adds	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d3ad      	bcc.n	800347a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
 8003522:	e044      	b.n	80035ae <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	440b      	add	r3, r1
 8003548:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	440b      	add	r3, r1
 8003574:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	440b      	add	r3, r1
 800358a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	3301      	adds	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3b5      	bcc.n	8003524 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	687e      	ldr	r6, [r7, #4]
 80035c0:	466d      	mov	r5, sp
 80035c2:	f106 0410 	add.w	r4, r6, #16
 80035c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	1d33      	adds	r3, r6, #4
 80035d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d2:	6838      	ldr	r0, [r7, #0]
 80035d4:	f002 fa90 	bl	8005af8 <USB_DevInit>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00d      	b.n	8003606 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 ff42 	bl	8008488 <USB_DevDisconnect>

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800360e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_PCD_Start+0x16>
 8003620:	2302      	movs	r3, #2
 8003622:	e016      	b.n	8003652 <HAL_PCD_Start+0x44>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f002 fa25 	bl	8005a80 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003636:	2101      	movs	r1, #1
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f006 ff5c 	bl	800a4f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f004 ff16 	bl	8008474 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b088      	sub	sp, #32
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f004 ff18 	bl	800849c <USB_ReadInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003676:	d102      	bne.n	800367e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fb48 	bl	8003d0e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f004 ff0a 	bl	800849c <USB_ReadInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d112      	bne.n	80036ba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a6:	b292      	uxth	r2, r2
 80036a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f006 fd46 	bl	800a13e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036b2:	2100      	movs	r1, #0
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f923 	bl	8003900 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 feec 	bl	800849c <USB_ReadInterrupts>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ce:	d10b      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036e2:	b292      	uxth	r2, r2
 80036e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 fed5 	bl	800849c <USB_ReadInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fc:	d10b      	bne.n	8003716 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003710:	b292      	uxth	r2, r2
 8003712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f004 febe 	bl	800849c <USB_ReadInterrupts>
 8003720:	4603      	mov	r3, r0
 8003722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d126      	bne.n	800377a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	b292      	uxth	r2, r2
 8003740:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0208 	bic.w	r2, r2, #8
 8003756:	b292      	uxth	r2, r2
 8003758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f006 fd27 	bl	800a1b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003774:	b292      	uxth	r2, r2
 8003776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f004 fe8c 	bl	800849c <USB_ReadInterrupts>
 8003784:	4603      	mov	r3, r0
 8003786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378e:	f040 8082 	bne.w	8003896 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e010      	b.n	80037ba <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	7ffb      	ldrb	r3, [r7, #31]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	441a      	add	r2, r3
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
 80037a6:	8812      	ldrh	r2, [r2, #0]
 80037a8:	b292      	uxth	r2, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	3320      	adds	r3, #32
 80037ae:	443b      	add	r3, r7
 80037b0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80037b4:	7ffb      	ldrb	r3, [r7, #31]
 80037b6:	3301      	adds	r3, #1
 80037b8:	77fb      	strb	r3, [r7, #31]
 80037ba:	7ffb      	ldrb	r3, [r7, #31]
 80037bc:	2b07      	cmp	r3, #7
 80037be:	d9eb      	bls.n	8003798 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	b292      	uxth	r2, r2
 80037d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	b292      	uxth	r2, r2
 80037ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037f0:	bf00      	nop
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f6      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	b292      	uxth	r2, r2
 8003818:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e00f      	b.n	8003842 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	4611      	mov	r1, r2
 800382a:	7ffa      	ldrb	r2, [r7, #31]
 800382c:	0092      	lsls	r2, r2, #2
 800382e:	440a      	add	r2, r1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	3320      	adds	r3, #32
 8003834:	443b      	add	r3, r7
 8003836:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800383a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	3301      	adds	r3, #1
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	7ffb      	ldrb	r3, [r7, #31]
 8003844:	2b07      	cmp	r3, #7
 8003846:	d9ec      	bls.n	8003822 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	b292      	uxth	r2, r2
 800385c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003868:	b29a      	uxth	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003872:	b292      	uxth	r2, r2
 8003874:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0204 	orr.w	r2, r2, #4
 800388a:	b292      	uxth	r2, r2
 800388c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f006 fc73 	bl	800a17c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f004 fdfe 	bl	800849c <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038aa:	d10e      	bne.n	80038ca <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038be:	b292      	uxth	r2, r2
 80038c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f006 fc2c 	bl	800a122 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 fde4 	bl	800849c <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038de:	d10b      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f2:	b292      	uxth	r2, r2
 80038f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80038f8:	bf00      	nop
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_PCD_SetAddress+0x1a>
 8003916:	2302      	movs	r3, #2
 8003918:	e013      	b.n	8003942 <HAL_PCD_SetAddress+0x42>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fd8b 	bl	800844e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	4608      	mov	r0, r1
 8003954:	4611      	mov	r1, r2
 8003956:	461a      	mov	r2, r3
 8003958:	4603      	mov	r3, r0
 800395a:	70fb      	strb	r3, [r7, #3]
 800395c:	460b      	mov	r3, r1
 800395e:	803b      	strh	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da0e      	bge.n	800398e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	705a      	strb	r2, [r3, #1]
 800398c:	e00e      	b.n	80039ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 0207 	and.w	r2, r3, #7
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039b8:	883a      	ldrh	r2, [r7, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	78ba      	ldrb	r2, [r7, #2]
 80039c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039d6:	78bb      	ldrb	r3, [r7, #2]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_PCD_EP_Open+0xa6>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e00e      	b.n	8003a0e <HAL_PCD_EP_Open+0xc4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 f89a 	bl	8005b38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da0e      	bge.n	8003a48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	705a      	strb	r2, [r3, #1]
 8003a46:	e00e      	b.n	8003a66 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 0207 	and.w	r2, r3, #7
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_PCD_EP_Close+0x6a>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e00e      	b.n	8003a9e <HAL_PCD_EP_Close+0x88>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68f9      	ldr	r1, [r7, #12]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f002 fbbc 	bl	800620c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
 8003ab8:	f003 0207 	and.w	r2, r3, #7
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6979      	ldr	r1, [r7, #20]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 fd6e 	bl	80065e4 <USB_EPStartXfer>
 8003b08:	e005      	b.n	8003b16 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6979      	ldr	r1, [r7, #20]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 fd67 	bl	80065e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b30:	7afb      	ldrb	r3, [r7, #11]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b78:	7afb      	ldrb	r3, [r7, #11]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6979      	ldr	r1, [r7, #20]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fd2b 	bl	80065e4 <USB_EPStartXfer>
 8003b8e:	e005      	b.n	8003b9c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6979      	ldr	r1, [r7, #20]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f002 fd24 	bl	80065e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 0207 	and.w	r2, r3, #7
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d901      	bls.n	8003bc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e04c      	b.n	8003c5e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da0e      	bge.n	8003bea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	705a      	strb	r2, [r3, #1]
 8003be8:	e00c      	b.n	8003c04 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_PCD_EP_SetStall+0x7e>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e01c      	b.n	8003c5e <HAL_PCD_EP_SetStall+0xb8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f004 fb0e 	bl	8008254 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f004 fc33 	bl	80084ba <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d901      	bls.n	8003c84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e040      	b.n	8003d06 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da0e      	bge.n	8003caa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	705a      	strb	r2, [r3, #1]
 8003ca8:	e00e      	b.n	8003cc8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	f003 0207 	and.w	r2, r3, #7
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_PCD_EP_ClrStall+0x82>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e00e      	b.n	8003d06 <HAL_PCD_EP_ClrStall+0xa0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f004 fafc 	bl	80082f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b08e      	sub	sp, #56	; 0x38
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d16:	e2ec      	b.n	80042f2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d20:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003d2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 8161 	bne.w	8003ffa <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d152      	bne.n	8003de8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	81fb      	strh	r3, [r7, #14]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	89fb      	ldrh	r3, [r7, #14]
 8003d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3328      	adds	r3, #40	; 0x28
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3302      	adds	r3, #2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	441a      	add	r2, r3
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003da6:	2100      	movs	r1, #0
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f006 f9a0 	bl	800a0ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 829b 	beq.w	80042f2 <PCD_EP_ISR_Handler+0x5e4>
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f040 8296 	bne.w	80042f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b292      	uxth	r2, r2
 8003dda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003de6:	e284      	b.n	80042f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003df8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d034      	beq.n	8003e6c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	3306      	adds	r3, #6
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f004 fb8a 	bl	800855a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e52:	4013      	ands	r3, r2
 8003e54:	823b      	strh	r3, [r7, #16]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	8a3a      	ldrh	r2, [r7, #16]
 8003e5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e60:	b292      	uxth	r2, r2
 8003e62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f006 f915 	bl	800a094 <HAL_PCD_SetupStageCallback>
 8003e6a:	e242      	b.n	80042f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f280 823e 	bge.w	80042f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e82:	4013      	ands	r3, r2
 8003e84:	83bb      	strh	r3, [r7, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	8bba      	ldrh	r2, [r7, #28]
 8003e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e90:	b292      	uxth	r2, r2
 8003e92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3306      	adds	r3, #6
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d019      	beq.n	8003efc <PCD_EP_ISR_Handler+0x1ee>
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	6959      	ldr	r1, [r3, #20]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f004 fb3a 	bl	800855a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	441a      	add	r2, r3
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f006 f8de 	bl	800a0b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 81f2 	bne.w	80042f2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	4413      	add	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d112      	bne.n	8003f5c <PCD_EP_ISR_Handler+0x24e>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	801a      	strh	r2, [r3, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	e02f      	b.n	8003fbc <PCD_EP_ISR_Handler+0x2ae>
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b3e      	cmp	r3, #62	; 0x3e
 8003f62:	d813      	bhi.n	8003f8c <PCD_EP_ISR_Handler+0x27e>
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <PCD_EP_ISR_Handler+0x270>
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	029b      	lsls	r3, r3, #10
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	e017      	b.n	8003fbc <PCD_EP_ISR_Handler+0x2ae>
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <PCD_EP_ISR_Handler+0x298>
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	029b      	lsls	r3, r3, #10
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	827b      	strh	r3, [r7, #18]
 8003fce:	8a7b      	ldrh	r3, [r7, #18]
 8003fd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003fd4:	827b      	strh	r3, [r7, #18]
 8003fd6:	8a7b      	ldrh	r3, [r7, #18]
 8003fd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fdc:	827b      	strh	r3, [r7, #18]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	8a7b      	ldrh	r3, [r7, #18]
 8003fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]
 8003ff8:	e17b      	b.n	80042f2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800400c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004010:	2b00      	cmp	r3, #0
 8004012:	f280 80ea 	bge.w	80041ea <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29a      	uxth	r2, r3
 8004028:	f640 738f 	movw	r3, #3983	; 0xf8f
 800402c:	4013      	ands	r3, r2
 800402e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004044:	b292      	uxth	r2, r2
 8004046:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004048:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	7b1b      	ldrb	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d122      	bne.n	80040ac <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	3306      	adds	r3, #6
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004090:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8087 	beq.w	80041a6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	6959      	ldr	r1, [r3, #20]
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	88da      	ldrh	r2, [r3, #6]
 80040a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040a6:	f004 fa58 	bl	800855a <USB_ReadPMA>
 80040aa:	e07c      	b.n	80041a6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	78db      	ldrb	r3, [r3, #3]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d108      	bne.n	80040c6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040b6:	461a      	mov	r2, r3
 80040b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f927 	bl	800430e <HAL_PCD_EP_DB_Receive>
 80040c0:	4603      	mov	r3, r0
 80040c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040c4:	e06f      	b.n	80041a6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	441a      	add	r2, r3
 80040f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d021      	beq.n	8004164 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	3302      	adds	r3, #2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004148:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800414a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800414c:	2b00      	cmp	r3, #0
 800414e:	d02a      	beq.n	80041a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	6959      	ldr	r1, [r3, #20]
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	891a      	ldrh	r2, [r3, #8]
 800415c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800415e:	f004 f9fc 	bl	800855a <USB_ReadPMA>
 8004162:	e020      	b.n	80041a6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	3306      	adds	r3, #6
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800418e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	6959      	ldr	r1, [r3, #20]
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	895a      	ldrh	r2, [r3, #10]
 80041a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041a2:	f004 f9da 	bl	800855a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ac:	441a      	add	r2, r3
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041b8:	441a      	add	r2, r3
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <PCD_EP_ISR_Handler+0x4c2>
 80041c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d206      	bcs.n	80041de <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f005 ff6e 	bl	800a0b8 <HAL_PCD_DataOutStageCallback>
 80041dc:	e005      	b.n	80041ea <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f002 f9fd 	bl	80065e4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d07e      	beq.n	80042f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80041f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4413      	add	r3, r2
 8004206:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	843b      	strh	r3, [r7, #32]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	8c3b      	ldrh	r3, [r7, #32]
 8004234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800423c:	b29b      	uxth	r3, r3
 800423e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	78db      	ldrb	r3, [r3, #3]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d00c      	beq.n	8004262 <PCD_EP_ISR_Handler+0x554>
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	78db      	ldrb	r3, [r3, #3]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004254:	2b02      	cmp	r3, #2
 8004256:	d146      	bne.n	80042e6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004258:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d141      	bne.n	80042e6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426a:	b29b      	uxth	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	3302      	adds	r3, #2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800428a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	8bfb      	ldrh	r3, [r7, #30]
 8004292:	429a      	cmp	r2, r3
 8004294:	d906      	bls.n	80042a4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	8bfb      	ldrh	r3, [r7, #30]
 800429c:	1ad2      	subs	r2, r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	619a      	str	r2, [r3, #24]
 80042a2:	e002      	b.n	80042aa <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	2200      	movs	r2, #0
 80042a8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f005 ff18 	bl	800a0ee <HAL_PCD_DataInStageCallback>
 80042be:	e018      	b.n	80042f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	8bfb      	ldrh	r3, [r7, #30]
 80042c6:	441a      	add	r2, r3
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	8bfb      	ldrh	r3, [r7, #30]
 80042d2:	441a      	add	r2, r3
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042de:	4618      	mov	r0, r3
 80042e0:	f002 f980 	bl	80065e4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80042e4:	e005      	b.n	80042f2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042e8:	461a      	mov	r2, r3
 80042ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f91b 	bl	8004528 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f6ff ad0a 	blt.w	8003d18 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3738      	adds	r7, #56	; 0x38
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b088      	sub	sp, #32
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	4613      	mov	r3, r2
 800431a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d07e      	beq.n	8004424 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	3302      	adds	r3, #2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800434e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	8b7b      	ldrh	r3, [r7, #26]
 8004356:	429a      	cmp	r2, r3
 8004358:	d306      	bcc.n	8004368 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	8b7b      	ldrh	r3, [r7, #26]
 8004360:	1ad2      	subs	r2, r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	619a      	str	r2, [r3, #24]
 8004366:	e002      	b.n	800436e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d123      	bne.n	80043be <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800438c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004390:	833b      	strh	r3, [r7, #24]
 8004392:	8b3b      	ldrh	r3, [r7, #24]
 8004394:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004398:	833b      	strh	r3, [r7, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	441a      	add	r2, r3
 80043a8:	8b3b      	ldrh	r3, [r7, #24]
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01f      	beq.n	8004408 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	82fb      	strh	r3, [r7, #22]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	8afb      	ldrh	r3, [r7, #22]
 80043f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004404:	b29b      	uxth	r3, r3
 8004406:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004408:	8b7b      	ldrh	r3, [r7, #26]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8087 	beq.w	800451e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6959      	ldr	r1, [r3, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	891a      	ldrh	r2, [r3, #8]
 800441c:	8b7b      	ldrh	r3, [r7, #26]
 800441e:	f004 f89c 	bl	800855a <USB_ReadPMA>
 8004422:	e07c      	b.n	800451e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442c:	b29b      	uxth	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	3306      	adds	r3, #6
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	8b7b      	ldrh	r3, [r7, #26]
 8004454:	429a      	cmp	r2, r3
 8004456:	d306      	bcc.n	8004466 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	8b7b      	ldrh	r3, [r7, #26]
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	619a      	str	r2, [r3, #24]
 8004464:	e002      	b.n	800446c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d123      	bne.n	80044bc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	83fb      	strh	r3, [r7, #30]
 8004490:	8bfb      	ldrh	r3, [r7, #30]
 8004492:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004496:	83fb      	strh	r3, [r7, #30]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	441a      	add	r2, r3
 80044a6:	8bfb      	ldrh	r3, [r7, #30]
 80044a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11f      	bne.n	8004506 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e0:	83bb      	strh	r3, [r7, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	8bbb      	ldrh	r3, [r7, #28]
 80044f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004502:	b29b      	uxth	r3, r3
 8004504:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004506:	8b7b      	ldrh	r3, [r7, #26]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6959      	ldr	r1, [r3, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	895a      	ldrh	r2, [r3, #10]
 8004518:	8b7b      	ldrh	r3, [r7, #26]
 800451a:	f004 f81e 	bl	800855a <USB_ReadPMA>
    }
  }

  return count;
 800451e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0a2      	sub	sp, #136	; 0x88
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 81c7 	beq.w	80048d0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	3302      	adds	r3, #2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800456a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004576:	429a      	cmp	r2, r3
 8004578:	d907      	bls.n	800458a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	619a      	str	r2, [r3, #24]
 8004588:	e002      	b.n	8004590 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2200      	movs	r2, #0
 800458e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 80b9 	bne.w	800470c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d126      	bne.n	80045f0 <HAL_PCD_EP_DB_Transmit+0xc8>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	4413      	add	r3, r2
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	011a      	lsls	r2, r3, #4
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	4413      	add	r3, r2
 80045c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	e01a      	b.n	8004626 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d116      	bne.n	8004626 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004606:	b29b      	uxth	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	4413      	add	r3, r2
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	011a      	lsls	r2, r3, #4
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	4413      	add	r3, r2
 800461a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	2200      	movs	r2, #0
 8004624:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d126      	bne.n	8004682 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	011a      	lsls	r2, r3, #4
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	4413      	add	r3, r2
 8004656:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004666:	b29a      	uxth	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800467a:	b29a      	uxth	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	801a      	strh	r2, [r3, #0]
 8004680:	e017      	b.n	80046b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d113      	bne.n	80046b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	4413      	add	r3, r2
 800469a:	623b      	str	r3, [r7, #32]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	011a      	lsls	r2, r3, #4
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	4413      	add	r3, r2
 80046a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2200      	movs	r2, #0
 80046b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4619      	mov	r1, r3
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f005 fd18 	bl	800a0ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 82d4 	beq.w	8004c72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	827b      	strh	r3, [r7, #18]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	8a7b      	ldrh	r3, [r7, #18]
 80046f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]
 800470a:	e2b2      	b.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d021      	beq.n	800475a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004730:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004760:	2b01      	cmp	r3, #1
 8004762:	f040 8286 	bne.w	8004c72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800476e:	441a      	add	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800477c:	441a      	add	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d309      	bcc.n	80047a2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6a1a      	ldr	r2, [r3, #32]
 8004798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	621a      	str	r2, [r3, #32]
 80047a0:	e015      	b.n	80047ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d107      	bne.n	80047ba <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80047aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047b8:	e009      	b.n	80047ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2200      	movs	r2, #0
 80047cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	785b      	ldrb	r3, [r3, #1]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d155      	bne.n	8004882 <HAL_PCD_EP_DB_Transmit+0x35a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	63bb      	str	r3, [r7, #56]	; 0x38
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	4413      	add	r3, r2
 80047ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	011a      	lsls	r2, r3, #4
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	4413      	add	r3, r2
 80047f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
 80047fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004800:	2b00      	cmp	r3, #0
 8004802:	d112      	bne.n	800482a <HAL_PCD_EP_DB_Transmit+0x302>
 8004804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800480e:	b29a      	uxth	r2, r3
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004822:	b29a      	uxth	r2, r3
 8004824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e047      	b.n	80048ba <HAL_PCD_EP_DB_Transmit+0x392>
 800482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482c:	2b3e      	cmp	r3, #62	; 0x3e
 800482e:	d811      	bhi.n	8004854 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	64bb      	str	r3, [r7, #72]	; 0x48
 8004836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004842:	3301      	adds	r3, #1
 8004844:	64bb      	str	r3, [r7, #72]	; 0x48
 8004846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004848:	b29b      	uxth	r3, r3
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	b29a      	uxth	r2, r3
 800484e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e032      	b.n	80048ba <HAL_PCD_EP_DB_Transmit+0x392>
 8004854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	64bb      	str	r3, [r7, #72]	; 0x48
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <HAL_PCD_EP_DB_Transmit+0x342>
 8004864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004866:	3b01      	subs	r3, #1
 8004868:	64bb      	str	r3, [r7, #72]	; 0x48
 800486a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486c:	b29b      	uxth	r3, r3
 800486e:	029b      	lsls	r3, r3, #10
 8004870:	b29b      	uxth	r3, r3
 8004872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487a:	b29a      	uxth	r2, r3
 800487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	e01b      	b.n	80048ba <HAL_PCD_EP_DB_Transmit+0x392>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d117      	bne.n	80048ba <HAL_PCD_EP_DB_Transmit+0x392>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	643b      	str	r3, [r7, #64]	; 0x40
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489e:	4413      	add	r3, r2
 80048a0:	643b      	str	r3, [r7, #64]	; 0x40
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	011a      	lsls	r2, r3, #4
 80048a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048aa:	4413      	add	r3, r2
 80048ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6959      	ldr	r1, [r3, #20]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	891a      	ldrh	r2, [r3, #8]
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f003 fe01 	bl	80084d0 <USB_WritePMA>
 80048ce:	e1d0      	b.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d8:	b29b      	uxth	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	3306      	adds	r3, #6
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	699a      	ldr	r2, [r3, #24]
 8004900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004904:	429a      	cmp	r2, r3
 8004906:	d307      	bcc.n	8004918 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004910:	1ad2      	subs	r2, r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	619a      	str	r2, [r3, #24]
 8004916:	e002      	b.n	800491e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2200      	movs	r2, #0
 800491c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 80c4 	bne.w	8004ab0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d126      	bne.n	800497e <HAL_PCD_EP_DB_Transmit+0x456>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004944:	4413      	add	r3, r2
 8004946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004950:	4413      	add	r3, r2
 8004952:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004956:	66bb      	str	r3, [r7, #104]	; 0x68
 8004958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004962:	b29a      	uxth	r2, r3
 8004964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004976:	b29a      	uxth	r2, r3
 8004978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	e01a      	b.n	80049b4 <HAL_PCD_EP_DB_Transmit+0x48c>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d116      	bne.n	80049b4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	677b      	str	r3, [r7, #116]	; 0x74
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004994:	b29b      	uxth	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499a:	4413      	add	r3, r2
 800499c:	677b      	str	r3, [r7, #116]	; 0x74
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	011a      	lsls	r2, r3, #4
 80049a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a6:	4413      	add	r3, r2
 80049a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049ac:	673b      	str	r3, [r7, #112]	; 0x70
 80049ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b0:	2200      	movs	r2, #0
 80049b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d12f      	bne.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049da:	4413      	add	r3, r2
 80049dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	011a      	lsls	r2, r3, #4
 80049e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049ea:	4413      	add	r3, r2
 80049ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a1e:	801a      	strh	r2, [r3, #0]
 8004a20:	e017      	b.n	8004a52 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d113      	bne.n	8004a52 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a38:	4413      	add	r3, r2
 8004a3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	011a      	lsls	r2, r3, #4
 8004a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a44:	4413      	add	r3, r2
 8004a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a4e:	2200      	movs	r2, #0
 8004a50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	4619      	mov	r1, r3
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f005 fb48 	bl	800a0ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f040 8104 	bne.w	8004c72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]
 8004aae:	e0e0      	b.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d121      	bne.n	8004afe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	f040 80b4 	bne.w	8004c72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b12:	441a      	add	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b20:	441a      	add	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6a1a      	ldr	r2, [r3, #32]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d309      	bcc.n	8004b46 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	621a      	str	r2, [r3, #32]
 8004b44:	e015      	b.n	8004b72 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004b4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b5c:	e009      	b.n	8004b72 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	667b      	str	r3, [r7, #100]	; 0x64
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d155      	bne.n	8004c2c <HAL_PCD_EP_DB_Transmit+0x704>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b94:	4413      	add	r3, r2
 8004b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	011a      	lsls	r2, r3, #4
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d112      	bne.n	8004bd4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	e044      	b.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x736>
 8004bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bd8:	d811      	bhi.n	8004bfe <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	657b      	str	r3, [r7, #84]	; 0x54
 8004be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bec:	3301      	adds	r3, #1
 8004bee:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bfa:	801a      	strh	r2, [r3, #0]
 8004bfc:	e02f      	b.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x736>
 8004bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	657b      	str	r3, [r7, #84]	; 0x54
 8004c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c10:	3b01      	subs	r3, #1
 8004c12:	657b      	str	r3, [r7, #84]	; 0x54
 8004c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	029b      	lsls	r3, r3, #10
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	e018      	b.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x736>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d114      	bne.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x736>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c42:	4413      	add	r3, r2
 8004c44:	667b      	str	r3, [r7, #100]	; 0x64
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	011a      	lsls	r2, r3, #4
 8004c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c4e:	4413      	add	r3, r2
 8004c50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c54:	663b      	str	r3, [r7, #96]	; 0x60
 8004c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6959      	ldr	r1, [r3, #20]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	895a      	ldrh	r2, [r3, #10]
 8004c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f003 fc2f 	bl	80084d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8c:	823b      	strh	r3, [r7, #16]
 8004c8e:	8a3b      	ldrh	r3, [r7, #16]
 8004c90:	f083 0310 	eor.w	r3, r3, #16
 8004c94:	823b      	strh	r3, [r7, #16]
 8004c96:	8a3b      	ldrh	r3, [r7, #16]
 8004c98:	f083 0320 	eor.w	r3, r3, #32
 8004c9c:	823b      	strh	r3, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	8a3b      	ldrh	r3, [r7, #16]
 8004cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3788      	adds	r7, #136	; 0x88
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00b      	beq.n	8004d02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e009      	b.n	8004d16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d02:	897a      	ldrh	r2, [r7, #10]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d107      	bne.n	8004d2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	80da      	strh	r2, [r3, #6]
 8004d2a:	e00b      	b.n	8004d44 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0c1b      	lsrs	r3, r3, #16
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e272      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8087 	beq.w	8004e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d70:	4b92      	ldr	r3, [pc, #584]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d00c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d7c:	4b8f      	ldr	r3, [pc, #572]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 030c 	and.w	r3, r3, #12
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d112      	bne.n	8004dae <HAL_RCC_OscConfig+0x5e>
 8004d88:	4b8c      	ldr	r3, [pc, #560]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d94:	d10b      	bne.n	8004dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d96:	4b89      	ldr	r3, [pc, #548]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d06c      	beq.n	8004e7c <HAL_RCC_OscConfig+0x12c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d168      	bne.n	8004e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e24c      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x76>
 8004db8:	4b80      	ldr	r3, [pc, #512]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a7f      	ldr	r2, [pc, #508]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e02e      	b.n	8004e24 <HAL_RCC_OscConfig+0xd4>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x98>
 8004dce:	4b7b      	ldr	r3, [pc, #492]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a7a      	ldr	r2, [pc, #488]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	4b78      	ldr	r3, [pc, #480]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a77      	ldr	r2, [pc, #476]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e01d      	b.n	8004e24 <HAL_RCC_OscConfig+0xd4>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0xbc>
 8004df2:	4b72      	ldr	r3, [pc, #456]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a71      	ldr	r2, [pc, #452]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	4b6f      	ldr	r3, [pc, #444]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a6e      	ldr	r2, [pc, #440]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0xd4>
 8004e0c:	4b6b      	ldr	r3, [pc, #428]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6a      	ldr	r2, [pc, #424]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b68      	ldr	r3, [pc, #416]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a67      	ldr	r2, [pc, #412]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fd f826 	bl	8001e7c <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fd f822 	bl	8001e7c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e200      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e46:	4b5d      	ldr	r3, [pc, #372]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0xe4>
 8004e52:	e014      	b.n	8004e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd f812 	bl	8001e7c <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fd f80e 	bl	8001e7c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1ec      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6e:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x10c>
 8004e7a:	e000      	b.n	8004e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d063      	beq.n	8004f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e8a:	4b4c      	ldr	r3, [pc, #304]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e96:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d11c      	bne.n	8004edc <HAL_RCC_OscConfig+0x18c>
 8004ea2:	4b46      	ldr	r3, [pc, #280]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d116      	bne.n	8004edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eae:	4b43      	ldr	r3, [pc, #268]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x176>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d001      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e1c0      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec6:	4b3d      	ldr	r3, [pc, #244]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4939      	ldr	r1, [pc, #228]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eda:	e03a      	b.n	8004f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d020      	beq.n	8004f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee4:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eea:	f7fc ffc7 	bl	8001e7c <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef2:	f7fc ffc3 	bl	8001e7c <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e1a1      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f10:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4927      	ldr	r1, [pc, #156]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	600b      	str	r3, [r1, #0]
 8004f24:	e015      	b.n	8004f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f26:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <HAL_RCC_OscConfig+0x270>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fc ffa6 	bl	8001e7c <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f34:	f7fc ffa2 	bl	8001e7c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e180      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d03a      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d019      	beq.n	8004f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_RCC_OscConfig+0x274>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6c:	f7fc ff86 	bl	8001e7c <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f74:	f7fc ff82 	bl	8001e7c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e160      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f92:	2001      	movs	r0, #1
 8004f94:	f000 fad8 	bl	8005548 <RCC_Delay>
 8004f98:	e01c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa0:	f7fc ff6c 	bl	8001e7c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa6:	e00f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7fc ff68 	bl	8001e7c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d908      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e146      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	42420000 	.word	0x42420000
 8004fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc8:	4b92      	ldr	r3, [pc, #584]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e9      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80a6 	beq.w	800512e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe6:	4b8b      	ldr	r3, [pc, #556]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10d      	bne.n	800500e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	4b88      	ldr	r3, [pc, #544]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4a87      	ldr	r2, [pc, #540]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	61d3      	str	r3, [r2, #28]
 8004ffe:	4b85      	ldr	r3, [pc, #532]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500e:	4b82      	ldr	r3, [pc, #520]	; (8005218 <HAL_RCC_OscConfig+0x4c8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d118      	bne.n	800504c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800501a:	4b7f      	ldr	r3, [pc, #508]	; (8005218 <HAL_RCC_OscConfig+0x4c8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a7e      	ldr	r2, [pc, #504]	; (8005218 <HAL_RCC_OscConfig+0x4c8>)
 8005020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005026:	f7fc ff29 	bl	8001e7c <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502e:	f7fc ff25 	bl	8001e7c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b64      	cmp	r3, #100	; 0x64
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e103      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005040:	4b75      	ldr	r3, [pc, #468]	; (8005218 <HAL_RCC_OscConfig+0x4c8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d106      	bne.n	8005062 <HAL_RCC_OscConfig+0x312>
 8005054:	4b6f      	ldr	r3, [pc, #444]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	4a6e      	ldr	r2, [pc, #440]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6213      	str	r3, [r2, #32]
 8005060:	e02d      	b.n	80050be <HAL_RCC_OscConfig+0x36e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10c      	bne.n	8005084 <HAL_RCC_OscConfig+0x334>
 800506a:	4b6a      	ldr	r3, [pc, #424]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a69      	ldr	r2, [pc, #420]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	6213      	str	r3, [r2, #32]
 8005076:	4b67      	ldr	r3, [pc, #412]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	4a66      	ldr	r2, [pc, #408]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800507c:	f023 0304 	bic.w	r3, r3, #4
 8005080:	6213      	str	r3, [r2, #32]
 8005082:	e01c      	b.n	80050be <HAL_RCC_OscConfig+0x36e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b05      	cmp	r3, #5
 800508a:	d10c      	bne.n	80050a6 <HAL_RCC_OscConfig+0x356>
 800508c:	4b61      	ldr	r3, [pc, #388]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a60      	ldr	r2, [pc, #384]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005092:	f043 0304 	orr.w	r3, r3, #4
 8005096:	6213      	str	r3, [r2, #32]
 8005098:	4b5e      	ldr	r3, [pc, #376]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	4a5d      	ldr	r2, [pc, #372]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	6213      	str	r3, [r2, #32]
 80050a4:	e00b      	b.n	80050be <HAL_RCC_OscConfig+0x36e>
 80050a6:	4b5b      	ldr	r3, [pc, #364]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	4a5a      	ldr	r2, [pc, #360]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	6213      	str	r3, [r2, #32]
 80050b2:	4b58      	ldr	r3, [pc, #352]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	4a57      	ldr	r2, [pc, #348]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	f023 0304 	bic.w	r3, r3, #4
 80050bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d015      	beq.n	80050f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c6:	f7fc fed9 	bl	8001e7c <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050cc:	e00a      	b.n	80050e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ce:	f7fc fed5 	bl	8001e7c <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050dc:	4293      	cmp	r3, r2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0b1      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e4:	4b4b      	ldr	r3, [pc, #300]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0ee      	beq.n	80050ce <HAL_RCC_OscConfig+0x37e>
 80050f0:	e014      	b.n	800511c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f2:	f7fc fec3 	bl	8001e7c <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f8:	e00a      	b.n	8005110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fa:	f7fc febf 	bl	8001e7c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f241 3288 	movw	r2, #5000	; 0x1388
 8005108:	4293      	cmp	r3, r2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e09b      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005110:	4b40      	ldr	r3, [pc, #256]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ee      	bne.n	80050fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800511c:	7dfb      	ldrb	r3, [r7, #23]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005122:	4b3c      	ldr	r3, [pc, #240]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8087 	beq.w	8005246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005138:	4b36      	ldr	r3, [pc, #216]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 030c 	and.w	r3, r3, #12
 8005140:	2b08      	cmp	r3, #8
 8005142:	d061      	beq.n	8005208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d146      	bne.n	80051da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514c:	4b33      	ldr	r3, [pc, #204]	; (800521c <HAL_RCC_OscConfig+0x4cc>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fc fe93 	bl	8001e7c <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fc fe8f 	bl	8001e7c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e06d      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d108      	bne.n	8005194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4921      	ldr	r1, [pc, #132]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005190:	4313      	orrs	r3, r2
 8005192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005194:	4b1f      	ldr	r3, [pc, #124]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a19      	ldr	r1, [r3, #32]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	430b      	orrs	r3, r1
 80051a6:	491b      	ldr	r1, [pc, #108]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_RCC_OscConfig+0x4cc>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b2:	f7fc fe63 	bl	8001e7c <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ba:	f7fc fe5f 	bl	8001e7c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e03d      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051cc:	4b11      	ldr	r3, [pc, #68]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <HAL_RCC_OscConfig+0x46a>
 80051d8:	e035      	b.n	8005246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b10      	ldr	r3, [pc, #64]	; (800521c <HAL_RCC_OscConfig+0x4cc>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e0:	f7fc fe4c 	bl	8001e7c <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fc fe48 	bl	8001e7c <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e026      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x498>
 8005206:	e01e      	b.n	8005246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e019      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
 8005214:	40021000 	.word	0x40021000
 8005218:	40007000 	.word	0x40007000
 800521c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_OscConfig+0x500>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	429a      	cmp	r2, r3
 8005232:	d106      	bne.n	8005242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d001      	beq.n	8005246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000

08005254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0d0      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005268:	4b6a      	ldr	r3, [pc, #424]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d910      	bls.n	8005298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005276:	4b67      	ldr	r3, [pc, #412]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 0207 	bic.w	r2, r3, #7
 800527e:	4965      	ldr	r1, [pc, #404]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	4313      	orrs	r3, r2
 8005284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005286:	4b63      	ldr	r3, [pc, #396]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d001      	beq.n	8005298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0b8      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b0:	4b59      	ldr	r3, [pc, #356]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a58      	ldr	r2, [pc, #352]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c8:	4b53      	ldr	r3, [pc, #332]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a52      	ldr	r2, [pc, #328]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d4:	4b50      	ldr	r3, [pc, #320]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	494d      	ldr	r1, [pc, #308]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d040      	beq.n	8005374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fa:	4b47      	ldr	r3, [pc, #284]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d115      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07f      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d107      	bne.n	8005322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005312:	4b41      	ldr	r3, [pc, #260]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e073      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005322:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e06b      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f023 0203 	bic.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4936      	ldr	r1, [pc, #216]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005340:	4313      	orrs	r3, r2
 8005342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005344:	f7fc fd9a 	bl	8001e7c <HAL_GetTick>
 8005348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	e00a      	b.n	8005362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534c:	f7fc fd96 	bl	8001e7c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e053      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	4b2d      	ldr	r3, [pc, #180]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f003 020c 	and.w	r2, r3, #12
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	429a      	cmp	r2, r3
 8005372:	d1eb      	bne.n	800534c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005374:	4b27      	ldr	r3, [pc, #156]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d210      	bcs.n	80053a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 0207 	bic.w	r2, r3, #7
 800538a:	4922      	ldr	r1, [pc, #136]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b20      	ldr	r3, [pc, #128]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e032      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4916      	ldr	r1, [pc, #88]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	490e      	ldr	r1, [pc, #56]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053e2:	f000 f821 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 80053e6:	4602      	mov	r2, r0
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	490a      	ldr	r1, [pc, #40]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80053f4:	5ccb      	ldrb	r3, [r1, r3]
 80053f6:	fa22 f303 	lsr.w	r3, r2, r3
 80053fa:	4a09      	ldr	r2, [pc, #36]	; (8005420 <HAL_RCC_ClockConfig+0x1cc>)
 80053fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <HAL_RCC_ClockConfig+0x1d0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7fc fcf8 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40022000 	.word	0x40022000
 8005418:	40021000 	.word	0x40021000
 800541c:	0800bbd8 	.word	0x0800bbd8
 8005420:	20000030 	.word	0x20000030
 8005424:	20000034 	.word	0x20000034

08005428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005428:	b490      	push	{r4, r7}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800542e:	4b29      	ldr	r3, [pc, #164]	; (80054d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005430:	1d3c      	adds	r4, r7, #4
 8005432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005438:	f240 2301 	movw	r3, #513	; 0x201
 800543c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005452:	4b21      	ldr	r3, [pc, #132]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b04      	cmp	r3, #4
 8005460:	d002      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x40>
 8005462:	2b08      	cmp	r3, #8
 8005464:	d003      	beq.n	800546e <HAL_RCC_GetSysClockFreq+0x46>
 8005466:	e02b      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005468:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800546a:	623b      	str	r3, [r7, #32]
      break;
 800546c:	e02b      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	0c9b      	lsrs	r3, r3, #18
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	3328      	adds	r3, #40	; 0x28
 8005478:	443b      	add	r3, r7
 800547a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800547e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d012      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800548a:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	0c5b      	lsrs	r3, r3, #17
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	3328      	adds	r3, #40	; 0x28
 8005496:	443b      	add	r3, r7
 8005498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800549c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80054a2:	fb03 f202 	mul.w	r2, r3, r2
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
 80054ae:	e004      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	623b      	str	r3, [r7, #32]
      break;
 80054be:	e002      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80054c2:	623b      	str	r3, [r7, #32]
      break;
 80054c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c6:	6a3b      	ldr	r3, [r7, #32]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3728      	adds	r7, #40	; 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc90      	pop	{r4, r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	0800bb84 	.word	0x0800bb84
 80054d8:	40021000 	.word	0x40021000
 80054dc:	007a1200 	.word	0x007a1200
 80054e0:	003d0900 	.word	0x003d0900

080054e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e8:	4b02      	ldr	r3, [pc, #8]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr
 80054f4:	20000030 	.word	0x20000030

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054fc:	f7ff fff2 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4903      	ldr	r1, [pc, #12]	; (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40021000 	.word	0x40021000
 800551c:	0800bbe8 	.word	0x0800bbe8

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005524:	f7ff ffde 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	0adb      	lsrs	r3, r3, #11
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4903      	ldr	r1, [pc, #12]	; (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40021000 	.word	0x40021000
 8005544:	0800bbe8 	.word	0x0800bbe8

08005548 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <RCC_Delay+0x34>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <RCC_Delay+0x38>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0a5b      	lsrs	r3, r3, #9
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005564:	bf00      	nop
  }
  while (Delay --);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1e5a      	subs	r2, r3, #1
 800556a:	60fa      	str	r2, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f9      	bne.n	8005564 <RCC_Delay+0x1c>
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	20000030 	.word	0x20000030
 8005580:	10624dd3 	.word	0x10624dd3

08005584 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d07d      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055a0:	2300      	movs	r3, #0
 80055a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a4:	4b4f      	ldr	r3, [pc, #316]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10d      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b0:	4b4c      	ldr	r3, [pc, #304]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	4a4b      	ldr	r2, [pc, #300]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ba:	61d3      	str	r3, [r2, #28]
 80055bc:	4b49      	ldr	r3, [pc, #292]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c8:	2301      	movs	r3, #1
 80055ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055cc:	4b46      	ldr	r3, [pc, #280]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d118      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d8:	4b43      	ldr	r3, [pc, #268]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a42      	ldr	r2, [pc, #264]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e4:	f7fc fc4a 	bl	8001e7c <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	e008      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fc fc46 	bl	8001e7c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e06d      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fe:	4b3a      	ldr	r3, [pc, #232]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800560a:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005612:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d02e      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	429a      	cmp	r2, r3
 8005626:	d027      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005628:	4b2e      	ldr	r3, [pc, #184]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005630:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005632:	4b2e      	ldr	r3, [pc, #184]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005638:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800563e:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d014      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fc fc15 	bl	8001e7c <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fc fc11 	bl	8001e7c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e036      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566c:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ee      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005678:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4917      	ldr	r1, [pc, #92]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005686:	4313      	orrs	r3, r2
 8005688:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800568a:	7dfb      	ldrb	r3, [r7, #23]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005690:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800569a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a8:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	490b      	ldr	r1, [pc, #44]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4904      	ldr	r1, [pc, #16]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40007000 	.word	0x40007000
 80056ec:	42420440 	.word	0x42420440

080056f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e03f      	b.n	8005782 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc f9e4 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	; 0x24
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f905 	bl	8005944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b08a      	sub	sp, #40	; 0x28
 800578e:	af02      	add	r7, sp, #8
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d17c      	bne.n	80058a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_UART_Transmit+0x2c>
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e075      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Transmit+0x3e>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e06e      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2221      	movs	r2, #33	; 0x21
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057de:	f7fc fb4d 	bl	8001e7c <HAL_GetTick>
 80057e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	88fa      	ldrh	r2, [r7, #6]
 80057ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	d108      	bne.n	800580c <HAL_UART_Transmit+0x82>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e003      	b.n	8005814 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800581c:	e02a      	b.n	8005874 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2200      	movs	r2, #0
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f840 	bl	80058ae <UART_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e036      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800584c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	3302      	adds	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e007      	b.n	8005866 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3301      	adds	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1cf      	bne.n	800581e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	2140      	movs	r1, #64	; 0x40
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f810 	bl	80058ae <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e006      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	4613      	mov	r3, r2
 80058bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058be:	e02c      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d028      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <UART_WaitOnFlagUntilTimeout+0x30>
 80058ce:	f7fc fad5 	bl	8001e7c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d21d      	bcs.n	800591a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e00f      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	429a      	cmp	r2, r3
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d0c3      	beq.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800597e:	f023 030c 	bic.w	r3, r3, #12
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	430b      	orrs	r3, r1
 800598a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <UART_SetConfig+0x114>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059ac:	f7ff fdb8 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	e002      	b.n	80059ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059b4:	f7ff fda0 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 80059b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009a      	lsls	r2, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <UART_SetConfig+0x118>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	0119      	lsls	r1, r3, #4
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <UART_SetConfig+0x118>)
 80059f2:	fba3 0302 	umull	r0, r3, r3, r2
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	2064      	movs	r0, #100	; 0x64
 80059fa:	fb00 f303 	mul.w	r3, r0, r3
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	3332      	adds	r3, #50	; 0x32
 8005a04:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <UART_SetConfig+0x118>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a10:	4419      	add	r1, r3
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009a      	lsls	r2, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <UART_SetConfig+0x118>)
 8005a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2064      	movs	r0, #100	; 0x64
 8005a32:	fb00 f303 	mul.w	r3, r0, r3
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	3332      	adds	r3, #50	; 0x32
 8005a3c:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <UART_SetConfig+0x118>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40013800 	.word	0x40013800
 8005a5c:	51eb851f 	.word	0x51eb851f

08005a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a60:	b084      	sub	sp, #16
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	f107 0014 	add.w	r0, r7, #20
 8005a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	b004      	add	sp, #16
 8005a7e:	4770      	bx	lr

08005a80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ab4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005ab8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	4013      	ands	r3, r2
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005af8:	b084      	sub	sp, #16
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	f107 0014 	add.w	r0, r7, #20
 8005b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	b004      	add	sp, #16
 8005b36:	4770      	bx	lr

08005b38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b09b      	sub	sp, #108	; 0x6c
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	78db      	ldrb	r3, [r3, #3]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d81f      	bhi.n	8005baa <USB_ActivateEndpoint+0x72>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <USB_ActivateEndpoint+0x38>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005bb3 	.word	0x08005bb3
 8005b7c:	08005b8f 	.word	0x08005b8f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b88:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b8c:	e012      	b.n	8005bb4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b92:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b9a:	e00b      	b.n	8005bb4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ba4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ba8:	e004      	b.n	8005bb4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005bb0:	e000      	b.n	8005bb4 <USB_ActivateEndpoint+0x7c>
      break;
 8005bb2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	7b1b      	ldrb	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 8149 	bne.w	8005eb8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 8084 	beq.w	8005d38 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	011a      	lsls	r2, r3, #4
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	88db      	ldrh	r3, [r3, #6]
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	81fb      	strh	r3, [r7, #14]
 8005c72:	89fb      	ldrh	r3, [r7, #14]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <USB_ActivateEndpoint+0x17c>
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	81bb      	strh	r3, [r7, #12]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	441a      	add	r2, r3
 8005c9e:	89bb      	ldrh	r3, [r7, #12]
 8005ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d020      	beq.n	8005cfe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd2:	813b      	strh	r3, [r7, #8]
 8005cd4:	893b      	ldrh	r3, [r7, #8]
 8005cd6:	f083 0320 	eor.w	r3, r3, #32
 8005cda:	813b      	strh	r3, [r7, #8]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	441a      	add	r2, r3
 8005ce6:	893b      	ldrh	r3, [r7, #8]
 8005ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	8013      	strh	r3, [r2, #0]
 8005cfc:	e27f      	b.n	80061fe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d14:	817b      	strh	r3, [r7, #10]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	897b      	ldrh	r3, [r7, #10]
 8005d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	8013      	strh	r3, [r2, #0]
 8005d36:	e262      	b.n	80061fe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	4413      	add	r3, r2
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	011a      	lsls	r2, r3, #4
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	88db      	ldrh	r3, [r3, #6]
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	4413      	add	r3, r2
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	011a      	lsls	r2, r3, #4
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	4413      	add	r3, r2
 8005d8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d8e:	623b      	str	r3, [r7, #32]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d112      	bne.n	8005dbe <USB_ActivateEndpoint+0x286>
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e02f      	b.n	8005e1e <USB_ActivateEndpoint+0x2e6>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b3e      	cmp	r3, #62	; 0x3e
 8005dc4:	d813      	bhi.n	8005dee <USB_ActivateEndpoint+0x2b6>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <USB_ActivateEndpoint+0x2a8>
 8005dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ddc:	3301      	adds	r3, #1
 8005dde:	663b      	str	r3, [r7, #96]	; 0x60
 8005de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	029b      	lsls	r3, r3, #10
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e017      	b.n	8005e1e <USB_ActivateEndpoint+0x2e6>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	663b      	str	r3, [r7, #96]	; 0x60
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <USB_ActivateEndpoint+0x2d0>
 8005e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e04:	3b01      	subs	r3, #1
 8005e06:	663b      	str	r3, [r7, #96]	; 0x60
 8005e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	83fb      	strh	r3, [r7, #30]
 8005e2c:	8bfb      	ldrh	r3, [r7, #30]
 8005e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01b      	beq.n	8005e6e <USB_ActivateEndpoint+0x336>
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4c:	83bb      	strh	r3, [r7, #28]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	8bbb      	ldrh	r3, [r7, #28]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	837b      	strh	r3, [r7, #26]
 8005e86:	8b7b      	ldrh	r3, [r7, #26]
 8005e88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e8c:	837b      	strh	r3, [r7, #26]
 8005e8e:	8b7b      	ldrh	r3, [r7, #26]
 8005e90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e94:	837b      	strh	r3, [r7, #26]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	8b7b      	ldrh	r3, [r7, #26]
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
 8005eb6:	e1a2      	b.n	80061fe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	441a      	add	r2, r3
 8005edc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f04:	4413      	add	r3, r2
 8005f06:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	011a      	lsls	r2, r3, #4
 8005f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f16:	657b      	str	r3, [r7, #84]	; 0x54
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	891b      	ldrh	r3, [r3, #8]
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f38:	4413      	add	r3, r2
 8005f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	011a      	lsls	r2, r3, #4
 8005f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	895b      	ldrh	r3, [r3, #10]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f040 8091 	bne.w	8006088 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01b      	beq.n	8005fb6 <USB_ActivateEndpoint+0x47e>
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f94:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005faa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fc4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01b      	beq.n	8006006 <USB_ActivateEndpoint+0x4ce>
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ffe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800601e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006020:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006024:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006026:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006028:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800602c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	441a      	add	r2, r3
 8006038:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800603a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604a:	b29b      	uxth	r3, r3
 800604c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006064:	867b      	strh	r3, [r7, #50]	; 0x32
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	441a      	add	r2, r3
 8006070:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]
 8006086:	e0ba      	b.n	80061fe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006098:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800609c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01d      	beq.n	80060e0 <USB_ActivateEndpoint+0x5a8>
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	441a      	add	r2, r3
 80060c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060dc:	b29b      	uxth	r3, r3
 80060de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01d      	beq.n	8006138 <USB_ActivateEndpoint+0x600>
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006130:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d024      	beq.n	800618a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006156:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800615a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800615e:	f083 0320 	eor.w	r3, r3, #32
 8006162:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	441a      	add	r2, r3
 8006170:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006184:	b29b      	uxth	r3, r3
 8006186:	8013      	strh	r3, [r2, #0]
 8006188:	e01d      	b.n	80061c6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	441a      	add	r2, r3
 80061ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	441a      	add	r2, r3
 80061e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80061fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006202:	4618      	mov	r0, r3
 8006204:	376c      	adds	r7, #108	; 0x6c
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800620c:	b480      	push	{r7}
 800620e:	b08d      	sub	sp, #52	; 0x34
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	7b1b      	ldrb	r3, [r3, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f040 808e 	bne.w	800633c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d044      	beq.n	80062b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	81bb      	strh	r3, [r7, #12]
 8006236:	89bb      	ldrh	r3, [r7, #12]
 8006238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01b      	beq.n	8006278 <USB_DeactivateEndpoint+0x6c>
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	817b      	strh	r3, [r7, #10]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	897b      	ldrh	r3, [r7, #10]
 8006264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628e:	813b      	strh	r3, [r7, #8]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	893b      	ldrh	r3, [r7, #8]
 800629c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8013      	strh	r3, [r2, #0]
 80062b0:	e192      	b.n	80065d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	827b      	strh	r3, [r7, #18]
 80062c0:	8a7b      	ldrh	r3, [r7, #18]
 80062c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01b      	beq.n	8006302 <USB_DeactivateEndpoint+0xf6>
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e0:	823b      	strh	r3, [r7, #16]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	8a3b      	ldrh	r3, [r7, #16]
 80062ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fe:	b29b      	uxth	r3, r3
 8006300:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	81fb      	strh	r3, [r7, #14]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	441a      	add	r2, r3
 8006324:	89fb      	ldrh	r3, [r7, #14]
 8006326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006336:	b29b      	uxth	r3, r3
 8006338:	8013      	strh	r3, [r2, #0]
 800633a:	e14d      	b.n	80065d8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f040 80a5 	bne.w	8006490 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	843b      	strh	r3, [r7, #32]
 8006354:	8c3b      	ldrh	r3, [r7, #32]
 8006356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01b      	beq.n	8006396 <USB_DeactivateEndpoint+0x18a>
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006374:	83fb      	strh	r3, [r7, #30]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	441a      	add	r2, r3
 8006380:	8bfb      	ldrh	r3, [r7, #30]
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800638e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	83bb      	strh	r3, [r7, #28]
 80063a4:	8bbb      	ldrh	r3, [r7, #28]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01b      	beq.n	80063e6 <USB_DeactivateEndpoint+0x1da>
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c4:	837b      	strh	r3, [r7, #26]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	441a      	add	r2, r3
 80063d0:	8b7b      	ldrh	r3, [r7, #26]
 80063d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fc:	833b      	strh	r3, [r7, #24]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	8b3b      	ldrh	r3, [r7, #24]
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006434:	82fb      	strh	r3, [r7, #22]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	8afb      	ldrh	r3, [r7, #22]
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646c:	82bb      	strh	r3, [r7, #20]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	8abb      	ldrh	r3, [r7, #20]
 800647a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648a:	b29b      	uxth	r3, r3
 800648c:	8013      	strh	r3, [r2, #0]
 800648e:	e0a3      	b.n	80065d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800649e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01b      	beq.n	80064e0 <USB_DeactivateEndpoint+0x2d4>
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	441a      	add	r2, r3
 80064ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80064cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064dc:	b29b      	uxth	r3, r3
 80064de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80064ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01b      	beq.n	8006530 <USB_DeactivateEndpoint+0x324>
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	441a      	add	r2, r3
 800651a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800651c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800652c:	b29b      	uxth	r3, r3
 800652e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006564:	b29b      	uxth	r3, r3
 8006566:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3734      	adds	r7, #52	; 0x34
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b0cc      	sub	sp, #304	; 0x130
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f2:	6018      	str	r0, [r3, #0]
 80065f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	2b01      	cmp	r3, #1
 800660c:	f041 817d 	bne.w	800790a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	429a      	cmp	r2, r3
 800662a:	d908      	bls.n	800663e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800662c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800663c:	e007      	b.n	800664e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	7b1b      	ldrb	r3, [r3, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d152      	bne.n	8006704 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6959      	ldr	r1, [r3, #20]
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	88da      	ldrh	r2, [r3, #6]
 8006676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667a:	b29b      	uxth	r3, r3
 800667c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006680:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006684:	6800      	ldr	r0, [r0, #0]
 8006686:	f001 ff23 	bl	80084d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006692:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006696:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4619      	mov	r1, r3
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80066b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066bc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80066c0:	6812      	ldr	r2, [r2, #0]
 80066c2:	440a      	add	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	011a      	lsls	r2, r3, #4
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4413      	add	r3, r2
 80066e0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80066e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	f001 b8b5 	b.w	800786e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	78db      	ldrb	r3, [r3, #3]
 8006710:	2b02      	cmp	r3, #2
 8006712:	f040 84c6 	bne.w	80070a2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6a1a      	ldr	r2, [r3, #32]
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	429a      	cmp	r2, r3
 8006730:	f240 8443 	bls.w	8006fba <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800675e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006784:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6a1a      	ldr	r2, [r3, #32]
 800679c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a0:	1ad2      	subs	r2, r2, r3
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 823e 	beq.w	8006c52 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067e2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f040 809a 	bne.w	8006930 <USB_EPStartXfer+0x34c>
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006804:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006808:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681e:	b29b      	uxth	r3, r3
 8006820:	4619      	mov	r1, r3
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800682e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	440a      	add	r2, r1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	011a      	lsls	r2, r3, #4
 8006846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4413      	add	r3, r2
 8006852:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d122      	bne.n	80068ae <USB_EPStartXfer+0x2ca>
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800687a:	b29a      	uxth	r2, r3
 800687c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006880:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689e:	b29a      	uxth	r2, r3
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	e079      	b.n	80069a2 <USB_EPStartXfer+0x3be>
 80068ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b2:	2b3e      	cmp	r3, #62	; 0x3e
 80068b4:	d81b      	bhi.n	80068ee <USB_EPStartXfer+0x30a>
 80068b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <USB_EPStartXfer+0x2f2>
 80068cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068d0:	3301      	adds	r3, #1
 80068d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068da:	b29b      	uxth	r3, r3
 80068dc:	029b      	lsls	r3, r3, #10
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	e059      	b.n	80069a2 <USB_EPStartXfer+0x3be>
 80068ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <USB_EPStartXfer+0x32a>
 8006904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006908:	3b01      	subs	r3, #1
 800690a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800690e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006912:	b29b      	uxth	r3, r3
 8006914:	029b      	lsls	r3, r3, #10
 8006916:	b29b      	uxth	r3, r3
 8006918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006920:	b29a      	uxth	r2, r3
 8006922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006926:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	e038      	b.n	80069a2 <USB_EPStartXfer+0x3be>
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d130      	bne.n	80069a2 <USB_EPStartXfer+0x3be>
 8006940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694e:	b29b      	uxth	r3, r3
 8006950:	4619      	mov	r1, r3
 8006952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006956:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800695a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800695e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	440a      	add	r2, r1
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	011a      	lsls	r2, r3, #4
 8006976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4413      	add	r3, r2
 8006982:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006994:	b29a      	uxth	r2, r3
 8006996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	895b      	ldrh	r3, [r3, #10]
 80069ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6959      	ldr	r1, [r3, #20]
 80069be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069d0:	6800      	ldr	r0, [r0, #0]
 80069d2:	f001 fd7d 	bl	80084d0 <USB_WritePMA>
            ep->xfer_buff += len;
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e6:	441a      	add	r2, r3
 80069e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d90f      	bls.n	8006a30 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a1a      	ldr	r2, [r3, #32]
 8006a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a20:	1ad2      	subs	r2, r2, r3
 8006a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	621a      	str	r2, [r3, #32]
 8006a2e:	e00e      	b.n	8006a4e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f040 809a 	bne.w	8006b94 <USB_EPStartXfer+0x5b0>
 8006a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a6c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	4619      	mov	r1, r3
 8006a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a92:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	440a      	add	r2, r1
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	011a      	lsls	r2, r3, #4
 8006aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d122      	bne.n	8006b12 <USB_EPStartXfer+0x52e>
 8006acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e083      	b.n	8006c1a <USB_EPStartXfer+0x636>
 8006b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b16:	2b3e      	cmp	r3, #62	; 0x3e
 8006b18:	d81b      	bhi.n	8006b52 <USB_EPStartXfer+0x56e>
 8006b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <USB_EPStartXfer+0x556>
 8006b30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b34:	3301      	adds	r3, #1
 8006b36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	029b      	lsls	r3, r3, #10
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	801a      	strh	r2, [r3, #0]
 8006b50:	e063      	b.n	8006c1a <USB_EPStartXfer+0x636>
 8006b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b60:	f003 031f 	and.w	r3, r3, #31
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <USB_EPStartXfer+0x58e>
 8006b68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	029b      	lsls	r3, r3, #10
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	e042      	b.n	8006c1a <USB_EPStartXfer+0x636>
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d13a      	bne.n	8006c1a <USB_EPStartXfer+0x636>
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006bac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bb0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4619      	mov	r1, r3
 8006bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006bd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bd6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	440a      	add	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	011a      	lsls	r2, r3, #4
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	891b      	ldrh	r3, [r3, #8]
 8006c26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6959      	ldr	r1, [r3, #20]
 8006c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c40:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c44:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c48:	6800      	ldr	r0, [r0, #0]
 8006c4a:	f001 fc41 	bl	80084d0 <USB_WritePMA>
 8006c4e:	f000 be0e 	b.w	800786e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d16d      	bne.n	8006d3e <USB_EPStartXfer+0x75a>
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c82:	4413      	add	r3, r2
 8006c84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	011a      	lsls	r2, r3, #4
 8006c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c96:	4413      	add	r3, r2
 8006c98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d112      	bne.n	8006ccc <USB_EPStartXfer+0x6e8>
 8006ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb4:	801a      	strh	r2, [r3, #0]
 8006cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	e063      	b.n	8006d94 <USB_EPStartXfer+0x7b0>
 8006ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd2:	d817      	bhi.n	8006d04 <USB_EPStartXfer+0x720>
 8006cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <USB_EPStartXfer+0x710>
 8006cea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cee:	3301      	adds	r3, #1
 8006cf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	029b      	lsls	r3, r3, #10
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e047      	b.n	8006d94 <USB_EPStartXfer+0x7b0>
 8006d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <USB_EPStartXfer+0x740>
 8006d1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	029b      	lsls	r3, r3, #10
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e02a      	b.n	8006d94 <USB_EPStartXfer+0x7b0>
 8006d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d122      	bne.n	8006d94 <USB_EPStartXfer+0x7b0>
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	653b      	str	r3, [r7, #80]	; 0x50
 8006d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d6e:	4413      	add	r3, r2
 8006d70:	653b      	str	r3, [r7, #80]	; 0x50
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	011a      	lsls	r2, r3, #4
 8006d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	891b      	ldrh	r3, [r3, #8]
 8006da0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6959      	ldr	r1, [r3, #20]
 8006db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006dbe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	f001 fb84 	bl	80084d0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd8:	441a      	add	r2, r3
 8006dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d90f      	bls.n	8006e22 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6a1a      	ldr	r2, [r3, #32]
 8006e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	621a      	str	r2, [r3, #32]
 8006e20:	e00e      	b.n	8006e40 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d16d      	bne.n	8006f38 <USB_EPStartXfer+0x954>
 8006e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	4413      	add	r3, r2
 8006e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	011a      	lsls	r2, r3, #4
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	4413      	add	r3, r2
 8006e92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
 8006e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d112      	bne.n	8006ec6 <USB_EPStartXfer+0x8e2>
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e05d      	b.n	8006f82 <USB_EPStartXfer+0x99e>
 8006ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eca:	2b3e      	cmp	r3, #62	; 0x3e
 8006ecc:	d817      	bhi.n	8006efe <USB_EPStartXfer+0x91a>
 8006ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <USB_EPStartXfer+0x90a>
 8006ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ee8:	3301      	adds	r3, #1
 8006eea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	029b      	lsls	r3, r3, #10
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e041      	b.n	8006f82 <USB_EPStartXfer+0x99e>
 8006efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <USB_EPStartXfer+0x93a>
 8006f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	029b      	lsls	r3, r3, #10
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	e024      	b.n	8006f82 <USB_EPStartXfer+0x99e>
 8006f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d11c      	bne.n	8006f82 <USB_EPStartXfer+0x99e>
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5c:	4413      	add	r3, r2
 8006f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	011a      	lsls	r2, r3, #4
 8006f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f70:	4413      	add	r3, r2
 8006f72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	895b      	ldrh	r3, [r3, #10]
 8006f8e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6959      	ldr	r1, [r3, #20]
 8006f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fa8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fb0:	6800      	ldr	r0, [r0, #0]
 8006fb2:	f001 fa8d 	bl	80084d0 <USB_WritePMA>
 8006fb6:	f000 bc5a 	b.w	800786e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	441a      	add	r2, r3
 800700e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007022:	b29b      	uxth	r3, r3
 8007024:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007040:	b29b      	uxth	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007046:	4413      	add	r3, r2
 8007048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800704a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	011a      	lsls	r2, r3, #4
 8007058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800705a:	4413      	add	r3, r2
 800705c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007060:	65bb      	str	r3, [r7, #88]	; 0x58
 8007062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007066:	b29a      	uxth	r2, r3
 8007068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800706a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800706c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	891b      	ldrh	r3, [r3, #8]
 8007078:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800707c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6959      	ldr	r1, [r3, #20]
 8007088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708c:	b29b      	uxth	r3, r3
 800708e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007092:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007096:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	f001 fa18 	bl	80084d0 <USB_WritePMA>
 80070a0:	e3e5      	b.n	800786e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80070cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800711c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 81bc 	beq.w	80074bc <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007148:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d16d      	bne.n	800723e <USB_EPStartXfer+0xc5a>
 8007162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007166:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	67bb      	str	r3, [r7, #120]	; 0x78
 800716e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007172:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007182:	4413      	add	r3, r2
 8007184:	67bb      	str	r3, [r7, #120]	; 0x78
 8007186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	011a      	lsls	r2, r3, #4
 8007194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007196:	4413      	add	r3, r2
 8007198:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800719c:	677b      	str	r3, [r7, #116]	; 0x74
 800719e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d112      	bne.n	80071cc <USB_EPStartXfer+0xbe8>
 80071a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e060      	b.n	800728e <USB_EPStartXfer+0xcaa>
 80071cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d0:	2b3e      	cmp	r3, #62	; 0x3e
 80071d2:	d817      	bhi.n	8007204 <USB_EPStartXfer+0xc20>
 80071d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d8:	085b      	lsrs	r3, r3, #1
 80071da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d004      	beq.n	80071f4 <USB_EPStartXfer+0xc10>
 80071ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071ee:	3301      	adds	r3, #1
 80071f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	029b      	lsls	r3, r3, #10
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	e044      	b.n	800728e <USB_EPStartXfer+0xcaa>
 8007204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800720e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <USB_EPStartXfer+0xc40>
 800721a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800721e:	3b01      	subs	r3, #1
 8007220:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007224:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007228:	b29b      	uxth	r3, r3
 800722a:	029b      	lsls	r3, r3, #10
 800722c:	b29b      	uxth	r3, r3
 800722e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007236:	b29a      	uxth	r2, r3
 8007238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e027      	b.n	800728e <USB_EPStartXfer+0xcaa>
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d11f      	bne.n	800728e <USB_EPStartXfer+0xcaa>
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725c:	b29b      	uxth	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007264:	4413      	add	r3, r2
 8007266:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800726a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	011a      	lsls	r2, r3, #4
 8007278:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800727c:	4413      	add	r3, r2
 800727e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007282:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007288:	b29a      	uxth	r2, r3
 800728a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800728c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	895b      	ldrh	r3, [r3, #10]
 800729a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800729e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6959      	ldr	r1, [r3, #20]
 80072aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072bc:	6800      	ldr	r0, [r0, #0]
 80072be:	f001 f907 	bl	80084d0 <USB_WritePMA>
          ep->xfer_buff += len;
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695a      	ldr	r2, [r3, #20]
 80072ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d2:	441a      	add	r2, r3
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d90f      	bls.n	800731c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80072fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6a1a      	ldr	r2, [r3, #32]
 8007308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730c:	1ad2      	subs	r2, r2, r3
 800730e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	621a      	str	r2, [r3, #32]
 800731a:	e00e      	b.n	800733a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800731c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800732c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800733a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8295 	beq.w	800786e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d16d      	bne.n	8007430 <USB_EPStartXfer+0xe4c>
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736e:	b29b      	uxth	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007374:	4413      	add	r3, r2
 8007376:	66bb      	str	r3, [r7, #104]	; 0x68
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	011a      	lsls	r2, r3, #4
 8007386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007388:	4413      	add	r3, r2
 800738a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800738e:	667b      	str	r3, [r7, #100]	; 0x64
 8007390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d112      	bne.n	80073be <USB_EPStartXfer+0xdda>
 8007398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	e063      	b.n	8007486 <USB_EPStartXfer+0xea2>
 80073be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c2:	2b3e      	cmp	r3, #62	; 0x3e
 80073c4:	d817      	bhi.n	80073f6 <USB_EPStartXfer+0xe12>
 80073c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <USB_EPStartXfer+0xe02>
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e0:	3301      	adds	r3, #1
 80073e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	029b      	lsls	r3, r3, #10
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	e047      	b.n	8007486 <USB_EPStartXfer+0xea2>
 80073f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <USB_EPStartXfer+0xe32>
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007410:	3b01      	subs	r3, #1
 8007412:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741a:	b29b      	uxth	r3, r3
 800741c:	029b      	lsls	r3, r3, #10
 800741e:	b29b      	uxth	r3, r3
 8007420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007428:	b29a      	uxth	r2, r3
 800742a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	e02a      	b.n	8007486 <USB_EPStartXfer+0xea2>
 8007430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	785b      	ldrb	r3, [r3, #1]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d122      	bne.n	8007486 <USB_EPStartXfer+0xea2>
 8007440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	673b      	str	r3, [r7, #112]	; 0x70
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800745a:	b29b      	uxth	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007460:	4413      	add	r3, r2
 8007462:	673b      	str	r3, [r7, #112]	; 0x70
 8007464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	011a      	lsls	r2, r3, #4
 8007472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007474:	4413      	add	r3, r2
 8007476:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800747a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800747c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007480:	b29a      	uxth	r2, r3
 8007482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007484:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	891b      	ldrh	r3, [r3, #8]
 8007492:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6959      	ldr	r1, [r3, #20]
 80074a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074b4:	6800      	ldr	r0, [r0, #0]
 80074b6:	f001 f80b 	bl	80084d0 <USB_WritePMA>
 80074ba:	e1d8      	b.n	800786e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d178      	bne.n	80075be <USB_EPStartXfer+0xfda>
 80074cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074f0:	4413      	add	r3, r2
 80074f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	011a      	lsls	r2, r3, #4
 8007504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007508:	4413      	add	r3, r2
 800750a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800750e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d116      	bne.n	8007548 <USB_EPStartXfer+0xf64>
 800751a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753e:	b29a      	uxth	r2, r3
 8007540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e06b      	b.n	8007620 <USB_EPStartXfer+0x103c>
 8007548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754c:	2b3e      	cmp	r3, #62	; 0x3e
 800754e:	d818      	bhi.n	8007582 <USB_EPStartXfer+0xf9e>
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800755a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <USB_EPStartXfer+0xf8c>
 8007566:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800756a:	3301      	adds	r3, #1
 800756c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007570:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007574:	b29b      	uxth	r3, r3
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	b29a      	uxth	r2, r3
 800757a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800757e:	801a      	strh	r2, [r3, #0]
 8007580:	e04e      	b.n	8007620 <USB_EPStartXfer+0x103c>
 8007582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <USB_EPStartXfer+0xfbe>
 8007598:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800759c:	3b01      	subs	r3, #1
 800759e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	029b      	lsls	r3, r3, #10
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e030      	b.n	8007620 <USB_EPStartXfer+0x103c>
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d128      	bne.n	8007620 <USB_EPStartXfer+0x103c>
 80075ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075f2:	4413      	add	r3, r2
 80075f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	011a      	lsls	r2, r3, #4
 8007606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800760a:	4413      	add	r3, r2
 800760c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007618:	b29a      	uxth	r2, r3
 800761a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800761e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	891b      	ldrh	r3, [r3, #8]
 800762c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6959      	ldr	r1, [r3, #20]
 800763c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007640:	b29b      	uxth	r3, r3
 8007642:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007646:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800764a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800764e:	6800      	ldr	r0, [r0, #0]
 8007650:	f000 ff3e 	bl	80084d0 <USB_WritePMA>
          ep->xfer_buff += len;
 8007654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695a      	ldr	r2, [r3, #20]
 8007660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007664:	441a      	add	r2, r3
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6a1a      	ldr	r2, [r3, #32]
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	429a      	cmp	r2, r3
 800768c:	d90f      	bls.n	80076ae <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6a1a      	ldr	r2, [r3, #32]
 800769a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	621a      	str	r2, [r3, #32]
 80076ac:	e00e      	b.n	80076cc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80076ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80076be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2200      	movs	r2, #0
 80076ca:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80076cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80cc 	beq.w	800786e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d178      	bne.n	80077e6 <USB_EPStartXfer+0x1202>
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007706:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007710:	b29b      	uxth	r3, r3
 8007712:	461a      	mov	r2, r3
 8007714:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007718:	4413      	add	r3, r2
 800771a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800771e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	011a      	lsls	r2, r3, #4
 800772c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007730:	4413      	add	r3, r2
 8007732:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800773a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d116      	bne.n	8007770 <USB_EPStartXfer+0x118c>
 8007742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800774e:	b29a      	uxth	r2, r3
 8007750:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e064      	b.n	800783a <USB_EPStartXfer+0x1256>
 8007770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007774:	2b3e      	cmp	r3, #62	; 0x3e
 8007776:	d818      	bhi.n	80077aa <USB_EPStartXfer+0x11c6>
 8007778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <USB_EPStartXfer+0x11b4>
 800778e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007792:	3301      	adds	r3, #1
 8007794:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800779c:	b29b      	uxth	r3, r3
 800779e:	029b      	lsls	r3, r3, #10
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e047      	b.n	800783a <USB_EPStartXfer+0x1256>
 80077aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ae:	095b      	lsrs	r3, r3, #5
 80077b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <USB_EPStartXfer+0x11e6>
 80077c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077c4:	3b01      	subs	r3, #1
 80077c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80077ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	029b      	lsls	r3, r3, #10
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e029      	b.n	800783a <USB_EPStartXfer+0x1256>
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d121      	bne.n	800783a <USB_EPStartXfer+0x1256>
 80077f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007804:	b29b      	uxth	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800780c:	4413      	add	r3, r2
 800780e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	011a      	lsls	r2, r3, #4
 8007820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007824:	4413      	add	r3, r2
 8007826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800782a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800782e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007832:	b29a      	uxth	r2, r3
 8007834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007838:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800783a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	895b      	ldrh	r3, [r3, #10]
 8007846:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800784a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6959      	ldr	r1, [r3, #20]
 8007856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785a:	b29b      	uxth	r3, r3
 800785c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007860:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007864:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007868:	6800      	ldr	r0, [r0, #0]
 800786a:	f000 fe31 	bl	80084d0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800786e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007890:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789c:	8013      	strh	r3, [r2, #0]
 800789e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80078a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078aa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80078ae:	8812      	ldrh	r2, [r2, #0]
 80078b0:	f082 0210 	eor.w	r2, r2, #16
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80078be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078c2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80078c6:	8812      	ldrh	r2, [r2, #0]
 80078c8:	f082 0220 	eor.w	r2, r2, #32
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	441a      	add	r2, r3
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007902:	b29b      	uxth	r3, r3
 8007904:	8013      	strh	r3, [r2, #0]
 8007906:	f000 bc9f 	b.w	8008248 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800790a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	7b1b      	ldrb	r3, [r3, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 80ae 	bne.w	8007a78 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800791c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	429a      	cmp	r2, r3
 8007936:	d917      	bls.n	8007968 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	619a      	str	r2, [r3, #24]
 8007966:	e00e      	b.n	8007986 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2200      	movs	r2, #0
 8007984:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007998:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079aa:	4413      	add	r3, r2
 80079ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	011a      	lsls	r2, r3, #4
 80079be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079c2:	4413      	add	r3, r2
 80079c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d116      	bne.n	8007a02 <USB_EPStartXfer+0x141e>
 80079d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	e3e8      	b.n	80081d4 <USB_EPStartXfer+0x1bf0>
 8007a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a06:	2b3e      	cmp	r3, #62	; 0x3e
 8007a08:	d818      	bhi.n	8007a3c <USB_EPStartXfer+0x1458>
 8007a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <USB_EPStartXfer+0x1446>
 8007a20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a24:	3301      	adds	r3, #1
 8007a26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	029b      	lsls	r3, r3, #10
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e3cb      	b.n	80081d4 <USB_EPStartXfer+0x1bf0>
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <USB_EPStartXfer+0x1478>
 8007a52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a56:	3b01      	subs	r3, #1
 8007a58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	029b      	lsls	r3, r3, #10
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a74:	801a      	strh	r2, [r3, #0]
 8007a76:	e3ad      	b.n	80081d4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	78db      	ldrb	r3, [r3, #3]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	f040 8200 	bne.w	8007e8a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f040 8091 	bne.w	8007bbe <USB_EPStartXfer+0x15da>
 8007a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	011a      	lsls	r2, r3, #4
 8007ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ad8:	4413      	add	r3, r2
 8007ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d116      	bne.n	8007b20 <USB_EPStartXfer+0x153c>
 8007af2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b04:	801a      	strh	r2, [r3, #0]
 8007b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	e083      	b.n	8007c28 <USB_EPStartXfer+0x1644>
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b2e:	d820      	bhi.n	8007b72 <USB_EPStartXfer+0x158e>
 8007b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	085b      	lsrs	r3, r3, #1
 8007b3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <USB_EPStartXfer+0x157c>
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	029b      	lsls	r3, r3, #10
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	e05a      	b.n	8007c28 <USB_EPStartXfer+0x1644>
 8007b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <USB_EPStartXfer+0x15be>
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	029b      	lsls	r3, r3, #10
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e034      	b.n	8007c28 <USB_EPStartXfer+0x1644>
 8007bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d12c      	bne.n	8007c28 <USB_EPStartXfer+0x1644>
 8007bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	011a      	lsls	r2, r3, #4
 8007c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f040 8091 	bne.w	8007d6a <USB_EPStartXfer+0x1786>
 8007c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	461a      	mov	r2, r3
 8007c68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	011a      	lsls	r2, r3, #4
 8007c80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c84:	4413      	add	r3, r2
 8007c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d116      	bne.n	8007ccc <USB_EPStartXfer+0x16e8>
 8007c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cb0:	801a      	strh	r2, [r3, #0]
 8007cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cc8:	801a      	strh	r2, [r3, #0]
 8007cca:	e07c      	b.n	8007dc6 <USB_EPStartXfer+0x17e2>
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8007cda:	d820      	bhi.n	8007d1e <USB_EPStartXfer+0x173a>
 8007cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d004      	beq.n	8007d0c <USB_EPStartXfer+0x1728>
 8007d02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d06:	3301      	adds	r3, #1
 8007d08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	029b      	lsls	r3, r3, #10
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	e053      	b.n	8007dc6 <USB_EPStartXfer+0x17e2>
 8007d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d104      	bne.n	8007d4e <USB_EPStartXfer+0x176a>
 8007d44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	029b      	lsls	r3, r3, #10
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d66:	801a      	strh	r2, [r3, #0]
 8007d68:	e02d      	b.n	8007dc6 <USB_EPStartXfer+0x17e2>
 8007d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d125      	bne.n	8007dc6 <USB_EPStartXfer+0x17e2>
 8007d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d90:	4413      	add	r3, r2
 8007d92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	011a      	lsls	r2, r3, #4
 8007da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007da8:	4413      	add	r3, r2
 8007daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007dc4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 81fe 	beq.w	80081d4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ddc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007df8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <USB_EPStartXfer+0x182c>
 8007e04:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10d      	bne.n	8007e2c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e10:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f040 81db 	bne.w	80081d4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e1e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f040 81d4 	bne.w	80081d4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e52:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	441a      	add	r2, r3
 8007e70:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	8013      	strh	r3, [r2, #0]
 8007e88:	e1a4      	b.n	80081d4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	78db      	ldrb	r3, [r3, #3]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	f040 819a 	bne.w	80081d0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699a      	ldr	r2, [r3, #24]
 8007ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d917      	bls.n	8007ee8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed8:	1ad2      	subs	r2, r2, r3
 8007eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	619a      	str	r2, [r3, #24]
 8007ee6:	e00e      	b.n	8007f06 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d178      	bne.n	8008008 <USB_EPStartXfer+0x1a24>
 8007f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	011a      	lsls	r2, r3, #4
 8007f4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f52:	4413      	add	r3, r2
 8007f54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d116      	bne.n	8007f92 <USB_EPStartXfer+0x19ae>
 8007f64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	e06b      	b.n	800806a <USB_EPStartXfer+0x1a86>
 8007f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f96:	2b3e      	cmp	r3, #62	; 0x3e
 8007f98:	d818      	bhi.n	8007fcc <USB_EPStartXfer+0x19e8>
 8007f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <USB_EPStartXfer+0x19d6>
 8007fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	029b      	lsls	r3, r3, #10
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	e04e      	b.n	800806a <USB_EPStartXfer+0x1a86>
 8007fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <USB_EPStartXfer+0x1a08>
 8007fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	029b      	lsls	r3, r3, #10
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e030      	b.n	800806a <USB_EPStartXfer+0x1a86>
 8008008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	785b      	ldrb	r3, [r3, #1]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d128      	bne.n	800806a <USB_EPStartXfer+0x1a86>
 8008018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008034:	b29b      	uxth	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803c:	4413      	add	r3, r2
 800803e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	011a      	lsls	r2, r3, #4
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	4413      	add	r3, r2
 8008056:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800805a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800805e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008062:	b29a      	uxth	r2, r3
 8008064:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	785b      	ldrb	r3, [r3, #1]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d178      	bne.n	800817a <USB_EPStartXfer+0x1b96>
 8008088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	461a      	mov	r2, r3
 80080a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ac:	4413      	add	r3, r2
 80080ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	011a      	lsls	r2, r3, #4
 80080c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c4:	4413      	add	r3, r2
 80080c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d116      	bne.n	8008104 <USB_EPStartXfer+0x1b20>
 80080d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080e8:	801a      	strh	r2, [r3, #0]
 80080ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008100:	801a      	strh	r2, [r3, #0]
 8008102:	e067      	b.n	80081d4 <USB_EPStartXfer+0x1bf0>
 8008104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008108:	2b3e      	cmp	r3, #62	; 0x3e
 800810a:	d818      	bhi.n	800813e <USB_EPStartXfer+0x1b5a>
 800810c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008110:	085b      	lsrs	r3, r3, #1
 8008112:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d004      	beq.n	800812c <USB_EPStartXfer+0x1b48>
 8008122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008126:	3301      	adds	r3, #1
 8008128:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800812c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008130:	b29b      	uxth	r3, r3
 8008132:	029b      	lsls	r3, r3, #10
 8008134:	b29a      	uxth	r2, r3
 8008136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	e04a      	b.n	80081d4 <USB_EPStartXfer+0x1bf0>
 800813e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008142:	095b      	lsrs	r3, r3, #5
 8008144:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <USB_EPStartXfer+0x1b7a>
 8008154:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008158:	3b01      	subs	r3, #1
 800815a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800815e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008162:	b29b      	uxth	r3, r3
 8008164:	029b      	lsls	r3, r3, #10
 8008166:	b29b      	uxth	r3, r3
 8008168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800816c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008170:	b29a      	uxth	r2, r3
 8008172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008176:	801a      	strh	r2, [r3, #0]
 8008178:	e02c      	b.n	80081d4 <USB_EPStartXfer+0x1bf0>
 800817a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d124      	bne.n	80081d4 <USB_EPStartXfer+0x1bf0>
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008198:	b29b      	uxth	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a0:	4413      	add	r3, r2
 80081a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	011a      	lsls	r2, r3, #4
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b8:	4413      	add	r3, r2
 80081ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081cc:	801a      	strh	r2, [r3, #0]
 80081ce:	e001      	b.n	80081d4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e03a      	b.n	800824a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80081fe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008202:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008206:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800820a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800820e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008212:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	441a      	add	r2, r3
 8008230:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008244:	b29b      	uxth	r3, r3
 8008246:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d020      	beq.n	80082a8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800827c:	81bb      	strh	r3, [r7, #12]
 800827e:	89bb      	ldrh	r3, [r7, #12]
 8008280:	f083 0310 	eor.w	r3, r3, #16
 8008284:	81bb      	strh	r3, [r7, #12]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	441a      	add	r2, r3
 8008290:	89bb      	ldrh	r3, [r7, #12]
 8008292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800829a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	8013      	strh	r3, [r2, #0]
 80082a6:	e01f      	b.n	80082e8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082be:	81fb      	strh	r3, [r7, #14]
 80082c0:	89fb      	ldrh	r3, [r7, #14]
 80082c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082c6:	81fb      	strh	r3, [r7, #14]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	441a      	add	r2, r3
 80082d2:	89fb      	ldrh	r3, [r7, #14]
 80082d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr

080082f4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	7b1b      	ldrb	r3, [r3, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 809d 	bne.w	8008442 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d04c      	beq.n	80083aa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	823b      	strh	r3, [r7, #16]
 800831e:	8a3b      	ldrh	r3, [r7, #16]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01b      	beq.n	8008360 <USB_EPClearStall+0x6c>
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	b29b      	uxth	r3, r3
 8008336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833e:	81fb      	strh	r3, [r7, #14]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	441a      	add	r2, r3
 800834a:	89fb      	ldrh	r3, [r7, #14]
 800834c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800835c:	b29b      	uxth	r3, r3
 800835e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	78db      	ldrb	r3, [r3, #3]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d06c      	beq.n	8008442 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837e:	81bb      	strh	r3, [r7, #12]
 8008380:	89bb      	ldrh	r3, [r7, #12]
 8008382:	f083 0320 	eor.w	r3, r3, #32
 8008386:	81bb      	strh	r3, [r7, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	441a      	add	r2, r3
 8008392:	89bb      	ldrh	r3, [r7, #12]
 8008394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	8013      	strh	r3, [r2, #0]
 80083a8:	e04b      	b.n	8008442 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	82fb      	strh	r3, [r7, #22]
 80083b8:	8afb      	ldrh	r3, [r7, #22]
 80083ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01b      	beq.n	80083fa <USB_EPClearStall+0x106>
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d8:	82bb      	strh	r3, [r7, #20]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	441a      	add	r2, r3
 80083e4:	8abb      	ldrh	r3, [r7, #20]
 80083e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800840c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008410:	827b      	strh	r3, [r7, #18]
 8008412:	8a7b      	ldrh	r3, [r7, #18]
 8008414:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008418:	827b      	strh	r3, [r7, #18]
 800841a:	8a7b      	ldrh	r3, [r7, #18]
 800841c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008420:	827b      	strh	r3, [r7, #18]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	441a      	add	r2, r3
 800842c:	8a7b      	ldrh	r3, [r7, #18]
 800842e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800843a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843e:	b29b      	uxth	r3, r3
 8008440:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d103      	bne.n	8008468 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2280      	movs	r2, #128	; 0x80
 8008464:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	bc80      	pop	{r7}
 8008472:	4770      	bx	lr

08008474 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	bc80      	pop	{r7}
 8008486:	4770      	bx	lr

08008488 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr

0800849c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80084ae:	68fb      	ldr	r3, [r7, #12]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr

080084ba <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bc80      	pop	{r7}
 80084ce:	4770      	bx	lr

080084d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b08d      	sub	sp, #52	; 0x34
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4611      	mov	r1, r2
 80084dc:	461a      	mov	r2, r3
 80084de:	460b      	mov	r3, r1
 80084e0:	80fb      	strh	r3, [r7, #6]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80084e6:	88bb      	ldrh	r3, [r7, #4]
 80084e8:	3301      	adds	r3, #1
 80084ea:	085b      	lsrs	r3, r3, #1
 80084ec:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	005a      	lsls	r2, r3, #1
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008508:	e01e      	b.n	8008548 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	3301      	adds	r3, #1
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	b29b      	uxth	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	b29a      	uxth	r2, r3
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	3302      	adds	r3, #2
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	3302      	adds	r3, #2
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	3301      	adds	r3, #1
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	3b01      	subs	r3, #1
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1dd      	bne.n	800850a <USB_WritePMA+0x3a>
  }
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	3734      	adds	r7, #52	; 0x34
 8008554:	46bd      	mov	sp, r7
 8008556:	bc80      	pop	{r7}
 8008558:	4770      	bx	lr

0800855a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800855a:	b480      	push	{r7}
 800855c:	b08b      	sub	sp, #44	; 0x2c
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	4611      	mov	r1, r2
 8008566:	461a      	mov	r2, r3
 8008568:	460b      	mov	r3, r1
 800856a:	80fb      	strh	r3, [r7, #6]
 800856c:	4613      	mov	r3, r2
 800856e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008570:	88bb      	ldrh	r3, [r7, #4]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	b29b      	uxth	r3, r3
 8008576:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	005a      	lsls	r2, r3, #1
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800858c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
 8008592:	e01b      	b.n	80085cc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	3302      	adds	r3, #2
 80085a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	3301      	adds	r3, #1
 80085ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	3301      	adds	r3, #1
 80085be:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	3302      	adds	r3, #2
 80085c4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	3b01      	subs	r3, #1
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e0      	bne.n	8008594 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80085d2:	88bb      	ldrh	r3, [r7, #4]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	701a      	strb	r2, [r3, #0]
  }
}
 80085ee:	bf00      	nop
 80085f0:	372c      	adds	r7, #44	; 0x2c
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr

080085f8 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008608:	2302      	movs	r3, #2
 800860a:	2203      	movs	r2, #3
 800860c:	2181      	movs	r1, #129	; 0x81
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 fe47 	bl	800a2a2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800861a:	2302      	movs	r3, #2
 800861c:	2203      	movs	r2, #3
 800861e:	2101      	movs	r1, #1
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 fe3e 	bl	800a2a2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800862e:	2054      	movs	r0, #84	; 0x54
 8008630:	f001 ff4c 	bl	800a4cc <USBD_static_malloc>
 8008634:	4602      	mov	r2, r0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008642:	2b00      	cmp	r3, #0
 8008644:	d102      	bne.n	800864c <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008646:	2301      	movs	r3, #1
 8008648:	73fb      	strb	r3, [r7, #15]
 800864a:	e012      	b.n	8008672 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008652:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	2340      	movs	r3, #64	; 0x40
 800866a:	2101      	movs	r1, #1
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 ff09 	bl	800a484 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008688:	2181      	movs	r1, #129	; 0x81
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fe2f 	bl	800a2ee <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008696:	2101      	movs	r1, #1
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fe28 	bl	800a2ee <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00e      	beq.n	80086ce <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 ff0f 	bl	800a4e4 <USBD_static_free>
    pdev->pClassData = NULL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008702:	2b00      	cmp	r3, #0
 8008704:	d051      	beq.n	80087aa <USBD_CUSTOM_HID_Setup+0xd2>
 8008706:	2b20      	cmp	r3, #32
 8008708:	f040 80d8 	bne.w	80088bc <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	785b      	ldrb	r3, [r3, #1]
 8008710:	3b02      	subs	r3, #2
 8008712:	2b09      	cmp	r3, #9
 8008714:	d841      	bhi.n	800879a <USBD_CUSTOM_HID_Setup+0xc2>
 8008716:	a201      	add	r2, pc, #4	; (adr r2, 800871c <USBD_CUSTOM_HID_Setup+0x44>)
 8008718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871c:	08008775 	.word	0x08008775
 8008720:	08008753 	.word	0x08008753
 8008724:	0800879b 	.word	0x0800879b
 8008728:	0800879b 	.word	0x0800879b
 800872c:	0800879b 	.word	0x0800879b
 8008730:	0800879b 	.word	0x0800879b
 8008734:	0800879b 	.word	0x0800879b
 8008738:	08008785 	.word	0x08008785
 800873c:	08008763 	.word	0x08008763
 8008740:	08008745 	.word	0x08008745
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	885b      	ldrh	r3, [r3, #2]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8008750:	e02a      	b.n	80087a8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	3340      	adds	r3, #64	; 0x40
 8008756:	2201      	movs	r2, #1
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 f999 	bl	8009a92 <USBD_CtlSendData>
          break;
 8008760:	e022      	b.n	80087a8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	885b      	ldrh	r3, [r3, #2]
 8008766:	0a1b      	lsrs	r3, r3, #8
 8008768:	b29b      	uxth	r3, r3
 800876a:	b2db      	uxtb	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8008772:	e019      	b.n	80087a8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	3344      	adds	r3, #68	; 0x44
 8008778:	2201      	movs	r2, #1
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f988 	bl	8009a92 <USBD_CtlSendData>
          break;
 8008782:	e011      	b.n	80087a8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2201      	movs	r2, #1
 8008788:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800878a:	6939      	ldr	r1, [r7, #16]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	88db      	ldrh	r3, [r3, #6]
 8008790:	461a      	mov	r2, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 f9ab 	bl	8009aee <USBD_CtlPrepareRx>
          break;
 8008798:	e006      	b.n	80087a8 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 f90e 	bl	80099be <USBD_CtlError>
          ret = USBD_FAIL;
 80087a2:	2302      	movs	r3, #2
 80087a4:	75fb      	strb	r3, [r7, #23]
          break;
 80087a6:	bf00      	nop
      }
      break;
 80087a8:	e08f      	b.n	80088ca <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	785b      	ldrb	r3, [r3, #1]
 80087ae:	2b0b      	cmp	r3, #11
 80087b0:	d87c      	bhi.n	80088ac <USBD_CUSTOM_HID_Setup+0x1d4>
 80087b2:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <USBD_CUSTOM_HID_Setup+0xe0>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	080087e9 	.word	0x080087e9
 80087bc:	080088ad 	.word	0x080088ad
 80087c0:	080088ad 	.word	0x080088ad
 80087c4:	080088ad 	.word	0x080088ad
 80087c8:	080088ad 	.word	0x080088ad
 80087cc:	080088ad 	.word	0x080088ad
 80087d0:	08008811 	.word	0x08008811
 80087d4:	080088ad 	.word	0x080088ad
 80087d8:	080088ad 	.word	0x080088ad
 80087dc:	080088ad 	.word	0x080088ad
 80087e0:	0800885f 	.word	0x0800885f
 80087e4:	08008887 	.word	0x08008887
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d107      	bne.n	8008802 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80087f2:	f107 030e 	add.w	r3, r7, #14
 80087f6:	2202      	movs	r2, #2
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 f949 	bl	8009a92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008800:	e05b      	b.n	80088ba <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 f8da 	bl	80099be <USBD_CtlError>
            ret = USBD_FAIL;
 800880a:	2302      	movs	r3, #2
 800880c:	75fb      	strb	r3, [r7, #23]
          break;
 800880e:	e054      	b.n	80088ba <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	885b      	ldrh	r3, [r3, #2]
 8008814:	0a1b      	lsrs	r3, r3, #8
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b22      	cmp	r3, #34	; 0x22
 800881a:	d10b      	bne.n	8008834 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	88db      	ldrh	r3, [r3, #6]
 8008820:	2b36      	cmp	r3, #54	; 0x36
 8008822:	bf28      	it	cs
 8008824:	2336      	movcs	r3, #54	; 0x36
 8008826:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	e00d      	b.n	8008850 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	885b      	ldrh	r3, [r3, #2]
 8008838:	0a1b      	lsrs	r3, r3, #8
 800883a:	b29b      	uxth	r3, r3
 800883c:	2b21      	cmp	r3, #33	; 0x21
 800883e:	d107      	bne.n	8008850 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008840:	4b24      	ldr	r3, [pc, #144]	; (80088d4 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008842:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	88db      	ldrh	r3, [r3, #6]
 8008848:	2b09      	cmp	r3, #9
 800884a:	bf28      	it	cs
 800884c:	2309      	movcs	r3, #9
 800884e:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008850:	8bfb      	ldrh	r3, [r7, #30]
 8008852:	461a      	mov	r2, r3
 8008854:	69b9      	ldr	r1, [r7, #24]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 f91b 	bl	8009a92 <USBD_CtlSendData>
          break;
 800885c:	e02d      	b.n	80088ba <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008864:	2b03      	cmp	r3, #3
 8008866:	d107      	bne.n	8008878 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	3348      	adds	r3, #72	; 0x48
 800886c:	2201      	movs	r2, #1
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 f90e 	bl	8009a92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008876:	e020      	b.n	80088ba <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f001 f89f 	bl	80099be <USBD_CtlError>
            ret = USBD_FAIL;
 8008880:	2302      	movs	r3, #2
 8008882:	75fb      	strb	r3, [r7, #23]
          break;
 8008884:	e019      	b.n	80088ba <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888c:	2b03      	cmp	r3, #3
 800888e:	d106      	bne.n	800889e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	885b      	ldrh	r3, [r3, #2]
 8008894:	b2db      	uxtb	r3, r3
 8008896:	461a      	mov	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800889c:	e00d      	b.n	80088ba <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 f88c 	bl	80099be <USBD_CtlError>
            ret = USBD_FAIL;
 80088a6:	2302      	movs	r3, #2
 80088a8:	75fb      	strb	r3, [r7, #23]
          break;
 80088aa:	e006      	b.n	80088ba <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 f885 	bl	80099be <USBD_CtlError>
          ret = USBD_FAIL;
 80088b4:	2302      	movs	r3, #2
 80088b6:	75fb      	strb	r3, [r7, #23]
          break;
 80088b8:	bf00      	nop
      }
      break;
 80088ba:	e006      	b.n	80088ca <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 f87d 	bl	80099be <USBD_CtlError>
      ret = USBD_FAIL;
 80088c4:	2302      	movs	r3, #2
 80088c6:	75fb      	strb	r3, [r7, #23]
      break;
 80088c8:	bf00      	nop
  }
  return ret;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3720      	adds	r7, #32
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	200000f8 	.word	0x200000f8

080088d8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ec:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d111      	bne.n	800891c <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800890a:	88fb      	ldrh	r3, [r7, #6]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	2181      	movs	r1, #129	; 0x81
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 fd94 	bl	800a43e <USBD_LL_Transmit>
 8008916:	e001      	b.n	800891c <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008918:	2301      	movs	r3, #1
 800891a:	e000      	b.n	800891e <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2229      	movs	r2, #41	; 0x29
 8008934:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008936:	4b03      	ldr	r3, [pc, #12]	; (8008944 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000074 	.word	0x20000074

08008948 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2229      	movs	r2, #41	; 0x29
 8008954:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008956:	4b03      	ldr	r3, [pc, #12]	; (8008964 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	200000a0 	.word	0x200000a0

08008968 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2229      	movs	r2, #41	; 0x29
 8008974:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008976:	4b03      	ldr	r3, [pc, #12]	; (8008984 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	bc80      	pop	{r7}
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	200000cc 	.word	0x200000cc

08008988 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr

080089ac <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089be:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4610      	mov	r0, r2
 80089cc:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	2340      	movs	r3, #64	; 0x40
 80089d2:	2101      	movs	r1, #1
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f001 fd55 	bl	800a484 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f2:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d109      	bne.n	8008a10 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4610      	mov	r0, r2
 8008a08:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	220a      	movs	r2, #10
 8008a28:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008a2a:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	20000104 	.word	0x20000104

08008a3c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008a46:	2302      	movs	r3, #2
 8008a48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d005      	beq.n	8008a5c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr

08008a68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e01a      	b.n	8008ab6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	79fa      	ldrb	r2, [r7, #7]
 8008aac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f001 fb8c 	bl	800a1cc <USBD_LL_Init>

  return USBD_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d006      	beq.n	8008ae0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]
 8008ade:	e001      	b.n	8008ae4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr

08008af0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 fbb7 	bl	800a26c <USBD_LL_Start>

  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr

08008b1c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00c      	beq.n	8008b50 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	4611      	mov	r1, r2
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	4798      	blx	r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	4611      	mov	r1, r2
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4798      	blx	r3

  return USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fed7 	bl	8009946 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008bb4:	f003 031f 	and.w	r3, r3, #31
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d016      	beq.n	8008bea <USBD_LL_SetupStage+0x6a>
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d81c      	bhi.n	8008bfa <USBD_LL_SetupStage+0x7a>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <USBD_LL_SetupStage+0x4a>
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d008      	beq.n	8008bda <USBD_LL_SetupStage+0x5a>
 8008bc8:	e017      	b.n	8008bfa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9ca 	bl	8008f6c <USBD_StdDevReq>
      break;
 8008bd8:	e01a      	b.n	8008c10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa2c 	bl	8009040 <USBD_StdItfReq>
      break;
 8008be8:	e012      	b.n	8008c10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fa6c 	bl	80090d0 <USBD_StdEPReq>
      break;
 8008bf8:	e00a      	b.n	8008c10 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008c00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 fb8f 	bl	800a32c <USBD_LL_StallEP>
      break;
 8008c0e:	bf00      	nop
  }

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b086      	sub	sp, #24
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	460b      	mov	r3, r1
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c28:	7afb      	ldrb	r3, [r7, #11]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d14b      	bne.n	8008cc6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c3c:	2b03      	cmp	r3, #3
 8008c3e:	d134      	bne.n	8008caa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d919      	bls.n	8008c80 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	1ad2      	subs	r2, r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d203      	bcs.n	8008c6e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	e002      	b.n	8008c74 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	461a      	mov	r2, r3
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 ff56 	bl	8009b2a <USBD_CtlContinueRx>
 8008c7e:	e038      	b.n	8008cf2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00a      	beq.n	8008ca2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d105      	bne.n	8008ca2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 ff53 	bl	8009b4e <USBD_CtlSendStatus>
 8008ca8:	e023      	b.n	8008cf2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	d11e      	bne.n	8008cf2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f001 fb34 	bl	800a32c <USBD_LL_StallEP>
 8008cc4:	e015      	b.n	8008cf2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00d      	beq.n	8008cee <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d108      	bne.n	8008cee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	7afa      	ldrb	r2, [r7, #11]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	4798      	blx	r3
 8008cec:	e001      	b.n	8008cf2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e000      	b.n	8008cf4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	460b      	mov	r3, r1
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d17f      	bne.n	8008e10 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3314      	adds	r3, #20
 8008d14:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d15c      	bne.n	8008dda <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d915      	bls.n	8008d58 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	1ad2      	subs	r2, r2, r3
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	461a      	mov	r2, r3
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fec0 	bl	8009aca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f001 fb97 	bl	800a484 <USBD_LL_PrepareReceive>
 8008d56:	e04e      	b.n	8008df6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	6912      	ldr	r2, [r2, #16]
 8008d60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d64:	fb01 f202 	mul.w	r2, r1, r2
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d11c      	bne.n	8008da8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	689a      	ldr	r2, [r3, #8]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d316      	bcc.n	8008da8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d20f      	bcs.n	8008da8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 fe9c 	bl	8009aca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2100      	movs	r1, #0
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f001 fb6f 	bl	800a484 <USBD_LL_PrepareReceive>
 8008da6:	e026      	b.n	8008df6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d105      	bne.n	8008dca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008dca:	2180      	movs	r1, #128	; 0x80
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f001 faad 	bl	800a32c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fece 	bl	8009b74 <USBD_CtlReceiveStatus>
 8008dd8:	e00d      	b.n	8008df6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d004      	beq.n	8008dee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d103      	bne.n	8008df6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008dee:	2180      	movs	r1, #128	; 0x80
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f001 fa9b 	bl	800a32c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d11d      	bne.n	8008e3c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff fe81 	bl	8008b08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e0e:	e015      	b.n	8008e3c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00d      	beq.n	8008e38 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d108      	bne.n	8008e38 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	7afa      	ldrb	r2, [r7, #11]
 8008e30:	4611      	mov	r1, r2
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	4798      	blx	r3
 8008e36:	e001      	b.n	8008e3c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e000      	b.n	8008e3e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e4e:	2340      	movs	r3, #64	; 0x40
 8008e50:	2200      	movs	r2, #0
 8008e52:	2100      	movs	r1, #0
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 fa24 	bl	800a2a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2240      	movs	r2, #64	; 0x40
 8008e66:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e6a:	2340      	movs	r3, #64	; 0x40
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2180      	movs	r1, #128	; 0x80
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 fa16 	bl	800a2a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2240      	movs	r2, #64	; 0x40
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	6852      	ldr	r2, [r2, #4]
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	4611      	mov	r1, r2
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	4798      	blx	r3
  }

  return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2204      	movs	r2, #4
 8008efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bc80      	pop	{r7}
 8008f0c:	4770      	bx	lr

08008f0e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d105      	bne.n	8008f2c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr

08008f38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d10b      	bne.n	8008f62 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f82:	2b40      	cmp	r3, #64	; 0x40
 8008f84:	d005      	beq.n	8008f92 <USBD_StdDevReq+0x26>
 8008f86:	2b40      	cmp	r3, #64	; 0x40
 8008f88:	d84f      	bhi.n	800902a <USBD_StdDevReq+0xbe>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d009      	beq.n	8008fa2 <USBD_StdDevReq+0x36>
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	d14b      	bne.n	800902a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	4798      	blx	r3
      break;
 8008fa0:	e048      	b.n	8009034 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	2b09      	cmp	r3, #9
 8008fa8:	d839      	bhi.n	800901e <USBD_StdDevReq+0xb2>
 8008faa:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <USBD_StdDevReq+0x44>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08009001 	.word	0x08009001
 8008fb4:	08009015 	.word	0x08009015
 8008fb8:	0800901f 	.word	0x0800901f
 8008fbc:	0800900b 	.word	0x0800900b
 8008fc0:	0800901f 	.word	0x0800901f
 8008fc4:	08008fe3 	.word	0x08008fe3
 8008fc8:	08008fd9 	.word	0x08008fd9
 8008fcc:	0800901f 	.word	0x0800901f
 8008fd0:	08008ff7 	.word	0x08008ff7
 8008fd4:	08008fed 	.word	0x08008fed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f9dc 	bl	8009398 <USBD_GetDescriptor>
          break;
 8008fe0:	e022      	b.n	8009028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fb3f 	bl	8009668 <USBD_SetAddress>
          break;
 8008fea:	e01d      	b.n	8009028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fb7e 	bl	80096f0 <USBD_SetConfig>
          break;
 8008ff4:	e018      	b.n	8009028 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fc07 	bl	800980c <USBD_GetConfig>
          break;
 8008ffe:	e013      	b.n	8009028 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fc37 	bl	8009876 <USBD_GetStatus>
          break;
 8009008:	e00e      	b.n	8009028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fc65 	bl	80098dc <USBD_SetFeature>
          break;
 8009012:	e009      	b.n	8009028 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fc74 	bl	8009904 <USBD_ClrFeature>
          break;
 800901c:	e004      	b.n	8009028 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fccc 	bl	80099be <USBD_CtlError>
          break;
 8009026:	bf00      	nop
      }
      break;
 8009028:	e004      	b.n	8009034 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fcc6 	bl	80099be <USBD_CtlError>
      break;
 8009032:	bf00      	nop
  }

  return ret;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop

08009040 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d005      	beq.n	8009066 <USBD_StdItfReq+0x26>
 800905a:	2b40      	cmp	r3, #64	; 0x40
 800905c:	d82e      	bhi.n	80090bc <USBD_StdItfReq+0x7c>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <USBD_StdItfReq+0x26>
 8009062:	2b20      	cmp	r3, #32
 8009064:	d12a      	bne.n	80090bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906c:	3b01      	subs	r3, #1
 800906e:	2b02      	cmp	r3, #2
 8009070:	d81d      	bhi.n	80090ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	889b      	ldrh	r3, [r3, #4]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	d813      	bhi.n	80090a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	4798      	blx	r3
 800908a:	4603      	mov	r3, r0
 800908c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	88db      	ldrh	r3, [r3, #6]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d110      	bne.n	80090b8 <USBD_StdItfReq+0x78>
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10d      	bne.n	80090b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fd56 	bl	8009b4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80090a2:	e009      	b.n	80090b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fc89 	bl	80099be <USBD_CtlError>
          break;
 80090ac:	e004      	b.n	80090b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fc84 	bl	80099be <USBD_CtlError>
          break;
 80090b6:	e000      	b.n	80090ba <USBD_StdItfReq+0x7a>
          break;
 80090b8:	bf00      	nop
      }
      break;
 80090ba:	e004      	b.n	80090c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fc7d 	bl	80099be <USBD_CtlError>
      break;
 80090c4:	bf00      	nop
  }

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	889b      	ldrh	r3, [r3, #4]
 80090e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090ec:	2b40      	cmp	r3, #64	; 0x40
 80090ee:	d007      	beq.n	8009100 <USBD_StdEPReq+0x30>
 80090f0:	2b40      	cmp	r3, #64	; 0x40
 80090f2:	f200 8146 	bhi.w	8009382 <USBD_StdEPReq+0x2b2>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <USBD_StdEPReq+0x40>
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	f040 8141 	bne.w	8009382 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
      break;
 800910e:	e13d      	b.n	800938c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009118:	2b20      	cmp	r3, #32
 800911a:	d10a      	bne.n	8009132 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	4798      	blx	r3
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	e12d      	b.n	800938e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	2b03      	cmp	r3, #3
 8009138:	d007      	beq.n	800914a <USBD_StdEPReq+0x7a>
 800913a:	2b03      	cmp	r3, #3
 800913c:	f300 811b 	bgt.w	8009376 <USBD_StdEPReq+0x2a6>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d072      	beq.n	800922a <USBD_StdEPReq+0x15a>
 8009144:	2b01      	cmp	r3, #1
 8009146:	d03a      	beq.n	80091be <USBD_StdEPReq+0xee>
 8009148:	e115      	b.n	8009376 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009150:	2b02      	cmp	r3, #2
 8009152:	d002      	beq.n	800915a <USBD_StdEPReq+0x8a>
 8009154:	2b03      	cmp	r3, #3
 8009156:	d015      	beq.n	8009184 <USBD_StdEPReq+0xb4>
 8009158:	e02b      	b.n	80091b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00c      	beq.n	800917a <USBD_StdEPReq+0xaa>
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	2b80      	cmp	r3, #128	; 0x80
 8009164:	d009      	beq.n	800917a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 f8de 	bl	800a32c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009170:	2180      	movs	r1, #128	; 0x80
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 f8da 	bl	800a32c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009178:	e020      	b.n	80091bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fc1e 	bl	80099be <USBD_CtlError>
              break;
 8009182:	e01b      	b.n	80091bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	885b      	ldrh	r3, [r3, #2]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10e      	bne.n	80091aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00b      	beq.n	80091aa <USBD_StdEPReq+0xda>
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b80      	cmp	r3, #128	; 0x80
 8009196:	d008      	beq.n	80091aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	88db      	ldrh	r3, [r3, #6]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d104      	bne.n	80091aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 f8c1 	bl	800a32c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fccf 	bl	8009b4e <USBD_CtlSendStatus>

              break;
 80091b0:	e004      	b.n	80091bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fc02 	bl	80099be <USBD_CtlError>
              break;
 80091ba:	bf00      	nop
          }
          break;
 80091bc:	e0e0      	b.n	8009380 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d002      	beq.n	80091ce <USBD_StdEPReq+0xfe>
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d015      	beq.n	80091f8 <USBD_StdEPReq+0x128>
 80091cc:	e026      	b.n	800921c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00c      	beq.n	80091ee <USBD_StdEPReq+0x11e>
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	2b80      	cmp	r3, #128	; 0x80
 80091d8:	d009      	beq.n	80091ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 f8a4 	bl	800a32c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80091e4:	2180      	movs	r1, #128	; 0x80
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 f8a0 	bl	800a32c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091ec:	e01c      	b.n	8009228 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fbe4 	bl	80099be <USBD_CtlError>
              break;
 80091f6:	e017      	b.n	8009228 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	885b      	ldrh	r3, [r3, #2]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d112      	bne.n	8009226 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009206:	2b00      	cmp	r3, #0
 8009208:	d004      	beq.n	8009214 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f8ab 	bl	800a36a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fc9a 	bl	8009b4e <USBD_CtlSendStatus>
              }
              break;
 800921a:	e004      	b.n	8009226 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fbcd 	bl	80099be <USBD_CtlError>
              break;
 8009224:	e000      	b.n	8009228 <USBD_StdEPReq+0x158>
              break;
 8009226:	bf00      	nop
          }
          break;
 8009228:	e0aa      	b.n	8009380 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009230:	2b02      	cmp	r3, #2
 8009232:	d002      	beq.n	800923a <USBD_StdEPReq+0x16a>
 8009234:	2b03      	cmp	r3, #3
 8009236:	d032      	beq.n	800929e <USBD_StdEPReq+0x1ce>
 8009238:	e097      	b.n	800936a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <USBD_StdEPReq+0x180>
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	2b80      	cmp	r3, #128	; 0x80
 8009244:	d004      	beq.n	8009250 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fbb8 	bl	80099be <USBD_CtlError>
                break;
 800924e:	e091      	b.n	8009374 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da0b      	bge.n	8009270 <USBD_StdEPReq+0x1a0>
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	3310      	adds	r3, #16
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	4413      	add	r3, r2
 800926c:	3304      	adds	r3, #4
 800926e:	e00b      	b.n	8009288 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	4413      	add	r3, r2
 8009286:	3304      	adds	r3, #4
 8009288:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2202      	movs	r2, #2
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fbfb 	bl	8009a92 <USBD_CtlSendData>
              break;
 800929c:	e06a      	b.n	8009374 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800929e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da11      	bge.n	80092ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	f003 020f 	and.w	r2, r3, #15
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	440b      	add	r3, r1
 80092b8:	3318      	adds	r3, #24
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d117      	bne.n	80092f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fb7b 	bl	80099be <USBD_CtlError>
                  break;
 80092c8:	e054      	b.n	8009374 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	f003 020f 	and.w	r2, r3, #15
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fb68 	bl	80099be <USBD_CtlError>
                  break;
 80092ee:	e041      	b.n	8009374 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	da0b      	bge.n	8009310 <USBD_StdEPReq+0x240>
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	3310      	adds	r3, #16
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	4413      	add	r3, r2
 800930c:	3304      	adds	r3, #4
 800930e:	e00b      	b.n	8009328 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4413      	add	r3, r2
 8009326:	3304      	adds	r3, #4
 8009328:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <USBD_StdEPReq+0x266>
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	2b80      	cmp	r3, #128	; 0x80
 8009334:	d103      	bne.n	800933e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	e00e      	b.n	800935c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 f830 	bl	800a3a8 <USBD_LL_IsStallEP>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2201      	movs	r2, #1
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e002      	b.n	800935c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2202      	movs	r2, #2
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fb95 	bl	8009a92 <USBD_CtlSendData>
              break;
 8009368:	e004      	b.n	8009374 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb26 	bl	80099be <USBD_CtlError>
              break;
 8009372:	bf00      	nop
          }
          break;
 8009374:	e004      	b.n	8009380 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fb20 	bl	80099be <USBD_CtlError>
          break;
 800937e:	bf00      	nop
      }
      break;
 8009380:	e004      	b.n	800938c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fb1a 	bl	80099be <USBD_CtlError>
      break;
 800938a:	bf00      	nop
  }

  return ret;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093aa:	2300      	movs	r3, #0
 80093ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	885b      	ldrh	r3, [r3, #2]
 80093b2:	0a1b      	lsrs	r3, r3, #8
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	3b01      	subs	r3, #1
 80093b8:	2b06      	cmp	r3, #6
 80093ba:	f200 8128 	bhi.w	800960e <USBD_GetDescriptor+0x276>
 80093be:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <USBD_GetDescriptor+0x2c>)
 80093c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c4:	080093e1 	.word	0x080093e1
 80093c8:	080093f9 	.word	0x080093f9
 80093cc:	08009439 	.word	0x08009439
 80093d0:	0800960f 	.word	0x0800960f
 80093d4:	0800960f 	.word	0x0800960f
 80093d8:	080095af 	.word	0x080095af
 80093dc:	080095db 	.word	0x080095db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	7c12      	ldrb	r2, [r2, #16]
 80093ec:	f107 0108 	add.w	r1, r7, #8
 80093f0:	4610      	mov	r0, r2
 80093f2:	4798      	blx	r3
 80093f4:	60f8      	str	r0, [r7, #12]
      break;
 80093f6:	e112      	b.n	800961e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7c1b      	ldrb	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10d      	bne.n	800941c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	f107 0208 	add.w	r2, r7, #8
 800940c:	4610      	mov	r0, r2
 800940e:	4798      	blx	r3
 8009410:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3301      	adds	r3, #1
 8009416:	2202      	movs	r2, #2
 8009418:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800941a:	e100      	b.n	800961e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	f107 0208 	add.w	r2, r7, #8
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
 800942c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3301      	adds	r3, #1
 8009432:	2202      	movs	r2, #2
 8009434:	701a      	strb	r2, [r3, #0]
      break;
 8009436:	e0f2      	b.n	800961e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	885b      	ldrh	r3, [r3, #2]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b05      	cmp	r3, #5
 8009440:	f200 80ac 	bhi.w	800959c <USBD_GetDescriptor+0x204>
 8009444:	a201      	add	r2, pc, #4	; (adr r2, 800944c <USBD_GetDescriptor+0xb4>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	08009465 	.word	0x08009465
 8009450:	08009499 	.word	0x08009499
 8009454:	080094cd 	.word	0x080094cd
 8009458:	08009501 	.word	0x08009501
 800945c:	08009535 	.word	0x08009535
 8009460:	08009569 	.word	0x08009569
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	7c12      	ldrb	r2, [r2, #16]
 800947c:	f107 0108 	add.w	r1, r7, #8
 8009480:	4610      	mov	r0, r2
 8009482:	4798      	blx	r3
 8009484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009486:	e091      	b.n	80095ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa97 	bl	80099be <USBD_CtlError>
            err++;
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	3301      	adds	r3, #1
 8009494:	72fb      	strb	r3, [r7, #11]
          break;
 8009496:	e089      	b.n	80095ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	7c12      	ldrb	r2, [r2, #16]
 80094b0:	f107 0108 	add.w	r1, r7, #8
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ba:	e077      	b.n	80095ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa7d 	bl	80099be <USBD_CtlError>
            err++;
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	3301      	adds	r3, #1
 80094c8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ca:	e06f      	b.n	80095ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	7c12      	ldrb	r2, [r2, #16]
 80094e4:	f107 0108 	add.w	r1, r7, #8
 80094e8:	4610      	mov	r0, r2
 80094ea:	4798      	blx	r3
 80094ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ee:	e05d      	b.n	80095ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa63 	bl	80099be <USBD_CtlError>
            err++;
 80094f8:	7afb      	ldrb	r3, [r7, #11]
 80094fa:	3301      	adds	r3, #1
 80094fc:	72fb      	strb	r3, [r7, #11]
          break;
 80094fe:	e055      	b.n	80095ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00b      	beq.n	8009524 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	7c12      	ldrb	r2, [r2, #16]
 8009518:	f107 0108 	add.w	r1, r7, #8
 800951c:	4610      	mov	r0, r2
 800951e:	4798      	blx	r3
 8009520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009522:	e043      	b.n	80095ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa49 	bl	80099be <USBD_CtlError>
            err++;
 800952c:	7afb      	ldrb	r3, [r7, #11]
 800952e:	3301      	adds	r3, #1
 8009530:	72fb      	strb	r3, [r7, #11]
          break;
 8009532:	e03b      	b.n	80095ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00b      	beq.n	8009558 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	7c12      	ldrb	r2, [r2, #16]
 800954c:	f107 0108 	add.w	r1, r7, #8
 8009550:	4610      	mov	r0, r2
 8009552:	4798      	blx	r3
 8009554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009556:	e029      	b.n	80095ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fa2f 	bl	80099be <USBD_CtlError>
            err++;
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	3301      	adds	r3, #1
 8009564:	72fb      	strb	r3, [r7, #11]
          break;
 8009566:	e021      	b.n	80095ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	7c12      	ldrb	r2, [r2, #16]
 8009580:	f107 0108 	add.w	r1, r7, #8
 8009584:	4610      	mov	r0, r2
 8009586:	4798      	blx	r3
 8009588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800958a:	e00f      	b.n	80095ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fa15 	bl	80099be <USBD_CtlError>
            err++;
 8009594:	7afb      	ldrb	r3, [r7, #11]
 8009596:	3301      	adds	r3, #1
 8009598:	72fb      	strb	r3, [r7, #11]
          break;
 800959a:	e007      	b.n	80095ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fa0d 	bl	80099be <USBD_CtlError>
          err++;
 80095a4:	7afb      	ldrb	r3, [r7, #11]
 80095a6:	3301      	adds	r3, #1
 80095a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80095aa:	e038      	b.n	800961e <USBD_GetDescriptor+0x286>
 80095ac:	e037      	b.n	800961e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	7c1b      	ldrb	r3, [r3, #16]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d109      	bne.n	80095ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095be:	f107 0208 	add.w	r2, r7, #8
 80095c2:	4610      	mov	r0, r2
 80095c4:	4798      	blx	r3
 80095c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095c8:	e029      	b.n	800961e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f9f6 	bl	80099be <USBD_CtlError>
        err++;
 80095d2:	7afb      	ldrb	r3, [r7, #11]
 80095d4:	3301      	adds	r3, #1
 80095d6:	72fb      	strb	r3, [r7, #11]
      break;
 80095d8:	e021      	b.n	800961e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	7c1b      	ldrb	r3, [r3, #16]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10d      	bne.n	80095fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	f107 0208 	add.w	r2, r7, #8
 80095ee:	4610      	mov	r0, r2
 80095f0:	4798      	blx	r3
 80095f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	3301      	adds	r3, #1
 80095f8:	2207      	movs	r2, #7
 80095fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095fc:	e00f      	b.n	800961e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f9dc 	bl	80099be <USBD_CtlError>
        err++;
 8009606:	7afb      	ldrb	r3, [r7, #11]
 8009608:	3301      	adds	r3, #1
 800960a:	72fb      	strb	r3, [r7, #11]
      break;
 800960c:	e007      	b.n	800961e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f9d4 	bl	80099be <USBD_CtlError>
      err++;
 8009616:	7afb      	ldrb	r3, [r7, #11]
 8009618:	3301      	adds	r3, #1
 800961a:	72fb      	strb	r3, [r7, #11]
      break;
 800961c:	bf00      	nop
  }

  if (err != 0U)
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d11c      	bne.n	800965e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009624:	893b      	ldrh	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d011      	beq.n	800964e <USBD_GetDescriptor+0x2b6>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00d      	beq.n	800964e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	88da      	ldrh	r2, [r3, #6]
 8009636:	893b      	ldrh	r3, [r7, #8]
 8009638:	4293      	cmp	r3, r2
 800963a:	bf28      	it	cs
 800963c:	4613      	movcs	r3, r2
 800963e:	b29b      	uxth	r3, r3
 8009640:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009642:	893b      	ldrh	r3, [r7, #8]
 8009644:	461a      	mov	r2, r3
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fa22 	bl	8009a92 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	88db      	ldrh	r3, [r3, #6]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d104      	bne.n	8009660 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa79 	bl	8009b4e <USBD_CtlSendStatus>
 800965c:	e000      	b.n	8009660 <USBD_GetDescriptor+0x2c8>
    return;
 800965e:	bf00      	nop
    }
  }
}
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop

08009668 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	889b      	ldrh	r3, [r3, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d130      	bne.n	80096dc <USBD_SetAddress+0x74>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	88db      	ldrh	r3, [r3, #6]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d12c      	bne.n	80096dc <USBD_SetAddress+0x74>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	885b      	ldrh	r3, [r3, #2]
 8009686:	2b7f      	cmp	r3, #127	; 0x7f
 8009688:	d828      	bhi.n	80096dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	885b      	ldrh	r3, [r3, #2]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800969c:	2b03      	cmp	r3, #3
 800969e:	d104      	bne.n	80096aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f98b 	bl	80099be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a8:	e01d      	b.n	80096e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	7bfa      	ldrb	r2, [r7, #15]
 80096ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fea2 	bl	800a400 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fa46 	bl	8009b4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096d0:	e009      	b.n	80096e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096da:	e004      	b.n	80096e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f96d 	bl	80099be <USBD_CtlError>
  }
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	885b      	ldrh	r3, [r3, #2]
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	4b41      	ldr	r3, [pc, #260]	; (8009808 <USBD_SetConfig+0x118>)
 8009702:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009704:	4b40      	ldr	r3, [pc, #256]	; (8009808 <USBD_SetConfig+0x118>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d904      	bls.n	8009716 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f955 	bl	80099be <USBD_CtlError>
 8009714:	e075      	b.n	8009802 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971c:	2b02      	cmp	r3, #2
 800971e:	d002      	beq.n	8009726 <USBD_SetConfig+0x36>
 8009720:	2b03      	cmp	r3, #3
 8009722:	d023      	beq.n	800976c <USBD_SetConfig+0x7c>
 8009724:	e062      	b.n	80097ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009726:	4b38      	ldr	r3, [pc, #224]	; (8009808 <USBD_SetConfig+0x118>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d01a      	beq.n	8009764 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800972e:	4b36      	ldr	r3, [pc, #216]	; (8009808 <USBD_SetConfig+0x118>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2203      	movs	r2, #3
 800973c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009740:	4b31      	ldr	r3, [pc, #196]	; (8009808 <USBD_SetConfig+0x118>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff f9e8 	bl	8008b1c <USBD_SetClassConfig>
 800974c:	4603      	mov	r3, r0
 800974e:	2b02      	cmp	r3, #2
 8009750:	d104      	bne.n	800975c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f932 	bl	80099be <USBD_CtlError>
            return;
 800975a:	e052      	b.n	8009802 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f9f6 	bl	8009b4e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009762:	e04e      	b.n	8009802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f9f2 	bl	8009b4e <USBD_CtlSendStatus>
        break;
 800976a:	e04a      	b.n	8009802 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800976c:	4b26      	ldr	r3, [pc, #152]	; (8009808 <USBD_SetConfig+0x118>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d112      	bne.n	800979a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800977c:	4b22      	ldr	r3, [pc, #136]	; (8009808 <USBD_SetConfig+0x118>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	461a      	mov	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009786:	4b20      	ldr	r3, [pc, #128]	; (8009808 <USBD_SetConfig+0x118>)
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	4619      	mov	r1, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff f9e4 	bl	8008b5a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f9db 	bl	8009b4e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009798:	e033      	b.n	8009802 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800979a:	4b1b      	ldr	r3, [pc, #108]	; (8009808 <USBD_SetConfig+0x118>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d01d      	beq.n	80097e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff f9d2 	bl	8008b5a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <USBD_SetConfig+0x118>)
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097c0:	4b11      	ldr	r3, [pc, #68]	; (8009808 <USBD_SetConfig+0x118>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff f9a8 	bl	8008b1c <USBD_SetClassConfig>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d104      	bne.n	80097dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f8f2 	bl	80099be <USBD_CtlError>
            return;
 80097da:	e012      	b.n	8009802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f9b6 	bl	8009b4e <USBD_CtlSendStatus>
        break;
 80097e2:	e00e      	b.n	8009802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f9b2 	bl	8009b4e <USBD_CtlSendStatus>
        break;
 80097ea:	e00a      	b.n	8009802 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8e5 	bl	80099be <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80097f4:	4b04      	ldr	r3, [pc, #16]	; (8009808 <USBD_SetConfig+0x118>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff f9ad 	bl	8008b5a <USBD_ClrClassConfig>
        break;
 8009800:	bf00      	nop
    }
  }
}
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000328 	.word	0x20000328

0800980c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	88db      	ldrh	r3, [r3, #6]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d004      	beq.n	8009828 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f8cc 	bl	80099be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009826:	e022      	b.n	800986e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982e:	2b02      	cmp	r3, #2
 8009830:	dc02      	bgt.n	8009838 <USBD_GetConfig+0x2c>
 8009832:	2b00      	cmp	r3, #0
 8009834:	dc03      	bgt.n	800983e <USBD_GetConfig+0x32>
 8009836:	e015      	b.n	8009864 <USBD_GetConfig+0x58>
 8009838:	2b03      	cmp	r3, #3
 800983a:	d00b      	beq.n	8009854 <USBD_GetConfig+0x48>
 800983c:	e012      	b.n	8009864 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	3308      	adds	r3, #8
 8009848:	2201      	movs	r2, #1
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f920 	bl	8009a92 <USBD_CtlSendData>
        break;
 8009852:	e00c      	b.n	800986e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3304      	adds	r3, #4
 8009858:	2201      	movs	r2, #1
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f918 	bl	8009a92 <USBD_CtlSendData>
        break;
 8009862:	e004      	b.n	800986e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f8a9 	bl	80099be <USBD_CtlError>
        break;
 800986c:	bf00      	nop
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009886:	3b01      	subs	r3, #1
 8009888:	2b02      	cmp	r3, #2
 800988a:	d81e      	bhi.n	80098ca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	88db      	ldrh	r3, [r3, #6]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d004      	beq.n	800989e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f891 	bl	80099be <USBD_CtlError>
        break;
 800989c:	e01a      	b.n	80098d4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d005      	beq.n	80098ba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f043 0202 	orr.w	r2, r3, #2
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	330c      	adds	r3, #12
 80098be:	2202      	movs	r2, #2
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f8e5 	bl	8009a92 <USBD_CtlSendData>
      break;
 80098c8:	e004      	b.n	80098d4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f876 	bl	80099be <USBD_CtlError>
      break;
 80098d2:	bf00      	nop
  }
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	885b      	ldrh	r3, [r3, #2]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d106      	bne.n	80098fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f929 	bl	8009b4e <USBD_CtlSendStatus>
  }
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009914:	3b01      	subs	r3, #1
 8009916:	2b02      	cmp	r3, #2
 8009918:	d80b      	bhi.n	8009932 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	885b      	ldrh	r3, [r3, #2]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d10c      	bne.n	800993c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f90f 	bl	8009b4e <USBD_CtlSendStatus>
      }
      break;
 8009930:	e004      	b.n	800993c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f842 	bl	80099be <USBD_CtlError>
      break;
 800993a:	e000      	b.n	800993e <USBD_ClrFeature+0x3a>
      break;
 800993c:	bf00      	nop
  }
}
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781a      	ldrb	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	785a      	ldrb	r2, [r3, #1]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	3302      	adds	r3, #2
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	b29a      	uxth	r2, r3
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	3303      	adds	r3, #3
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	b29b      	uxth	r3, r3
 8009970:	021b      	lsls	r3, r3, #8
 8009972:	b29b      	uxth	r3, r3
 8009974:	4413      	add	r3, r2
 8009976:	b29a      	uxth	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	3304      	adds	r3, #4
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	b29a      	uxth	r2, r3
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	3305      	adds	r3, #5
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	b29b      	uxth	r3, r3
 800998c:	021b      	lsls	r3, r3, #8
 800998e:	b29b      	uxth	r3, r3
 8009990:	4413      	add	r3, r2
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	3306      	adds	r3, #6
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	b29a      	uxth	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	3307      	adds	r3, #7
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	021b      	lsls	r3, r3, #8
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	4413      	add	r3, r2
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	80da      	strh	r2, [r3, #6]

}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bc80      	pop	{r7}
 80099bc:	4770      	bx	lr

080099be <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fcae 	bl	800a32c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80099d0:	2100      	movs	r1, #0
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fcaa 	bl	800a32c <USBD_LL_StallEP>
}
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d032      	beq.n	8009a5c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f834 	bl	8009a64 <USBD_GetLen>
 80099fc:	4603      	mov	r3, r0
 80099fe:	3301      	adds	r3, #1
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	75fa      	strb	r2, [r7, #23]
 8009a10:	461a      	mov	r2, r3
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	4413      	add	r3, r2
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	7812      	ldrb	r2, [r2, #0]
 8009a1a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	75fa      	strb	r2, [r7, #23]
 8009a22:	461a      	mov	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4413      	add	r3, r2
 8009a28:	2203      	movs	r2, #3
 8009a2a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009a2c:	e012      	b.n	8009a54 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	60fa      	str	r2, [r7, #12]
 8009a34:	7dfa      	ldrb	r2, [r7, #23]
 8009a36:	1c51      	adds	r1, r2, #1
 8009a38:	75f9      	strb	r1, [r7, #23]
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	440a      	add	r2, r1
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	75fa      	strb	r2, [r7, #23]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4413      	add	r3, r2
 8009a50:	2200      	movs	r2, #0
 8009a52:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1e8      	bne.n	8009a2e <USBD_GetString+0x4e>
    }
  }
}
 8009a5c:	bf00      	nop
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009a70:	e005      	b.n	8009a7e <USBD_GetLen+0x1a>
  {
    len++;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	3301      	adds	r3, #1
 8009a76:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1f5      	bne.n	8009a72 <USBD_GetLen+0xe>
  }

  return len;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr

08009a92 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009aa8:	88fa      	ldrh	r2, [r7, #6]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009aae:	88fa      	ldrh	r2, [r7, #6]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ab4:	88fb      	ldrh	r3, [r7, #6]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	2100      	movs	r1, #0
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 fcbf 	bl	800a43e <USBD_LL_Transmit>

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ad8:	88fb      	ldrh	r3, [r7, #6]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	2100      	movs	r1, #0
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fcad 	bl	800a43e <USBD_LL_Transmit>

  return USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	4613      	mov	r3, r2
 8009afa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2203      	movs	r2, #3
 8009b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009b04:	88fa      	ldrh	r2, [r7, #6]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009b0c:	88fa      	ldrh	r2, [r7, #6]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 fcb2 	bl	800a484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	4613      	mov	r3, r2
 8009b36:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b38:	88fb      	ldrh	r3, [r7, #6]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f000 fca0 	bl	800a484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2204      	movs	r2, #4
 8009b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b5e:	2300      	movs	r3, #0
 8009b60:	2200      	movs	r2, #0
 8009b62:	2100      	movs	r1, #0
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fc6a 	bl	800a43e <USBD_LL_Transmit>

  return USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2205      	movs	r2, #5
 8009b80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b84:	2300      	movs	r3, #0
 8009b86:	2200      	movs	r2, #0
 8009b88:	2100      	movs	r1, #0
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fc7a 	bl	800a484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	4912      	ldr	r1, [pc, #72]	; (8009bec <MX_USB_DEVICE_Init+0x50>)
 8009ba4:	4812      	ldr	r0, [pc, #72]	; (8009bf0 <MX_USB_DEVICE_Init+0x54>)
 8009ba6:	f7fe ff5f 	bl	8008a68 <USBD_Init>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009bb0:	f7f7 ff06 	bl	80019c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009bb4:	490f      	ldr	r1, [pc, #60]	; (8009bf4 <MX_USB_DEVICE_Init+0x58>)
 8009bb6:	480e      	ldr	r0, [pc, #56]	; (8009bf0 <MX_USB_DEVICE_Init+0x54>)
 8009bb8:	f7fe ff81 	bl	8008abe <USBD_RegisterClass>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009bc2:	f7f7 fefd 	bl	80019c0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009bc6:	490c      	ldr	r1, [pc, #48]	; (8009bf8 <MX_USB_DEVICE_Init+0x5c>)
 8009bc8:	4809      	ldr	r0, [pc, #36]	; (8009bf0 <MX_USB_DEVICE_Init+0x54>)
 8009bca:	f7fe ff37 	bl	8008a3c <USBD_CUSTOM_HID_RegisterInterface>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009bd4:	f7f7 fef4 	bl	80019c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009bd8:	4805      	ldr	r0, [pc, #20]	; (8009bf0 <MX_USB_DEVICE_Init+0x54>)
 8009bda:	f7fe ff89 	bl	8008af0 <USBD_Start>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009be4:	f7f7 feec 	bl	80019c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009be8:	bf00      	nop
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20000158 	.word	0x20000158
 8009bf0:	2000032c 	.word	0x2000032c
 8009bf4:	2000003c 	.word	0x2000003c
 8009bf8:	20000148 	.word	0x20000148

08009bfc <__NVIC_SystemReset>:
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009c00:	f3bf 8f4f 	dsb	sy
}
 8009c04:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009c06:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <__NVIC_SystemReset+0x24>)
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009c0e:	4904      	ldr	r1, [pc, #16]	; (8009c20 <__NVIC_SystemReset+0x24>)
 8009c10:	4b04      	ldr	r3, [pc, #16]	; (8009c24 <__NVIC_SystemReset+0x28>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c16:	f3bf 8f4f 	dsb	sy
}
 8009c1a:	bf00      	nop
    __NOP();
 8009c1c:	bf00      	nop
 8009c1e:	e7fd      	b.n	8009c1c <__NVIC_SystemReset+0x20>
 8009c20:	e000ed00 	.word	0xe000ed00
 8009c24:	05fa0004 	.word	0x05fa0004

08009c28 <save_to_flash>:
  */

/* USER CODE BEGIN PRIVATE_MACRO */

void save_to_flash(uint8_t *data)
{
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	b08f      	sub	sp, #60	; 0x3c
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	466b      	mov	r3, sp
 8009c34:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7f6 fa8a 	bl	8000150 <strlen>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	089e      	lsrs	r6, r3, #2
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7f6 fa85 	bl	8000150 <strlen>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f003 0303 	and.w	r3, r3, #3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	bf14      	ite	ne
 8009c50:	2301      	movne	r3, #1
 8009c52:	2300      	moveq	r3, #0
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	18f1      	adds	r1, r6, r3
 8009c58:	460b      	mov	r3, r1
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c5e:	2300      	movs	r3, #0
 8009c60:	4688      	mov	r8, r1
 8009c62:	4699      	mov	r9, r3
 8009c64:	f04f 0200 	mov.w	r2, #0
 8009c68:	f04f 0300 	mov.w	r3, #0
 8009c6c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009c70:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009c74:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009c78:	2300      	movs	r3, #0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	461d      	mov	r5, r3
 8009c7e:	f04f 0200 	mov.w	r2, #0
 8009c82:	f04f 0300 	mov.w	r3, #0
 8009c86:	016b      	lsls	r3, r5, #5
 8009c88:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009c8c:	0162      	lsls	r2, r4, #5
 8009c8e:	008b      	lsls	r3, r1, #2
 8009c90:	3307      	adds	r3, #7
 8009c92:	08db      	lsrs	r3, r3, #3
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	ebad 0d03 	sub.w	sp, sp, r3
 8009c9a:	466b      	mov	r3, sp
 8009c9c:	3303      	adds	r3, #3
 8009c9e:	089b      	lsrs	r3, r3, #2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8009ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ca6:	f7f6 fa53 	bl	8000150 <strlen>
 8009caa:	4603      	mov	r3, r0
 8009cac:	461a      	mov	r2, r3
 8009cae:	2100      	movs	r1, #0
 8009cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cb2:	f000 fc93 	bl	800a5dc <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cba:	f000 fcb7 	bl	800a62c <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8009cbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cc0:	f7f6 fa46 	bl	8000150 <strlen>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8009cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cca:	f7f6 fa41 	bl	8000150 <strlen>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bf14      	ite	ne
 8009cd8:	2301      	movne	r3, #1
 8009cda:	2300      	moveq	r3, #0
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8009ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7f6 fa34 	bl	8000150 <strlen>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 8009cec:	b29c      	uxth	r4, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7f6 fa2e 	bl	8000150 <strlen>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bf14      	ite	ne
 8009cfe:	2301      	movne	r3, #1
 8009d00:	2300      	moveq	r3, #0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	4423      	add	r3, r4
 8009d08:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8009d0a:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8009d0c:	f7f9 f81c 	bl	8002d48 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 8009d10:	f7f9 f850 	bl	8002db4 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8009d14:	2300      	movs	r3, #0
 8009d16:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 8009d18:	4b21      	ldr	r3, [pc, #132]	; (8009da0 <save_to_flash+0x178>)
 8009d1a:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 8009d1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	613b      	str	r3, [r7, #16]
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8009d2a:	f107 0214 	add.w	r2, r7, #20
 8009d2e:	f107 0318 	add.w	r3, r7, #24
 8009d32:	4611      	mov	r1, r2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7f9 f91b 	bl	8002f70 <HAL_FLASHEx_Erase>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	72fb      	strb	r3, [r7, #11]
	  while(index < data_length)
 8009d3e:	e020      	b.n	8009d82 <save_to_flash+0x15a>
	  {
		  if (status == HAL_OK)
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11c      	bne.n	8009d82 <save_to_flash+0x15a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8009d4e:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	469a      	mov	sl, r3
 8009d5e:	4693      	mov	fp, r2
 8009d60:	4652      	mov	r2, sl
 8009d62:	465b      	mov	r3, fp
 8009d64:	2002      	movs	r0, #2
 8009d66:	f7f8 ff7f 	bl	8002c68 <HAL_FLASH_Program>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d105      	bne.n	8009d82 <save_to_flash+0x15a>
			  {
				  write_cnt += 4;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	613b      	str	r3, [r7, #16]
				  index++;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
	  while(index < data_length)
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d3da      	bcc.n	8009d40 <save_to_flash+0x118>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8009d8a:	f7f9 f82f 	bl	8002dec <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 8009d8e:	f7f9 f801 	bl	8002d94 <HAL_FLASH_Lock>
 8009d92:	f8d7 d000 	ldr.w	sp, [r7]
}
 8009d96:	bf00      	nop
 8009d98:	373c      	adds	r7, #60	; 0x3c
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	08019000 	.word	0x08019000

08009da4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009da4:	b480      	push	{r7}
 8009da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009da8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bc80      	pop	{r7}
 8009db0:	4770      	bx	lr

08009db2 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009db2:	b480      	push	{r7}
 8009db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009db6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bc80      	pop	{r7}
 8009dbe:	4770      	bx	lr

08009dc0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
	//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

    static uint8_t position;
	static char * data_to_send[0xC0]; //0x40 * 3

    if (state[0] == 'I'){
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	2b49      	cmp	r3, #73	; 0x49
 8009dce:	d104      	bne.n	8009dda <CUSTOM_HID_OutEvent_FS+0x1a>
		position = 0;
 8009dd0:	4b14      	ldr	r3, [pc, #80]	; (8009e24 <CUSTOM_HID_OutEvent_FS+0x64>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]
		return 0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e01f      	b.n	8009e1a <CUSTOM_HID_OutEvent_FS+0x5a>
	}

    //char * buffer[0x40];
    //memcpy(buffer, state, 0x40);

    memcpy(&data_to_send[position], state, 0x40);
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <CUSTOM_HID_OutEvent_FS+0x64>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4a11      	ldr	r2, [pc, #68]	; (8009e28 <CUSTOM_HID_OutEvent_FS+0x68>)
 8009de2:	4413      	add	r3, r2
 8009de4:	2240      	movs	r2, #64	; 0x40
 8009de6:	6879      	ldr	r1, [r7, #4]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fbe9 	bl	800a5c0 <memcpy>
    position = position+16;
 8009dee:	4b0d      	ldr	r3, [pc, #52]	; (8009e24 <CUSTOM_HID_OutEvent_FS+0x64>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	3310      	adds	r3, #16
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <CUSTOM_HID_OutEvent_FS+0x64>)
 8009df8:	701a      	strb	r2, [r3, #0]

	if (position >= 48){  //informa que a terceira linha foi recebida
 8009dfa:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <CUSTOM_HID_OutEvent_FS+0x64>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	2b2f      	cmp	r3, #47	; 0x2f
 8009e00:	d90a      	bls.n	8009e18 <CUSTOM_HID_OutEvent_FS+0x58>
	    //HAL_UART_Transmit(&huart1, (uint8_t*) data_to_send, 0xC0, 100);
	    position = 0;
 8009e02:	4b08      	ldr	r3, [pc, #32]	; (8009e24 <CUSTOM_HID_OutEvent_FS+0x64>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	701a      	strb	r2, [r3, #0]
		save_to_flash((uint8_t *)data_to_send);
 8009e08:	4807      	ldr	r0, [pc, #28]	; (8009e28 <CUSTOM_HID_OutEvent_FS+0x68>)
 8009e0a:	f7ff ff0d 	bl	8009c28 <save_to_flash>
		HAL_Delay(200);
 8009e0e:	20c8      	movs	r0, #200	; 0xc8
 8009e10:	f7f8 f83e 	bl	8001e90 <HAL_Delay>
		NVIC_SystemReset();
 8009e14:	f7ff fef2 	bl	8009bfc <__NVIC_SystemReset>
//		#endif
//		  for(;;) {
//			/* wait until reset */
//		  }
	}
	return (USBD_OK);
 8009e18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	200005f0 	.word	0x200005f0
 8009e28:	200005f4 	.word	0x200005f4

08009e2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	6039      	str	r1, [r7, #0]
 8009e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2212      	movs	r2, #18
 8009e3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e3e:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	20000174 	.word	0x20000174

08009e50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	6039      	str	r1, [r7, #0]
 8009e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2204      	movs	r2, #4
 8009e60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e62:	4b03      	ldr	r3, [pc, #12]	; (8009e70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bc80      	pop	{r7}
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	20000188 	.word	0x20000188

08009e74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	6039      	str	r1, [r7, #0]
 8009e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d105      	bne.n	8009e92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	4907      	ldr	r1, [pc, #28]	; (8009ea8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e8a:	4808      	ldr	r0, [pc, #32]	; (8009eac <USBD_FS_ProductStrDescriptor+0x38>)
 8009e8c:	f7ff fda8 	bl	80099e0 <USBD_GetString>
 8009e90:	e004      	b.n	8009e9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	4904      	ldr	r1, [pc, #16]	; (8009ea8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e96:	4805      	ldr	r0, [pc, #20]	; (8009eac <USBD_FS_ProductStrDescriptor+0x38>)
 8009e98:	f7ff fda2 	bl	80099e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e9c:	4b02      	ldr	r3, [pc, #8]	; (8009ea8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	200008f4 	.word	0x200008f4
 8009eac:	0800bb94 	.word	0x0800bb94

08009eb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	6039      	str	r1, [r7, #0]
 8009eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	4904      	ldr	r1, [pc, #16]	; (8009ed0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ec0:	4804      	ldr	r0, [pc, #16]	; (8009ed4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ec2:	f7ff fd8d 	bl	80099e0 <USBD_GetString>
  return USBD_StrDesc;
 8009ec6:	4b02      	ldr	r3, [pc, #8]	; (8009ed0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	200008f4 	.word	0x200008f4
 8009ed4:	0800bba8 	.word	0x0800bba8

08009ed8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	6039      	str	r1, [r7, #0]
 8009ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	221a      	movs	r2, #26
 8009ee8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009eea:	f000 f843 	bl	8009f74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009eee:	4b02      	ldr	r3, [pc, #8]	; (8009ef8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	2000018c 	.word	0x2000018c

08009efc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	6039      	str	r1, [r7, #0]
 8009f06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d105      	bne.n	8009f1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	4907      	ldr	r1, [pc, #28]	; (8009f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f12:	4808      	ldr	r0, [pc, #32]	; (8009f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f14:	f7ff fd64 	bl	80099e0 <USBD_GetString>
 8009f18:	e004      	b.n	8009f24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	4904      	ldr	r1, [pc, #16]	; (8009f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f1e:	4805      	ldr	r0, [pc, #20]	; (8009f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f20:	f7ff fd5e 	bl	80099e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f24:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	200008f4 	.word	0x200008f4
 8009f34:	0800bbb8 	.word	0x0800bbb8

08009f38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f44:	79fb      	ldrb	r3, [r7, #7]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	4907      	ldr	r1, [pc, #28]	; (8009f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f4e:	4808      	ldr	r0, [pc, #32]	; (8009f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f50:	f7ff fd46 	bl	80099e0 <USBD_GetString>
 8009f54:	e004      	b.n	8009f60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	4904      	ldr	r1, [pc, #16]	; (8009f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f5a:	4805      	ldr	r0, [pc, #20]	; (8009f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f5c:	f7ff fd40 	bl	80099e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f60:	4b02      	ldr	r3, [pc, #8]	; (8009f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	200008f4 	.word	0x200008f4
 8009f70:	0800bbc4 	.word	0x0800bbc4

08009f74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f7a:	4b0f      	ldr	r3, [pc, #60]	; (8009fb8 <Get_SerialNum+0x44>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f80:	4b0e      	ldr	r3, [pc, #56]	; (8009fbc <Get_SerialNum+0x48>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f86:	4b0e      	ldr	r3, [pc, #56]	; (8009fc0 <Get_SerialNum+0x4c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4413      	add	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f9a:	2208      	movs	r2, #8
 8009f9c:	4909      	ldr	r1, [pc, #36]	; (8009fc4 <Get_SerialNum+0x50>)
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 f814 	bl	8009fcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fa4:	2204      	movs	r2, #4
 8009fa6:	4908      	ldr	r1, [pc, #32]	; (8009fc8 <Get_SerialNum+0x54>)
 8009fa8:	68b8      	ldr	r0, [r7, #8]
 8009faa:	f000 f80f 	bl	8009fcc <IntToUnicode>
  }
}
 8009fae:	bf00      	nop
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	1ffff7e8 	.word	0x1ffff7e8
 8009fbc:	1ffff7ec 	.word	0x1ffff7ec
 8009fc0:	1ffff7f0 	.word	0x1ffff7f0
 8009fc4:	2000018e 	.word	0x2000018e
 8009fc8:	2000019e 	.word	0x2000019e

08009fcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]
 8009fe2:	e027      	b.n	800a034 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	0f1b      	lsrs	r3, r3, #28
 8009fe8:	2b09      	cmp	r3, #9
 8009fea:	d80b      	bhi.n	800a004 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	0f1b      	lsrs	r3, r3, #28
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	440b      	add	r3, r1
 8009ffc:	3230      	adds	r2, #48	; 0x30
 8009ffe:	b2d2      	uxtb	r2, r2
 800a000:	701a      	strb	r2, [r3, #0]
 800a002:	e00a      	b.n	800a01a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	0f1b      	lsrs	r3, r3, #28
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	4619      	mov	r1, r3
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	440b      	add	r3, r1
 800a014:	3237      	adds	r2, #55	; 0x37
 800a016:	b2d2      	uxtb	r2, r2
 800a018:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	011b      	lsls	r3, r3, #4
 800a01e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	3301      	adds	r3, #1
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	4413      	add	r3, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	3301      	adds	r3, #1
 800a032:	75fb      	strb	r3, [r7, #23]
 800a034:	7dfa      	ldrb	r2, [r7, #23]
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d3d3      	bcc.n	8009fe4 <IntToUnicode+0x18>
  }
}
 800a03c:	bf00      	nop
 800a03e:	bf00      	nop
 800a040:	371c      	adds	r7, #28
 800a042:	46bd      	mov	sp, r7
 800a044:	bc80      	pop	{r7}
 800a046:	4770      	bx	lr

0800a048 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a0d      	ldr	r2, [pc, #52]	; (800a08c <HAL_PCD_MspInit+0x44>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d113      	bne.n	800a082 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a05a:	4b0d      	ldr	r3, [pc, #52]	; (800a090 <HAL_PCD_MspInit+0x48>)
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	4a0c      	ldr	r2, [pc, #48]	; (800a090 <HAL_PCD_MspInit+0x48>)
 800a060:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a064:	61d3      	str	r3, [r2, #28]
 800a066:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <HAL_PCD_MspInit+0x48>)
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a072:	2200      	movs	r2, #0
 800a074:	2100      	movs	r1, #0
 800a076:	2014      	movs	r0, #20
 800a078:	f7f8 fbd1 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a07c:	2014      	movs	r0, #20
 800a07e:	f7f8 fbea 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	40005c00 	.word	0x40005c00
 800a090:	40021000 	.word	0x40021000

0800a094 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f7fe fd68 	bl	8008b80 <USBD_LL_SetupStage>
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a0ca:	78fa      	ldrb	r2, [r7, #3]
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	440b      	add	r3, r1
 800a0d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f7fe fd9a 	bl	8008c1a <USBD_LL_DataOutStage>
}
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	440b      	add	r3, r1
 800a10e:	333c      	adds	r3, #60	; 0x3c
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	4619      	mov	r1, r3
 800a116:	f7fe fdf1 	bl	8008cfc <USBD_LL_DataInStage>
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe ff01 	bl	8008f38 <USBD_LL_SOF>
}
 800a136:	bf00      	nop
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a146:	2301      	movs	r3, #1
 800a148:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d001      	beq.n	800a156 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a152:	f7f7 fc35 	bl	80019c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a15c:	7bfa      	ldrb	r2, [r7, #15]
 800a15e:	4611      	mov	r1, r2
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe feb1 	bl	8008ec8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe fe6a 	bl	8008e46 <USBD_LL_Reset>
}
 800a172:	bf00      	nop
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe feab 	bl	8008ee6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d005      	beq.n	800a1a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a198:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <HAL_PCD_SuspendCallback+0x30>)
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	4a03      	ldr	r2, [pc, #12]	; (800a1ac <HAL_PCD_SuspendCallback+0x30>)
 800a19e:	f043 0306 	orr.w	r3, r3, #6
 800a1a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1a4:	bf00      	nop
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	e000ed00 	.word	0xe000ed00

0800a1b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe fea5 	bl	8008f0e <USBD_LL_Resume>
}
 800a1c4:	bf00      	nop
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a1d4:	4a23      	ldr	r2, [pc, #140]	; (800a264 <USBD_LL_Init+0x98>)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a21      	ldr	r2, [pc, #132]	; (800a264 <USBD_LL_Init+0x98>)
 800a1e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a1e4:	4b1f      	ldr	r3, [pc, #124]	; (800a264 <USBD_LL_Init+0x98>)
 800a1e6:	4a20      	ldr	r2, [pc, #128]	; (800a268 <USBD_LL_Init+0x9c>)
 800a1e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a1ea:	4b1e      	ldr	r3, [pc, #120]	; (800a264 <USBD_LL_Init+0x98>)
 800a1ec:	2208      	movs	r2, #8
 800a1ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a1f0:	4b1c      	ldr	r3, [pc, #112]	; (800a264 <USBD_LL_Init+0x98>)
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a1f6:	4b1b      	ldr	r3, [pc, #108]	; (800a264 <USBD_LL_Init+0x98>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a1fc:	4b19      	ldr	r3, [pc, #100]	; (800a264 <USBD_LL_Init+0x98>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a202:	4b18      	ldr	r3, [pc, #96]	; (800a264 <USBD_LL_Init+0x98>)
 800a204:	2200      	movs	r2, #0
 800a206:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a208:	4816      	ldr	r0, [pc, #88]	; (800a264 <USBD_LL_Init+0x98>)
 800a20a:	f7f9 f8f5 	bl	80033f8 <HAL_PCD_Init>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a214:	f7f7 fbd4 	bl	80019c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a21e:	2318      	movs	r3, #24
 800a220:	2200      	movs	r2, #0
 800a222:	2100      	movs	r1, #0
 800a224:	f7fa fd52 	bl	8004ccc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a22e:	2358      	movs	r3, #88	; 0x58
 800a230:	2200      	movs	r2, #0
 800a232:	2180      	movs	r1, #128	; 0x80
 800a234:	f7fa fd4a 	bl	8004ccc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a23e:	2398      	movs	r3, #152	; 0x98
 800a240:	2200      	movs	r2, #0
 800a242:	2181      	movs	r1, #129	; 0x81
 800a244:	f7fa fd42 	bl	8004ccc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a24e:	23d8      	movs	r3, #216	; 0xd8
 800a250:	2200      	movs	r2, #0
 800a252:	2101      	movs	r1, #1
 800a254:	f7fa fd3a 	bl	8004ccc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000af4 	.word	0x20000af4
 800a268:	40005c00 	.word	0x40005c00

0800a26c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a282:	4618      	mov	r0, r3
 800a284:	f7f9 f9c3 	bl	800360e <HAL_PCD_Start>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f93c 	bl	800a50c <USBD_Get_USB_Status>
 800a294:	4603      	mov	r3, r0
 800a296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a298:	7bbb      	ldrb	r3, [r7, #14]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	70fb      	strb	r3, [r7, #3]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70bb      	strb	r3, [r7, #2]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2ca:	78bb      	ldrb	r3, [r7, #2]
 800a2cc:	883a      	ldrh	r2, [r7, #0]
 800a2ce:	78f9      	ldrb	r1, [r7, #3]
 800a2d0:	f7f9 fb3b 	bl	800394a <HAL_PCD_EP_Open>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 f916 	bl	800a50c <USBD_Get_USB_Status>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a308:	78fa      	ldrb	r2, [r7, #3]
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7f9 fb82 	bl	8003a16 <HAL_PCD_EP_Close>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 f8f7 	bl	800a50c <USBD_Get_USB_Status>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a322:	7bbb      	ldrb	r3, [r7, #14]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a338:	2300      	movs	r3, #0
 800a33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a346:	78fa      	ldrb	r2, [r7, #3]
 800a348:	4611      	mov	r1, r2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7f9 fc2b 	bl	8003ba6 <HAL_PCD_EP_SetStall>
 800a350:	4603      	mov	r3, r0
 800a352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	4618      	mov	r0, r3
 800a358:	f000 f8d8 	bl	800a50c <USBD_Get_USB_Status>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a360:	7bbb      	ldrb	r3, [r7, #14]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	460b      	mov	r3, r1
 800a374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a384:	78fa      	ldrb	r2, [r7, #3]
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f7f9 fc6c 	bl	8003c66 <HAL_PCD_EP_ClrStall>
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f8b9 	bl	800a50c <USBD_Get_USB_Status>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	da0c      	bge.n	800a3de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	1c5a      	adds	r2, r3, #1
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	00db      	lsls	r3, r3, #3
 800a3d6:	440b      	add	r3, r1
 800a3d8:	3302      	adds	r3, #2
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	e00b      	b.n	800a3f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3de:	78fb      	ldrb	r3, [r7, #3]
 800a3e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3e4:	68f9      	ldr	r1, [r7, #12]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	440b      	add	r3, r1
 800a3f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a3f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bc80      	pop	{r7}
 800a3fe:	4770      	bx	lr

0800a400 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a41a:	78fa      	ldrb	r2, [r7, #3]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f9 fa6e 	bl	8003900 <HAL_PCD_SetAddress>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 f86e 	bl	800a50c <USBD_Get_USB_Status>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a434:	7bbb      	ldrb	r3, [r7, #14]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b086      	sub	sp, #24
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	461a      	mov	r2, r3
 800a44a:	460b      	mov	r3, r1
 800a44c:	72fb      	strb	r3, [r7, #11]
 800a44e:	4613      	mov	r3, r2
 800a450:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a460:	893b      	ldrh	r3, [r7, #8]
 800a462:	7af9      	ldrb	r1, [r7, #11]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	f7f9 fb5b 	bl	8003b20 <HAL_PCD_EP_Transmit>
 800a46a:	4603      	mov	r3, r0
 800a46c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
 800a470:	4618      	mov	r0, r3
 800a472:	f000 f84b 	bl	800a50c <USBD_Get_USB_Status>
 800a476:	4603      	mov	r3, r0
 800a478:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a47a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	461a      	mov	r2, r3
 800a490:	460b      	mov	r3, r1
 800a492:	72fb      	strb	r3, [r7, #11]
 800a494:	4613      	mov	r3, r2
 800a496:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4a6:	893b      	ldrh	r3, [r7, #8]
 800a4a8:	7af9      	ldrb	r1, [r7, #11]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	f7f9 fafb 	bl	8003aa6 <HAL_PCD_EP_Receive>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 f828 	bl	800a50c <USBD_Get_USB_Status>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a4d4:	4b02      	ldr	r3, [pc, #8]	; (800a4e0 <USBD_static_malloc+0x14>)
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr
 800a4e0:	20000de0 	.word	0x20000de0

0800a4e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bc80      	pop	{r7}
 800a4f4:	4770      	bx	lr

0800a4f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b083      	sub	sp, #12
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	bc80      	pop	{r7}
 800a50a:	4770      	bx	lr

0800a50c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d817      	bhi.n	800a550 <USBD_Get_USB_Status+0x44>
 800a520:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <USBD_Get_USB_Status+0x1c>)
 800a522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a526:	bf00      	nop
 800a528:	0800a539 	.word	0x0800a539
 800a52c:	0800a53f 	.word	0x0800a53f
 800a530:	0800a545 	.word	0x0800a545
 800a534:	0800a54b 	.word	0x0800a54b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
    break;
 800a53c:	e00b      	b.n	800a556 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a53e:	2302      	movs	r3, #2
 800a540:	73fb      	strb	r3, [r7, #15]
    break;
 800a542:	e008      	b.n	800a556 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a544:	2301      	movs	r3, #1
 800a546:	73fb      	strb	r3, [r7, #15]
    break;
 800a548:	e005      	b.n	800a556 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a54a:	2302      	movs	r3, #2
 800a54c:	73fb      	strb	r3, [r7, #15]
    break;
 800a54e:	e002      	b.n	800a556 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a550:	2302      	movs	r3, #2
 800a552:	73fb      	strb	r3, [r7, #15]
    break;
 800a554:	bf00      	nop
  }
  return usb_status;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bc80      	pop	{r7}
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop

0800a564 <atoi>:
 800a564:	220a      	movs	r2, #10
 800a566:	2100      	movs	r1, #0
 800a568:	f000 b940 	b.w	800a7ec <strtol>

0800a56c <__errno>:
 800a56c:	4b01      	ldr	r3, [pc, #4]	; (800a574 <__errno+0x8>)
 800a56e:	6818      	ldr	r0, [r3, #0]
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	200001a8 	.word	0x200001a8

0800a578 <__libc_init_array>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	2600      	movs	r6, #0
 800a57c:	4d0c      	ldr	r5, [pc, #48]	; (800a5b0 <__libc_init_array+0x38>)
 800a57e:	4c0d      	ldr	r4, [pc, #52]	; (800a5b4 <__libc_init_array+0x3c>)
 800a580:	1b64      	subs	r4, r4, r5
 800a582:	10a4      	asrs	r4, r4, #2
 800a584:	42a6      	cmp	r6, r4
 800a586:	d109      	bne.n	800a59c <__libc_init_array+0x24>
 800a588:	f001 fae8 	bl	800bb5c <_init>
 800a58c:	2600      	movs	r6, #0
 800a58e:	4d0a      	ldr	r5, [pc, #40]	; (800a5b8 <__libc_init_array+0x40>)
 800a590:	4c0a      	ldr	r4, [pc, #40]	; (800a5bc <__libc_init_array+0x44>)
 800a592:	1b64      	subs	r4, r4, r5
 800a594:	10a4      	asrs	r4, r4, #2
 800a596:	42a6      	cmp	r6, r4
 800a598:	d105      	bne.n	800a5a6 <__libc_init_array+0x2e>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a0:	4798      	blx	r3
 800a5a2:	3601      	adds	r6, #1
 800a5a4:	e7ee      	b.n	800a584 <__libc_init_array+0xc>
 800a5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5aa:	4798      	blx	r3
 800a5ac:	3601      	adds	r6, #1
 800a5ae:	e7f2      	b.n	800a596 <__libc_init_array+0x1e>
 800a5b0:	0800be38 	.word	0x0800be38
 800a5b4:	0800be38 	.word	0x0800be38
 800a5b8:	0800be38 	.word	0x0800be38
 800a5bc:	0800be3c 	.word	0x0800be3c

0800a5c0 <memcpy>:
 800a5c0:	440a      	add	r2, r1
 800a5c2:	4291      	cmp	r1, r2
 800a5c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5c8:	d100      	bne.n	800a5cc <memcpy+0xc>
 800a5ca:	4770      	bx	lr
 800a5cc:	b510      	push	{r4, lr}
 800a5ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d2:	4291      	cmp	r1, r2
 800a5d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5d8:	d1f9      	bne.n	800a5ce <memcpy+0xe>
 800a5da:	bd10      	pop	{r4, pc}

0800a5dc <memset>:
 800a5dc:	4603      	mov	r3, r0
 800a5de:	4402      	add	r2, r0
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d100      	bne.n	800a5e6 <memset+0xa>
 800a5e4:	4770      	bx	lr
 800a5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ea:	e7f9      	b.n	800a5e0 <memset+0x4>

0800a5ec <siprintf>:
 800a5ec:	b40e      	push	{r1, r2, r3}
 800a5ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5f2:	b500      	push	{lr}
 800a5f4:	b09c      	sub	sp, #112	; 0x70
 800a5f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a5f8:	9002      	str	r0, [sp, #8]
 800a5fa:	9006      	str	r0, [sp, #24]
 800a5fc:	9107      	str	r1, [sp, #28]
 800a5fe:	9104      	str	r1, [sp, #16]
 800a600:	4808      	ldr	r0, [pc, #32]	; (800a624 <siprintf+0x38>)
 800a602:	4909      	ldr	r1, [pc, #36]	; (800a628 <siprintf+0x3c>)
 800a604:	f853 2b04 	ldr.w	r2, [r3], #4
 800a608:	9105      	str	r1, [sp, #20]
 800a60a:	6800      	ldr	r0, [r0, #0]
 800a60c:	a902      	add	r1, sp, #8
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	f000 fa66 	bl	800aae0 <_svfiprintf_r>
 800a614:	2200      	movs	r2, #0
 800a616:	9b02      	ldr	r3, [sp, #8]
 800a618:	701a      	strb	r2, [r3, #0]
 800a61a:	b01c      	add	sp, #112	; 0x70
 800a61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a620:	b003      	add	sp, #12
 800a622:	4770      	bx	lr
 800a624:	200001a8 	.word	0x200001a8
 800a628:	ffff0208 	.word	0xffff0208

0800a62c <strcpy>:
 800a62c:	4603      	mov	r3, r0
 800a62e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a632:	f803 2b01 	strb.w	r2, [r3], #1
 800a636:	2a00      	cmp	r2, #0
 800a638:	d1f9      	bne.n	800a62e <strcpy+0x2>
 800a63a:	4770      	bx	lr

0800a63c <strtok>:
 800a63c:	4b16      	ldr	r3, [pc, #88]	; (800a698 <strtok+0x5c>)
 800a63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a642:	681f      	ldr	r7, [r3, #0]
 800a644:	4605      	mov	r5, r0
 800a646:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a648:	460e      	mov	r6, r1
 800a64a:	b9ec      	cbnz	r4, 800a688 <strtok+0x4c>
 800a64c:	2050      	movs	r0, #80	; 0x50
 800a64e:	f000 f907 	bl	800a860 <malloc>
 800a652:	4602      	mov	r2, r0
 800a654:	65b8      	str	r0, [r7, #88]	; 0x58
 800a656:	b920      	cbnz	r0, 800a662 <strtok+0x26>
 800a658:	2157      	movs	r1, #87	; 0x57
 800a65a:	4b10      	ldr	r3, [pc, #64]	; (800a69c <strtok+0x60>)
 800a65c:	4810      	ldr	r0, [pc, #64]	; (800a6a0 <strtok+0x64>)
 800a65e:	f000 f8cf 	bl	800a800 <__assert_func>
 800a662:	e9c0 4400 	strd	r4, r4, [r0]
 800a666:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a66a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a66e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a672:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a676:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a67a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a67e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a682:	6184      	str	r4, [r0, #24]
 800a684:	7704      	strb	r4, [r0, #28]
 800a686:	6244      	str	r4, [r0, #36]	; 0x24
 800a688:	4631      	mov	r1, r6
 800a68a:	4628      	mov	r0, r5
 800a68c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a68e:	2301      	movs	r3, #1
 800a690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	f000 b806 	b.w	800a6a4 <__strtok_r>
 800a698:	200001a8 	.word	0x200001a8
 800a69c:	0800bbf4 	.word	0x0800bbf4
 800a6a0:	0800bc0b 	.word	0x0800bc0b

0800a6a4 <__strtok_r>:
 800a6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6a6:	b908      	cbnz	r0, 800a6ac <__strtok_r+0x8>
 800a6a8:	6810      	ldr	r0, [r2, #0]
 800a6aa:	b188      	cbz	r0, 800a6d0 <__strtok_r+0x2c>
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	460f      	mov	r7, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a6b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a6ba:	b91e      	cbnz	r6, 800a6c4 <__strtok_r+0x20>
 800a6bc:	b965      	cbnz	r5, 800a6d8 <__strtok_r+0x34>
 800a6be:	4628      	mov	r0, r5
 800a6c0:	6015      	str	r5, [r2, #0]
 800a6c2:	e005      	b.n	800a6d0 <__strtok_r+0x2c>
 800a6c4:	42b5      	cmp	r5, r6
 800a6c6:	d1f6      	bne.n	800a6b6 <__strtok_r+0x12>
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1f0      	bne.n	800a6ae <__strtok_r+0xa>
 800a6cc:	6014      	str	r4, [r2, #0]
 800a6ce:	7003      	strb	r3, [r0, #0]
 800a6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d2:	461c      	mov	r4, r3
 800a6d4:	e00c      	b.n	800a6f0 <__strtok_r+0x4c>
 800a6d6:	b915      	cbnz	r5, 800a6de <__strtok_r+0x3a>
 800a6d8:	460e      	mov	r6, r1
 800a6da:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6de:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a6e2:	42ab      	cmp	r3, r5
 800a6e4:	d1f7      	bne.n	800a6d6 <__strtok_r+0x32>
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0f3      	beq.n	800a6d2 <__strtok_r+0x2e>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a6f0:	6014      	str	r4, [r2, #0]
 800a6f2:	e7ed      	b.n	800a6d0 <__strtok_r+0x2c>

0800a6f4 <_strtol_l.constprop.0>:
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fa:	4680      	mov	r8, r0
 800a6fc:	d001      	beq.n	800a702 <_strtol_l.constprop.0+0xe>
 800a6fe:	2b24      	cmp	r3, #36	; 0x24
 800a700:	d906      	bls.n	800a710 <_strtol_l.constprop.0+0x1c>
 800a702:	f7ff ff33 	bl	800a56c <__errno>
 800a706:	2316      	movs	r3, #22
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	2000      	movs	r0, #0
 800a70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a710:	460d      	mov	r5, r1
 800a712:	4f35      	ldr	r7, [pc, #212]	; (800a7e8 <_strtol_l.constprop.0+0xf4>)
 800a714:	4628      	mov	r0, r5
 800a716:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a71a:	5de6      	ldrb	r6, [r4, r7]
 800a71c:	f016 0608 	ands.w	r6, r6, #8
 800a720:	d1f8      	bne.n	800a714 <_strtol_l.constprop.0+0x20>
 800a722:	2c2d      	cmp	r4, #45	; 0x2d
 800a724:	d12f      	bne.n	800a786 <_strtol_l.constprop.0+0x92>
 800a726:	2601      	movs	r6, #1
 800a728:	782c      	ldrb	r4, [r5, #0]
 800a72a:	1c85      	adds	r5, r0, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d057      	beq.n	800a7e0 <_strtol_l.constprop.0+0xec>
 800a730:	2b10      	cmp	r3, #16
 800a732:	d109      	bne.n	800a748 <_strtol_l.constprop.0+0x54>
 800a734:	2c30      	cmp	r4, #48	; 0x30
 800a736:	d107      	bne.n	800a748 <_strtol_l.constprop.0+0x54>
 800a738:	7828      	ldrb	r0, [r5, #0]
 800a73a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a73e:	2858      	cmp	r0, #88	; 0x58
 800a740:	d149      	bne.n	800a7d6 <_strtol_l.constprop.0+0xe2>
 800a742:	2310      	movs	r3, #16
 800a744:	786c      	ldrb	r4, [r5, #1]
 800a746:	3502      	adds	r5, #2
 800a748:	2700      	movs	r7, #0
 800a74a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a74e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a752:	fbbe f9f3 	udiv	r9, lr, r3
 800a756:	4638      	mov	r0, r7
 800a758:	fb03 ea19 	mls	sl, r3, r9, lr
 800a75c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a760:	f1bc 0f09 	cmp.w	ip, #9
 800a764:	d814      	bhi.n	800a790 <_strtol_l.constprop.0+0x9c>
 800a766:	4664      	mov	r4, ip
 800a768:	42a3      	cmp	r3, r4
 800a76a:	dd22      	ble.n	800a7b2 <_strtol_l.constprop.0+0xbe>
 800a76c:	2f00      	cmp	r7, #0
 800a76e:	db1d      	blt.n	800a7ac <_strtol_l.constprop.0+0xb8>
 800a770:	4581      	cmp	r9, r0
 800a772:	d31b      	bcc.n	800a7ac <_strtol_l.constprop.0+0xb8>
 800a774:	d101      	bne.n	800a77a <_strtol_l.constprop.0+0x86>
 800a776:	45a2      	cmp	sl, r4
 800a778:	db18      	blt.n	800a7ac <_strtol_l.constprop.0+0xb8>
 800a77a:	2701      	movs	r7, #1
 800a77c:	fb00 4003 	mla	r0, r0, r3, r4
 800a780:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a784:	e7ea      	b.n	800a75c <_strtol_l.constprop.0+0x68>
 800a786:	2c2b      	cmp	r4, #43	; 0x2b
 800a788:	bf04      	itt	eq
 800a78a:	782c      	ldrbeq	r4, [r5, #0]
 800a78c:	1c85      	addeq	r5, r0, #2
 800a78e:	e7cd      	b.n	800a72c <_strtol_l.constprop.0+0x38>
 800a790:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a794:	f1bc 0f19 	cmp.w	ip, #25
 800a798:	d801      	bhi.n	800a79e <_strtol_l.constprop.0+0xaa>
 800a79a:	3c37      	subs	r4, #55	; 0x37
 800a79c:	e7e4      	b.n	800a768 <_strtol_l.constprop.0+0x74>
 800a79e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a7a2:	f1bc 0f19 	cmp.w	ip, #25
 800a7a6:	d804      	bhi.n	800a7b2 <_strtol_l.constprop.0+0xbe>
 800a7a8:	3c57      	subs	r4, #87	; 0x57
 800a7aa:	e7dd      	b.n	800a768 <_strtol_l.constprop.0+0x74>
 800a7ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a7b0:	e7e6      	b.n	800a780 <_strtol_l.constprop.0+0x8c>
 800a7b2:	2f00      	cmp	r7, #0
 800a7b4:	da07      	bge.n	800a7c6 <_strtol_l.constprop.0+0xd2>
 800a7b6:	2322      	movs	r3, #34	; 0x22
 800a7b8:	4670      	mov	r0, lr
 800a7ba:	f8c8 3000 	str.w	r3, [r8]
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	d0a4      	beq.n	800a70c <_strtol_l.constprop.0+0x18>
 800a7c2:	1e69      	subs	r1, r5, #1
 800a7c4:	e005      	b.n	800a7d2 <_strtol_l.constprop.0+0xde>
 800a7c6:	b106      	cbz	r6, 800a7ca <_strtol_l.constprop.0+0xd6>
 800a7c8:	4240      	negs	r0, r0
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	d09e      	beq.n	800a70c <_strtol_l.constprop.0+0x18>
 800a7ce:	2f00      	cmp	r7, #0
 800a7d0:	d1f7      	bne.n	800a7c2 <_strtol_l.constprop.0+0xce>
 800a7d2:	6011      	str	r1, [r2, #0]
 800a7d4:	e79a      	b.n	800a70c <_strtol_l.constprop.0+0x18>
 800a7d6:	2430      	movs	r4, #48	; 0x30
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1b5      	bne.n	800a748 <_strtol_l.constprop.0+0x54>
 800a7dc:	2308      	movs	r3, #8
 800a7de:	e7b3      	b.n	800a748 <_strtol_l.constprop.0+0x54>
 800a7e0:	2c30      	cmp	r4, #48	; 0x30
 800a7e2:	d0a9      	beq.n	800a738 <_strtol_l.constprop.0+0x44>
 800a7e4:	230a      	movs	r3, #10
 800a7e6:	e7af      	b.n	800a748 <_strtol_l.constprop.0+0x54>
 800a7e8:	0800bca5 	.word	0x0800bca5

0800a7ec <strtol>:
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	460a      	mov	r2, r1
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	4802      	ldr	r0, [pc, #8]	; (800a7fc <strtol+0x10>)
 800a7f4:	6800      	ldr	r0, [r0, #0]
 800a7f6:	f7ff bf7d 	b.w	800a6f4 <_strtol_l.constprop.0>
 800a7fa:	bf00      	nop
 800a7fc:	200001a8 	.word	0x200001a8

0800a800 <__assert_func>:
 800a800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a802:	4614      	mov	r4, r2
 800a804:	461a      	mov	r2, r3
 800a806:	4b09      	ldr	r3, [pc, #36]	; (800a82c <__assert_func+0x2c>)
 800a808:	4605      	mov	r5, r0
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68d8      	ldr	r0, [r3, #12]
 800a80e:	b14c      	cbz	r4, 800a824 <__assert_func+0x24>
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <__assert_func+0x30>)
 800a812:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a816:	9100      	str	r1, [sp, #0]
 800a818:	462b      	mov	r3, r5
 800a81a:	4906      	ldr	r1, [pc, #24]	; (800a834 <__assert_func+0x34>)
 800a81c:	f000 f80e 	bl	800a83c <fiprintf>
 800a820:	f000 fe1c 	bl	800b45c <abort>
 800a824:	4b04      	ldr	r3, [pc, #16]	; (800a838 <__assert_func+0x38>)
 800a826:	461c      	mov	r4, r3
 800a828:	e7f3      	b.n	800a812 <__assert_func+0x12>
 800a82a:	bf00      	nop
 800a82c:	200001a8 	.word	0x200001a8
 800a830:	0800bc68 	.word	0x0800bc68
 800a834:	0800bc75 	.word	0x0800bc75
 800a838:	0800bca3 	.word	0x0800bca3

0800a83c <fiprintf>:
 800a83c:	b40e      	push	{r1, r2, r3}
 800a83e:	b503      	push	{r0, r1, lr}
 800a840:	4601      	mov	r1, r0
 800a842:	ab03      	add	r3, sp, #12
 800a844:	4805      	ldr	r0, [pc, #20]	; (800a85c <fiprintf+0x20>)
 800a846:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	f000 fa6f 	bl	800ad30 <_vfiprintf_r>
 800a852:	b002      	add	sp, #8
 800a854:	f85d eb04 	ldr.w	lr, [sp], #4
 800a858:	b003      	add	sp, #12
 800a85a:	4770      	bx	lr
 800a85c:	200001a8 	.word	0x200001a8

0800a860 <malloc>:
 800a860:	4b02      	ldr	r3, [pc, #8]	; (800a86c <malloc+0xc>)
 800a862:	4601      	mov	r1, r0
 800a864:	6818      	ldr	r0, [r3, #0]
 800a866:	f000 b86b 	b.w	800a940 <_malloc_r>
 800a86a:	bf00      	nop
 800a86c:	200001a8 	.word	0x200001a8

0800a870 <_free_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4605      	mov	r5, r0
 800a874:	2900      	cmp	r1, #0
 800a876:	d040      	beq.n	800a8fa <_free_r+0x8a>
 800a878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a87c:	1f0c      	subs	r4, r1, #4
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bfb8      	it	lt
 800a882:	18e4      	addlt	r4, r4, r3
 800a884:	f001 f836 	bl	800b8f4 <__malloc_lock>
 800a888:	4a1c      	ldr	r2, [pc, #112]	; (800a8fc <_free_r+0x8c>)
 800a88a:	6813      	ldr	r3, [r2, #0]
 800a88c:	b933      	cbnz	r3, 800a89c <_free_r+0x2c>
 800a88e:	6063      	str	r3, [r4, #4]
 800a890:	6014      	str	r4, [r2, #0]
 800a892:	4628      	mov	r0, r5
 800a894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a898:	f001 b832 	b.w	800b900 <__malloc_unlock>
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	d908      	bls.n	800a8b2 <_free_r+0x42>
 800a8a0:	6820      	ldr	r0, [r4, #0]
 800a8a2:	1821      	adds	r1, r4, r0
 800a8a4:	428b      	cmp	r3, r1
 800a8a6:	bf01      	itttt	eq
 800a8a8:	6819      	ldreq	r1, [r3, #0]
 800a8aa:	685b      	ldreq	r3, [r3, #4]
 800a8ac:	1809      	addeq	r1, r1, r0
 800a8ae:	6021      	streq	r1, [r4, #0]
 800a8b0:	e7ed      	b.n	800a88e <_free_r+0x1e>
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	b10b      	cbz	r3, 800a8bc <_free_r+0x4c>
 800a8b8:	42a3      	cmp	r3, r4
 800a8ba:	d9fa      	bls.n	800a8b2 <_free_r+0x42>
 800a8bc:	6811      	ldr	r1, [r2, #0]
 800a8be:	1850      	adds	r0, r2, r1
 800a8c0:	42a0      	cmp	r0, r4
 800a8c2:	d10b      	bne.n	800a8dc <_free_r+0x6c>
 800a8c4:	6820      	ldr	r0, [r4, #0]
 800a8c6:	4401      	add	r1, r0
 800a8c8:	1850      	adds	r0, r2, r1
 800a8ca:	4283      	cmp	r3, r0
 800a8cc:	6011      	str	r1, [r2, #0]
 800a8ce:	d1e0      	bne.n	800a892 <_free_r+0x22>
 800a8d0:	6818      	ldr	r0, [r3, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	4401      	add	r1, r0
 800a8d6:	6011      	str	r1, [r2, #0]
 800a8d8:	6053      	str	r3, [r2, #4]
 800a8da:	e7da      	b.n	800a892 <_free_r+0x22>
 800a8dc:	d902      	bls.n	800a8e4 <_free_r+0x74>
 800a8de:	230c      	movs	r3, #12
 800a8e0:	602b      	str	r3, [r5, #0]
 800a8e2:	e7d6      	b.n	800a892 <_free_r+0x22>
 800a8e4:	6820      	ldr	r0, [r4, #0]
 800a8e6:	1821      	adds	r1, r4, r0
 800a8e8:	428b      	cmp	r3, r1
 800a8ea:	bf01      	itttt	eq
 800a8ec:	6819      	ldreq	r1, [r3, #0]
 800a8ee:	685b      	ldreq	r3, [r3, #4]
 800a8f0:	1809      	addeq	r1, r1, r0
 800a8f2:	6021      	streq	r1, [r4, #0]
 800a8f4:	6063      	str	r3, [r4, #4]
 800a8f6:	6054      	str	r4, [r2, #4]
 800a8f8:	e7cb      	b.n	800a892 <_free_r+0x22>
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20000e38 	.word	0x20000e38

0800a900 <sbrk_aligned>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	4e0e      	ldr	r6, [pc, #56]	; (800a93c <sbrk_aligned+0x3c>)
 800a904:	460c      	mov	r4, r1
 800a906:	6831      	ldr	r1, [r6, #0]
 800a908:	4605      	mov	r5, r0
 800a90a:	b911      	cbnz	r1, 800a912 <sbrk_aligned+0x12>
 800a90c:	f000 fcd6 	bl	800b2bc <_sbrk_r>
 800a910:	6030      	str	r0, [r6, #0]
 800a912:	4621      	mov	r1, r4
 800a914:	4628      	mov	r0, r5
 800a916:	f000 fcd1 	bl	800b2bc <_sbrk_r>
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	d00a      	beq.n	800a934 <sbrk_aligned+0x34>
 800a91e:	1cc4      	adds	r4, r0, #3
 800a920:	f024 0403 	bic.w	r4, r4, #3
 800a924:	42a0      	cmp	r0, r4
 800a926:	d007      	beq.n	800a938 <sbrk_aligned+0x38>
 800a928:	1a21      	subs	r1, r4, r0
 800a92a:	4628      	mov	r0, r5
 800a92c:	f000 fcc6 	bl	800b2bc <_sbrk_r>
 800a930:	3001      	adds	r0, #1
 800a932:	d101      	bne.n	800a938 <sbrk_aligned+0x38>
 800a934:	f04f 34ff 	mov.w	r4, #4294967295
 800a938:	4620      	mov	r0, r4
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	20000e3c 	.word	0x20000e3c

0800a940 <_malloc_r>:
 800a940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a944:	1ccd      	adds	r5, r1, #3
 800a946:	f025 0503 	bic.w	r5, r5, #3
 800a94a:	3508      	adds	r5, #8
 800a94c:	2d0c      	cmp	r5, #12
 800a94e:	bf38      	it	cc
 800a950:	250c      	movcc	r5, #12
 800a952:	2d00      	cmp	r5, #0
 800a954:	4607      	mov	r7, r0
 800a956:	db01      	blt.n	800a95c <_malloc_r+0x1c>
 800a958:	42a9      	cmp	r1, r5
 800a95a:	d905      	bls.n	800a968 <_malloc_r+0x28>
 800a95c:	230c      	movs	r3, #12
 800a95e:	2600      	movs	r6, #0
 800a960:	603b      	str	r3, [r7, #0]
 800a962:	4630      	mov	r0, r6
 800a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a968:	4e2e      	ldr	r6, [pc, #184]	; (800aa24 <_malloc_r+0xe4>)
 800a96a:	f000 ffc3 	bl	800b8f4 <__malloc_lock>
 800a96e:	6833      	ldr	r3, [r6, #0]
 800a970:	461c      	mov	r4, r3
 800a972:	bb34      	cbnz	r4, 800a9c2 <_malloc_r+0x82>
 800a974:	4629      	mov	r1, r5
 800a976:	4638      	mov	r0, r7
 800a978:	f7ff ffc2 	bl	800a900 <sbrk_aligned>
 800a97c:	1c43      	adds	r3, r0, #1
 800a97e:	4604      	mov	r4, r0
 800a980:	d14d      	bne.n	800aa1e <_malloc_r+0xde>
 800a982:	6834      	ldr	r4, [r6, #0]
 800a984:	4626      	mov	r6, r4
 800a986:	2e00      	cmp	r6, #0
 800a988:	d140      	bne.n	800aa0c <_malloc_r+0xcc>
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	4631      	mov	r1, r6
 800a98e:	4638      	mov	r0, r7
 800a990:	eb04 0803 	add.w	r8, r4, r3
 800a994:	f000 fc92 	bl	800b2bc <_sbrk_r>
 800a998:	4580      	cmp	r8, r0
 800a99a:	d13a      	bne.n	800aa12 <_malloc_r+0xd2>
 800a99c:	6821      	ldr	r1, [r4, #0]
 800a99e:	3503      	adds	r5, #3
 800a9a0:	1a6d      	subs	r5, r5, r1
 800a9a2:	f025 0503 	bic.w	r5, r5, #3
 800a9a6:	3508      	adds	r5, #8
 800a9a8:	2d0c      	cmp	r5, #12
 800a9aa:	bf38      	it	cc
 800a9ac:	250c      	movcc	r5, #12
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	f7ff ffa5 	bl	800a900 <sbrk_aligned>
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d02b      	beq.n	800aa12 <_malloc_r+0xd2>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	442b      	add	r3, r5
 800a9be:	6023      	str	r3, [r4, #0]
 800a9c0:	e00e      	b.n	800a9e0 <_malloc_r+0xa0>
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	1b52      	subs	r2, r2, r5
 800a9c6:	d41e      	bmi.n	800aa06 <_malloc_r+0xc6>
 800a9c8:	2a0b      	cmp	r2, #11
 800a9ca:	d916      	bls.n	800a9fa <_malloc_r+0xba>
 800a9cc:	1961      	adds	r1, r4, r5
 800a9ce:	42a3      	cmp	r3, r4
 800a9d0:	6025      	str	r5, [r4, #0]
 800a9d2:	bf18      	it	ne
 800a9d4:	6059      	strne	r1, [r3, #4]
 800a9d6:	6863      	ldr	r3, [r4, #4]
 800a9d8:	bf08      	it	eq
 800a9da:	6031      	streq	r1, [r6, #0]
 800a9dc:	5162      	str	r2, [r4, r5]
 800a9de:	604b      	str	r3, [r1, #4]
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f104 060b 	add.w	r6, r4, #11
 800a9e6:	f000 ff8b 	bl	800b900 <__malloc_unlock>
 800a9ea:	f026 0607 	bic.w	r6, r6, #7
 800a9ee:	1d23      	adds	r3, r4, #4
 800a9f0:	1af2      	subs	r2, r6, r3
 800a9f2:	d0b6      	beq.n	800a962 <_malloc_r+0x22>
 800a9f4:	1b9b      	subs	r3, r3, r6
 800a9f6:	50a3      	str	r3, [r4, r2]
 800a9f8:	e7b3      	b.n	800a962 <_malloc_r+0x22>
 800a9fa:	6862      	ldr	r2, [r4, #4]
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	bf0c      	ite	eq
 800aa00:	6032      	streq	r2, [r6, #0]
 800aa02:	605a      	strne	r2, [r3, #4]
 800aa04:	e7ec      	b.n	800a9e0 <_malloc_r+0xa0>
 800aa06:	4623      	mov	r3, r4
 800aa08:	6864      	ldr	r4, [r4, #4]
 800aa0a:	e7b2      	b.n	800a972 <_malloc_r+0x32>
 800aa0c:	4634      	mov	r4, r6
 800aa0e:	6876      	ldr	r6, [r6, #4]
 800aa10:	e7b9      	b.n	800a986 <_malloc_r+0x46>
 800aa12:	230c      	movs	r3, #12
 800aa14:	4638      	mov	r0, r7
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	f000 ff72 	bl	800b900 <__malloc_unlock>
 800aa1c:	e7a1      	b.n	800a962 <_malloc_r+0x22>
 800aa1e:	6025      	str	r5, [r4, #0]
 800aa20:	e7de      	b.n	800a9e0 <_malloc_r+0xa0>
 800aa22:	bf00      	nop
 800aa24:	20000e38 	.word	0x20000e38

0800aa28 <__ssputs_r>:
 800aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2c:	688e      	ldr	r6, [r1, #8]
 800aa2e:	4682      	mov	sl, r0
 800aa30:	429e      	cmp	r6, r3
 800aa32:	460c      	mov	r4, r1
 800aa34:	4690      	mov	r8, r2
 800aa36:	461f      	mov	r7, r3
 800aa38:	d838      	bhi.n	800aaac <__ssputs_r+0x84>
 800aa3a:	898a      	ldrh	r2, [r1, #12]
 800aa3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa40:	d032      	beq.n	800aaa8 <__ssputs_r+0x80>
 800aa42:	6825      	ldr	r5, [r4, #0]
 800aa44:	6909      	ldr	r1, [r1, #16]
 800aa46:	3301      	adds	r3, #1
 800aa48:	eba5 0901 	sub.w	r9, r5, r1
 800aa4c:	6965      	ldr	r5, [r4, #20]
 800aa4e:	444b      	add	r3, r9
 800aa50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa58:	106d      	asrs	r5, r5, #1
 800aa5a:	429d      	cmp	r5, r3
 800aa5c:	bf38      	it	cc
 800aa5e:	461d      	movcc	r5, r3
 800aa60:	0553      	lsls	r3, r2, #21
 800aa62:	d531      	bpl.n	800aac8 <__ssputs_r+0xa0>
 800aa64:	4629      	mov	r1, r5
 800aa66:	f7ff ff6b 	bl	800a940 <_malloc_r>
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	b950      	cbnz	r0, 800aa84 <__ssputs_r+0x5c>
 800aa6e:	230c      	movs	r3, #12
 800aa70:	f04f 30ff 	mov.w	r0, #4294967295
 800aa74:	f8ca 3000 	str.w	r3, [sl]
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa84:	464a      	mov	r2, r9
 800aa86:	6921      	ldr	r1, [r4, #16]
 800aa88:	f7ff fd9a 	bl	800a5c0 <memcpy>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	6126      	str	r6, [r4, #16]
 800aa9a:	444e      	add	r6, r9
 800aa9c:	6026      	str	r6, [r4, #0]
 800aa9e:	463e      	mov	r6, r7
 800aaa0:	6165      	str	r5, [r4, #20]
 800aaa2:	eba5 0509 	sub.w	r5, r5, r9
 800aaa6:	60a5      	str	r5, [r4, #8]
 800aaa8:	42be      	cmp	r6, r7
 800aaaa:	d900      	bls.n	800aaae <__ssputs_r+0x86>
 800aaac:	463e      	mov	r6, r7
 800aaae:	4632      	mov	r2, r6
 800aab0:	4641      	mov	r1, r8
 800aab2:	6820      	ldr	r0, [r4, #0]
 800aab4:	f000 ff04 	bl	800b8c0 <memmove>
 800aab8:	68a3      	ldr	r3, [r4, #8]
 800aaba:	2000      	movs	r0, #0
 800aabc:	1b9b      	subs	r3, r3, r6
 800aabe:	60a3      	str	r3, [r4, #8]
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	4433      	add	r3, r6
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	e7db      	b.n	800aa80 <__ssputs_r+0x58>
 800aac8:	462a      	mov	r2, r5
 800aaca:	f000 ff1f 	bl	800b90c <_realloc_r>
 800aace:	4606      	mov	r6, r0
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d1e1      	bne.n	800aa98 <__ssputs_r+0x70>
 800aad4:	4650      	mov	r0, sl
 800aad6:	6921      	ldr	r1, [r4, #16]
 800aad8:	f7ff feca 	bl	800a870 <_free_r>
 800aadc:	e7c7      	b.n	800aa6e <__ssputs_r+0x46>
	...

0800aae0 <_svfiprintf_r>:
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	4698      	mov	r8, r3
 800aae6:	898b      	ldrh	r3, [r1, #12]
 800aae8:	4607      	mov	r7, r0
 800aaea:	061b      	lsls	r3, r3, #24
 800aaec:	460d      	mov	r5, r1
 800aaee:	4614      	mov	r4, r2
 800aaf0:	b09d      	sub	sp, #116	; 0x74
 800aaf2:	d50e      	bpl.n	800ab12 <_svfiprintf_r+0x32>
 800aaf4:	690b      	ldr	r3, [r1, #16]
 800aaf6:	b963      	cbnz	r3, 800ab12 <_svfiprintf_r+0x32>
 800aaf8:	2140      	movs	r1, #64	; 0x40
 800aafa:	f7ff ff21 	bl	800a940 <_malloc_r>
 800aafe:	6028      	str	r0, [r5, #0]
 800ab00:	6128      	str	r0, [r5, #16]
 800ab02:	b920      	cbnz	r0, 800ab0e <_svfiprintf_r+0x2e>
 800ab04:	230c      	movs	r3, #12
 800ab06:	603b      	str	r3, [r7, #0]
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0c:	e0d1      	b.n	800acb2 <_svfiprintf_r+0x1d2>
 800ab0e:	2340      	movs	r3, #64	; 0x40
 800ab10:	616b      	str	r3, [r5, #20]
 800ab12:	2300      	movs	r3, #0
 800ab14:	9309      	str	r3, [sp, #36]	; 0x24
 800ab16:	2320      	movs	r3, #32
 800ab18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab1c:	2330      	movs	r3, #48	; 0x30
 800ab1e:	f04f 0901 	mov.w	r9, #1
 800ab22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800accc <_svfiprintf_r+0x1ec>
 800ab2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab2e:	4623      	mov	r3, r4
 800ab30:	469a      	mov	sl, r3
 800ab32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab36:	b10a      	cbz	r2, 800ab3c <_svfiprintf_r+0x5c>
 800ab38:	2a25      	cmp	r2, #37	; 0x25
 800ab3a:	d1f9      	bne.n	800ab30 <_svfiprintf_r+0x50>
 800ab3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab40:	d00b      	beq.n	800ab5a <_svfiprintf_r+0x7a>
 800ab42:	465b      	mov	r3, fp
 800ab44:	4622      	mov	r2, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7ff ff6d 	bl	800aa28 <__ssputs_r>
 800ab4e:	3001      	adds	r0, #1
 800ab50:	f000 80aa 	beq.w	800aca8 <_svfiprintf_r+0x1c8>
 800ab54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab56:	445a      	add	r2, fp
 800ab58:	9209      	str	r2, [sp, #36]	; 0x24
 800ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f000 80a2 	beq.w	800aca8 <_svfiprintf_r+0x1c8>
 800ab64:	2300      	movs	r3, #0
 800ab66:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab6e:	f10a 0a01 	add.w	sl, sl, #1
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	9307      	str	r3, [sp, #28]
 800ab76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab7c:	4654      	mov	r4, sl
 800ab7e:	2205      	movs	r2, #5
 800ab80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab84:	4851      	ldr	r0, [pc, #324]	; (800accc <_svfiprintf_r+0x1ec>)
 800ab86:	f000 fe8d 	bl	800b8a4 <memchr>
 800ab8a:	9a04      	ldr	r2, [sp, #16]
 800ab8c:	b9d8      	cbnz	r0, 800abc6 <_svfiprintf_r+0xe6>
 800ab8e:	06d0      	lsls	r0, r2, #27
 800ab90:	bf44      	itt	mi
 800ab92:	2320      	movmi	r3, #32
 800ab94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab98:	0711      	lsls	r1, r2, #28
 800ab9a:	bf44      	itt	mi
 800ab9c:	232b      	movmi	r3, #43	; 0x2b
 800ab9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aba2:	f89a 3000 	ldrb.w	r3, [sl]
 800aba6:	2b2a      	cmp	r3, #42	; 0x2a
 800aba8:	d015      	beq.n	800abd6 <_svfiprintf_r+0xf6>
 800abaa:	4654      	mov	r4, sl
 800abac:	2000      	movs	r0, #0
 800abae:	f04f 0c0a 	mov.w	ip, #10
 800abb2:	9a07      	ldr	r2, [sp, #28]
 800abb4:	4621      	mov	r1, r4
 800abb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abba:	3b30      	subs	r3, #48	; 0x30
 800abbc:	2b09      	cmp	r3, #9
 800abbe:	d94e      	bls.n	800ac5e <_svfiprintf_r+0x17e>
 800abc0:	b1b0      	cbz	r0, 800abf0 <_svfiprintf_r+0x110>
 800abc2:	9207      	str	r2, [sp, #28]
 800abc4:	e014      	b.n	800abf0 <_svfiprintf_r+0x110>
 800abc6:	eba0 0308 	sub.w	r3, r0, r8
 800abca:	fa09 f303 	lsl.w	r3, r9, r3
 800abce:	4313      	orrs	r3, r2
 800abd0:	46a2      	mov	sl, r4
 800abd2:	9304      	str	r3, [sp, #16]
 800abd4:	e7d2      	b.n	800ab7c <_svfiprintf_r+0x9c>
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	1d19      	adds	r1, r3, #4
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	9103      	str	r1, [sp, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfbb      	ittet	lt
 800abe2:	425b      	neglt	r3, r3
 800abe4:	f042 0202 	orrlt.w	r2, r2, #2
 800abe8:	9307      	strge	r3, [sp, #28]
 800abea:	9307      	strlt	r3, [sp, #28]
 800abec:	bfb8      	it	lt
 800abee:	9204      	strlt	r2, [sp, #16]
 800abf0:	7823      	ldrb	r3, [r4, #0]
 800abf2:	2b2e      	cmp	r3, #46	; 0x2e
 800abf4:	d10c      	bne.n	800ac10 <_svfiprintf_r+0x130>
 800abf6:	7863      	ldrb	r3, [r4, #1]
 800abf8:	2b2a      	cmp	r3, #42	; 0x2a
 800abfa:	d135      	bne.n	800ac68 <_svfiprintf_r+0x188>
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	3402      	adds	r4, #2
 800ac00:	1d1a      	adds	r2, r3, #4
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	9203      	str	r2, [sp, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	bfb8      	it	lt
 800ac0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac0e:	9305      	str	r3, [sp, #20]
 800ac10:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800acd0 <_svfiprintf_r+0x1f0>
 800ac14:	2203      	movs	r2, #3
 800ac16:	4650      	mov	r0, sl
 800ac18:	7821      	ldrb	r1, [r4, #0]
 800ac1a:	f000 fe43 	bl	800b8a4 <memchr>
 800ac1e:	b140      	cbz	r0, 800ac32 <_svfiprintf_r+0x152>
 800ac20:	2340      	movs	r3, #64	; 0x40
 800ac22:	eba0 000a 	sub.w	r0, r0, sl
 800ac26:	fa03 f000 	lsl.w	r0, r3, r0
 800ac2a:	9b04      	ldr	r3, [sp, #16]
 800ac2c:	3401      	adds	r4, #1
 800ac2e:	4303      	orrs	r3, r0
 800ac30:	9304      	str	r3, [sp, #16]
 800ac32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac36:	2206      	movs	r2, #6
 800ac38:	4826      	ldr	r0, [pc, #152]	; (800acd4 <_svfiprintf_r+0x1f4>)
 800ac3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac3e:	f000 fe31 	bl	800b8a4 <memchr>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d038      	beq.n	800acb8 <_svfiprintf_r+0x1d8>
 800ac46:	4b24      	ldr	r3, [pc, #144]	; (800acd8 <_svfiprintf_r+0x1f8>)
 800ac48:	bb1b      	cbnz	r3, 800ac92 <_svfiprintf_r+0x1b2>
 800ac4a:	9b03      	ldr	r3, [sp, #12]
 800ac4c:	3307      	adds	r3, #7
 800ac4e:	f023 0307 	bic.w	r3, r3, #7
 800ac52:	3308      	adds	r3, #8
 800ac54:	9303      	str	r3, [sp, #12]
 800ac56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac58:	4433      	add	r3, r6
 800ac5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5c:	e767      	b.n	800ab2e <_svfiprintf_r+0x4e>
 800ac5e:	460c      	mov	r4, r1
 800ac60:	2001      	movs	r0, #1
 800ac62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac66:	e7a5      	b.n	800abb4 <_svfiprintf_r+0xd4>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f04f 0c0a 	mov.w	ip, #10
 800ac6e:	4619      	mov	r1, r3
 800ac70:	3401      	adds	r4, #1
 800ac72:	9305      	str	r3, [sp, #20]
 800ac74:	4620      	mov	r0, r4
 800ac76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac7a:	3a30      	subs	r2, #48	; 0x30
 800ac7c:	2a09      	cmp	r2, #9
 800ac7e:	d903      	bls.n	800ac88 <_svfiprintf_r+0x1a8>
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0c5      	beq.n	800ac10 <_svfiprintf_r+0x130>
 800ac84:	9105      	str	r1, [sp, #20]
 800ac86:	e7c3      	b.n	800ac10 <_svfiprintf_r+0x130>
 800ac88:	4604      	mov	r4, r0
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac90:	e7f0      	b.n	800ac74 <_svfiprintf_r+0x194>
 800ac92:	ab03      	add	r3, sp, #12
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	462a      	mov	r2, r5
 800ac98:	4638      	mov	r0, r7
 800ac9a:	4b10      	ldr	r3, [pc, #64]	; (800acdc <_svfiprintf_r+0x1fc>)
 800ac9c:	a904      	add	r1, sp, #16
 800ac9e:	f3af 8000 	nop.w
 800aca2:	1c42      	adds	r2, r0, #1
 800aca4:	4606      	mov	r6, r0
 800aca6:	d1d6      	bne.n	800ac56 <_svfiprintf_r+0x176>
 800aca8:	89ab      	ldrh	r3, [r5, #12]
 800acaa:	065b      	lsls	r3, r3, #25
 800acac:	f53f af2c 	bmi.w	800ab08 <_svfiprintf_r+0x28>
 800acb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acb2:	b01d      	add	sp, #116	; 0x74
 800acb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb8:	ab03      	add	r3, sp, #12
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	462a      	mov	r2, r5
 800acbe:	4638      	mov	r0, r7
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <_svfiprintf_r+0x1fc>)
 800acc2:	a904      	add	r1, sp, #16
 800acc4:	f000 f9d4 	bl	800b070 <_printf_i>
 800acc8:	e7eb      	b.n	800aca2 <_svfiprintf_r+0x1c2>
 800acca:	bf00      	nop
 800accc:	0800bda5 	.word	0x0800bda5
 800acd0:	0800bdab 	.word	0x0800bdab
 800acd4:	0800bdaf 	.word	0x0800bdaf
 800acd8:	00000000 	.word	0x00000000
 800acdc:	0800aa29 	.word	0x0800aa29

0800ace0 <__sfputc_r>:
 800ace0:	6893      	ldr	r3, [r2, #8]
 800ace2:	b410      	push	{r4}
 800ace4:	3b01      	subs	r3, #1
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	6093      	str	r3, [r2, #8]
 800acea:	da07      	bge.n	800acfc <__sfputc_r+0x1c>
 800acec:	6994      	ldr	r4, [r2, #24]
 800acee:	42a3      	cmp	r3, r4
 800acf0:	db01      	blt.n	800acf6 <__sfputc_r+0x16>
 800acf2:	290a      	cmp	r1, #10
 800acf4:	d102      	bne.n	800acfc <__sfputc_r+0x1c>
 800acf6:	bc10      	pop	{r4}
 800acf8:	f000 baf0 	b.w	800b2dc <__swbuf_r>
 800acfc:	6813      	ldr	r3, [r2, #0]
 800acfe:	1c58      	adds	r0, r3, #1
 800ad00:	6010      	str	r0, [r2, #0]
 800ad02:	7019      	strb	r1, [r3, #0]
 800ad04:	4608      	mov	r0, r1
 800ad06:	bc10      	pop	{r4}
 800ad08:	4770      	bx	lr

0800ad0a <__sfputs_r>:
 800ad0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	460f      	mov	r7, r1
 800ad10:	4614      	mov	r4, r2
 800ad12:	18d5      	adds	r5, r2, r3
 800ad14:	42ac      	cmp	r4, r5
 800ad16:	d101      	bne.n	800ad1c <__sfputs_r+0x12>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	e007      	b.n	800ad2c <__sfputs_r+0x22>
 800ad1c:	463a      	mov	r2, r7
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad24:	f7ff ffdc 	bl	800ace0 <__sfputc_r>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d1f3      	bne.n	800ad14 <__sfputs_r+0xa>
 800ad2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad30 <_vfiprintf_r>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	460d      	mov	r5, r1
 800ad36:	4614      	mov	r4, r2
 800ad38:	4698      	mov	r8, r3
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	b09d      	sub	sp, #116	; 0x74
 800ad3e:	b118      	cbz	r0, 800ad48 <_vfiprintf_r+0x18>
 800ad40:	6983      	ldr	r3, [r0, #24]
 800ad42:	b90b      	cbnz	r3, 800ad48 <_vfiprintf_r+0x18>
 800ad44:	f000 fca8 	bl	800b698 <__sinit>
 800ad48:	4b89      	ldr	r3, [pc, #548]	; (800af70 <_vfiprintf_r+0x240>)
 800ad4a:	429d      	cmp	r5, r3
 800ad4c:	d11b      	bne.n	800ad86 <_vfiprintf_r+0x56>
 800ad4e:	6875      	ldr	r5, [r6, #4]
 800ad50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad52:	07d9      	lsls	r1, r3, #31
 800ad54:	d405      	bmi.n	800ad62 <_vfiprintf_r+0x32>
 800ad56:	89ab      	ldrh	r3, [r5, #12]
 800ad58:	059a      	lsls	r2, r3, #22
 800ad5a:	d402      	bmi.n	800ad62 <_vfiprintf_r+0x32>
 800ad5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad5e:	f000 fd39 	bl	800b7d4 <__retarget_lock_acquire_recursive>
 800ad62:	89ab      	ldrh	r3, [r5, #12]
 800ad64:	071b      	lsls	r3, r3, #28
 800ad66:	d501      	bpl.n	800ad6c <_vfiprintf_r+0x3c>
 800ad68:	692b      	ldr	r3, [r5, #16]
 800ad6a:	b9eb      	cbnz	r3, 800ada8 <_vfiprintf_r+0x78>
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	4630      	mov	r0, r6
 800ad70:	f000 fb06 	bl	800b380 <__swsetup_r>
 800ad74:	b1c0      	cbz	r0, 800ada8 <_vfiprintf_r+0x78>
 800ad76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad78:	07dc      	lsls	r4, r3, #31
 800ad7a:	d50e      	bpl.n	800ad9a <_vfiprintf_r+0x6a>
 800ad7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad80:	b01d      	add	sp, #116	; 0x74
 800ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad86:	4b7b      	ldr	r3, [pc, #492]	; (800af74 <_vfiprintf_r+0x244>)
 800ad88:	429d      	cmp	r5, r3
 800ad8a:	d101      	bne.n	800ad90 <_vfiprintf_r+0x60>
 800ad8c:	68b5      	ldr	r5, [r6, #8]
 800ad8e:	e7df      	b.n	800ad50 <_vfiprintf_r+0x20>
 800ad90:	4b79      	ldr	r3, [pc, #484]	; (800af78 <_vfiprintf_r+0x248>)
 800ad92:	429d      	cmp	r5, r3
 800ad94:	bf08      	it	eq
 800ad96:	68f5      	ldreq	r5, [r6, #12]
 800ad98:	e7da      	b.n	800ad50 <_vfiprintf_r+0x20>
 800ad9a:	89ab      	ldrh	r3, [r5, #12]
 800ad9c:	0598      	lsls	r0, r3, #22
 800ad9e:	d4ed      	bmi.n	800ad7c <_vfiprintf_r+0x4c>
 800ada0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ada2:	f000 fd18 	bl	800b7d6 <__retarget_lock_release_recursive>
 800ada6:	e7e9      	b.n	800ad7c <_vfiprintf_r+0x4c>
 800ada8:	2300      	movs	r3, #0
 800adaa:	9309      	str	r3, [sp, #36]	; 0x24
 800adac:	2320      	movs	r3, #32
 800adae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adb2:	2330      	movs	r3, #48	; 0x30
 800adb4:	f04f 0901 	mov.w	r9, #1
 800adb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800adbc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800af7c <_vfiprintf_r+0x24c>
 800adc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adc4:	4623      	mov	r3, r4
 800adc6:	469a      	mov	sl, r3
 800adc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adcc:	b10a      	cbz	r2, 800add2 <_vfiprintf_r+0xa2>
 800adce:	2a25      	cmp	r2, #37	; 0x25
 800add0:	d1f9      	bne.n	800adc6 <_vfiprintf_r+0x96>
 800add2:	ebba 0b04 	subs.w	fp, sl, r4
 800add6:	d00b      	beq.n	800adf0 <_vfiprintf_r+0xc0>
 800add8:	465b      	mov	r3, fp
 800adda:	4622      	mov	r2, r4
 800addc:	4629      	mov	r1, r5
 800adde:	4630      	mov	r0, r6
 800ade0:	f7ff ff93 	bl	800ad0a <__sfputs_r>
 800ade4:	3001      	adds	r0, #1
 800ade6:	f000 80aa 	beq.w	800af3e <_vfiprintf_r+0x20e>
 800adea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adec:	445a      	add	r2, fp
 800adee:	9209      	str	r2, [sp, #36]	; 0x24
 800adf0:	f89a 3000 	ldrb.w	r3, [sl]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 80a2 	beq.w	800af3e <_vfiprintf_r+0x20e>
 800adfa:	2300      	movs	r3, #0
 800adfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ae00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae04:	f10a 0a01 	add.w	sl, sl, #1
 800ae08:	9304      	str	r3, [sp, #16]
 800ae0a:	9307      	str	r3, [sp, #28]
 800ae0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae10:	931a      	str	r3, [sp, #104]	; 0x68
 800ae12:	4654      	mov	r4, sl
 800ae14:	2205      	movs	r2, #5
 800ae16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1a:	4858      	ldr	r0, [pc, #352]	; (800af7c <_vfiprintf_r+0x24c>)
 800ae1c:	f000 fd42 	bl	800b8a4 <memchr>
 800ae20:	9a04      	ldr	r2, [sp, #16]
 800ae22:	b9d8      	cbnz	r0, 800ae5c <_vfiprintf_r+0x12c>
 800ae24:	06d1      	lsls	r1, r2, #27
 800ae26:	bf44      	itt	mi
 800ae28:	2320      	movmi	r3, #32
 800ae2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae2e:	0713      	lsls	r3, r2, #28
 800ae30:	bf44      	itt	mi
 800ae32:	232b      	movmi	r3, #43	; 0x2b
 800ae34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae38:	f89a 3000 	ldrb.w	r3, [sl]
 800ae3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae3e:	d015      	beq.n	800ae6c <_vfiprintf_r+0x13c>
 800ae40:	4654      	mov	r4, sl
 800ae42:	2000      	movs	r0, #0
 800ae44:	f04f 0c0a 	mov.w	ip, #10
 800ae48:	9a07      	ldr	r2, [sp, #28]
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae50:	3b30      	subs	r3, #48	; 0x30
 800ae52:	2b09      	cmp	r3, #9
 800ae54:	d94e      	bls.n	800aef4 <_vfiprintf_r+0x1c4>
 800ae56:	b1b0      	cbz	r0, 800ae86 <_vfiprintf_r+0x156>
 800ae58:	9207      	str	r2, [sp, #28]
 800ae5a:	e014      	b.n	800ae86 <_vfiprintf_r+0x156>
 800ae5c:	eba0 0308 	sub.w	r3, r0, r8
 800ae60:	fa09 f303 	lsl.w	r3, r9, r3
 800ae64:	4313      	orrs	r3, r2
 800ae66:	46a2      	mov	sl, r4
 800ae68:	9304      	str	r3, [sp, #16]
 800ae6a:	e7d2      	b.n	800ae12 <_vfiprintf_r+0xe2>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	1d19      	adds	r1, r3, #4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	9103      	str	r1, [sp, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	bfbb      	ittet	lt
 800ae78:	425b      	neglt	r3, r3
 800ae7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae7e:	9307      	strge	r3, [sp, #28]
 800ae80:	9307      	strlt	r3, [sp, #28]
 800ae82:	bfb8      	it	lt
 800ae84:	9204      	strlt	r2, [sp, #16]
 800ae86:	7823      	ldrb	r3, [r4, #0]
 800ae88:	2b2e      	cmp	r3, #46	; 0x2e
 800ae8a:	d10c      	bne.n	800aea6 <_vfiprintf_r+0x176>
 800ae8c:	7863      	ldrb	r3, [r4, #1]
 800ae8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae90:	d135      	bne.n	800aefe <_vfiprintf_r+0x1ce>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	3402      	adds	r4, #2
 800ae96:	1d1a      	adds	r2, r3, #4
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	9203      	str	r2, [sp, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	bfb8      	it	lt
 800aea0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aea4:	9305      	str	r3, [sp, #20]
 800aea6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800af80 <_vfiprintf_r+0x250>
 800aeaa:	2203      	movs	r2, #3
 800aeac:	4650      	mov	r0, sl
 800aeae:	7821      	ldrb	r1, [r4, #0]
 800aeb0:	f000 fcf8 	bl	800b8a4 <memchr>
 800aeb4:	b140      	cbz	r0, 800aec8 <_vfiprintf_r+0x198>
 800aeb6:	2340      	movs	r3, #64	; 0x40
 800aeb8:	eba0 000a 	sub.w	r0, r0, sl
 800aebc:	fa03 f000 	lsl.w	r0, r3, r0
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	3401      	adds	r4, #1
 800aec4:	4303      	orrs	r3, r0
 800aec6:	9304      	str	r3, [sp, #16]
 800aec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aecc:	2206      	movs	r2, #6
 800aece:	482d      	ldr	r0, [pc, #180]	; (800af84 <_vfiprintf_r+0x254>)
 800aed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aed4:	f000 fce6 	bl	800b8a4 <memchr>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d03f      	beq.n	800af5c <_vfiprintf_r+0x22c>
 800aedc:	4b2a      	ldr	r3, [pc, #168]	; (800af88 <_vfiprintf_r+0x258>)
 800aede:	bb1b      	cbnz	r3, 800af28 <_vfiprintf_r+0x1f8>
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	3307      	adds	r3, #7
 800aee4:	f023 0307 	bic.w	r3, r3, #7
 800aee8:	3308      	adds	r3, #8
 800aeea:	9303      	str	r3, [sp, #12]
 800aeec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeee:	443b      	add	r3, r7
 800aef0:	9309      	str	r3, [sp, #36]	; 0x24
 800aef2:	e767      	b.n	800adc4 <_vfiprintf_r+0x94>
 800aef4:	460c      	mov	r4, r1
 800aef6:	2001      	movs	r0, #1
 800aef8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aefc:	e7a5      	b.n	800ae4a <_vfiprintf_r+0x11a>
 800aefe:	2300      	movs	r3, #0
 800af00:	f04f 0c0a 	mov.w	ip, #10
 800af04:	4619      	mov	r1, r3
 800af06:	3401      	adds	r4, #1
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	4620      	mov	r0, r4
 800af0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af10:	3a30      	subs	r2, #48	; 0x30
 800af12:	2a09      	cmp	r2, #9
 800af14:	d903      	bls.n	800af1e <_vfiprintf_r+0x1ee>
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0c5      	beq.n	800aea6 <_vfiprintf_r+0x176>
 800af1a:	9105      	str	r1, [sp, #20]
 800af1c:	e7c3      	b.n	800aea6 <_vfiprintf_r+0x176>
 800af1e:	4604      	mov	r4, r0
 800af20:	2301      	movs	r3, #1
 800af22:	fb0c 2101 	mla	r1, ip, r1, r2
 800af26:	e7f0      	b.n	800af0a <_vfiprintf_r+0x1da>
 800af28:	ab03      	add	r3, sp, #12
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	462a      	mov	r2, r5
 800af2e:	4630      	mov	r0, r6
 800af30:	4b16      	ldr	r3, [pc, #88]	; (800af8c <_vfiprintf_r+0x25c>)
 800af32:	a904      	add	r1, sp, #16
 800af34:	f3af 8000 	nop.w
 800af38:	4607      	mov	r7, r0
 800af3a:	1c78      	adds	r0, r7, #1
 800af3c:	d1d6      	bne.n	800aeec <_vfiprintf_r+0x1bc>
 800af3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af40:	07d9      	lsls	r1, r3, #31
 800af42:	d405      	bmi.n	800af50 <_vfiprintf_r+0x220>
 800af44:	89ab      	ldrh	r3, [r5, #12]
 800af46:	059a      	lsls	r2, r3, #22
 800af48:	d402      	bmi.n	800af50 <_vfiprintf_r+0x220>
 800af4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af4c:	f000 fc43 	bl	800b7d6 <__retarget_lock_release_recursive>
 800af50:	89ab      	ldrh	r3, [r5, #12]
 800af52:	065b      	lsls	r3, r3, #25
 800af54:	f53f af12 	bmi.w	800ad7c <_vfiprintf_r+0x4c>
 800af58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5a:	e711      	b.n	800ad80 <_vfiprintf_r+0x50>
 800af5c:	ab03      	add	r3, sp, #12
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	462a      	mov	r2, r5
 800af62:	4630      	mov	r0, r6
 800af64:	4b09      	ldr	r3, [pc, #36]	; (800af8c <_vfiprintf_r+0x25c>)
 800af66:	a904      	add	r1, sp, #16
 800af68:	f000 f882 	bl	800b070 <_printf_i>
 800af6c:	e7e4      	b.n	800af38 <_vfiprintf_r+0x208>
 800af6e:	bf00      	nop
 800af70:	0800bdf8 	.word	0x0800bdf8
 800af74:	0800be18 	.word	0x0800be18
 800af78:	0800bdd8 	.word	0x0800bdd8
 800af7c:	0800bda5 	.word	0x0800bda5
 800af80:	0800bdab 	.word	0x0800bdab
 800af84:	0800bdaf 	.word	0x0800bdaf
 800af88:	00000000 	.word	0x00000000
 800af8c:	0800ad0b 	.word	0x0800ad0b

0800af90 <_printf_common>:
 800af90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af94:	4616      	mov	r6, r2
 800af96:	4699      	mov	r9, r3
 800af98:	688a      	ldr	r2, [r1, #8]
 800af9a:	690b      	ldr	r3, [r1, #16]
 800af9c:	4607      	mov	r7, r0
 800af9e:	4293      	cmp	r3, r2
 800afa0:	bfb8      	it	lt
 800afa2:	4613      	movlt	r3, r2
 800afa4:	6033      	str	r3, [r6, #0]
 800afa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afaa:	460c      	mov	r4, r1
 800afac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afb0:	b10a      	cbz	r2, 800afb6 <_printf_common+0x26>
 800afb2:	3301      	adds	r3, #1
 800afb4:	6033      	str	r3, [r6, #0]
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	0699      	lsls	r1, r3, #26
 800afba:	bf42      	ittt	mi
 800afbc:	6833      	ldrmi	r3, [r6, #0]
 800afbe:	3302      	addmi	r3, #2
 800afc0:	6033      	strmi	r3, [r6, #0]
 800afc2:	6825      	ldr	r5, [r4, #0]
 800afc4:	f015 0506 	ands.w	r5, r5, #6
 800afc8:	d106      	bne.n	800afd8 <_printf_common+0x48>
 800afca:	f104 0a19 	add.w	sl, r4, #25
 800afce:	68e3      	ldr	r3, [r4, #12]
 800afd0:	6832      	ldr	r2, [r6, #0]
 800afd2:	1a9b      	subs	r3, r3, r2
 800afd4:	42ab      	cmp	r3, r5
 800afd6:	dc28      	bgt.n	800b02a <_printf_common+0x9a>
 800afd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afdc:	1e13      	subs	r3, r2, #0
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	bf18      	it	ne
 800afe2:	2301      	movne	r3, #1
 800afe4:	0692      	lsls	r2, r2, #26
 800afe6:	d42d      	bmi.n	800b044 <_printf_common+0xb4>
 800afe8:	4649      	mov	r1, r9
 800afea:	4638      	mov	r0, r7
 800afec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aff0:	47c0      	blx	r8
 800aff2:	3001      	adds	r0, #1
 800aff4:	d020      	beq.n	800b038 <_printf_common+0xa8>
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	68e5      	ldr	r5, [r4, #12]
 800affa:	f003 0306 	and.w	r3, r3, #6
 800affe:	2b04      	cmp	r3, #4
 800b000:	bf18      	it	ne
 800b002:	2500      	movne	r5, #0
 800b004:	6832      	ldr	r2, [r6, #0]
 800b006:	f04f 0600 	mov.w	r6, #0
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	bf08      	it	eq
 800b00e:	1aad      	subeq	r5, r5, r2
 800b010:	6922      	ldr	r2, [r4, #16]
 800b012:	bf08      	it	eq
 800b014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b018:	4293      	cmp	r3, r2
 800b01a:	bfc4      	itt	gt
 800b01c:	1a9b      	subgt	r3, r3, r2
 800b01e:	18ed      	addgt	r5, r5, r3
 800b020:	341a      	adds	r4, #26
 800b022:	42b5      	cmp	r5, r6
 800b024:	d11a      	bne.n	800b05c <_printf_common+0xcc>
 800b026:	2000      	movs	r0, #0
 800b028:	e008      	b.n	800b03c <_printf_common+0xac>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4652      	mov	r2, sl
 800b02e:	4649      	mov	r1, r9
 800b030:	4638      	mov	r0, r7
 800b032:	47c0      	blx	r8
 800b034:	3001      	adds	r0, #1
 800b036:	d103      	bne.n	800b040 <_printf_common+0xb0>
 800b038:	f04f 30ff 	mov.w	r0, #4294967295
 800b03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b040:	3501      	adds	r5, #1
 800b042:	e7c4      	b.n	800afce <_printf_common+0x3e>
 800b044:	2030      	movs	r0, #48	; 0x30
 800b046:	18e1      	adds	r1, r4, r3
 800b048:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b052:	4422      	add	r2, r4
 800b054:	3302      	adds	r3, #2
 800b056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b05a:	e7c5      	b.n	800afe8 <_printf_common+0x58>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4622      	mov	r2, r4
 800b060:	4649      	mov	r1, r9
 800b062:	4638      	mov	r0, r7
 800b064:	47c0      	blx	r8
 800b066:	3001      	adds	r0, #1
 800b068:	d0e6      	beq.n	800b038 <_printf_common+0xa8>
 800b06a:	3601      	adds	r6, #1
 800b06c:	e7d9      	b.n	800b022 <_printf_common+0x92>
	...

0800b070 <_printf_i>:
 800b070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	7e0f      	ldrb	r7, [r1, #24]
 800b076:	4691      	mov	r9, r2
 800b078:	2f78      	cmp	r7, #120	; 0x78
 800b07a:	4680      	mov	r8, r0
 800b07c:	460c      	mov	r4, r1
 800b07e:	469a      	mov	sl, r3
 800b080:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b086:	d807      	bhi.n	800b098 <_printf_i+0x28>
 800b088:	2f62      	cmp	r7, #98	; 0x62
 800b08a:	d80a      	bhi.n	800b0a2 <_printf_i+0x32>
 800b08c:	2f00      	cmp	r7, #0
 800b08e:	f000 80d9 	beq.w	800b244 <_printf_i+0x1d4>
 800b092:	2f58      	cmp	r7, #88	; 0x58
 800b094:	f000 80a4 	beq.w	800b1e0 <_printf_i+0x170>
 800b098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0a0:	e03a      	b.n	800b118 <_printf_i+0xa8>
 800b0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0a6:	2b15      	cmp	r3, #21
 800b0a8:	d8f6      	bhi.n	800b098 <_printf_i+0x28>
 800b0aa:	a101      	add	r1, pc, #4	; (adr r1, 800b0b0 <_printf_i+0x40>)
 800b0ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0b0:	0800b109 	.word	0x0800b109
 800b0b4:	0800b11d 	.word	0x0800b11d
 800b0b8:	0800b099 	.word	0x0800b099
 800b0bc:	0800b099 	.word	0x0800b099
 800b0c0:	0800b099 	.word	0x0800b099
 800b0c4:	0800b099 	.word	0x0800b099
 800b0c8:	0800b11d 	.word	0x0800b11d
 800b0cc:	0800b099 	.word	0x0800b099
 800b0d0:	0800b099 	.word	0x0800b099
 800b0d4:	0800b099 	.word	0x0800b099
 800b0d8:	0800b099 	.word	0x0800b099
 800b0dc:	0800b22b 	.word	0x0800b22b
 800b0e0:	0800b14d 	.word	0x0800b14d
 800b0e4:	0800b20d 	.word	0x0800b20d
 800b0e8:	0800b099 	.word	0x0800b099
 800b0ec:	0800b099 	.word	0x0800b099
 800b0f0:	0800b24d 	.word	0x0800b24d
 800b0f4:	0800b099 	.word	0x0800b099
 800b0f8:	0800b14d 	.word	0x0800b14d
 800b0fc:	0800b099 	.word	0x0800b099
 800b100:	0800b099 	.word	0x0800b099
 800b104:	0800b215 	.word	0x0800b215
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	1d1a      	adds	r2, r3, #4
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	602a      	str	r2, [r5, #0]
 800b110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b118:	2301      	movs	r3, #1
 800b11a:	e0a4      	b.n	800b266 <_printf_i+0x1f6>
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	6829      	ldr	r1, [r5, #0]
 800b120:	0606      	lsls	r6, r0, #24
 800b122:	f101 0304 	add.w	r3, r1, #4
 800b126:	d50a      	bpl.n	800b13e <_printf_i+0xce>
 800b128:	680e      	ldr	r6, [r1, #0]
 800b12a:	602b      	str	r3, [r5, #0]
 800b12c:	2e00      	cmp	r6, #0
 800b12e:	da03      	bge.n	800b138 <_printf_i+0xc8>
 800b130:	232d      	movs	r3, #45	; 0x2d
 800b132:	4276      	negs	r6, r6
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b138:	230a      	movs	r3, #10
 800b13a:	485e      	ldr	r0, [pc, #376]	; (800b2b4 <_printf_i+0x244>)
 800b13c:	e019      	b.n	800b172 <_printf_i+0x102>
 800b13e:	680e      	ldr	r6, [r1, #0]
 800b140:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b144:	602b      	str	r3, [r5, #0]
 800b146:	bf18      	it	ne
 800b148:	b236      	sxthne	r6, r6
 800b14a:	e7ef      	b.n	800b12c <_printf_i+0xbc>
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	6820      	ldr	r0, [r4, #0]
 800b150:	1d19      	adds	r1, r3, #4
 800b152:	6029      	str	r1, [r5, #0]
 800b154:	0601      	lsls	r1, r0, #24
 800b156:	d501      	bpl.n	800b15c <_printf_i+0xec>
 800b158:	681e      	ldr	r6, [r3, #0]
 800b15a:	e002      	b.n	800b162 <_printf_i+0xf2>
 800b15c:	0646      	lsls	r6, r0, #25
 800b15e:	d5fb      	bpl.n	800b158 <_printf_i+0xe8>
 800b160:	881e      	ldrh	r6, [r3, #0]
 800b162:	2f6f      	cmp	r7, #111	; 0x6f
 800b164:	bf0c      	ite	eq
 800b166:	2308      	moveq	r3, #8
 800b168:	230a      	movne	r3, #10
 800b16a:	4852      	ldr	r0, [pc, #328]	; (800b2b4 <_printf_i+0x244>)
 800b16c:	2100      	movs	r1, #0
 800b16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b172:	6865      	ldr	r5, [r4, #4]
 800b174:	2d00      	cmp	r5, #0
 800b176:	bfa8      	it	ge
 800b178:	6821      	ldrge	r1, [r4, #0]
 800b17a:	60a5      	str	r5, [r4, #8]
 800b17c:	bfa4      	itt	ge
 800b17e:	f021 0104 	bicge.w	r1, r1, #4
 800b182:	6021      	strge	r1, [r4, #0]
 800b184:	b90e      	cbnz	r6, 800b18a <_printf_i+0x11a>
 800b186:	2d00      	cmp	r5, #0
 800b188:	d04d      	beq.n	800b226 <_printf_i+0x1b6>
 800b18a:	4615      	mov	r5, r2
 800b18c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b190:	fb03 6711 	mls	r7, r3, r1, r6
 800b194:	5dc7      	ldrb	r7, [r0, r7]
 800b196:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b19a:	4637      	mov	r7, r6
 800b19c:	42bb      	cmp	r3, r7
 800b19e:	460e      	mov	r6, r1
 800b1a0:	d9f4      	bls.n	800b18c <_printf_i+0x11c>
 800b1a2:	2b08      	cmp	r3, #8
 800b1a4:	d10b      	bne.n	800b1be <_printf_i+0x14e>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	07de      	lsls	r6, r3, #31
 800b1aa:	d508      	bpl.n	800b1be <_printf_i+0x14e>
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	6861      	ldr	r1, [r4, #4]
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	bfde      	ittt	le
 800b1b4:	2330      	movle	r3, #48	; 0x30
 800b1b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1be:	1b52      	subs	r2, r2, r5
 800b1c0:	6122      	str	r2, [r4, #16]
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	f8cd a000 	str.w	sl, [sp]
 800b1cc:	aa03      	add	r2, sp, #12
 800b1ce:	f7ff fedf 	bl	800af90 <_printf_common>
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	d14c      	bne.n	800b270 <_printf_i+0x200>
 800b1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1da:	b004      	add	sp, #16
 800b1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e0:	4834      	ldr	r0, [pc, #208]	; (800b2b4 <_printf_i+0x244>)
 800b1e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1e6:	6829      	ldr	r1, [r5, #0]
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1ee:	6029      	str	r1, [r5, #0]
 800b1f0:	061d      	lsls	r5, r3, #24
 800b1f2:	d514      	bpl.n	800b21e <_printf_i+0x1ae>
 800b1f4:	07df      	lsls	r7, r3, #31
 800b1f6:	bf44      	itt	mi
 800b1f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b1fc:	6023      	strmi	r3, [r4, #0]
 800b1fe:	b91e      	cbnz	r6, 800b208 <_printf_i+0x198>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	f023 0320 	bic.w	r3, r3, #32
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	2310      	movs	r3, #16
 800b20a:	e7af      	b.n	800b16c <_printf_i+0xfc>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	f043 0320 	orr.w	r3, r3, #32
 800b212:	6023      	str	r3, [r4, #0]
 800b214:	2378      	movs	r3, #120	; 0x78
 800b216:	4828      	ldr	r0, [pc, #160]	; (800b2b8 <_printf_i+0x248>)
 800b218:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b21c:	e7e3      	b.n	800b1e6 <_printf_i+0x176>
 800b21e:	0659      	lsls	r1, r3, #25
 800b220:	bf48      	it	mi
 800b222:	b2b6      	uxthmi	r6, r6
 800b224:	e7e6      	b.n	800b1f4 <_printf_i+0x184>
 800b226:	4615      	mov	r5, r2
 800b228:	e7bb      	b.n	800b1a2 <_printf_i+0x132>
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	6826      	ldr	r6, [r4, #0]
 800b22e:	1d18      	adds	r0, r3, #4
 800b230:	6961      	ldr	r1, [r4, #20]
 800b232:	6028      	str	r0, [r5, #0]
 800b234:	0635      	lsls	r5, r6, #24
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	d501      	bpl.n	800b23e <_printf_i+0x1ce>
 800b23a:	6019      	str	r1, [r3, #0]
 800b23c:	e002      	b.n	800b244 <_printf_i+0x1d4>
 800b23e:	0670      	lsls	r0, r6, #25
 800b240:	d5fb      	bpl.n	800b23a <_printf_i+0x1ca>
 800b242:	8019      	strh	r1, [r3, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	4615      	mov	r5, r2
 800b248:	6123      	str	r3, [r4, #16]
 800b24a:	e7ba      	b.n	800b1c2 <_printf_i+0x152>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	2100      	movs	r1, #0
 800b250:	1d1a      	adds	r2, r3, #4
 800b252:	602a      	str	r2, [r5, #0]
 800b254:	681d      	ldr	r5, [r3, #0]
 800b256:	6862      	ldr	r2, [r4, #4]
 800b258:	4628      	mov	r0, r5
 800b25a:	f000 fb23 	bl	800b8a4 <memchr>
 800b25e:	b108      	cbz	r0, 800b264 <_printf_i+0x1f4>
 800b260:	1b40      	subs	r0, r0, r5
 800b262:	6060      	str	r0, [r4, #4]
 800b264:	6863      	ldr	r3, [r4, #4]
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	2300      	movs	r3, #0
 800b26a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b26e:	e7a8      	b.n	800b1c2 <_printf_i+0x152>
 800b270:	462a      	mov	r2, r5
 800b272:	4649      	mov	r1, r9
 800b274:	4640      	mov	r0, r8
 800b276:	6923      	ldr	r3, [r4, #16]
 800b278:	47d0      	blx	sl
 800b27a:	3001      	adds	r0, #1
 800b27c:	d0ab      	beq.n	800b1d6 <_printf_i+0x166>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	079b      	lsls	r3, r3, #30
 800b282:	d413      	bmi.n	800b2ac <_printf_i+0x23c>
 800b284:	68e0      	ldr	r0, [r4, #12]
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	4298      	cmp	r0, r3
 800b28a:	bfb8      	it	lt
 800b28c:	4618      	movlt	r0, r3
 800b28e:	e7a4      	b.n	800b1da <_printf_i+0x16a>
 800b290:	2301      	movs	r3, #1
 800b292:	4632      	mov	r2, r6
 800b294:	4649      	mov	r1, r9
 800b296:	4640      	mov	r0, r8
 800b298:	47d0      	blx	sl
 800b29a:	3001      	adds	r0, #1
 800b29c:	d09b      	beq.n	800b1d6 <_printf_i+0x166>
 800b29e:	3501      	adds	r5, #1
 800b2a0:	68e3      	ldr	r3, [r4, #12]
 800b2a2:	9903      	ldr	r1, [sp, #12]
 800b2a4:	1a5b      	subs	r3, r3, r1
 800b2a6:	42ab      	cmp	r3, r5
 800b2a8:	dcf2      	bgt.n	800b290 <_printf_i+0x220>
 800b2aa:	e7eb      	b.n	800b284 <_printf_i+0x214>
 800b2ac:	2500      	movs	r5, #0
 800b2ae:	f104 0619 	add.w	r6, r4, #25
 800b2b2:	e7f5      	b.n	800b2a0 <_printf_i+0x230>
 800b2b4:	0800bdb6 	.word	0x0800bdb6
 800b2b8:	0800bdc7 	.word	0x0800bdc7

0800b2bc <_sbrk_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4d05      	ldr	r5, [pc, #20]	; (800b2d8 <_sbrk_r+0x1c>)
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	f7f6 fd1e 	bl	8001d08 <_sbrk>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_sbrk_r+0x1a>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_sbrk_r+0x1a>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	20000e44 	.word	0x20000e44

0800b2dc <__swbuf_r>:
 800b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2de:	460e      	mov	r6, r1
 800b2e0:	4614      	mov	r4, r2
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	b118      	cbz	r0, 800b2ee <__swbuf_r+0x12>
 800b2e6:	6983      	ldr	r3, [r0, #24]
 800b2e8:	b90b      	cbnz	r3, 800b2ee <__swbuf_r+0x12>
 800b2ea:	f000 f9d5 	bl	800b698 <__sinit>
 800b2ee:	4b21      	ldr	r3, [pc, #132]	; (800b374 <__swbuf_r+0x98>)
 800b2f0:	429c      	cmp	r4, r3
 800b2f2:	d12b      	bne.n	800b34c <__swbuf_r+0x70>
 800b2f4:	686c      	ldr	r4, [r5, #4]
 800b2f6:	69a3      	ldr	r3, [r4, #24]
 800b2f8:	60a3      	str	r3, [r4, #8]
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	071a      	lsls	r2, r3, #28
 800b2fe:	d52f      	bpl.n	800b360 <__swbuf_r+0x84>
 800b300:	6923      	ldr	r3, [r4, #16]
 800b302:	b36b      	cbz	r3, 800b360 <__swbuf_r+0x84>
 800b304:	6923      	ldr	r3, [r4, #16]
 800b306:	6820      	ldr	r0, [r4, #0]
 800b308:	b2f6      	uxtb	r6, r6
 800b30a:	1ac0      	subs	r0, r0, r3
 800b30c:	6963      	ldr	r3, [r4, #20]
 800b30e:	4637      	mov	r7, r6
 800b310:	4283      	cmp	r3, r0
 800b312:	dc04      	bgt.n	800b31e <__swbuf_r+0x42>
 800b314:	4621      	mov	r1, r4
 800b316:	4628      	mov	r0, r5
 800b318:	f000 f92a 	bl	800b570 <_fflush_r>
 800b31c:	bb30      	cbnz	r0, 800b36c <__swbuf_r+0x90>
 800b31e:	68a3      	ldr	r3, [r4, #8]
 800b320:	3001      	adds	r0, #1
 800b322:	3b01      	subs	r3, #1
 800b324:	60a3      	str	r3, [r4, #8]
 800b326:	6823      	ldr	r3, [r4, #0]
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	6022      	str	r2, [r4, #0]
 800b32c:	701e      	strb	r6, [r3, #0]
 800b32e:	6963      	ldr	r3, [r4, #20]
 800b330:	4283      	cmp	r3, r0
 800b332:	d004      	beq.n	800b33e <__swbuf_r+0x62>
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	07db      	lsls	r3, r3, #31
 800b338:	d506      	bpl.n	800b348 <__swbuf_r+0x6c>
 800b33a:	2e0a      	cmp	r6, #10
 800b33c:	d104      	bne.n	800b348 <__swbuf_r+0x6c>
 800b33e:	4621      	mov	r1, r4
 800b340:	4628      	mov	r0, r5
 800b342:	f000 f915 	bl	800b570 <_fflush_r>
 800b346:	b988      	cbnz	r0, 800b36c <__swbuf_r+0x90>
 800b348:	4638      	mov	r0, r7
 800b34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b34c:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <__swbuf_r+0x9c>)
 800b34e:	429c      	cmp	r4, r3
 800b350:	d101      	bne.n	800b356 <__swbuf_r+0x7a>
 800b352:	68ac      	ldr	r4, [r5, #8]
 800b354:	e7cf      	b.n	800b2f6 <__swbuf_r+0x1a>
 800b356:	4b09      	ldr	r3, [pc, #36]	; (800b37c <__swbuf_r+0xa0>)
 800b358:	429c      	cmp	r4, r3
 800b35a:	bf08      	it	eq
 800b35c:	68ec      	ldreq	r4, [r5, #12]
 800b35e:	e7ca      	b.n	800b2f6 <__swbuf_r+0x1a>
 800b360:	4621      	mov	r1, r4
 800b362:	4628      	mov	r0, r5
 800b364:	f000 f80c 	bl	800b380 <__swsetup_r>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d0cb      	beq.n	800b304 <__swbuf_r+0x28>
 800b36c:	f04f 37ff 	mov.w	r7, #4294967295
 800b370:	e7ea      	b.n	800b348 <__swbuf_r+0x6c>
 800b372:	bf00      	nop
 800b374:	0800bdf8 	.word	0x0800bdf8
 800b378:	0800be18 	.word	0x0800be18
 800b37c:	0800bdd8 	.word	0x0800bdd8

0800b380 <__swsetup_r>:
 800b380:	4b32      	ldr	r3, [pc, #200]	; (800b44c <__swsetup_r+0xcc>)
 800b382:	b570      	push	{r4, r5, r6, lr}
 800b384:	681d      	ldr	r5, [r3, #0]
 800b386:	4606      	mov	r6, r0
 800b388:	460c      	mov	r4, r1
 800b38a:	b125      	cbz	r5, 800b396 <__swsetup_r+0x16>
 800b38c:	69ab      	ldr	r3, [r5, #24]
 800b38e:	b913      	cbnz	r3, 800b396 <__swsetup_r+0x16>
 800b390:	4628      	mov	r0, r5
 800b392:	f000 f981 	bl	800b698 <__sinit>
 800b396:	4b2e      	ldr	r3, [pc, #184]	; (800b450 <__swsetup_r+0xd0>)
 800b398:	429c      	cmp	r4, r3
 800b39a:	d10f      	bne.n	800b3bc <__swsetup_r+0x3c>
 800b39c:	686c      	ldr	r4, [r5, #4]
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3a4:	0719      	lsls	r1, r3, #28
 800b3a6:	d42c      	bmi.n	800b402 <__swsetup_r+0x82>
 800b3a8:	06dd      	lsls	r5, r3, #27
 800b3aa:	d411      	bmi.n	800b3d0 <__swsetup_r+0x50>
 800b3ac:	2309      	movs	r3, #9
 800b3ae:	6033      	str	r3, [r6, #0]
 800b3b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b8:	81a3      	strh	r3, [r4, #12]
 800b3ba:	e03e      	b.n	800b43a <__swsetup_r+0xba>
 800b3bc:	4b25      	ldr	r3, [pc, #148]	; (800b454 <__swsetup_r+0xd4>)
 800b3be:	429c      	cmp	r4, r3
 800b3c0:	d101      	bne.n	800b3c6 <__swsetup_r+0x46>
 800b3c2:	68ac      	ldr	r4, [r5, #8]
 800b3c4:	e7eb      	b.n	800b39e <__swsetup_r+0x1e>
 800b3c6:	4b24      	ldr	r3, [pc, #144]	; (800b458 <__swsetup_r+0xd8>)
 800b3c8:	429c      	cmp	r4, r3
 800b3ca:	bf08      	it	eq
 800b3cc:	68ec      	ldreq	r4, [r5, #12]
 800b3ce:	e7e6      	b.n	800b39e <__swsetup_r+0x1e>
 800b3d0:	0758      	lsls	r0, r3, #29
 800b3d2:	d512      	bpl.n	800b3fa <__swsetup_r+0x7a>
 800b3d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3d6:	b141      	cbz	r1, 800b3ea <__swsetup_r+0x6a>
 800b3d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3dc:	4299      	cmp	r1, r3
 800b3de:	d002      	beq.n	800b3e6 <__swsetup_r+0x66>
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f7ff fa45 	bl	800a870 <_free_r>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6363      	str	r3, [r4, #52]	; 0x34
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	6063      	str	r3, [r4, #4]
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f043 0308 	orr.w	r3, r3, #8
 800b400:	81a3      	strh	r3, [r4, #12]
 800b402:	6923      	ldr	r3, [r4, #16]
 800b404:	b94b      	cbnz	r3, 800b41a <__swsetup_r+0x9a>
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b40c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b410:	d003      	beq.n	800b41a <__swsetup_r+0x9a>
 800b412:	4621      	mov	r1, r4
 800b414:	4630      	mov	r0, r6
 800b416:	f000 fa05 	bl	800b824 <__smakebuf_r>
 800b41a:	89a0      	ldrh	r0, [r4, #12]
 800b41c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b420:	f010 0301 	ands.w	r3, r0, #1
 800b424:	d00a      	beq.n	800b43c <__swsetup_r+0xbc>
 800b426:	2300      	movs	r3, #0
 800b428:	60a3      	str	r3, [r4, #8]
 800b42a:	6963      	ldr	r3, [r4, #20]
 800b42c:	425b      	negs	r3, r3
 800b42e:	61a3      	str	r3, [r4, #24]
 800b430:	6923      	ldr	r3, [r4, #16]
 800b432:	b943      	cbnz	r3, 800b446 <__swsetup_r+0xc6>
 800b434:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b438:	d1ba      	bne.n	800b3b0 <__swsetup_r+0x30>
 800b43a:	bd70      	pop	{r4, r5, r6, pc}
 800b43c:	0781      	lsls	r1, r0, #30
 800b43e:	bf58      	it	pl
 800b440:	6963      	ldrpl	r3, [r4, #20]
 800b442:	60a3      	str	r3, [r4, #8]
 800b444:	e7f4      	b.n	800b430 <__swsetup_r+0xb0>
 800b446:	2000      	movs	r0, #0
 800b448:	e7f7      	b.n	800b43a <__swsetup_r+0xba>
 800b44a:	bf00      	nop
 800b44c:	200001a8 	.word	0x200001a8
 800b450:	0800bdf8 	.word	0x0800bdf8
 800b454:	0800be18 	.word	0x0800be18
 800b458:	0800bdd8 	.word	0x0800bdd8

0800b45c <abort>:
 800b45c:	2006      	movs	r0, #6
 800b45e:	b508      	push	{r3, lr}
 800b460:	f000 faac 	bl	800b9bc <raise>
 800b464:	2001      	movs	r0, #1
 800b466:	f7f6 fbdc 	bl	8001c22 <_exit>
	...

0800b46c <__sflush_r>:
 800b46c:	898a      	ldrh	r2, [r1, #12]
 800b46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b470:	4605      	mov	r5, r0
 800b472:	0710      	lsls	r0, r2, #28
 800b474:	460c      	mov	r4, r1
 800b476:	d457      	bmi.n	800b528 <__sflush_r+0xbc>
 800b478:	684b      	ldr	r3, [r1, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	dc04      	bgt.n	800b488 <__sflush_r+0x1c>
 800b47e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b480:	2b00      	cmp	r3, #0
 800b482:	dc01      	bgt.n	800b488 <__sflush_r+0x1c>
 800b484:	2000      	movs	r0, #0
 800b486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b48a:	2e00      	cmp	r6, #0
 800b48c:	d0fa      	beq.n	800b484 <__sflush_r+0x18>
 800b48e:	2300      	movs	r3, #0
 800b490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b494:	682f      	ldr	r7, [r5, #0]
 800b496:	602b      	str	r3, [r5, #0]
 800b498:	d032      	beq.n	800b500 <__sflush_r+0x94>
 800b49a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	075a      	lsls	r2, r3, #29
 800b4a0:	d505      	bpl.n	800b4ae <__sflush_r+0x42>
 800b4a2:	6863      	ldr	r3, [r4, #4]
 800b4a4:	1ac0      	subs	r0, r0, r3
 800b4a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4a8:	b10b      	cbz	r3, 800b4ae <__sflush_r+0x42>
 800b4aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4ac:	1ac0      	subs	r0, r0, r3
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	6a21      	ldr	r1, [r4, #32]
 800b4b8:	47b0      	blx	r6
 800b4ba:	1c43      	adds	r3, r0, #1
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	d106      	bne.n	800b4ce <__sflush_r+0x62>
 800b4c0:	6829      	ldr	r1, [r5, #0]
 800b4c2:	291d      	cmp	r1, #29
 800b4c4:	d82c      	bhi.n	800b520 <__sflush_r+0xb4>
 800b4c6:	4a29      	ldr	r2, [pc, #164]	; (800b56c <__sflush_r+0x100>)
 800b4c8:	40ca      	lsrs	r2, r1
 800b4ca:	07d6      	lsls	r6, r2, #31
 800b4cc:	d528      	bpl.n	800b520 <__sflush_r+0xb4>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	6062      	str	r2, [r4, #4]
 800b4d2:	6922      	ldr	r2, [r4, #16]
 800b4d4:	04d9      	lsls	r1, r3, #19
 800b4d6:	6022      	str	r2, [r4, #0]
 800b4d8:	d504      	bpl.n	800b4e4 <__sflush_r+0x78>
 800b4da:	1c42      	adds	r2, r0, #1
 800b4dc:	d101      	bne.n	800b4e2 <__sflush_r+0x76>
 800b4de:	682b      	ldr	r3, [r5, #0]
 800b4e0:	b903      	cbnz	r3, 800b4e4 <__sflush_r+0x78>
 800b4e2:	6560      	str	r0, [r4, #84]	; 0x54
 800b4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4e6:	602f      	str	r7, [r5, #0]
 800b4e8:	2900      	cmp	r1, #0
 800b4ea:	d0cb      	beq.n	800b484 <__sflush_r+0x18>
 800b4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4f0:	4299      	cmp	r1, r3
 800b4f2:	d002      	beq.n	800b4fa <__sflush_r+0x8e>
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7ff f9bb 	bl	800a870 <_free_r>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b4fe:	e7c2      	b.n	800b486 <__sflush_r+0x1a>
 800b500:	6a21      	ldr	r1, [r4, #32]
 800b502:	2301      	movs	r3, #1
 800b504:	4628      	mov	r0, r5
 800b506:	47b0      	blx	r6
 800b508:	1c41      	adds	r1, r0, #1
 800b50a:	d1c7      	bne.n	800b49c <__sflush_r+0x30>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0c4      	beq.n	800b49c <__sflush_r+0x30>
 800b512:	2b1d      	cmp	r3, #29
 800b514:	d001      	beq.n	800b51a <__sflush_r+0xae>
 800b516:	2b16      	cmp	r3, #22
 800b518:	d101      	bne.n	800b51e <__sflush_r+0xb2>
 800b51a:	602f      	str	r7, [r5, #0]
 800b51c:	e7b2      	b.n	800b484 <__sflush_r+0x18>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	e7ae      	b.n	800b486 <__sflush_r+0x1a>
 800b528:	690f      	ldr	r7, [r1, #16]
 800b52a:	2f00      	cmp	r7, #0
 800b52c:	d0aa      	beq.n	800b484 <__sflush_r+0x18>
 800b52e:	0793      	lsls	r3, r2, #30
 800b530:	bf18      	it	ne
 800b532:	2300      	movne	r3, #0
 800b534:	680e      	ldr	r6, [r1, #0]
 800b536:	bf08      	it	eq
 800b538:	694b      	ldreq	r3, [r1, #20]
 800b53a:	1bf6      	subs	r6, r6, r7
 800b53c:	600f      	str	r7, [r1, #0]
 800b53e:	608b      	str	r3, [r1, #8]
 800b540:	2e00      	cmp	r6, #0
 800b542:	dd9f      	ble.n	800b484 <__sflush_r+0x18>
 800b544:	4633      	mov	r3, r6
 800b546:	463a      	mov	r2, r7
 800b548:	4628      	mov	r0, r5
 800b54a:	6a21      	ldr	r1, [r4, #32]
 800b54c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b550:	47e0      	blx	ip
 800b552:	2800      	cmp	r0, #0
 800b554:	dc06      	bgt.n	800b564 <__sflush_r+0xf8>
 800b556:	89a3      	ldrh	r3, [r4, #12]
 800b558:	f04f 30ff 	mov.w	r0, #4294967295
 800b55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	e790      	b.n	800b486 <__sflush_r+0x1a>
 800b564:	4407      	add	r7, r0
 800b566:	1a36      	subs	r6, r6, r0
 800b568:	e7ea      	b.n	800b540 <__sflush_r+0xd4>
 800b56a:	bf00      	nop
 800b56c:	20400001 	.word	0x20400001

0800b570 <_fflush_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	690b      	ldr	r3, [r1, #16]
 800b574:	4605      	mov	r5, r0
 800b576:	460c      	mov	r4, r1
 800b578:	b913      	cbnz	r3, 800b580 <_fflush_r+0x10>
 800b57a:	2500      	movs	r5, #0
 800b57c:	4628      	mov	r0, r5
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	b118      	cbz	r0, 800b58a <_fflush_r+0x1a>
 800b582:	6983      	ldr	r3, [r0, #24]
 800b584:	b90b      	cbnz	r3, 800b58a <_fflush_r+0x1a>
 800b586:	f000 f887 	bl	800b698 <__sinit>
 800b58a:	4b14      	ldr	r3, [pc, #80]	; (800b5dc <_fflush_r+0x6c>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d11b      	bne.n	800b5c8 <_fflush_r+0x58>
 800b590:	686c      	ldr	r4, [r5, #4]
 800b592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0ef      	beq.n	800b57a <_fflush_r+0xa>
 800b59a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b59c:	07d0      	lsls	r0, r2, #31
 800b59e:	d404      	bmi.n	800b5aa <_fflush_r+0x3a>
 800b5a0:	0599      	lsls	r1, r3, #22
 800b5a2:	d402      	bmi.n	800b5aa <_fflush_r+0x3a>
 800b5a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5a6:	f000 f915 	bl	800b7d4 <__retarget_lock_acquire_recursive>
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	f7ff ff5d 	bl	800b46c <__sflush_r>
 800b5b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	07da      	lsls	r2, r3, #31
 800b5b8:	d4e0      	bmi.n	800b57c <_fflush_r+0xc>
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	059b      	lsls	r3, r3, #22
 800b5be:	d4dd      	bmi.n	800b57c <_fflush_r+0xc>
 800b5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5c2:	f000 f908 	bl	800b7d6 <__retarget_lock_release_recursive>
 800b5c6:	e7d9      	b.n	800b57c <_fflush_r+0xc>
 800b5c8:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <_fflush_r+0x70>)
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d101      	bne.n	800b5d2 <_fflush_r+0x62>
 800b5ce:	68ac      	ldr	r4, [r5, #8]
 800b5d0:	e7df      	b.n	800b592 <_fflush_r+0x22>
 800b5d2:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <_fflush_r+0x74>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	bf08      	it	eq
 800b5d8:	68ec      	ldreq	r4, [r5, #12]
 800b5da:	e7da      	b.n	800b592 <_fflush_r+0x22>
 800b5dc:	0800bdf8 	.word	0x0800bdf8
 800b5e0:	0800be18 	.word	0x0800be18
 800b5e4:	0800bdd8 	.word	0x0800bdd8

0800b5e8 <std>:
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5f6:	6083      	str	r3, [r0, #8]
 800b5f8:	8181      	strh	r1, [r0, #12]
 800b5fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b5fc:	81c2      	strh	r2, [r0, #14]
 800b5fe:	6183      	str	r3, [r0, #24]
 800b600:	4619      	mov	r1, r3
 800b602:	2208      	movs	r2, #8
 800b604:	305c      	adds	r0, #92	; 0x5c
 800b606:	f7fe ffe9 	bl	800a5dc <memset>
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <std+0x38>)
 800b60c:	6224      	str	r4, [r4, #32]
 800b60e:	6263      	str	r3, [r4, #36]	; 0x24
 800b610:	4b04      	ldr	r3, [pc, #16]	; (800b624 <std+0x3c>)
 800b612:	62a3      	str	r3, [r4, #40]	; 0x28
 800b614:	4b04      	ldr	r3, [pc, #16]	; (800b628 <std+0x40>)
 800b616:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b618:	4b04      	ldr	r3, [pc, #16]	; (800b62c <std+0x44>)
 800b61a:	6323      	str	r3, [r4, #48]	; 0x30
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	bf00      	nop
 800b620:	0800b9f5 	.word	0x0800b9f5
 800b624:	0800ba17 	.word	0x0800ba17
 800b628:	0800ba4f 	.word	0x0800ba4f
 800b62c:	0800ba73 	.word	0x0800ba73

0800b630 <_cleanup_r>:
 800b630:	4901      	ldr	r1, [pc, #4]	; (800b638 <_cleanup_r+0x8>)
 800b632:	f000 b8af 	b.w	800b794 <_fwalk_reent>
 800b636:	bf00      	nop
 800b638:	0800b571 	.word	0x0800b571

0800b63c <__sfmoreglue>:
 800b63c:	2268      	movs	r2, #104	; 0x68
 800b63e:	b570      	push	{r4, r5, r6, lr}
 800b640:	1e4d      	subs	r5, r1, #1
 800b642:	4355      	muls	r5, r2
 800b644:	460e      	mov	r6, r1
 800b646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b64a:	f7ff f979 	bl	800a940 <_malloc_r>
 800b64e:	4604      	mov	r4, r0
 800b650:	b140      	cbz	r0, 800b664 <__sfmoreglue+0x28>
 800b652:	2100      	movs	r1, #0
 800b654:	e9c0 1600 	strd	r1, r6, [r0]
 800b658:	300c      	adds	r0, #12
 800b65a:	60a0      	str	r0, [r4, #8]
 800b65c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b660:	f7fe ffbc 	bl	800a5dc <memset>
 800b664:	4620      	mov	r0, r4
 800b666:	bd70      	pop	{r4, r5, r6, pc}

0800b668 <__sfp_lock_acquire>:
 800b668:	4801      	ldr	r0, [pc, #4]	; (800b670 <__sfp_lock_acquire+0x8>)
 800b66a:	f000 b8b3 	b.w	800b7d4 <__retarget_lock_acquire_recursive>
 800b66e:	bf00      	nop
 800b670:	20000e41 	.word	0x20000e41

0800b674 <__sfp_lock_release>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__sfp_lock_release+0x8>)
 800b676:	f000 b8ae 	b.w	800b7d6 <__retarget_lock_release_recursive>
 800b67a:	bf00      	nop
 800b67c:	20000e41 	.word	0x20000e41

0800b680 <__sinit_lock_acquire>:
 800b680:	4801      	ldr	r0, [pc, #4]	; (800b688 <__sinit_lock_acquire+0x8>)
 800b682:	f000 b8a7 	b.w	800b7d4 <__retarget_lock_acquire_recursive>
 800b686:	bf00      	nop
 800b688:	20000e42 	.word	0x20000e42

0800b68c <__sinit_lock_release>:
 800b68c:	4801      	ldr	r0, [pc, #4]	; (800b694 <__sinit_lock_release+0x8>)
 800b68e:	f000 b8a2 	b.w	800b7d6 <__retarget_lock_release_recursive>
 800b692:	bf00      	nop
 800b694:	20000e42 	.word	0x20000e42

0800b698 <__sinit>:
 800b698:	b510      	push	{r4, lr}
 800b69a:	4604      	mov	r4, r0
 800b69c:	f7ff fff0 	bl	800b680 <__sinit_lock_acquire>
 800b6a0:	69a3      	ldr	r3, [r4, #24]
 800b6a2:	b11b      	cbz	r3, 800b6ac <__sinit+0x14>
 800b6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a8:	f7ff bff0 	b.w	800b68c <__sinit_lock_release>
 800b6ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6b2:	4b13      	ldr	r3, [pc, #76]	; (800b700 <__sinit+0x68>)
 800b6b4:	4a13      	ldr	r2, [pc, #76]	; (800b704 <__sinit+0x6c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6ba:	42a3      	cmp	r3, r4
 800b6bc:	bf08      	it	eq
 800b6be:	2301      	moveq	r3, #1
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	bf08      	it	eq
 800b6c4:	61a3      	streq	r3, [r4, #24]
 800b6c6:	f000 f81f 	bl	800b708 <__sfp>
 800b6ca:	6060      	str	r0, [r4, #4]
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f000 f81b 	bl	800b708 <__sfp>
 800b6d2:	60a0      	str	r0, [r4, #8]
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f000 f817 	bl	800b708 <__sfp>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2104      	movs	r1, #4
 800b6de:	60e0      	str	r0, [r4, #12]
 800b6e0:	6860      	ldr	r0, [r4, #4]
 800b6e2:	f7ff ff81 	bl	800b5e8 <std>
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	2109      	movs	r1, #9
 800b6ea:	68a0      	ldr	r0, [r4, #8]
 800b6ec:	f7ff ff7c 	bl	800b5e8 <std>
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	2112      	movs	r1, #18
 800b6f4:	68e0      	ldr	r0, [r4, #12]
 800b6f6:	f7ff ff77 	bl	800b5e8 <std>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	61a3      	str	r3, [r4, #24]
 800b6fe:	e7d1      	b.n	800b6a4 <__sinit+0xc>
 800b700:	0800bbf0 	.word	0x0800bbf0
 800b704:	0800b631 	.word	0x0800b631

0800b708 <__sfp>:
 800b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70a:	4607      	mov	r7, r0
 800b70c:	f7ff ffac 	bl	800b668 <__sfp_lock_acquire>
 800b710:	4b1e      	ldr	r3, [pc, #120]	; (800b78c <__sfp+0x84>)
 800b712:	681e      	ldr	r6, [r3, #0]
 800b714:	69b3      	ldr	r3, [r6, #24]
 800b716:	b913      	cbnz	r3, 800b71e <__sfp+0x16>
 800b718:	4630      	mov	r0, r6
 800b71a:	f7ff ffbd 	bl	800b698 <__sinit>
 800b71e:	3648      	adds	r6, #72	; 0x48
 800b720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b724:	3b01      	subs	r3, #1
 800b726:	d503      	bpl.n	800b730 <__sfp+0x28>
 800b728:	6833      	ldr	r3, [r6, #0]
 800b72a:	b30b      	cbz	r3, 800b770 <__sfp+0x68>
 800b72c:	6836      	ldr	r6, [r6, #0]
 800b72e:	e7f7      	b.n	800b720 <__sfp+0x18>
 800b730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b734:	b9d5      	cbnz	r5, 800b76c <__sfp+0x64>
 800b736:	4b16      	ldr	r3, [pc, #88]	; (800b790 <__sfp+0x88>)
 800b738:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b73c:	60e3      	str	r3, [r4, #12]
 800b73e:	6665      	str	r5, [r4, #100]	; 0x64
 800b740:	f000 f847 	bl	800b7d2 <__retarget_lock_init_recursive>
 800b744:	f7ff ff96 	bl	800b674 <__sfp_lock_release>
 800b748:	2208      	movs	r2, #8
 800b74a:	4629      	mov	r1, r5
 800b74c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b754:	6025      	str	r5, [r4, #0]
 800b756:	61a5      	str	r5, [r4, #24]
 800b758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b75c:	f7fe ff3e 	bl	800a5dc <memset>
 800b760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b768:	4620      	mov	r0, r4
 800b76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b76c:	3468      	adds	r4, #104	; 0x68
 800b76e:	e7d9      	b.n	800b724 <__sfp+0x1c>
 800b770:	2104      	movs	r1, #4
 800b772:	4638      	mov	r0, r7
 800b774:	f7ff ff62 	bl	800b63c <__sfmoreglue>
 800b778:	4604      	mov	r4, r0
 800b77a:	6030      	str	r0, [r6, #0]
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d1d5      	bne.n	800b72c <__sfp+0x24>
 800b780:	f7ff ff78 	bl	800b674 <__sfp_lock_release>
 800b784:	230c      	movs	r3, #12
 800b786:	603b      	str	r3, [r7, #0]
 800b788:	e7ee      	b.n	800b768 <__sfp+0x60>
 800b78a:	bf00      	nop
 800b78c:	0800bbf0 	.word	0x0800bbf0
 800b790:	ffff0001 	.word	0xffff0001

0800b794 <_fwalk_reent>:
 800b794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b798:	4606      	mov	r6, r0
 800b79a:	4688      	mov	r8, r1
 800b79c:	2700      	movs	r7, #0
 800b79e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b7aa:	d505      	bpl.n	800b7b8 <_fwalk_reent+0x24>
 800b7ac:	6824      	ldr	r4, [r4, #0]
 800b7ae:	2c00      	cmp	r4, #0
 800b7b0:	d1f7      	bne.n	800b7a2 <_fwalk_reent+0xe>
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b8:	89ab      	ldrh	r3, [r5, #12]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d907      	bls.n	800b7ce <_fwalk_reent+0x3a>
 800b7be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	d003      	beq.n	800b7ce <_fwalk_reent+0x3a>
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	47c0      	blx	r8
 800b7cc:	4307      	orrs	r7, r0
 800b7ce:	3568      	adds	r5, #104	; 0x68
 800b7d0:	e7e9      	b.n	800b7a6 <_fwalk_reent+0x12>

0800b7d2 <__retarget_lock_init_recursive>:
 800b7d2:	4770      	bx	lr

0800b7d4 <__retarget_lock_acquire_recursive>:
 800b7d4:	4770      	bx	lr

0800b7d6 <__retarget_lock_release_recursive>:
 800b7d6:	4770      	bx	lr

0800b7d8 <__swhatbuf_r>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	460e      	mov	r6, r1
 800b7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e0:	4614      	mov	r4, r2
 800b7e2:	2900      	cmp	r1, #0
 800b7e4:	461d      	mov	r5, r3
 800b7e6:	b096      	sub	sp, #88	; 0x58
 800b7e8:	da08      	bge.n	800b7fc <__swhatbuf_r+0x24>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7f0:	602a      	str	r2, [r5, #0]
 800b7f2:	061a      	lsls	r2, r3, #24
 800b7f4:	d410      	bmi.n	800b818 <__swhatbuf_r+0x40>
 800b7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7fa:	e00e      	b.n	800b81a <__swhatbuf_r+0x42>
 800b7fc:	466a      	mov	r2, sp
 800b7fe:	f000 f95f 	bl	800bac0 <_fstat_r>
 800b802:	2800      	cmp	r0, #0
 800b804:	dbf1      	blt.n	800b7ea <__swhatbuf_r+0x12>
 800b806:	9a01      	ldr	r2, [sp, #4]
 800b808:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b80c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b810:	425a      	negs	r2, r3
 800b812:	415a      	adcs	r2, r3
 800b814:	602a      	str	r2, [r5, #0]
 800b816:	e7ee      	b.n	800b7f6 <__swhatbuf_r+0x1e>
 800b818:	2340      	movs	r3, #64	; 0x40
 800b81a:	2000      	movs	r0, #0
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	b016      	add	sp, #88	; 0x58
 800b820:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b824 <__smakebuf_r>:
 800b824:	898b      	ldrh	r3, [r1, #12]
 800b826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b828:	079d      	lsls	r5, r3, #30
 800b82a:	4606      	mov	r6, r0
 800b82c:	460c      	mov	r4, r1
 800b82e:	d507      	bpl.n	800b840 <__smakebuf_r+0x1c>
 800b830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	6123      	str	r3, [r4, #16]
 800b838:	2301      	movs	r3, #1
 800b83a:	6163      	str	r3, [r4, #20]
 800b83c:	b002      	add	sp, #8
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	466a      	mov	r2, sp
 800b842:	ab01      	add	r3, sp, #4
 800b844:	f7ff ffc8 	bl	800b7d8 <__swhatbuf_r>
 800b848:	9900      	ldr	r1, [sp, #0]
 800b84a:	4605      	mov	r5, r0
 800b84c:	4630      	mov	r0, r6
 800b84e:	f7ff f877 	bl	800a940 <_malloc_r>
 800b852:	b948      	cbnz	r0, 800b868 <__smakebuf_r+0x44>
 800b854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b858:	059a      	lsls	r2, r3, #22
 800b85a:	d4ef      	bmi.n	800b83c <__smakebuf_r+0x18>
 800b85c:	f023 0303 	bic.w	r3, r3, #3
 800b860:	f043 0302 	orr.w	r3, r3, #2
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	e7e3      	b.n	800b830 <__smakebuf_r+0xc>
 800b868:	4b0d      	ldr	r3, [pc, #52]	; (800b8a0 <__smakebuf_r+0x7c>)
 800b86a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	6020      	str	r0, [r4, #0]
 800b870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	9b00      	ldr	r3, [sp, #0]
 800b878:	6120      	str	r0, [r4, #16]
 800b87a:	6163      	str	r3, [r4, #20]
 800b87c:	9b01      	ldr	r3, [sp, #4]
 800b87e:	b15b      	cbz	r3, 800b898 <__smakebuf_r+0x74>
 800b880:	4630      	mov	r0, r6
 800b882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b886:	f000 f92d 	bl	800bae4 <_isatty_r>
 800b88a:	b128      	cbz	r0, 800b898 <__smakebuf_r+0x74>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f023 0303 	bic.w	r3, r3, #3
 800b892:	f043 0301 	orr.w	r3, r3, #1
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	89a0      	ldrh	r0, [r4, #12]
 800b89a:	4305      	orrs	r5, r0
 800b89c:	81a5      	strh	r5, [r4, #12]
 800b89e:	e7cd      	b.n	800b83c <__smakebuf_r+0x18>
 800b8a0:	0800b631 	.word	0x0800b631

0800b8a4 <memchr>:
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	b510      	push	{r4, lr}
 800b8a8:	b2c9      	uxtb	r1, r1
 800b8aa:	4402      	add	r2, r0
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	d101      	bne.n	800b8b6 <memchr+0x12>
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	e003      	b.n	800b8be <memchr+0x1a>
 800b8b6:	7804      	ldrb	r4, [r0, #0]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	428c      	cmp	r4, r1
 800b8bc:	d1f6      	bne.n	800b8ac <memchr+0x8>
 800b8be:	bd10      	pop	{r4, pc}

0800b8c0 <memmove>:
 800b8c0:	4288      	cmp	r0, r1
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	eb01 0402 	add.w	r4, r1, r2
 800b8c8:	d902      	bls.n	800b8d0 <memmove+0x10>
 800b8ca:	4284      	cmp	r4, r0
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	d807      	bhi.n	800b8e0 <memmove+0x20>
 800b8d0:	1e43      	subs	r3, r0, #1
 800b8d2:	42a1      	cmp	r1, r4
 800b8d4:	d008      	beq.n	800b8e8 <memmove+0x28>
 800b8d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8de:	e7f8      	b.n	800b8d2 <memmove+0x12>
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	4402      	add	r2, r0
 800b8e4:	428a      	cmp	r2, r1
 800b8e6:	d100      	bne.n	800b8ea <memmove+0x2a>
 800b8e8:	bd10      	pop	{r4, pc}
 800b8ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8f2:	e7f7      	b.n	800b8e4 <memmove+0x24>

0800b8f4 <__malloc_lock>:
 800b8f4:	4801      	ldr	r0, [pc, #4]	; (800b8fc <__malloc_lock+0x8>)
 800b8f6:	f7ff bf6d 	b.w	800b7d4 <__retarget_lock_acquire_recursive>
 800b8fa:	bf00      	nop
 800b8fc:	20000e40 	.word	0x20000e40

0800b900 <__malloc_unlock>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__malloc_unlock+0x8>)
 800b902:	f7ff bf68 	b.w	800b7d6 <__retarget_lock_release_recursive>
 800b906:	bf00      	nop
 800b908:	20000e40 	.word	0x20000e40

0800b90c <_realloc_r>:
 800b90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b910:	4680      	mov	r8, r0
 800b912:	4614      	mov	r4, r2
 800b914:	460e      	mov	r6, r1
 800b916:	b921      	cbnz	r1, 800b922 <_realloc_r+0x16>
 800b918:	4611      	mov	r1, r2
 800b91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b91e:	f7ff b80f 	b.w	800a940 <_malloc_r>
 800b922:	b92a      	cbnz	r2, 800b930 <_realloc_r+0x24>
 800b924:	f7fe ffa4 	bl	800a870 <_free_r>
 800b928:	4625      	mov	r5, r4
 800b92a:	4628      	mov	r0, r5
 800b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b930:	f000 f8fa 	bl	800bb28 <_malloc_usable_size_r>
 800b934:	4284      	cmp	r4, r0
 800b936:	4607      	mov	r7, r0
 800b938:	d802      	bhi.n	800b940 <_realloc_r+0x34>
 800b93a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b93e:	d812      	bhi.n	800b966 <_realloc_r+0x5a>
 800b940:	4621      	mov	r1, r4
 800b942:	4640      	mov	r0, r8
 800b944:	f7fe fffc 	bl	800a940 <_malloc_r>
 800b948:	4605      	mov	r5, r0
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d0ed      	beq.n	800b92a <_realloc_r+0x1e>
 800b94e:	42bc      	cmp	r4, r7
 800b950:	4622      	mov	r2, r4
 800b952:	4631      	mov	r1, r6
 800b954:	bf28      	it	cs
 800b956:	463a      	movcs	r2, r7
 800b958:	f7fe fe32 	bl	800a5c0 <memcpy>
 800b95c:	4631      	mov	r1, r6
 800b95e:	4640      	mov	r0, r8
 800b960:	f7fe ff86 	bl	800a870 <_free_r>
 800b964:	e7e1      	b.n	800b92a <_realloc_r+0x1e>
 800b966:	4635      	mov	r5, r6
 800b968:	e7df      	b.n	800b92a <_realloc_r+0x1e>

0800b96a <_raise_r>:
 800b96a:	291f      	cmp	r1, #31
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
 800b972:	d904      	bls.n	800b97e <_raise_r+0x14>
 800b974:	2316      	movs	r3, #22
 800b976:	6003      	str	r3, [r0, #0]
 800b978:	f04f 30ff 	mov.w	r0, #4294967295
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b980:	b112      	cbz	r2, 800b988 <_raise_r+0x1e>
 800b982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b986:	b94b      	cbnz	r3, 800b99c <_raise_r+0x32>
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 f831 	bl	800b9f0 <_getpid_r>
 800b98e:	462a      	mov	r2, r5
 800b990:	4601      	mov	r1, r0
 800b992:	4620      	mov	r0, r4
 800b994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b998:	f000 b818 	b.w	800b9cc <_kill_r>
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d00a      	beq.n	800b9b6 <_raise_r+0x4c>
 800b9a0:	1c59      	adds	r1, r3, #1
 800b9a2:	d103      	bne.n	800b9ac <_raise_r+0x42>
 800b9a4:	2316      	movs	r3, #22
 800b9a6:	6003      	str	r3, [r0, #0]
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	e7e7      	b.n	800b97c <_raise_r+0x12>
 800b9ac:	2400      	movs	r4, #0
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9b4:	4798      	blx	r3
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e7e0      	b.n	800b97c <_raise_r+0x12>
	...

0800b9bc <raise>:
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <raise+0xc>)
 800b9be:	4601      	mov	r1, r0
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	f7ff bfd2 	b.w	800b96a <_raise_r>
 800b9c6:	bf00      	nop
 800b9c8:	200001a8 	.word	0x200001a8

0800b9cc <_kill_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	4d06      	ldr	r5, [pc, #24]	; (800b9ec <_kill_r+0x20>)
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	602b      	str	r3, [r5, #0]
 800b9da:	f7f6 f912 	bl	8001c02 <_kill>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d102      	bne.n	800b9e8 <_kill_r+0x1c>
 800b9e2:	682b      	ldr	r3, [r5, #0]
 800b9e4:	b103      	cbz	r3, 800b9e8 <_kill_r+0x1c>
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20000e44 	.word	0x20000e44

0800b9f0 <_getpid_r>:
 800b9f0:	f7f6 b900 	b.w	8001bf4 <_getpid>

0800b9f4 <__sread>:
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fc:	f000 f89c 	bl	800bb38 <_read_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	bfab      	itete	ge
 800ba04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba06:	89a3      	ldrhlt	r3, [r4, #12]
 800ba08:	181b      	addge	r3, r3, r0
 800ba0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba0e:	bfac      	ite	ge
 800ba10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba12:	81a3      	strhlt	r3, [r4, #12]
 800ba14:	bd10      	pop	{r4, pc}

0800ba16 <__swrite>:
 800ba16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	461f      	mov	r7, r3
 800ba1c:	898b      	ldrh	r3, [r1, #12]
 800ba1e:	4605      	mov	r5, r0
 800ba20:	05db      	lsls	r3, r3, #23
 800ba22:	460c      	mov	r4, r1
 800ba24:	4616      	mov	r6, r2
 800ba26:	d505      	bpl.n	800ba34 <__swrite+0x1e>
 800ba28:	2302      	movs	r3, #2
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba30:	f000 f868 	bl	800bb04 <_lseek_r>
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	4632      	mov	r2, r6
 800ba38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba3c:	81a3      	strh	r3, [r4, #12]
 800ba3e:	4628      	mov	r0, r5
 800ba40:	463b      	mov	r3, r7
 800ba42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4a:	f000 b817 	b.w	800ba7c <_write_r>

0800ba4e <__sseek>:
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	460c      	mov	r4, r1
 800ba52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba56:	f000 f855 	bl	800bb04 <_lseek_r>
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	bf15      	itete	ne
 800ba60:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba6a:	81a3      	strheq	r3, [r4, #12]
 800ba6c:	bf18      	it	ne
 800ba6e:	81a3      	strhne	r3, [r4, #12]
 800ba70:	bd10      	pop	{r4, pc}

0800ba72 <__sclose>:
 800ba72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba76:	f000 b813 	b.w	800baa0 <_close_r>
	...

0800ba7c <_write_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	4611      	mov	r1, r2
 800ba84:	2200      	movs	r2, #0
 800ba86:	4d05      	ldr	r5, [pc, #20]	; (800ba9c <_write_r+0x20>)
 800ba88:	602a      	str	r2, [r5, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	f7f6 f8f0 	bl	8001c70 <_write>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_write_r+0x1e>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_write_r+0x1e>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	20000e44 	.word	0x20000e44

0800baa0 <_close_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	2300      	movs	r3, #0
 800baa4:	4d05      	ldr	r5, [pc, #20]	; (800babc <_close_r+0x1c>)
 800baa6:	4604      	mov	r4, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	f7f6 f8fc 	bl	8001ca8 <_close>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_close_r+0x1a>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_close_r+0x1a>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20000e44 	.word	0x20000e44

0800bac0 <_fstat_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	2300      	movs	r3, #0
 800bac4:	4d06      	ldr	r5, [pc, #24]	; (800bae0 <_fstat_r+0x20>)
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	4611      	mov	r1, r2
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	f7f6 f8f6 	bl	8001cbe <_fstat>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	d102      	bne.n	800badc <_fstat_r+0x1c>
 800bad6:	682b      	ldr	r3, [r5, #0]
 800bad8:	b103      	cbz	r3, 800badc <_fstat_r+0x1c>
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	bd38      	pop	{r3, r4, r5, pc}
 800bade:	bf00      	nop
 800bae0:	20000e44 	.word	0x20000e44

0800bae4 <_isatty_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	2300      	movs	r3, #0
 800bae8:	4d05      	ldr	r5, [pc, #20]	; (800bb00 <_isatty_r+0x1c>)
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f6 f8f4 	bl	8001cdc <_isatty>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_isatty_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_isatty_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20000e44 	.word	0x20000e44

0800bb04 <_lseek_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4d05      	ldr	r5, [pc, #20]	; (800bb24 <_lseek_r+0x20>)
 800bb10:	602a      	str	r2, [r5, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	f7f6 f8ec 	bl	8001cf0 <_lseek>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_lseek_r+0x1e>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_lseek_r+0x1e>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	20000e44 	.word	0x20000e44

0800bb28 <_malloc_usable_size_r>:
 800bb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb2c:	1f18      	subs	r0, r3, #4
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	bfbc      	itt	lt
 800bb32:	580b      	ldrlt	r3, [r1, r0]
 800bb34:	18c0      	addlt	r0, r0, r3
 800bb36:	4770      	bx	lr

0800bb38 <_read_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	4611      	mov	r1, r2
 800bb40:	2200      	movs	r2, #0
 800bb42:	4d05      	ldr	r5, [pc, #20]	; (800bb58 <_read_r+0x20>)
 800bb44:	602a      	str	r2, [r5, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	f7f6 f875 	bl	8001c36 <_read>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_read_r+0x1e>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_read_r+0x1e>
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	20000e44 	.word	0x20000e44

0800bb5c <_init>:
 800bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5e:	bf00      	nop
 800bb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb62:	bc08      	pop	{r3}
 800bb64:	469e      	mov	lr, r3
 800bb66:	4770      	bx	lr

0800bb68 <_fini>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	bf00      	nop
 800bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6e:	bc08      	pop	{r3}
 800bb70:	469e      	mov	lr, r3
 800bb72:	4770      	bx	lr

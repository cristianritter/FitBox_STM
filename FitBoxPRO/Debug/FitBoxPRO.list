
FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007e6c  08007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed0  08007ed0  00020144  2**0
                  CONTENTS
  4 .ARM          00000000  08007ed0  08007ed0  00020144  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ed0  08007ed0  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08007ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  20000144  0800801c  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a8  0800801c  000209a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddb1  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c82  00000000  00000000  0002df1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00030ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  00031778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a089  00000000  00000000  000321e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe1d  00000000  00000000  0004c271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b3c  00000000  00000000  0005c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5bca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc4  00000000  00000000  000e5c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000144 	.word	0x20000144
 8000128:	00000000 	.word	0x00000000
 800012c:	08007e54 	.word	0x08007e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000148 	.word	0x20000148
 8000148:	08007e54 	.word	0x08007e54

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa0a 	bl	8000568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c2 	bl	80002e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8a2 	bl	80002a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f862 	bl	8000228 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000164:	f007 fa5c 	bl	8007620 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000168:	e7fe      	b.n	8000168 <main+0x1c>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b094      	sub	sp, #80	; 0x50
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f007 fe63 	bl	8007e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	f107 0314 	add.w	r3, r7, #20
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]
 8000186:	605a      	str	r2, [r3, #4]
 8000188:	609a      	str	r2, [r3, #8]
 800018a:	60da      	str	r2, [r3, #12]
 800018c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a4:	2300      	movs	r3, #0
 80001a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 fd15 	bl	8002bf0 <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001cc:	f000 f8d4 	bl	8000378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001e6:	f107 0314 	add.w	r3, r7, #20
 80001ea:	2101      	movs	r1, #1
 80001ec:	4618      	mov	r0, r3
 80001ee:	f002 ff81 	bl	80030f4 <HAL_RCC_ClockConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f8:	f000 f8be 	bl	8000378 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80001fc:	2312      	movs	r3, #18
 80001fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000204:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000206:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800020a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4618      	mov	r0, r3
 8000210:	f003 f8d6 	bl	80033c0 <HAL_RCCEx_PeriphCLKConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800021a:	f000 f8ad 	bl	8000378 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3750      	adds	r7, #80	; 0x50
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_ADC1_Init+0x74>)
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <MX_ADC1_Init+0x78>)
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023e:	4b17      	ldr	r3, [pc, #92]	; (800029c <MX_ADC1_Init+0x74>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_ADC1_Init+0x74>)
 8000246:	2200      	movs	r2, #0
 8000248:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <MX_ADC1_Init+0x74>)
 800024c:	2200      	movs	r2, #0
 800024e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_ADC1_Init+0x74>)
 8000252:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000256:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <MX_ADC1_Init+0x74>)
 800025a:	2200      	movs	r2, #0
 800025c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_ADC1_Init+0x74>)
 8000260:	2201      	movs	r2, #1
 8000262:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <MX_ADC1_Init+0x74>)
 8000266:	f000 f9e1 	bl	800062c <HAL_ADC_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f882 	bl	8000378 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000274:	2300      	movs	r3, #0
 8000276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000278:	2301      	movs	r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_ADC1_Init+0x74>)
 8000286:	f000 faa9 	bl	80007dc <HAL_ADC_ConfigChannel>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000290:	f000 f872 	bl	8000378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000160 	.word	0x20000160
 80002a0:	40012400 	.word	0x40012400

080002a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_DMA_Init+0x38>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <MX_DMA_Init+0x38>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6153      	str	r3, [r2, #20]
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_DMA_Init+0x38>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2100      	movs	r1, #0
 80002c6:	200b      	movs	r0, #11
 80002c8:	f000 fc99 	bl	8000bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002cc:	200b      	movs	r0, #11
 80002ce:	f000 fcb2 	bl	8000c36 <HAL_NVIC_EnableIRQ>

}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a1d      	ldr	r2, [pc, #116]	; (8000370 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a17      	ldr	r2, [pc, #92]	; (8000370 <MX_GPIO_Init+0x90>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0320 	and.w	r3, r3, #32
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_GPIO_Init+0x90>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a11      	ldr	r2, [pc, #68]	; (8000370 <MX_GPIO_Init+0x90>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0304 	and.w	r3, r3, #4
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <MX_GPIO_Init+0x94>)
 8000344:	f000 ff76 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2302      	movs	r3, #2
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	4619      	mov	r1, r3
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_GPIO_Init+0x94>)
 8000362:	f000 fde3 	bl	8000f2c <HAL_GPIO_Init>

}
 8000366:	bf00      	nop
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40011000 	.word	0x40011000

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
}
 800037e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000380:	e7fe      	b.n	8000380 <Error_Handler+0x8>
	...

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <HAL_MspInit+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <HAL_MspInit+0x40>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <HAL_MspInit+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <HAL_MspInit+0x40>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <HAL_MspInit+0x40>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <HAL_MspInit+0x40>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000

080003c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a28      	ldr	r2, [pc, #160]	; (8000484 <HAL_ADC_MspInit+0xbc>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d149      	bne.n	800047c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <HAL_ADC_MspInit+0xc0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a26      	ldr	r2, [pc, #152]	; (8000488 <HAL_ADC_MspInit+0xc0>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <HAL_ADC_MspInit+0xc0>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <HAL_ADC_MspInit+0xc0>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <HAL_ADC_MspInit+0xc0>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <HAL_ADC_MspInit+0xc0>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000418:	2307      	movs	r3, #7
 800041a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041c:	2303      	movs	r3, #3
 800041e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	4819      	ldr	r0, [pc, #100]	; (800048c <HAL_ADC_MspInit+0xc4>)
 8000428:	f000 fd80 	bl	8000f2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <HAL_ADC_MspInit+0xcc>)
 8000430:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 8000446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800044a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 800044e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000452:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 8000456:	2200      	movs	r2, #0
 8000458:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 800045c:	2200      	movs	r2, #0
 800045e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000460:	480b      	ldr	r0, [pc, #44]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 8000462:	f000 fc03 	bl	8000c6c <HAL_DMA_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800046c:	f7ff ff84 	bl	8000378 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a07      	ldr	r2, [pc, #28]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	4a06      	ldr	r2, [pc, #24]	; (8000490 <HAL_ADC_MspInit+0xc8>)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40012400 	.word	0x40012400
 8000488:	40021000 	.word	0x40021000
 800048c:	40010800 	.word	0x40010800
 8000490:	20000190 	.word	0x20000190
 8000494:	40020008 	.word	0x40020008

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800049c:	e7fe      	b.n	800049c <NMI_Handler+0x4>

0800049e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0x4>

080004a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <MemManage_Handler+0x4>

080004aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004de:	f000 f889 	bl	80005f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <DMA1_Channel1_IRQHandler+0x10>)
 80004ee:	f000 fc17 	bl	8000d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000190 	.word	0x20000190

080004fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000502:	f000 fff9 	bl	80014f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200006a0 	.word	0x200006a0

08000510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800051e:	490d      	ldr	r1, [pc, #52]	; (8000554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000534:	4c0a      	ldr	r4, [pc, #40]	; (8000560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000542:	f7ff ffe5 	bl	8000510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000546:	f007 fc59 	bl	8007dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff fdff 	bl	800014c <main>
  bx lr
 800054e:	4770      	bx	lr
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000558:	08007ed8 	.word	0x08007ed8
  ldr r2, =_sbss
 800055c:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000560:	200009a8 	.word	0x200009a8

08000564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_2_IRQHandler>
	...

08000568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_Init+0x28>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_Init+0x28>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 fb35 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	200f      	movs	r0, #15
 8000580:	f000 f808 	bl	8000594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000584:	f7ff fefe 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40022000 	.word	0x40022000

08000594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_InitTick+0x54>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_InitTick+0x58>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fb4d 	bl	8000c52 <HAL_SYSTICK_Config>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
 80005c0:	e00e      	b.n	80005e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d80a      	bhi.n	80005de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c8:	2200      	movs	r2, #0
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	f04f 30ff 	mov.w	r0, #4294967295
 80005d0:	f000 fb15 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <HAL_InitTick+0x5c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	e000      	b.n	80005e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000004 	.word	0x20000004

080005f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_IncTick+0x1c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x20>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x20>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000008 	.word	0x20000008
 8000614:	200001d4 	.word	0x200001d4

08000618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	200001d4 	.word	0x200001d4

0800062c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000634:	2300      	movs	r3, #0
 8000636:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e0be      	b.n	80007cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000658:	2b00      	cmp	r3, #0
 800065a:	d109      	bne.n	8000670 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff feac 	bl	80003c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f9ab 	bl	80009cc <ADC_ConversionStop_Disable>
 8000676:	4603      	mov	r3, r0
 8000678:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8099 	bne.w	80007ba <HAL_ADC_Init+0x18e>
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	2b00      	cmp	r3, #0
 800068c:	f040 8095 	bne.w	80007ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000694:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000698:	f023 0302 	bic.w	r3, r3, #2
 800069c:	f043 0202 	orr.w	r2, r3, #2
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7b1b      	ldrb	r3, [r3, #12]
 80006b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80006b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c4:	d003      	beq.n	80006ce <HAL_ADC_Init+0xa2>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d102      	bne.n	80006d4 <HAL_ADC_Init+0xa8>
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	e000      	b.n	80006d6 <HAL_ADC_Init+0xaa>
 80006d4:	2300      	movs	r3, #0
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	4313      	orrs	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7d1b      	ldrb	r3, [r3, #20]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d119      	bne.n	8000718 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7b1b      	ldrb	r3, [r3, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d109      	bne.n	8000700 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	035a      	lsls	r2, r3, #13
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	e00b      	b.n	8000718 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000704:	f043 0220 	orr.w	r2, r3, #32
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000710:	f043 0201 	orr.w	r2, r3, #1
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	430a      	orrs	r2, r1
 800072a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <HAL_ADC_Init+0x1a8>)
 8000734:	4013      	ands	r3, r2
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	430b      	orrs	r3, r1
 800073e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000748:	d003      	beq.n	8000752 <HAL_ADC_Init+0x126>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d104      	bne.n	800075c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	3b01      	subs	r3, #1
 8000758:	051b      	lsls	r3, r3, #20
 800075a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000762:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	430a      	orrs	r2, r1
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_ADC_Init+0x1ac>)
 8000778:	4013      	ands	r3, r2
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	429a      	cmp	r2, r3
 800077e:	d10b      	bne.n	8000798 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078a:	f023 0303 	bic.w	r3, r3, #3
 800078e:	f043 0201 	orr.w	r2, r3, #1
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000796:	e018      	b.n	80007ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079c:	f023 0312 	bic.w	r3, r3, #18
 80007a0:	f043 0210 	orr.w	r2, r3, #16
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ac:	f043 0201 	orr.w	r2, r3, #1
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007b8:	e007      	b.n	80007ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007be:	f043 0210 	orr.w	r2, r3, #16
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	ffe1f7fd 	.word	0xffe1f7fd
 80007d8:	ff1f0efe 	.word	0xff1f0efe

080007dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d101      	bne.n	80007fc <HAL_ADC_ConfigChannel+0x20>
 80007f8:	2302      	movs	r3, #2
 80007fa:	e0dc      	b.n	80009b6 <HAL_ADC_ConfigChannel+0x1da>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2201      	movs	r2, #1
 8000800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2b06      	cmp	r3, #6
 800080a:	d81c      	bhi.n	8000846 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	3b05      	subs	r3, #5
 800081e:	221f      	movs	r2, #31
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	4019      	ands	r1, r3
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	3b05      	subs	r3, #5
 8000838:	fa00 f203 	lsl.w	r2, r0, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	430a      	orrs	r2, r1
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
 8000844:	e03c      	b.n	80008c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d81c      	bhi.n	8000888 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	3b23      	subs	r3, #35	; 0x23
 8000860:	221f      	movs	r2, #31
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	4019      	ands	r1, r3
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	4613      	mov	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	3b23      	subs	r3, #35	; 0x23
 800087a:	fa00 f203 	lsl.w	r2, r0, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	430a      	orrs	r2, r1
 8000884:	631a      	str	r2, [r3, #48]	; 0x30
 8000886:	e01b      	b.n	80008c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	3b41      	subs	r3, #65	; 0x41
 800089a:	221f      	movs	r2, #31
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	4019      	ands	r1, r3
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	3b41      	subs	r3, #65	; 0x41
 80008b4:	fa00 f203 	lsl.w	r2, r0, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	430a      	orrs	r2, r1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b09      	cmp	r3, #9
 80008c6:	d91c      	bls.n	8000902 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68d9      	ldr	r1, [r3, #12]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	3b1e      	subs	r3, #30
 80008da:	2207      	movs	r2, #7
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	4019      	ands	r1, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	6898      	ldr	r0, [r3, #8]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	3b1e      	subs	r3, #30
 80008f4:	fa00 f203 	lsl.w	r2, r0, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	e019      	b.n	8000936 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6919      	ldr	r1, [r3, #16]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	2207      	movs	r2, #7
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	4019      	ands	r1, r3
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	6898      	ldr	r0, [r3, #8]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	fa00 f203 	lsl.w	r2, r0, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	430a      	orrs	r2, r1
 8000934:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b10      	cmp	r3, #16
 800093c:	d003      	beq.n	8000946 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000942:	2b11      	cmp	r3, #17
 8000944:	d132      	bne.n	80009ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d125      	bne.n	800099c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d126      	bne.n	80009ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800096c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b10      	cmp	r3, #16
 8000974:	d11a      	bne.n	80009ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800097c:	fba2 2303 	umull	r2, r3, r2, r3
 8000980:	0c9a      	lsrs	r2, r3, #18
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800098c:	e002      	b.n	8000994 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	3b01      	subs	r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f9      	bne.n	800098e <HAL_ADC_ConfigChannel+0x1b2>
 800099a:	e007      	b.n	80009ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a0:	f043 0220 	orr.w	r2, r3, #32
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40012400 	.word	0x40012400
 80009c4:	20000000 	.word	0x20000000
 80009c8:	431bde83 	.word	0x431bde83

080009cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d12e      	bne.n	8000a44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0201 	bic.w	r2, r2, #1
 80009f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009f6:	f7ff fe0f 	bl	8000618 <HAL_GetTick>
 80009fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009fc:	e01b      	b.n	8000a36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009fe:	f7ff fe0b 	bl	8000618 <HAL_GetTick>
 8000a02:	4602      	mov	r2, r0
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d914      	bls.n	8000a36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d10d      	bne.n	8000a36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1e:	f043 0210 	orr.w	r2, r3, #16
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	f043 0201 	orr.w	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e007      	b.n	8000a46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d0dc      	beq.n	80009fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4906      	ldr	r1, [pc, #24]	; (8000ae8 <__NVIC_EnableIRQ+0x34>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff90 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff2d 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff42 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff90 	bl	8000b40 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff35 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffa2 	bl	8000ba4 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e043      	b.n	8000d0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <HAL_DMA_Init+0xa8>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <HAL_DMA_Init+0xac>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	009a      	lsls	r2, r3, #2
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <HAL_DMA_Init+0xb0>)
 8000c9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	bffdfff8 	.word	0xbffdfff8
 8000d18:	cccccccd 	.word	0xcccccccd
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d04f      	beq.n	8000de8 <HAL_DMA_IRQHandler+0xc8>
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d04a      	beq.n	8000de8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d107      	bne.n	8000d70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0204 	bic.w	r2, r2, #4
 8000d6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a66      	ldr	r2, [pc, #408]	; (8000f10 <HAL_DMA_IRQHandler+0x1f0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d029      	beq.n	8000dce <HAL_DMA_IRQHandler+0xae>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a65      	ldr	r2, [pc, #404]	; (8000f14 <HAL_DMA_IRQHandler+0x1f4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d022      	beq.n	8000dca <HAL_DMA_IRQHandler+0xaa>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a63      	ldr	r2, [pc, #396]	; (8000f18 <HAL_DMA_IRQHandler+0x1f8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01a      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xa4>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a62      	ldr	r2, [pc, #392]	; (8000f1c <HAL_DMA_IRQHandler+0x1fc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d012      	beq.n	8000dbe <HAL_DMA_IRQHandler+0x9e>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a60      	ldr	r2, [pc, #384]	; (8000f20 <HAL_DMA_IRQHandler+0x200>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00a      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x98>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a5f      	ldr	r2, [pc, #380]	; (8000f24 <HAL_DMA_IRQHandler+0x204>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d102      	bne.n	8000db2 <HAL_DMA_IRQHandler+0x92>
 8000dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db0:	e00e      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000db2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000db6:	e00b      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000db8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dbc:	e008      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc2:	e005      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	e002      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	e000      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	4a55      	ldr	r2, [pc, #340]	; (8000f28 <HAL_DMA_IRQHandler+0x208>)
 8000dd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 8094 	beq.w	8000f06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000de6:	e08e      	b.n	8000f06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	2202      	movs	r2, #2
 8000dee:	409a      	lsls	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d056      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0x186>
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d051      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0320 	and.w	r3, r3, #32
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10b      	bne.n	8000e28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 020a 	bic.w	r2, r2, #10
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a38      	ldr	r2, [pc, #224]	; (8000f10 <HAL_DMA_IRQHandler+0x1f0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d029      	beq.n	8000e86 <HAL_DMA_IRQHandler+0x166>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a37      	ldr	r2, [pc, #220]	; (8000f14 <HAL_DMA_IRQHandler+0x1f4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d022      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x162>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a35      	ldr	r2, [pc, #212]	; (8000f18 <HAL_DMA_IRQHandler+0x1f8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01a      	beq.n	8000e7c <HAL_DMA_IRQHandler+0x15c>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <HAL_DMA_IRQHandler+0x1fc>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d012      	beq.n	8000e76 <HAL_DMA_IRQHandler+0x156>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <HAL_DMA_IRQHandler+0x200>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00a      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x150>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_DMA_IRQHandler+0x204>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d102      	bne.n	8000e6a <HAL_DMA_IRQHandler+0x14a>
 8000e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e68:	e00e      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e6e:	e00b      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e74:	e008      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7a:	e005      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e80:	e002      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e82:	2320      	movs	r3, #32
 8000e84:	e000      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e86:	2302      	movs	r3, #2
 8000e88:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <HAL_DMA_IRQHandler+0x208>)
 8000e8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d034      	beq.n	8000f06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ea4:	e02f      	b.n	8000f06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	2208      	movs	r2, #8
 8000eac:	409a      	lsls	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d028      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x1e8>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d023      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 020e 	bic.w	r2, r2, #14
 8000ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d004      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
    }
  }
  return;
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
}
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020008 	.word	0x40020008
 8000f14:	4002001c 	.word	0x4002001c
 8000f18:	40020030 	.word	0x40020030
 8000f1c:	40020044 	.word	0x40020044
 8000f20:	40020058 	.word	0x40020058
 8000f24:	4002006c 	.word	0x4002006c
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b08b      	sub	sp, #44	; 0x2c
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e169      	b.n	8001214 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f40:	2201      	movs	r2, #1
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8158 	bne.w	800120e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4a9a      	ldr	r2, [pc, #616]	; (80011cc <HAL_GPIO_Init+0x2a0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d05e      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f68:	4a98      	ldr	r2, [pc, #608]	; (80011cc <HAL_GPIO_Init+0x2a0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d875      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f6e:	4a98      	ldr	r2, [pc, #608]	; (80011d0 <HAL_GPIO_Init+0x2a4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d058      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f74:	4a96      	ldr	r2, [pc, #600]	; (80011d0 <HAL_GPIO_Init+0x2a4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d86f      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f7a:	4a96      	ldr	r2, [pc, #600]	; (80011d4 <HAL_GPIO_Init+0x2a8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d052      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f80:	4a94      	ldr	r2, [pc, #592]	; (80011d4 <HAL_GPIO_Init+0x2a8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d869      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f86:	4a94      	ldr	r2, [pc, #592]	; (80011d8 <HAL_GPIO_Init+0x2ac>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d04c      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f8c:	4a92      	ldr	r2, [pc, #584]	; (80011d8 <HAL_GPIO_Init+0x2ac>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d863      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f92:	4a92      	ldr	r2, [pc, #584]	; (80011dc <HAL_GPIO_Init+0x2b0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d046      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f98:	4a90      	ldr	r2, [pc, #576]	; (80011dc <HAL_GPIO_Init+0x2b0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d85d      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d82a      	bhi.n	8000ff8 <HAL_GPIO_Init+0xcc>
 8000fa2:	2b12      	cmp	r3, #18
 8000fa4:	d859      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000fa6:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <HAL_GPIO_Init+0x80>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	08001027 	.word	0x08001027
 8000fb0:	08001001 	.word	0x08001001
 8000fb4:	08001013 	.word	0x08001013
 8000fb8:	08001055 	.word	0x08001055
 8000fbc:	0800105b 	.word	0x0800105b
 8000fc0:	0800105b 	.word	0x0800105b
 8000fc4:	0800105b 	.word	0x0800105b
 8000fc8:	0800105b 	.word	0x0800105b
 8000fcc:	0800105b 	.word	0x0800105b
 8000fd0:	0800105b 	.word	0x0800105b
 8000fd4:	0800105b 	.word	0x0800105b
 8000fd8:	0800105b 	.word	0x0800105b
 8000fdc:	0800105b 	.word	0x0800105b
 8000fe0:	0800105b 	.word	0x0800105b
 8000fe4:	0800105b 	.word	0x0800105b
 8000fe8:	0800105b 	.word	0x0800105b
 8000fec:	0800105b 	.word	0x0800105b
 8000ff0:	08001009 	.word	0x08001009
 8000ff4:	0800101d 	.word	0x0800101d
 8000ff8:	4a79      	ldr	r2, [pc, #484]	; (80011e0 <HAL_GPIO_Init+0x2b4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ffe:	e02c      	b.n	800105a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	623b      	str	r3, [r7, #32]
          break;
 8001006:	e029      	b.n	800105c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	3304      	adds	r3, #4
 800100e:	623b      	str	r3, [r7, #32]
          break;
 8001010:	e024      	b.n	800105c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	3308      	adds	r3, #8
 8001018:	623b      	str	r3, [r7, #32]
          break;
 800101a:	e01f      	b.n	800105c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	330c      	adds	r3, #12
 8001022:	623b      	str	r3, [r7, #32]
          break;
 8001024:	e01a      	b.n	800105c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800102e:	2304      	movs	r3, #4
 8001030:	623b      	str	r3, [r7, #32]
          break;
 8001032:	e013      	b.n	800105c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d105      	bne.n	8001048 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800103c:	2308      	movs	r3, #8
 800103e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	611a      	str	r2, [r3, #16]
          break;
 8001046:	e009      	b.n	800105c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001048:	2308      	movs	r3, #8
 800104a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	615a      	str	r2, [r3, #20]
          break;
 8001052:	e003      	b.n	800105c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x130>
          break;
 800105a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2bff      	cmp	r3, #255	; 0xff
 8001060:	d801      	bhi.n	8001066 <HAL_GPIO_Init+0x13a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	e001      	b.n	800106a <HAL_GPIO_Init+0x13e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3304      	adds	r3, #4
 800106a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2bff      	cmp	r3, #255	; 0xff
 8001070:	d802      	bhi.n	8001078 <HAL_GPIO_Init+0x14c>
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x152>
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	3b08      	subs	r3, #8
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	210f      	movs	r1, #15
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	401a      	ands	r2, r3
 8001090:	6a39      	ldr	r1, [r7, #32]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80b1 	beq.w	800120e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ac:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x2b8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a4c      	ldr	r2, [pc, #304]	; (80011e4 <HAL_GPIO_Init+0x2b8>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b4a      	ldr	r3, [pc, #296]	; (80011e4 <HAL_GPIO_Init+0x2b8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010c4:	4a48      	ldr	r2, [pc, #288]	; (80011e8 <HAL_GPIO_Init+0x2bc>)
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a40      	ldr	r2, [pc, #256]	; (80011ec <HAL_GPIO_Init+0x2c0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d013      	beq.n	8001118 <HAL_GPIO_Init+0x1ec>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <HAL_GPIO_Init+0x2c4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d00d      	beq.n	8001114 <HAL_GPIO_Init+0x1e8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a3e      	ldr	r2, [pc, #248]	; (80011f4 <HAL_GPIO_Init+0x2c8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d007      	beq.n	8001110 <HAL_GPIO_Init+0x1e4>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3d      	ldr	r2, [pc, #244]	; (80011f8 <HAL_GPIO_Init+0x2cc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d101      	bne.n	800110c <HAL_GPIO_Init+0x1e0>
 8001108:	2303      	movs	r3, #3
 800110a:	e006      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 800110c:	2304      	movs	r3, #4
 800110e:	e004      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001110:	2302      	movs	r3, #2
 8001112:	e002      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001118:	2300      	movs	r3, #0
 800111a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111c:	f002 0203 	and.w	r2, r2, #3
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4093      	lsls	r3, r2
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800112a:	492f      	ldr	r1, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x2bc>)
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	492c      	ldr	r1, [pc, #176]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001152:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	43db      	mvns	r3, r3
 800115a:	4928      	ldr	r1, [pc, #160]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 800115c:	4013      	ands	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	4922      	ldr	r1, [pc, #136]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	491e      	ldr	r1, [pc, #120]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 8001184:	4013      	ands	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	4918      	ldr	r1, [pc, #96]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	608b      	str	r3, [r1, #8]
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4914      	ldr	r1, [pc, #80]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d021      	beq.n	8001200 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	490e      	ldr	r1, [pc, #56]	; (80011fc <HAL_GPIO_Init+0x2d0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	60cb      	str	r3, [r1, #12]
 80011c8:	e021      	b.n	800120e <HAL_GPIO_Init+0x2e2>
 80011ca:	bf00      	nop
 80011cc:	10320000 	.word	0x10320000
 80011d0:	10310000 	.word	0x10310000
 80011d4:	10220000 	.word	0x10220000
 80011d8:	10210000 	.word	0x10210000
 80011dc:	10120000 	.word	0x10120000
 80011e0:	10110000 	.word	0x10110000
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40010c00 	.word	0x40010c00
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40011400 	.word	0x40011400
 80011fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	43db      	mvns	r3, r3
 8001208:	4909      	ldr	r1, [pc, #36]	; (8001230 <HAL_GPIO_Init+0x304>)
 800120a:	4013      	ands	r3, r2
 800120c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	3301      	adds	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	fa22 f303 	lsr.w	r3, r2, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	f47f ae8e 	bne.w	8000f40 <HAL_GPIO_Init+0x14>
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	372c      	adds	r7, #44	; 0x2c
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40010400 	.word	0x40010400

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4013      	ands	r3, r2
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43d9      	mvns	r1, r3
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	400b      	ands	r3, r1
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	611a      	str	r2, [r3, #16]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001298:	b08b      	sub	sp, #44	; 0x2c
 800129a:	af06      	add	r7, sp, #24
 800129c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0fd      	b.n	80014a4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f006 fb0f 	bl	80078e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f952 	bl	8003578 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	687e      	ldr	r6, [r7, #4]
 80012dc:	466d      	mov	r5, sp
 80012de:	f106 0410 	add.w	r4, r6, #16
 80012e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	602b      	str	r3, [r5, #0]
 80012ea:	1d33      	adds	r3, r6, #4
 80012ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f002 f91c 	bl	800352c <USB_CoreInit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2202      	movs	r2, #2
 80012fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0ce      	b.n	80014a4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f94d 	bl	80035ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	e04c      	b.n	80013b2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	3301      	adds	r3, #1
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	b298      	uxth	r0, r3
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	3336      	adds	r3, #54	; 0x36
 8001356:	4602      	mov	r2, r0
 8001358:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	3303      	adds	r3, #3
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3338      	adds	r3, #56	; 0x38
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	333c      	adds	r3, #60	; 0x3c
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3340      	adds	r3, #64	; 0x40
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	3301      	adds	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3ad      	bcc.n	8001318 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e044      	b.n	800144c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3301      	adds	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	429a      	cmp	r2, r3
 8001454:	d3b5      	bcc.n	80013c2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	687e      	ldr	r6, [r7, #4]
 800145e:	466d      	mov	r5, sp
 8001460:	f106 0410 	add.w	r4, r6, #16
 8001464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	602b      	str	r3, [r5, #0]
 800146c:	1d33      	adds	r3, r6, #4
 800146e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f002 f8a7 	bl	80035c4 <USB_DevInit>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e00d      	b.n	80014a4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f004 fd59 	bl	8005f54 <USB_DevDisconnect>

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_PCD_Start+0x16>
 80014be:	2302      	movs	r3, #2
 80014c0:	e016      	b.n	80014f0 <HAL_PCD_Start+0x44>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f83c 	bl	800354c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014d4:	2101      	movs	r1, #1
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f006 fc59 	bl	8007d8e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fd2d 	bl	8005f40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fd2f 	bl	8005f68 <USB_ReadInterrupts>
 800150a:	4603      	mov	r3, r0
 800150c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001514:	d102      	bne.n	800151c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fb48 	bl	8001bac <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f004 fd21 	bl	8005f68 <USB_ReadInterrupts>
 8001526:	4603      	mov	r3, r0
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001530:	d112      	bne.n	8001558 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001544:	b292      	uxth	r2, r2
 8001546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f006 fa43 	bl	80079d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001550:	2100      	movs	r1, #0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f923 	bl	800179e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fd03 	bl	8005f68 <USB_ReadInterrupts>
 8001562:	4603      	mov	r3, r0
 8001564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800156c:	d10b      	bne.n	8001586 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001580:	b292      	uxth	r2, r2
 8001582:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fcec 	bl	8005f68 <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800159a:	d10b      	bne.n	80015b4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015ae:	b292      	uxth	r2, r2
 80015b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fcd5 	bl	8005f68 <USB_ReadInterrupts>
 80015be:	4603      	mov	r3, r0
 80015c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c8:	d126      	bne.n	8001618 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0204 	bic.w	r2, r2, #4
 80015dc:	b292      	uxth	r2, r2
 80015de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0208 	bic.w	r2, r2, #8
 80015f4:	b292      	uxth	r2, r2
 80015f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f006 fa24 	bl	8007a48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001612:	b292      	uxth	r2, r2
 8001614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f004 fca3 	bl	8005f68 <USB_ReadInterrupts>
 8001622:	4603      	mov	r3, r0
 8001624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800162c:	f040 8082 	bne.w	8001734 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	77fb      	strb	r3, [r7, #31]
 8001634:	e010      	b.n	8001658 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	441a      	add	r2, r3
 8001642:	7ffb      	ldrb	r3, [r7, #31]
 8001644:	8812      	ldrh	r2, [r2, #0]
 8001646:	b292      	uxth	r2, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	3320      	adds	r3, #32
 800164c:	443b      	add	r3, r7
 800164e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001652:	7ffb      	ldrb	r3, [r7, #31]
 8001654:	3301      	adds	r3, #1
 8001656:	77fb      	strb	r3, [r7, #31]
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	2b07      	cmp	r3, #7
 800165c:	d9eb      	bls.n	8001636 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	b292      	uxth	r2, r2
 8001672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	b292      	uxth	r2, r2
 800168a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800168e:	bf00      	nop
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001698:	b29b      	uxth	r3, r3
 800169a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f6      	beq.n	8001690 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b4:	b292      	uxth	r2, r2
 80016b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	77fb      	strb	r3, [r7, #31]
 80016be:	e00f      	b.n	80016e0 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80016c0:	7ffb      	ldrb	r3, [r7, #31]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	4611      	mov	r1, r2
 80016c8:	7ffa      	ldrb	r2, [r7, #31]
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	440a      	add	r2, r1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	3320      	adds	r3, #32
 80016d2:	443b      	add	r3, r7
 80016d4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80016d8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	3301      	adds	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b07      	cmp	r3, #7
 80016e4:	d9ec      	bls.n	80016c0 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0208 	orr.w	r2, r2, #8
 80016f8:	b292      	uxth	r2, r2
 80016fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001710:	b292      	uxth	r2, r2
 8001712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0204 	orr.w	r2, r2, #4
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f006 f970 	bl	8007a14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fc15 	bl	8005f68 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001748:	d10e      	bne.n	8001768 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800175c:	b292      	uxth	r2, r2
 800175e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f006 f929 	bl	80079ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f004 fbfb 	bl	8005f68 <USB_ReadInterrupts>
 8001772:	4603      	mov	r3, r0
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177c:	d10b      	bne.n	8001796 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001790:	b292      	uxth	r2, r2
 8001792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_PCD_SetAddress+0x1a>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e013      	b.n	80017e0 <HAL_PCD_SetAddress+0x42>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 fba2 	bl	8005f1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	70fb      	strb	r3, [r7, #3]
 80017fa:	460b      	mov	r3, r1
 80017fc:	803b      	strh	r3, [r7, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180a:	2b00      	cmp	r3, #0
 800180c:	da0e      	bge.n	800182c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	705a      	strb	r2, [r3, #1]
 800182a:	e00e      	b.n	800184a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	f003 0207 	and.w	r2, r3, #7
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	b2da      	uxtb	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001856:	883a      	ldrh	r2, [r7, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	78ba      	ldrb	r2, [r7, #2]
 8001860:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001874:	78bb      	ldrb	r3, [r7, #2]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d102      	bne.n	8001880 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_PCD_EP_Open+0xa6>
 800188a:	2302      	movs	r3, #2
 800188c:	e00e      	b.n	80018ac <HAL_PCD_EP_Open+0xc4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	4618      	mov	r0, r3
 800189e:	f001 feb1 	bl	8003604 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80018aa:	7afb      	ldrb	r3, [r7, #11]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da0e      	bge.n	80018e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	705a      	strb	r2, [r3, #1]
 80018e4:	e00e      	b.n	8001904 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	f003 0207 	and.w	r2, r3, #7
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	b2da      	uxtb	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_PCD_EP_Close+0x6a>
 800191a:	2302      	movs	r3, #2
 800191c:	e00e      	b.n	800193c <HAL_PCD_EP_Close+0x88>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68f9      	ldr	r1, [r7, #12]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 f9d3 	bl	8003cd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	460b      	mov	r3, r1
 8001952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	f003 0207 	and.w	r2, r3, #7
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2200      	movs	r2, #0
 8001982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	b2da      	uxtb	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6979      	ldr	r1, [r7, #20]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fb85 	bl	80040b0 <USB_EPStartXfer>
 80019a6:	e005      	b.n	80019b4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6979      	ldr	r1, [r7, #20]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fb7e 	bl	80040b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	460b      	mov	r3, r1
 80019cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ce:	7afb      	ldrb	r3, [r7, #11]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2201      	movs	r2, #1
 8001a08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d106      	bne.n	8001a2e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6979      	ldr	r1, [r7, #20]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fb42 	bl	80040b0 <USB_EPStartXfer>
 8001a2c:	e005      	b.n	8001a3a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6979      	ldr	r1, [r7, #20]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fb3b 	bl	80040b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	f003 0207 	and.w	r2, r3, #7
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d901      	bls.n	8001a62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e04c      	b.n	8001afc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da0e      	bge.n	8001a88 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	705a      	strb	r2, [r3, #1]
 8001a86:	e00c      	b.n	8001aa2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_PCD_EP_SetStall+0x7e>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e01c      	b.n	8001afc <HAL_PCD_EP_SetStall+0xb8>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68f9      	ldr	r1, [r7, #12]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 f925 	bl	8005d20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d108      	bne.n	8001af2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001aea:	4619      	mov	r1, r3
 8001aec:	4610      	mov	r0, r2
 8001aee:	f004 fa4a 	bl	8005f86 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 020f 	and.w	r2, r3, #15
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d901      	bls.n	8001b22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e040      	b.n	8001ba4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	da0e      	bge.n	8001b48 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	705a      	strb	r2, [r3, #1]
 8001b46:	e00e      	b.n	8001b66 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 0207 	and.w	r2, r3, #7
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_PCD_EP_ClrStall+0x82>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e00e      	b.n	8001ba4 <HAL_PCD_EP_ClrStall+0xa0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f913 	bl	8005dc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bb4:	e2ec      	b.n	8002190 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bbe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001bcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 8161 	bne.w	8001e98 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d152      	bne.n	8001c86 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf0:	81fb      	strh	r3, [r7, #14]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	89fb      	ldrh	r3, [r7, #14]
 8001bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3328      	adds	r3, #40	; 0x28
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	441a      	add	r2, r3
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c44:	2100      	movs	r1, #0
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f005 fe9d 	bl	8007986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 829b 	beq.w	8002190 <PCD_EP_ISR_Handler+0x5e4>
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 8296 	bne.w	8002190 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c84:	e284      	b.n	8002190 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d034      	beq.n	8001d0a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3306      	adds	r3, #6
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	f004 f9a1 	bl	8006026 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	823b      	strh	r3, [r7, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	8a3a      	ldrh	r2, [r7, #16]
 8001cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f005 fe12 	bl	800792c <HAL_PCD_SetupStageCallback>
 8001d08:	e242      	b.n	8002190 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f280 823e 	bge.w	8002190 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d20:	4013      	ands	r3, r2
 8001d22:	83bb      	strh	r3, [r7, #28]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	8bba      	ldrh	r2, [r7, #28]
 8001d2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	3306      	adds	r3, #6
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d019      	beq.n	8001d9a <PCD_EP_ISR_Handler+0x1ee>
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d015      	beq.n	8001d9a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	6959      	ldr	r1, [r3, #20]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f004 f951 	bl	8006026 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d92:	2100      	movs	r1, #0
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f005 fddb 	bl	8007950 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 81f2 	bne.w	8002190 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d112      	bne.n	8001dfa <PCD_EP_ISR_Handler+0x24e>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	801a      	strh	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	801a      	strh	r2, [r3, #0]
 8001df8:	e02f      	b.n	8001e5a <PCD_EP_ISR_Handler+0x2ae>
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8001e00:	d813      	bhi.n	8001e2a <PCD_EP_ISR_Handler+0x27e>
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <PCD_EP_ISR_Handler+0x270>
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	3301      	adds	r3, #1
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	801a      	strh	r2, [r3, #0]
 8001e28:	e017      	b.n	8001e5a <PCD_EP_ISR_Handler+0x2ae>
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <PCD_EP_ISR_Handler+0x298>
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	3b01      	subs	r3, #1
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	029b      	lsls	r3, r3, #10
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6a:	827b      	strh	r3, [r7, #18]
 8001e6c:	8a7b      	ldrh	r3, [r7, #18]
 8001e6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e72:	827b      	strh	r3, [r7, #18]
 8001e74:	8a7b      	ldrh	r3, [r7, #18]
 8001e76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e7a:	827b      	strh	r3, [r7, #18]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	8a7b      	ldrh	r3, [r7, #18]
 8001e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	8013      	strh	r3, [r2, #0]
 8001e96:	e17b      	b.n	8002190 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eaa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f280 80ea 	bge.w	8002088 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eca:	4013      	ands	r3, r2
 8001ecc:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ee6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	7b1b      	ldrb	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d122      	bne.n	8001f4a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	3306      	adds	r3, #6
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f2c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8087 	beq.w	8002044 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	6959      	ldr	r1, [r3, #20]
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	88da      	ldrh	r2, [r3, #6]
 8001f42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f44:	f004 f86f 	bl	8006026 <USB_ReadPMA>
 8001f48:	e07c      	b.n	8002044 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	78db      	ldrb	r3, [r3, #3]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d108      	bne.n	8001f64 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f54:	461a      	mov	r2, r3
 8001f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f927 	bl	80021ac <HAL_PCD_EP_DB_Receive>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f62:	e06f      	b.n	8002044 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d021      	beq.n	8002002 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02a      	beq.n	8002044 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	6959      	ldr	r1, [r3, #20]
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	891a      	ldrh	r2, [r3, #8]
 8001ffa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ffc:	f004 f813 	bl	8006026 <USB_ReadPMA>
 8002000:	e020      	b.n	8002044 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	3306      	adds	r3, #6
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800202c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	6959      	ldr	r1, [r3, #20]
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	895a      	ldrh	r2, [r3, #10]
 800203e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002040:	f003 fff1 	bl	8006026 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800204a:	441a      	add	r2, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002056:	441a      	add	r2, r3
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <PCD_EP_ISR_Handler+0x4c2>
 8002064:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	429a      	cmp	r2, r3
 800206c:	d206      	bcs.n	800207c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f005 fc6b 	bl	8007950 <HAL_PCD_DataOutStageCallback>
 800207a:	e005      	b.n	8002088 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002082:	4618      	mov	r0, r3
 8002084:	f002 f814 	bl	80040b0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002088:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d07e      	beq.n	8002190 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002092:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c0:	843b      	strh	r3, [r7, #32]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	441a      	add	r2, r3
 80020d0:	8c3b      	ldrh	r3, [r7, #32]
 80020d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	78db      	ldrb	r3, [r3, #3]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d00c      	beq.n	8002100 <PCD_EP_ISR_Handler+0x554>
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	78db      	ldrb	r3, [r3, #3]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d146      	bne.n	8002184 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d141      	bne.n	8002184 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	3302      	adds	r3, #2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	8bfb      	ldrh	r3, [r7, #30]
 8002130:	429a      	cmp	r2, r3
 8002132:	d906      	bls.n	8002142 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	8bfb      	ldrh	r3, [r7, #30]
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	e002      	b.n	8002148 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d106      	bne.n	800215e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f005 fc15 	bl	8007986 <HAL_PCD_DataInStageCallback>
 800215c:	e018      	b.n	8002190 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	8bfb      	ldrh	r3, [r7, #30]
 8002164:	441a      	add	r2, r3
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	8bfb      	ldrh	r3, [r7, #30]
 8002170:	441a      	add	r2, r3
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217c:	4618      	mov	r0, r3
 800217e:	f001 ff97 	bl	80040b0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002182:	e005      	b.n	8002190 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002184:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002186:	461a      	mov	r2, r3
 8002188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f91b 	bl	80023c6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002198:	b29b      	uxth	r3, r3
 800219a:	b21b      	sxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	f6ff ad0a 	blt.w	8001bb6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3738      	adds	r7, #56	; 0x38
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d07e      	beq.n	80022c2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	3302      	adds	r3, #2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	8b7b      	ldrh	r3, [r7, #26]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d306      	bcc.n	8002206 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	8b7b      	ldrh	r3, [r7, #26]
 80021fe:	1ad2      	subs	r2, r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	619a      	str	r2, [r3, #24]
 8002204:	e002      	b.n	800220c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d123      	bne.n	800225c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800222a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222e:	833b      	strh	r3, [r7, #24]
 8002230:	8b3b      	ldrh	r3, [r7, #24]
 8002232:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002236:	833b      	strh	r3, [r7, #24]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	441a      	add	r2, r3
 8002246:	8b3b      	ldrh	r3, [r7, #24]
 8002248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800224c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002258:	b29b      	uxth	r3, r3
 800225a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01f      	beq.n	80022a6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800227c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002280:	82fb      	strh	r3, [r7, #22]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	441a      	add	r2, r3
 8002290:	8afb      	ldrh	r3, [r7, #22]
 8002292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800229a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022a6:	8b7b      	ldrh	r3, [r7, #26]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8087 	beq.w	80023bc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	6959      	ldr	r1, [r3, #20]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	891a      	ldrh	r2, [r3, #8]
 80022ba:	8b7b      	ldrh	r3, [r7, #26]
 80022bc:	f003 feb3 	bl	8006026 <USB_ReadPMA>
 80022c0:	e07c      	b.n	80023bc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3306      	adds	r3, #6
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	8b7b      	ldrh	r3, [r7, #26]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d306      	bcc.n	8002304 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	8b7b      	ldrh	r3, [r7, #26]
 80022fc:	1ad2      	subs	r2, r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e002      	b.n	800230a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d123      	bne.n	800235a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232c:	83fb      	strh	r3, [r7, #30]
 800232e:	8bfb      	ldrh	r3, [r7, #30]
 8002330:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002334:	83fb      	strh	r3, [r7, #30]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	441a      	add	r2, r3
 8002344:	8bfb      	ldrh	r3, [r7, #30]
 8002346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002356:	b29b      	uxth	r3, r3
 8002358:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11f      	bne.n	80023a4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237e:	83bb      	strh	r3, [r7, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	8bbb      	ldrh	r3, [r7, #28]
 8002390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023a4:	8b7b      	ldrh	r3, [r7, #26]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	6959      	ldr	r1, [r3, #20]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	895a      	ldrh	r2, [r3, #10]
 80023b6:	8b7b      	ldrh	r3, [r7, #26]
 80023b8:	f003 fe35 	bl	8006026 <USB_ReadPMA>
    }
  }

  return count;
 80023bc:	8b7b      	ldrh	r3, [r7, #26]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b0a2      	sub	sp, #136	; 0x88
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 81c7 	beq.w	800276e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	3302      	adds	r3, #2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002408:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002414:	429a      	cmp	r2, r3
 8002416:	d907      	bls.n	8002428 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002420:	1ad2      	subs	r2, r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	619a      	str	r2, [r3, #24]
 8002426:	e002      	b.n	800242e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 80b9 	bne.w	80025aa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d126      	bne.n	800248e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	4413      	add	r3, r2
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	011a      	lsls	r2, r3, #4
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	4413      	add	r3, r2
 8002462:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002472:	b29a      	uxth	r2, r3
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002486:	b29a      	uxth	r2, r3
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e01a      	b.n	80024c4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	785b      	ldrb	r3, [r3, #1]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d116      	bne.n	80024c4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	4413      	add	r3, r2
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	011a      	lsls	r2, r3, #4
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	4413      	add	r3, r2
 80024b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2200      	movs	r2, #0
 80024c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d126      	bne.n	8002520 <HAL_PCD_EP_DB_Transmit+0x15a>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	011a      	lsls	r2, r3, #4
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002504:	b29a      	uxth	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002518:	b29a      	uxth	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	e017      	b.n	8002550 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d113      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002530:	b29b      	uxth	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	4413      	add	r3, r2
 8002538:	623b      	str	r3, [r7, #32]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	011a      	lsls	r2, r3, #4
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	4413      	add	r3, r2
 8002544:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2200      	movs	r2, #0
 800254e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f005 fa15 	bl	8007986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 82d4 	beq.w	8002b10 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	827b      	strh	r3, [r7, #18]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	441a      	add	r2, r3
 8002592:	8a7b      	ldrh	r3, [r7, #18]
 8002594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800259c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	8013      	strh	r3, [r2, #0]
 80025a8:	e2b2      	b.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d021      	beq.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	441a      	add	r2, r3
 80025e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025fe:	2b01      	cmp	r3, #1
 8002600:	f040 8286 	bne.w	8002b10 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260c:	441a      	add	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800261a:	441a      	add	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	429a      	cmp	r2, r3
 800262a:	d309      	bcc.n	8002640 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002638:	1ad2      	subs	r2, r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	621a      	str	r2, [r3, #32]
 800263e:	e015      	b.n	800266c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002648:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800264c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002656:	e009      	b.n	800266c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	785b      	ldrb	r3, [r3, #1]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d155      	bne.n	8002720 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	4413      	add	r3, r2
 800268a:	63bb      	str	r3, [r7, #56]	; 0x38
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	011a      	lsls	r2, r3, #4
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	4413      	add	r3, r2
 8002696:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
 800269c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d112      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x302>
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c4:	801a      	strh	r2, [r3, #0]
 80026c6:	e047      	b.n	8002758 <HAL_PCD_EP_DB_Transmit+0x392>
 80026c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ca:	2b3e      	cmp	r3, #62	; 0x3e
 80026cc:	d811      	bhi.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x32c>
 80026ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x31e>
 80026de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e0:	3301      	adds	r3, #1
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	029b      	lsls	r3, r3, #10
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	e032      	b.n	8002758 <HAL_PCD_EP_DB_Transmit+0x392>
 80026f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80026f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_PCD_EP_DB_Transmit+0x342>
 8002702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002704:	3b01      	subs	r3, #1
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48
 8002708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270a:	b29b      	uxth	r3, r3
 800270c:	029b      	lsls	r3, r3, #10
 800270e:	b29b      	uxth	r3, r3
 8002710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002718:	b29a      	uxth	r2, r3
 800271a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	e01b      	b.n	8002758 <HAL_PCD_EP_DB_Transmit+0x392>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	785b      	ldrb	r3, [r3, #1]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d117      	bne.n	8002758 <HAL_PCD_EP_DB_Transmit+0x392>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	643b      	str	r3, [r7, #64]	; 0x40
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273c:	4413      	add	r3, r2
 800273e:	643b      	str	r3, [r7, #64]	; 0x40
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	011a      	lsls	r2, r3, #4
 8002746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002748:	4413      	add	r3, r2
 800274a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002752:	b29a      	uxth	r2, r3
 8002754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002756:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6959      	ldr	r1, [r3, #20]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	891a      	ldrh	r2, [r3, #8]
 8002764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	f003 fc18 	bl	8005f9c <USB_WritePMA>
 800276c:	e1d0      	b.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	3306      	adds	r3, #6
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d307      	bcc.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027ae:	1ad2      	subs	r2, r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	619a      	str	r2, [r3, #24]
 80027b4:	e002      	b.n	80027bc <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 80c4 	bne.w	800294e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d126      	bne.n	800281c <HAL_PCD_EP_DB_Transmit+0x456>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e2:	4413      	add	r3, r2
 80027e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	011a      	lsls	r2, r3, #4
 80027ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ee:	4413      	add	r3, r2
 80027f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002800:	b29a      	uxth	r2, r3
 8002802:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002804:	801a      	strh	r2, [r3, #0]
 8002806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002814:	b29a      	uxth	r2, r3
 8002816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002818:	801a      	strh	r2, [r3, #0]
 800281a:	e01a      	b.n	8002852 <HAL_PCD_EP_DB_Transmit+0x48c>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d116      	bne.n	8002852 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	677b      	str	r3, [r7, #116]	; 0x74
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002838:	4413      	add	r3, r2
 800283a:	677b      	str	r3, [r7, #116]	; 0x74
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	011a      	lsls	r2, r3, #4
 8002842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002844:	4413      	add	r3, r2
 8002846:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800284a:	673b      	str	r3, [r7, #112]	; 0x70
 800284c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284e:	2200      	movs	r2, #0
 8002850:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	67bb      	str	r3, [r7, #120]	; 0x78
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d12f      	bne.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002870:	b29b      	uxth	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002878:	4413      	add	r3, r2
 800287a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	011a      	lsls	r2, r3, #4
 8002884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002888:	4413      	add	r3, r2
 800288a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800288e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800289e:	b29a      	uxth	r2, r3
 80028a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	e017      	b.n	80028f0 <HAL_PCD_EP_DB_Transmit+0x52a>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d113      	bne.n	80028f0 <HAL_PCD_EP_DB_Transmit+0x52a>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d6:	4413      	add	r3, r2
 80028d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	011a      	lsls	r2, r3, #4
 80028e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ec:	2200      	movs	r2, #0
 80028ee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f005 f845 	bl	8007986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 8104 	bne.w	8002b10 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	441a      	add	r2, r3
 8002934:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800293c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002948:	b29b      	uxth	r3, r3
 800294a:	8013      	strh	r3, [r2, #0]
 800294c:	e0e0      	b.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d121      	bne.n	800299c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002998:	b29b      	uxth	r3, r3
 800299a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	f040 80b4 	bne.w	8002b10 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b0:	441a      	add	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029be:	441a      	add	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6a1a      	ldr	r2, [r3, #32]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d309      	bcc.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029dc:	1ad2      	subs	r2, r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	621a      	str	r2, [r3, #32]
 80029e2:	e015      	b.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80029ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029fa:	e009      	b.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	667b      	str	r3, [r7, #100]	; 0x64
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d155      	bne.n	8002aca <HAL_PCD_EP_DB_Transmit+0x704>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a32:	4413      	add	r3, r2
 8002a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3e:	4413      	add	r3, r2
 8002a40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d112      	bne.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a6e:	801a      	strh	r2, [r3, #0]
 8002a70:	e044      	b.n	8002afc <HAL_PCD_EP_DB_Transmit+0x736>
 8002a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a74:	2b3e      	cmp	r3, #62	; 0x3e
 8002a76:	d811      	bhi.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	657b      	str	r3, [r7, #84]	; 0x54
 8002a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	029b      	lsls	r3, r3, #10
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a98:	801a      	strh	r2, [r3, #0]
 8002a9a:	e02f      	b.n	8002afc <HAL_PCD_EP_DB_Transmit+0x736>
 8002a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	029b      	lsls	r3, r3, #10
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	e018      	b.n	8002afc <HAL_PCD_EP_DB_Transmit+0x736>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d114      	bne.n	8002afc <HAL_PCD_EP_DB_Transmit+0x736>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae0:	4413      	add	r3, r2
 8002ae2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	011a      	lsls	r2, r3, #4
 8002aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aec:	4413      	add	r3, r2
 8002aee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002af2:	663b      	str	r3, [r7, #96]	; 0x60
 8002af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002afa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6959      	ldr	r1, [r3, #20]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	895a      	ldrh	r2, [r3, #10]
 8002b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f003 fa46 	bl	8005f9c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b2a:	823b      	strh	r3, [r7, #16]
 8002b2c:	8a3b      	ldrh	r3, [r7, #16]
 8002b2e:	f083 0310 	eor.w	r3, r3, #16
 8002b32:	823b      	strh	r3, [r7, #16]
 8002b34:	8a3b      	ldrh	r3, [r7, #16]
 8002b36:	f083 0320 	eor.w	r3, r3, #32
 8002b3a:	823b      	strh	r3, [r7, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	441a      	add	r2, r3
 8002b4a:	8a3b      	ldrh	r3, [r7, #16]
 8002b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3788      	adds	r7, #136	; 0x88
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b087      	sub	sp, #28
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b7c:	897b      	ldrh	r3, [r7, #10]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b88:	897b      	ldrh	r3, [r7, #10]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e009      	b.n	8002bb4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ba0:	897a      	ldrh	r2, [r7, #10]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	80da      	strh	r2, [r3, #6]
 8002bc8:	e00b      	b.n	8002be2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	371c      	adds	r7, #28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e272      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8087 	beq.w	8002d1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c10:	4b92      	ldr	r3, [pc, #584]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d00c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c1c:	4b8f      	ldr	r3, [pc, #572]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d112      	bne.n	8002c4e <HAL_RCC_OscConfig+0x5e>
 8002c28:	4b8c      	ldr	r3, [pc, #560]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d10b      	bne.n	8002c4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c36:	4b89      	ldr	r3, [pc, #548]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d06c      	beq.n	8002d1c <HAL_RCC_OscConfig+0x12c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d168      	bne.n	8002d1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e24c      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x76>
 8002c58:	4b80      	ldr	r3, [pc, #512]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a7f      	ldr	r2, [pc, #508]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	e02e      	b.n	8002cc4 <HAL_RCC_OscConfig+0xd4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x98>
 8002c6e:	4b7b      	ldr	r3, [pc, #492]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a7a      	ldr	r2, [pc, #488]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b78      	ldr	r3, [pc, #480]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a77      	ldr	r2, [pc, #476]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e01d      	b.n	8002cc4 <HAL_RCC_OscConfig+0xd4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0xbc>
 8002c92:	4b72      	ldr	r3, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a71      	ldr	r2, [pc, #452]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b6f      	ldr	r3, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6e      	ldr	r2, [pc, #440]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0xd4>
 8002cac:	4b6b      	ldr	r3, [pc, #428]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6a      	ldr	r2, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b68      	ldr	r3, [pc, #416]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a67      	ldr	r2, [pc, #412]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fd fca4 	bl	8000618 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fd fca0 	bl	8000618 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e200      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b5d      	ldr	r3, [pc, #372]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xe4>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fd fc90 	bl	8000618 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fd fc8c 	bl	8000618 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1ec      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x10c>
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d063      	beq.n	8002df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d2a:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d36:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d11c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x18c>
 8002d42:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x176>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e1c0      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4939      	ldr	r1, [pc, #228]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	e03a      	b.n	8002df2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fd fc45 	bl	8000618 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fd fc41 	bl	8000618 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1a1      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4927      	ldr	r1, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fd fc24 	bl	8000618 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fd fc20 	bl	8000618 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e180      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d03a      	beq.n	8002e74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d019      	beq.n	8002e3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0c:	f7fd fc04 	bl	8000618 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fd fc00 	bl	8000618 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e160      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e32:	2001      	movs	r0, #1
 8002e34:	f000 faa6 	bl	8003384 <RCC_Delay>
 8002e38:	e01c      	b.n	8002e74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e40:	f7fd fbea 	bl	8000618 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e46:	e00f      	b.n	8002e68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fd fbe6 	bl	8000618 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d908      	bls.n	8002e68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e146      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	42420000 	.word	0x42420000
 8002e64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	4b92      	ldr	r3, [pc, #584]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e9      	bne.n	8002e48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80a6 	beq.w	8002fce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10d      	bne.n	8002eae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	4a87      	ldr	r2, [pc, #540]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	61d3      	str	r3, [r2, #28]
 8002e9e:	4b85      	ldr	r3, [pc, #532]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b82      	ldr	r3, [pc, #520]	; (80030b8 <HAL_RCC_OscConfig+0x4c8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d118      	bne.n	8002eec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b7f      	ldr	r3, [pc, #508]	; (80030b8 <HAL_RCC_OscConfig+0x4c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a7e      	ldr	r2, [pc, #504]	; (80030b8 <HAL_RCC_OscConfig+0x4c8>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fd fba7 	bl	8000618 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ece:	f7fd fba3 	bl	8000618 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b64      	cmp	r3, #100	; 0x64
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e103      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <HAL_RCC_OscConfig+0x4c8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x312>
 8002ef4:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a6e      	ldr	r2, [pc, #440]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	e02d      	b.n	8002f5e <HAL_RCC_OscConfig+0x36e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x334>
 8002f0a:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a69      	ldr	r2, [pc, #420]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a66      	ldr	r2, [pc, #408]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	6213      	str	r3, [r2, #32]
 8002f22:	e01c      	b.n	8002f5e <HAL_RCC_OscConfig+0x36e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	d10c      	bne.n	8002f46 <HAL_RCC_OscConfig+0x356>
 8002f2c:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a60      	ldr	r2, [pc, #384]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	4b5e      	ldr	r3, [pc, #376]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4a5d      	ldr	r2, [pc, #372]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6213      	str	r3, [r2, #32]
 8002f44:	e00b      	b.n	8002f5e <HAL_RCC_OscConfig+0x36e>
 8002f46:	4b5b      	ldr	r3, [pc, #364]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a5a      	ldr	r2, [pc, #360]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	6213      	str	r3, [r2, #32]
 8002f52:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4a57      	ldr	r2, [pc, #348]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	f023 0304 	bic.w	r3, r3, #4
 8002f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d015      	beq.n	8002f92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fd fb57 	bl	8000618 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fd fb53 	bl	8000618 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0b1      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ee      	beq.n	8002f6e <HAL_RCC_OscConfig+0x37e>
 8002f90:	e014      	b.n	8002fbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fd fb41 	bl	8000618 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fd fb3d 	bl	8000618 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e09b      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb0:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ee      	bne.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d105      	bne.n	8002fce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc2:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8087 	beq.w	80030e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd8:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d061      	beq.n	80030a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d146      	bne.n	800307a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4b33      	ldr	r3, [pc, #204]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fd fb11 	bl	8000618 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7fd fb0d 	bl	8000618 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e06d      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300c:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d108      	bne.n	8003034 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4921      	ldr	r1, [pc, #132]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003034:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a19      	ldr	r1, [r3, #32]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	430b      	orrs	r3, r1
 8003046:	491b      	ldr	r1, [pc, #108]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fd fae1 	bl	8000618 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305a:	f7fd fadd 	bl	8000618 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e03d      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x46a>
 8003078:	e035      	b.n	80030e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_OscConfig+0x4cc>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fd faca 	bl	8000618 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fd fac6 	bl	8000618 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e026      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x498>
 80030a6:	e01e      	b.n	80030e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e019      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
 80030bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x500>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000

080030f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0d0      	b.n	80032aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003108:	4b6a      	ldr	r3, [pc, #424]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d910      	bls.n	8003138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b67      	ldr	r3, [pc, #412]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 0207 	bic.w	r2, r3, #7
 800311e:	4965      	ldr	r1, [pc, #404]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0b8      	b.n	80032aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003150:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a58      	ldr	r2, [pc, #352]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800315a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003168:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a52      	ldr	r2, [pc, #328]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003172:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	494d      	ldr	r1, [pc, #308]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d040      	beq.n	8003214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e073      	b.n	80032aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06b      	b.n	80032aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4936      	ldr	r1, [pc, #216]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e4:	f7fd fa18 	bl	8000618 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fd fa14 	bl	8000618 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e053      	b.n	80032aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d210      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4922      	ldr	r1, [pc, #136]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e032      	b.n	80032aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4916      	ldr	r1, [pc, #88]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	490e      	ldr	r1, [pc, #56]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003282:	f000 f821 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	490a      	ldr	r1, [pc, #40]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	5ccb      	ldrb	r3, [r1, r3]
 8003296:	fa22 f303 	lsr.w	r3, r2, r3
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x1cc>)
 800329c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_ClockConfig+0x1d0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd f976 	bl	8000594 <HAL_InitTick>

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40022000 	.word	0x40022000
 80032b8:	40021000 	.word	0x40021000
 80032bc:	08007ec0 	.word	0x08007ec0
 80032c0:	20000000 	.word	0x20000000
 80032c4:	20000004 	.word	0x20000004

080032c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c8:	b490      	push	{r4, r7}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_RCC_GetSysClockFreq+0xac>)
 80032d0:	1d3c      	adds	r4, r7, #4
 80032d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032d8:	f240 2301 	movw	r3, #513	; 0x201
 80032dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032f2:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x40>
 8003302:	2b08      	cmp	r3, #8
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x46>
 8003306:	e02b      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <HAL_RCC_GetSysClockFreq+0xb4>)
 800330a:	623b      	str	r3, [r7, #32]
      break;
 800330c:	e02b      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	0c9b      	lsrs	r3, r3, #18
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	3328      	adds	r3, #40	; 0x28
 8003318:	443b      	add	r3, r7
 800331a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800331e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d012      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb0>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	0c5b      	lsrs	r3, r3, #17
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	3328      	adds	r3, #40	; 0x28
 8003336:	443b      	add	r3, r7
 8003338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800333c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003342:	fb03 f202 	mul.w	r2, r3, r2
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	e004      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	623b      	str	r3, [r7, #32]
      break;
 800335e:	e002      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003362:	623b      	str	r3, [r7, #32]
      break;
 8003364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003366:	6a3b      	ldr	r3, [r7, #32]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bc90      	pop	{r4, r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	08007e6c 	.word	0x08007e6c
 8003378:	40021000 	.word	0x40021000
 800337c:	007a1200 	.word	0x007a1200
 8003380:	003d0900 	.word	0x003d0900

08003384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <RCC_Delay+0x34>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <RCC_Delay+0x38>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a5b      	lsrs	r3, r3, #9
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a0:	bf00      	nop
  }
  while (Delay --);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1e5a      	subs	r2, r3, #1
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f9      	bne.n	80033a0 <RCC_Delay+0x1c>
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000000 	.word	0x20000000
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d07d      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e0:	4b4f      	ldr	r3, [pc, #316]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	61d3      	str	r3, [r2, #28]
 80033f8:	4b49      	ldr	r3, [pc, #292]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d118      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003414:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a42      	ldr	r2, [pc, #264]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003420:	f7fd f8fa 	bl	8000618 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003428:	f7fd f8f6 	bl	8000618 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e06d      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003446:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02e      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d027      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b2e      	ldr	r3, [pc, #184]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003474:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800347a:	4a29      	ldr	r2, [pc, #164]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d014      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd f8c5 	bl	8000618 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fd f8c1 	bl	8000618 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e036      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4917      	ldr	r1, [pc, #92]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	490b      	ldr	r1, [pc, #44]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4904      	ldr	r1, [pc, #16]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	42420440 	.word	0x42420440

0800352c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800352c:	b084      	sub	sp, #16
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	f107 0014 	add.w	r0, r7, #20
 800353a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	b004      	add	sp, #16
 800354a:	4770      	bx	lr

0800354c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800355c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003560:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003580:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003584:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	b29b      	uxth	r3, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	b29b      	uxth	r3, r3
 8003596:	4013      	ands	r3, r2
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035c4:	b084      	sub	sp, #16
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	f107 0014 	add.w	r0, r7, #20
 80035d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	b004      	add	sp, #16
 8003602:	4770      	bx	lr

08003604 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003604:	b480      	push	{r7}
 8003606:	b09b      	sub	sp, #108	; 0x6c
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	78db      	ldrb	r3, [r3, #3]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d81f      	bhi.n	8003676 <USB_ActivateEndpoint+0x72>
 8003636:	a201      	add	r2, pc, #4	; (adr r2, 800363c <USB_ActivateEndpoint+0x38>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	0800364d 	.word	0x0800364d
 8003640:	08003669 	.word	0x08003669
 8003644:	0800367f 	.word	0x0800367f
 8003648:	0800365b 	.word	0x0800365b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800364c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003654:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003658:	e012      	b.n	8003680 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800365a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800365e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003662:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003666:	e00b      	b.n	8003680 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003668:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800366c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003670:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003674:	e004      	b.n	8003680 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800367c:	e000      	b.n	8003680 <USB_ActivateEndpoint+0x7c>
      break;
 800367e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800368e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369e:	b29b      	uxth	r3, r3
 80036a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	441a      	add	r2, r3
 80036d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	7b1b      	ldrb	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 8149 	bne.w	8003984 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8084 	beq.w	8003804 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003706:	b29b      	uxth	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4413      	add	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	011a      	lsls	r2, r3, #4
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	88db      	ldrh	r3, [r3, #6]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	b29b      	uxth	r3, r3
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	81fb      	strh	r3, [r7, #14]
 800373e:	89fb      	ldrh	r3, [r7, #14]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <USB_ActivateEndpoint+0x17c>
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	81bb      	strh	r3, [r7, #12]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	89bb      	ldrh	r3, [r7, #12]
 800376c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003778:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800377c:	b29b      	uxth	r3, r3
 800377e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	78db      	ldrb	r3, [r3, #3]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d020      	beq.n	80037ca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800379a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379e:	813b      	strh	r3, [r7, #8]
 80037a0:	893b      	ldrh	r3, [r7, #8]
 80037a2:	f083 0320 	eor.w	r3, r3, #32
 80037a6:	813b      	strh	r3, [r7, #8]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	893b      	ldrh	r3, [r7, #8]
 80037b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	8013      	strh	r3, [r2, #0]
 80037c8:	e27f      	b.n	8003cca <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	441a      	add	r2, r3
 80037ec:	897b      	ldrh	r3, [r7, #10]
 80037ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8013      	strh	r3, [r2, #0]
 8003802:	e262      	b.n	8003cca <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380e:	b29b      	uxth	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	4413      	add	r3, r2
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	011a      	lsls	r2, r3, #4
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	4413      	add	r3, r2
 8003822:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	88db      	ldrh	r3, [r3, #6]
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	b29b      	uxth	r3, r3
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003842:	b29b      	uxth	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	4413      	add	r3, r2
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	011a      	lsls	r2, r3, #4
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	4413      	add	r3, r2
 8003856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d112      	bne.n	800388a <USB_ActivateEndpoint+0x286>
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800386e:	b29a      	uxth	r2, r3
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29a      	uxth	r2, r3
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e02f      	b.n	80038ea <USB_ActivateEndpoint+0x2e6>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b3e      	cmp	r3, #62	; 0x3e
 8003890:	d813      	bhi.n	80038ba <USB_ActivateEndpoint+0x2b6>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	663b      	str	r3, [r7, #96]	; 0x60
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <USB_ActivateEndpoint+0x2a8>
 80038a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a8:	3301      	adds	r3, #1
 80038aa:	663b      	str	r3, [r7, #96]	; 0x60
 80038ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	029b      	lsls	r3, r3, #10
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	e017      	b.n	80038ea <USB_ActivateEndpoint+0x2e6>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <USB_ActivateEndpoint+0x2d0>
 80038ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d0:	3b01      	subs	r3, #1
 80038d2:	663b      	str	r3, [r7, #96]	; 0x60
 80038d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	029b      	lsls	r3, r3, #10
 80038da:	b29b      	uxth	r3, r3
 80038dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	83fb      	strh	r3, [r7, #30]
 80038f8:	8bfb      	ldrh	r3, [r7, #30]
 80038fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01b      	beq.n	800393a <USB_ActivateEndpoint+0x336>
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003918:	83bb      	strh	r3, [r7, #28]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	441a      	add	r2, r3
 8003924:	8bbb      	ldrh	r3, [r7, #28]
 8003926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800392a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800392e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003936:	b29b      	uxth	r3, r3
 8003938:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800394c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003950:	837b      	strh	r3, [r7, #26]
 8003952:	8b7b      	ldrh	r3, [r7, #26]
 8003954:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003958:	837b      	strh	r3, [r7, #26]
 800395a:	8b7b      	ldrh	r3, [r7, #26]
 800395c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003960:	837b      	strh	r3, [r7, #26]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	441a      	add	r2, r3
 800396c:	8b7b      	ldrh	r3, [r7, #26]
 800396e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397e:	b29b      	uxth	r3, r3
 8003980:	8013      	strh	r3, [r2, #0]
 8003982:	e1a2      	b.n	8003cca <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	441a      	add	r2, r3
 80039a8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80039b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d0:	4413      	add	r3, r2
 80039d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	011a      	lsls	r2, r3, #4
 80039da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039e2:	657b      	str	r3, [r7, #84]	; 0x54
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	891b      	ldrh	r3, [r3, #8]
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a04:	4413      	add	r3, r2
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	011a      	lsls	r2, r3, #4
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	895b      	ldrh	r3, [r3, #10]
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	785b      	ldrb	r3, [r3, #1]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 8091 	bne.w	8003b54 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003a40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01b      	beq.n	8003a82 <USB_ActivateEndpoint+0x47e>
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a60:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	441a      	add	r2, r3
 8003a6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01b      	beq.n	8003ad2 <USB_ActivateEndpoint+0x4ce>
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003aea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003aec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003af0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003af2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003af4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003af8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b30:	867b      	strh	r3, [r7, #50]	; 0x32
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	441a      	add	r2, r3
 8003b3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	8013      	strh	r3, [r2, #0]
 8003b52:	e0ba      	b.n	8003cca <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01d      	beq.n	8003bac <USB_ActivateEndpoint+0x5a8>
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	441a      	add	r2, r3
 8003b94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003bbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01d      	beq.n	8003c04 <USB_ActivateEndpoint+0x600>
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	441a      	add	r2, r3
 8003bec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	78db      	ldrb	r3, [r3, #3]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d024      	beq.n	8003c56 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c2a:	f083 0320 	eor.w	r3, r3, #32
 8003c2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8013      	strh	r3, [r2, #0]
 8003c54:	e01d      	b.n	8003c92 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	441a      	add	r2, r3
 8003c7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003cca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	376c      	adds	r7, #108	; 0x6c
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b08d      	sub	sp, #52	; 0x34
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	7b1b      	ldrb	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 808e 	bne.w	8003e08 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d044      	beq.n	8003d7e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	81bb      	strh	r3, [r7, #12]
 8003d02:	89bb      	ldrh	r3, [r7, #12]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01b      	beq.n	8003d44 <USB_DeactivateEndpoint+0x6c>
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	817b      	strh	r3, [r7, #10]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	897b      	ldrh	r3, [r7, #10]
 8003d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5a:	813b      	strh	r3, [r7, #8]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	893b      	ldrh	r3, [r7, #8]
 8003d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
 8003d7c:	e192      	b.n	80040a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	827b      	strh	r3, [r7, #18]
 8003d8c:	8a7b      	ldrh	r3, [r7, #18]
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01b      	beq.n	8003dce <USB_DeactivateEndpoint+0xf6>
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dac:	823b      	strh	r3, [r7, #16]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	441a      	add	r2, r3
 8003db8:	8a3b      	ldrh	r3, [r7, #16]
 8003dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	81fb      	strh	r3, [r7, #14]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	89fb      	ldrh	r3, [r7, #14]
 8003df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	8013      	strh	r3, [r2, #0]
 8003e06:	e14d      	b.n	80040a4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 80a5 	bne.w	8003f5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	843b      	strh	r3, [r7, #32]
 8003e20:	8c3b      	ldrh	r3, [r7, #32]
 8003e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01b      	beq.n	8003e62 <USB_DeactivateEndpoint+0x18a>
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e40:	83fb      	strh	r3, [r7, #30]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	441a      	add	r2, r3
 8003e4c:	8bfb      	ldrh	r3, [r7, #30]
 8003e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	83bb      	strh	r3, [r7, #28]
 8003e70:	8bbb      	ldrh	r3, [r7, #28]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <USB_DeactivateEndpoint+0x1da>
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	837b      	strh	r3, [r7, #26]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	8b7b      	ldrh	r3, [r7, #26]
 8003e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec8:	833b      	strh	r3, [r7, #24]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	441a      	add	r2, r3
 8003ed4:	8b3b      	ldrh	r3, [r7, #24]
 8003ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f00:	82fb      	strh	r3, [r7, #22]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	8afb      	ldrh	r3, [r7, #22]
 8003f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f38:	82bb      	strh	r3, [r7, #20]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	8abb      	ldrh	r3, [r7, #20]
 8003f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8013      	strh	r3, [r2, #0]
 8003f5a:	e0a3      	b.n	80040a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01b      	beq.n	8003fac <USB_DeactivateEndpoint+0x2d4>
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003fba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <USB_DeactivateEndpoint+0x324>
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	853b      	strh	r3, [r7, #40]	; 0x28
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	441a      	add	r2, r3
 8003fe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	441a      	add	r2, r3
 800401e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800402c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004030:	b29b      	uxth	r3, r3
 8004032:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800405c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004068:	b29b      	uxth	r3, r3
 800406a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	847b      	strh	r3, [r7, #34]	; 0x22
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	441a      	add	r2, r3
 800408e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3734      	adds	r7, #52	; 0x34
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b0cc      	sub	sp, #304	; 0x130
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040be:	6018      	str	r0, [r3, #0]
 80040c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040c8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f041 817d 	bne.w	80053d6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80040dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d908      	bls.n	800410a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80040f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004108:	e007      	b.n	800411a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800410a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800411a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	7b1b      	ldrb	r3, [r3, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d152      	bne.n	80041d0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800412a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800412e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6959      	ldr	r1, [r3, #20]
 8004136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	88da      	ldrh	r2, [r3, #6]
 8004142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004146:	b29b      	uxth	r3, r3
 8004148:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800414c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004150:	6800      	ldr	r0, [r0, #0]
 8004152:	f001 ff23 	bl	8005f9c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800415a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800415e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004162:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800416e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004178:	b29b      	uxth	r3, r3
 800417a:	4619      	mov	r1, r3
 800417c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004180:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004184:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004188:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	440a      	add	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	011a      	lsls	r2, r3, #4
 80041a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4413      	add	r3, r2
 80041ac:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80041b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041be:	b29a      	uxth	r2, r3
 80041c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	f001 b8b5 	b.w	800533a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80041d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	78db      	ldrb	r3, [r3, #3]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	f040 84c6 	bne.w	8004b6e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80041e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	f240 8443 	bls.w	8004a86 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800422a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800422e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004250:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004258:	b29b      	uxth	r3, r3
 800425a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800425c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800426c:	1ad2      	subs	r2, r2, r3
 800426e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800427a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800427e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 823e 	beq.w	800471e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042ae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 809a 	bne.w	80043fc <USB_EPStartXfer+0x34c>
 80042c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042d4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	4619      	mov	r1, r3
 80042ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042fa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	440a      	add	r2, r1
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	011a      	lsls	r2, r3, #4
 8004312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4413      	add	r3, r2
 800431e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004326:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d122      	bne.n	800437a <USB_EPStartXfer+0x2ca>
 8004334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004338:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004346:	b29a      	uxth	r2, r3
 8004348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800434c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004358:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436a:	b29a      	uxth	r2, r3
 800436c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004370:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e079      	b.n	800446e <USB_EPStartXfer+0x3be>
 800437a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800437e:	2b3e      	cmp	r3, #62	; 0x3e
 8004380:	d81b      	bhi.n	80043ba <USB_EPStartXfer+0x30a>
 8004382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800438c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <USB_EPStartXfer+0x2f2>
 8004398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800439c:	3301      	adds	r3, #1
 800439e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	e059      	b.n	800446e <USB_EPStartXfer+0x3be>
 80043ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d104      	bne.n	80043da <USB_EPStartXfer+0x32a>
 80043d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043d4:	3b01      	subs	r3, #1
 80043d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043de:	b29b      	uxth	r3, r3
 80043e0:	029b      	lsls	r3, r3, #10
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	e038      	b.n	800446e <USB_EPStartXfer+0x3be>
 80043fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d130      	bne.n	800446e <USB_EPStartXfer+0x3be>
 800440c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	4619      	mov	r1, r3
 800441e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004422:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004426:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800442a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	440a      	add	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	011a      	lsls	r2, r3, #4
 8004442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004446:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4413      	add	r3, r2
 800444e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004460:	b29a      	uxth	r2, r3
 8004462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800446e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	895b      	ldrh	r3, [r3, #10]
 800447a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800447e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6959      	ldr	r1, [r3, #20]
 800448a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800448e:	b29b      	uxth	r3, r3
 8004490:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004494:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004498:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800449c:	6800      	ldr	r0, [r0, #0]
 800449e:	f001 fd7d 	bl	8005f9c <USB_WritePMA>
            ep->xfer_buff += len;
 80044a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b2:	441a      	add	r2, r3
 80044b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80044c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d90f      	bls.n	80044fc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80044dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ec:	1ad2      	subs	r2, r2, r3
 80044ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	621a      	str	r2, [r3, #32]
 80044fa:	e00e      	b.n	800451a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80044fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800450c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800451a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800451e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 809a 	bne.w	8004660 <USB_EPStartXfer+0x5b0>
 800452c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004530:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004534:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004538:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004556:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800455a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800455e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	440a      	add	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	011a      	lsls	r2, r3, #4
 8004576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800457a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4413      	add	r3, r2
 8004582:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800458a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d122      	bne.n	80045de <USB_EPStartXfer+0x52e>
 8004598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800459c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	801a      	strh	r2, [r3, #0]
 80045dc:	e083      	b.n	80046e6 <USB_EPStartXfer+0x636>
 80045de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e2:	2b3e      	cmp	r3, #62	; 0x3e
 80045e4:	d81b      	bhi.n	800461e <USB_EPStartXfer+0x56e>
 80045e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <USB_EPStartXfer+0x556>
 80045fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004600:	3301      	adds	r3, #1
 8004602:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004606:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800460a:	b29b      	uxth	r3, r3
 800460c:	029b      	lsls	r3, r3, #10
 800460e:	b29a      	uxth	r2, r3
 8004610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004614:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	e063      	b.n	80046e6 <USB_EPStartXfer+0x636>
 800461e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <USB_EPStartXfer+0x58e>
 8004634:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004638:	3b01      	subs	r3, #1
 800463a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800463e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004642:	b29b      	uxth	r3, r3
 8004644:	029b      	lsls	r3, r3, #10
 8004646:	b29b      	uxth	r3, r3
 8004648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004650:	b29a      	uxth	r2, r3
 8004652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004656:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	e042      	b.n	80046e6 <USB_EPStartXfer+0x636>
 8004660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	785b      	ldrb	r3, [r3, #1]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d13a      	bne.n	80046e6 <USB_EPStartXfer+0x636>
 8004670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004674:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004678:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800467c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	4619      	mov	r1, r3
 8004696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800469a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800469e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046a2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	440a      	add	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	011a      	lsls	r2, r3, #4
 80046ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80046ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	891b      	ldrh	r3, [r3, #8]
 80046f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6959      	ldr	r1, [r3, #20]
 8004702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004706:	b29b      	uxth	r3, r3
 8004708:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800470c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004710:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004714:	6800      	ldr	r0, [r0, #0]
 8004716:	f001 fc41 	bl	8005f9c <USB_WritePMA>
 800471a:	f000 be0e 	b.w	800533a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800471e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d16d      	bne.n	800480a <USB_EPStartXfer+0x75a>
 800472e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
 800473a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004748:	b29b      	uxth	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474e:	4413      	add	r3, r2
 8004750:	64bb      	str	r3, [r7, #72]	; 0x48
 8004752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	011a      	lsls	r2, r3, #4
 8004760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004762:	4413      	add	r3, r2
 8004764:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
 800476a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d112      	bne.n	8004798 <USB_EPStartXfer+0x6e8>
 8004772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800477c:	b29a      	uxth	r2, r3
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800478c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004790:	b29a      	uxth	r2, r3
 8004792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	e063      	b.n	8004860 <USB_EPStartXfer+0x7b0>
 8004798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800479c:	2b3e      	cmp	r3, #62	; 0x3e
 800479e:	d817      	bhi.n	80047d0 <USB_EPStartXfer+0x720>
 80047a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <USB_EPStartXfer+0x710>
 80047b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047ba:	3301      	adds	r3, #1
 80047bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	029b      	lsls	r3, r3, #10
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047cc:	801a      	strh	r2, [r3, #0]
 80047ce:	e047      	b.n	8004860 <USB_EPStartXfer+0x7b0>
 80047d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <USB_EPStartXfer+0x740>
 80047e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047ea:	3b01      	subs	r3, #1
 80047ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	029b      	lsls	r3, r3, #10
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004802:	b29a      	uxth	r2, r3
 8004804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	e02a      	b.n	8004860 <USB_EPStartXfer+0x7b0>
 800480a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d122      	bne.n	8004860 <USB_EPStartXfer+0x7b0>
 800481a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	653b      	str	r3, [r7, #80]	; 0x50
 8004826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800482a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483a:	4413      	add	r3, r2
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
 800483e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	011a      	lsls	r2, r3, #4
 800484c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484e:	4413      	add	r3, r2
 8004850:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800485a:	b29a      	uxth	r2, r3
 800485c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	891b      	ldrh	r3, [r3, #8]
 800486c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6959      	ldr	r1, [r3, #20]
 800487c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004880:	b29b      	uxth	r3, r3
 8004882:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004886:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800488a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800488e:	6800      	ldr	r0, [r0, #0]
 8004890:	f001 fb84 	bl	8005f9c <USB_WritePMA>
            ep->xfer_buff += len;
 8004894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a4:	441a      	add	r2, r3
 80048a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d90f      	bls.n	80048ee <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80048ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	621a      	str	r2, [r3, #32]
 80048ec:	e00e      	b.n	800490c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80048ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80048fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2200      	movs	r2, #0
 800490a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800490c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	643b      	str	r3, [r7, #64]	; 0x40
 8004918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d16d      	bne.n	8004a04 <USB_EPStartXfer+0x954>
 8004928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800492c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
 8004934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	4413      	add	r3, r2
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
 800494c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	011a      	lsls	r2, r3, #4
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	4413      	add	r3, r2
 800495e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
 8004964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d112      	bne.n	8004992 <USB_EPStartXfer+0x8e2>
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004976:	b29a      	uxth	r2, r3
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498a:	b29a      	uxth	r2, r3
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	e05d      	b.n	8004a4e <USB_EPStartXfer+0x99e>
 8004992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004996:	2b3e      	cmp	r3, #62	; 0x3e
 8004998:	d817      	bhi.n	80049ca <USB_EPStartXfer+0x91a>
 800499a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <USB_EPStartXfer+0x90a>
 80049b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049b4:	3301      	adds	r3, #1
 80049b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049be:	b29b      	uxth	r3, r3
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e041      	b.n	8004a4e <USB_EPStartXfer+0x99e>
 80049ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d104      	bne.n	80049ea <USB_EPStartXfer+0x93a>
 80049e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049e4:	3b01      	subs	r3, #1
 80049e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	029b      	lsls	r3, r3, #10
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	e024      	b.n	8004a4e <USB_EPStartXfer+0x99e>
 8004a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d11c      	bne.n	8004a4e <USB_EPStartXfer+0x99e>
 8004a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a28:	4413      	add	r3, r2
 8004a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	895b      	ldrh	r3, [r3, #10]
 8004a5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a74:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f001 fa8d 	bl	8005f9c <USB_WritePMA>
 8004a82:	f000 bc5a 	b.w	800533a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b12:	4413      	add	r3, r2
 8004b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	011a      	lsls	r2, r3, #4
 8004b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b26:	4413      	add	r3, r2
 8004b28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	891b      	ldrh	r3, [r3, #8]
 8004b44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6959      	ldr	r1, [r3, #20]
 8004b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b5e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b62:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b66:	6800      	ldr	r0, [r0, #0]
 8004b68:	f001 fa18 	bl	8005f9c <USB_WritePMA>
 8004b6c:	e3e5      	b.n	800533a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b94:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bda:	1ad2      	subs	r2, r2, r3
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 81bc 	beq.w	8004f88 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d16d      	bne.n	8004d0a <USB_EPStartXfer+0xc5a>
 8004c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4e:	4413      	add	r3, r2
 8004c50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	011a      	lsls	r2, r3, #4
 8004c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c62:	4413      	add	r3, r2
 8004c64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c68:	677b      	str	r3, [r7, #116]	; 0x74
 8004c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d112      	bne.n	8004c98 <USB_EPStartXfer+0xbe8>
 8004c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c80:	801a      	strh	r2, [r3, #0]
 8004c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	e060      	b.n	8004d5a <USB_EPStartXfer+0xcaa>
 8004c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c9e:	d817      	bhi.n	8004cd0 <USB_EPStartXfer+0xc20>
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <USB_EPStartXfer+0xc10>
 8004cb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	029b      	lsls	r3, r3, #10
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	e044      	b.n	8004d5a <USB_EPStartXfer+0xcaa>
 8004cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <USB_EPStartXfer+0xc40>
 8004ce6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	e027      	b.n	8004d5a <USB_EPStartXfer+0xcaa>
 8004d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d11f      	bne.n	8004d5a <USB_EPStartXfer+0xcaa>
 8004d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d30:	4413      	add	r3, r2
 8004d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	011a      	lsls	r2, r3, #4
 8004d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d48:	4413      	add	r3, r2
 8004d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	895b      	ldrh	r3, [r3, #10]
 8004d66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6959      	ldr	r1, [r3, #20]
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d88:	6800      	ldr	r0, [r0, #0]
 8004d8a:	f001 f907 	bl	8005f9c <USB_WritePMA>
          ep->xfer_buff += len;
 8004d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9e:	441a      	add	r2, r3
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d90f      	bls.n	8004de8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd8:	1ad2      	subs	r2, r2, r3
 8004dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	621a      	str	r2, [r3, #32]
 8004de6:	e00e      	b.n	8004e06 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8295 	beq.w	800533a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d16d      	bne.n	8004efc <USB_EPStartXfer+0xe4c>
 8004e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e40:	4413      	add	r3, r2
 8004e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	011a      	lsls	r2, r3, #4
 8004e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e54:	4413      	add	r3, r2
 8004e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d112      	bne.n	8004e8a <USB_EPStartXfer+0xdda>
 8004e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e72:	801a      	strh	r2, [r3, #0]
 8004e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	e063      	b.n	8004f52 <USB_EPStartXfer+0xea2>
 8004e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e90:	d817      	bhi.n	8004ec2 <USB_EPStartXfer+0xe12>
 8004e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <USB_EPStartXfer+0xe02>
 8004ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eac:	3301      	adds	r3, #1
 8004eae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	029b      	lsls	r3, r3, #10
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	e047      	b.n	8004f52 <USB_EPStartXfer+0xea2>
 8004ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <USB_EPStartXfer+0xe32>
 8004ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004edc:	3b01      	subs	r3, #1
 8004ede:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	029b      	lsls	r3, r3, #10
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	e02a      	b.n	8004f52 <USB_EPStartXfer+0xea2>
 8004efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d122      	bne.n	8004f52 <USB_EPStartXfer+0xea2>
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	673b      	str	r3, [r7, #112]	; 0x70
 8004f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f2c:	4413      	add	r3, r2
 8004f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	011a      	lsls	r2, r3, #4
 8004f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f40:	4413      	add	r3, r2
 8004f42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	891b      	ldrh	r3, [r3, #8]
 8004f5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6959      	ldr	r1, [r3, #20]
 8004f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f80:	6800      	ldr	r0, [r0, #0]
 8004f82:	f001 f80b 	bl	8005f9c <USB_WritePMA>
 8004f86:	e1d8      	b.n	800533a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d178      	bne.n	800508a <USB_EPStartXfer+0xfda>
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	011a      	lsls	r2, r3, #4
 8004fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <USB_EPStartXfer+0xf64>
 8004fe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800500a:	b29a      	uxth	r2, r3
 800500c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	e06b      	b.n	80050ec <USB_EPStartXfer+0x103c>
 8005014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005018:	2b3e      	cmp	r3, #62	; 0x3e
 800501a:	d818      	bhi.n	800504e <USB_EPStartXfer+0xf9e>
 800501c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d004      	beq.n	800503c <USB_EPStartXfer+0xf8c>
 8005032:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005036:	3301      	adds	r3, #1
 8005038:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800503c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005040:	b29b      	uxth	r3, r3
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	b29a      	uxth	r2, r3
 8005046:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	e04e      	b.n	80050ec <USB_EPStartXfer+0x103c>
 800504e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <USB_EPStartXfer+0xfbe>
 8005064:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005068:	3b01      	subs	r3, #1
 800506a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800506e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005072:	b29b      	uxth	r3, r3
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005080:	b29a      	uxth	r2, r3
 8005082:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e030      	b.n	80050ec <USB_EPStartXfer+0x103c>
 800508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d128      	bne.n	80050ec <USB_EPStartXfer+0x103c>
 800509a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050be:	4413      	add	r3, r2
 80050c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	011a      	lsls	r2, r3, #4
 80050d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050d6:	4413      	add	r3, r2
 80050d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	891b      	ldrh	r3, [r3, #8]
 80050f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6959      	ldr	r1, [r3, #20]
 8005108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510c:	b29b      	uxth	r3, r3
 800510e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005112:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005116:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	f000 ff3e 	bl	8005f9c <USB_WritePMA>
          ep->xfer_buff += len;
 8005120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005130:	441a      	add	r2, r3
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a1a      	ldr	r2, [r3, #32]
 800514a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	d90f      	bls.n	800517a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800515a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6a1a      	ldr	r2, [r3, #32]
 8005166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	621a      	str	r2, [r3, #32]
 8005178:	e00e      	b.n	8005198 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800518a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2200      	movs	r2, #0
 8005196:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80cc 	beq.w	800533a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d178      	bne.n	80052b2 <USB_EPStartXfer+0x1202>
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051dc:	b29b      	uxth	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e4:	4413      	add	r3, r2
 80051e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	011a      	lsls	r2, r3, #4
 80051f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051fc:	4413      	add	r3, r2
 80051fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d116      	bne.n	800523c <USB_EPStartXfer+0x118c>
 800520e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800521a:	b29a      	uxth	r2, r3
 800521c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005232:	b29a      	uxth	r2, r3
 8005234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e064      	b.n	8005306 <USB_EPStartXfer+0x1256>
 800523c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005240:	2b3e      	cmp	r3, #62	; 0x3e
 8005242:	d818      	bhi.n	8005276 <USB_EPStartXfer+0x11c6>
 8005244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800524e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <USB_EPStartXfer+0x11b4>
 800525a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800525e:	3301      	adds	r3, #1
 8005260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005268:	b29b      	uxth	r3, r3
 800526a:	029b      	lsls	r3, r3, #10
 800526c:	b29a      	uxth	r2, r3
 800526e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	e047      	b.n	8005306 <USB_EPStartXfer+0x1256>
 8005276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <USB_EPStartXfer+0x11e6>
 800528c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005290:	3b01      	subs	r3, #1
 8005292:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	b29b      	uxth	r3, r3
 800529c:	029b      	lsls	r3, r3, #10
 800529e:	b29b      	uxth	r3, r3
 80052a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	e029      	b.n	8005306 <USB_EPStartXfer+0x1256>
 80052b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d121      	bne.n	8005306 <USB_EPStartXfer+0x1256>
 80052c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052d8:	4413      	add	r3, r2
 80052da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	011a      	lsls	r2, r3, #4
 80052ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fe:	b29a      	uxth	r2, r3
 8005300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	895b      	ldrh	r3, [r3, #10]
 8005312:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6959      	ldr	r1, [r3, #20]
 8005322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005326:	b29b      	uxth	r3, r3
 8005328:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800532c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005330:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005334:	6800      	ldr	r0, [r0, #0]
 8005336:	f000 fe31 	bl	8005f9c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800533a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800535c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005368:	8013      	strh	r3, [r2, #0]
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005372:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005376:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800537a:	8812      	ldrh	r2, [r2, #0]
 800537c:	f082 0210 	eor.w	r2, r2, #16
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005386:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800538a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800538e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005392:	8812      	ldrh	r2, [r2, #0]
 8005394:	f082 0220 	eor.w	r2, r2, #32
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]
 80053d2:	f000 bc9f 	b.w	8005d14 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80053d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	7b1b      	ldrb	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 80ae 	bne.w	8005544 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80053e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d917      	bls.n	8005434 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	619a      	str	r2, [r3, #24]
 8005432:	e00e      	b.n	8005452 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2200      	movs	r2, #0
 8005450:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546e:	b29b      	uxth	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005476:	4413      	add	r3, r2
 8005478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	011a      	lsls	r2, r3, #4
 800548a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800548e:	4413      	add	r3, r2
 8005490:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d116      	bne.n	80054ce <USB_EPStartXfer+0x141e>
 80054a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	e3e8      	b.n	8005ca0 <USB_EPStartXfer+0x1bf0>
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	2b3e      	cmp	r3, #62	; 0x3e
 80054d4:	d818      	bhi.n	8005508 <USB_EPStartXfer+0x1458>
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <USB_EPStartXfer+0x1446>
 80054ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054f0:	3301      	adds	r3, #1
 80054f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29a      	uxth	r2, r3
 8005500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	e3cb      	b.n	8005ca0 <USB_EPStartXfer+0x1bf0>
 8005508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <USB_EPStartXfer+0x1478>
 800551e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005522:	3b01      	subs	r3, #1
 8005524:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005528:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800552c:	b29b      	uxth	r3, r3
 800552e:	029b      	lsls	r3, r3, #10
 8005530:	b29b      	uxth	r3, r3
 8005532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553a:	b29a      	uxth	r2, r3
 800553c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	e3ad      	b.n	8005ca0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	78db      	ldrb	r3, [r3, #3]
 8005550:	2b02      	cmp	r3, #2
 8005552:	f040 8200 	bne.w	8005956 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 8091 	bne.w	800568a <USB_EPStartXfer+0x15da>
 8005568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800558c:	4413      	add	r3, r2
 800558e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	011a      	lsls	r2, r3, #4
 80055a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d116      	bne.n	80055ec <USB_EPStartXfer+0x153c>
 80055be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e083      	b.n	80056f4 <USB_EPStartXfer+0x1644>
 80055ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b3e      	cmp	r3, #62	; 0x3e
 80055fa:	d820      	bhi.n	800563e <USB_EPStartXfer+0x158e>
 80055fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800560e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <USB_EPStartXfer+0x157c>
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005626:	3301      	adds	r3, #1
 8005628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005630:	b29b      	uxth	r3, r3
 8005632:	029b      	lsls	r3, r3, #10
 8005634:	b29a      	uxth	r2, r3
 8005636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e05a      	b.n	80056f4 <USB_EPStartXfer+0x1644>
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <USB_EPStartXfer+0x15be>
 8005664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005668:	3b01      	subs	r3, #1
 800566a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800566e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005672:	b29b      	uxth	r3, r3
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	b29b      	uxth	r3, r3
 8005678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005680:	b29a      	uxth	r2, r3
 8005682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	e034      	b.n	80056f4 <USB_EPStartXfer+0x1644>
 800568a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d12c      	bne.n	80056f4 <USB_EPStartXfer+0x1644>
 800569a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056be:	4413      	add	r3, r2
 80056c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	011a      	lsls	r2, r3, #4
 80056d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056d6:	4413      	add	r3, r2
 80056d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 8091 	bne.w	8005836 <USB_EPStartXfer+0x1786>
 8005714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005738:	4413      	add	r3, r2
 800573a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800573e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	011a      	lsls	r2, r3, #4
 800574c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005750:	4413      	add	r3, r2
 8005752:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005756:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d116      	bne.n	8005798 <USB_EPStartXfer+0x16e8>
 800576a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005776:	b29a      	uxth	r2, r3
 8005778:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578e:	b29a      	uxth	r2, r3
 8005790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	e07c      	b.n	8005892 <USB_EPStartXfer+0x17e2>
 8005798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	2b3e      	cmp	r3, #62	; 0x3e
 80057a6:	d820      	bhi.n	80057ea <USB_EPStartXfer+0x173a>
 80057a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <USB_EPStartXfer+0x1728>
 80057ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057d2:	3301      	adds	r3, #1
 80057d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057dc:	b29b      	uxth	r3, r3
 80057de:	029b      	lsls	r3, r3, #10
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	e053      	b.n	8005892 <USB_EPStartXfer+0x17e2>
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <USB_EPStartXfer+0x176a>
 8005810:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005814:	3b01      	subs	r3, #1
 8005816:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800581a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800581e:	b29b      	uxth	r3, r3
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	b29b      	uxth	r3, r3
 8005824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800582c:	b29a      	uxth	r2, r3
 800582e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e02d      	b.n	8005892 <USB_EPStartXfer+0x17e2>
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d125      	bne.n	8005892 <USB_EPStartXfer+0x17e2>
 8005846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005854:	b29b      	uxth	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800585c:	4413      	add	r3, r2
 800585e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	011a      	lsls	r2, r3, #4
 8005870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005874:	4413      	add	r3, r2
 8005876:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800587a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800587e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	b29a      	uxth	r2, r3
 800588c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005890:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 81fe 	beq.w	8005ca0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80058a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <USB_EPStartXfer+0x182c>
 80058d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f040 81db 	bne.w	8005ca0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 81d4 	bne.w	8005ca0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	441a      	add	r2, r3
 800593c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]
 8005954:	e1a4      	b.n	8005ca0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	78db      	ldrb	r3, [r3, #3]
 8005962:	2b01      	cmp	r3, #1
 8005964:	f040 819a 	bne.w	8005c9c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d917      	bls.n	80059b4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a4:	1ad2      	subs	r2, r2, r3
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	619a      	str	r2, [r3, #24]
 80059b2:	e00e      	b.n	80059d2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80059b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80059c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2200      	movs	r2, #0
 80059d0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d178      	bne.n	8005ad4 <USB_EPStartXfer+0x1a24>
 80059e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a06:	4413      	add	r3, r2
 8005a08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	011a      	lsls	r2, r3, #4
 8005a1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a1e:	4413      	add	r3, r2
 8005a20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d116      	bne.n	8005a5e <USB_EPStartXfer+0x19ae>
 8005a30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e06b      	b.n	8005b36 <USB_EPStartXfer+0x1a86>
 8005a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a62:	2b3e      	cmp	r3, #62	; 0x3e
 8005a64:	d818      	bhi.n	8005a98 <USB_EPStartXfer+0x19e8>
 8005a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <USB_EPStartXfer+0x19d6>
 8005a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a80:	3301      	adds	r3, #1
 8005a82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	e04e      	b.n	8005b36 <USB_EPStartXfer+0x1a86>
 8005a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <USB_EPStartXfer+0x1a08>
 8005aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e030      	b.n	8005b36 <USB_EPStartXfer+0x1a86>
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d128      	bne.n	8005b36 <USB_EPStartXfer+0x1a86>
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	4413      	add	r3, r2
 8005b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d178      	bne.n	8005c46 <USB_EPStartXfer+0x1b96>
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b78:	4413      	add	r3, r2
 8005b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	011a      	lsls	r2, r3, #4
 8005b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b90:	4413      	add	r3, r2
 8005b92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d116      	bne.n	8005bd0 <USB_EPStartXfer+0x1b20>
 8005ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e067      	b.n	8005ca0 <USB_EPStartXfer+0x1bf0>
 8005bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd4:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd6:	d818      	bhi.n	8005c0a <USB_EPStartXfer+0x1b5a>
 8005bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <USB_EPStartXfer+0x1b48>
 8005bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	029b      	lsls	r3, r3, #10
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	e04a      	b.n	8005ca0 <USB_EPStartXfer+0x1bf0>
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <USB_EPStartXfer+0x1b7a>
 8005c20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c24:	3b01      	subs	r3, #1
 8005c26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e02c      	b.n	8005ca0 <USB_EPStartXfer+0x1bf0>
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d124      	bne.n	8005ca0 <USB_EPStartXfer+0x1bf0>
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	011a      	lsls	r2, r3, #4
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	e001      	b.n	8005ca0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e03a      	b.n	8005d16 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005cd6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005cda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cde:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	441a      	add	r2, r3
 8005cfc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d020      	beq.n	8005d74 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d48:	81bb      	strh	r3, [r7, #12]
 8005d4a:	89bb      	ldrh	r3, [r7, #12]
 8005d4c:	f083 0310 	eor.w	r3, r3, #16
 8005d50:	81bb      	strh	r3, [r7, #12]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	89bb      	ldrh	r3, [r7, #12]
 8005d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	8013      	strh	r3, [r2, #0]
 8005d72:	e01f      	b.n	8005db4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	81fb      	strh	r3, [r7, #14]
 8005d8c:	89fb      	ldrh	r3, [r7, #14]
 8005d8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d92:	81fb      	strh	r3, [r7, #14]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	441a      	add	r2, r3
 8005d9e:	89fb      	ldrh	r3, [r7, #14]
 8005da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	7b1b      	ldrb	r3, [r3, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 809d 	bne.w	8005f0e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d04c      	beq.n	8005e76 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	823b      	strh	r3, [r7, #16]
 8005dea:	8a3b      	ldrh	r3, [r7, #16]
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01b      	beq.n	8005e2c <USB_EPClearStall+0x6c>
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	81fb      	strh	r3, [r7, #14]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	89fb      	ldrh	r3, [r7, #14]
 8005e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	78db      	ldrb	r3, [r3, #3]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d06c      	beq.n	8005f0e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e4a:	81bb      	strh	r3, [r7, #12]
 8005e4c:	89bb      	ldrh	r3, [r7, #12]
 8005e4e:	f083 0320 	eor.w	r3, r3, #32
 8005e52:	81bb      	strh	r3, [r7, #12]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	89bb      	ldrh	r3, [r7, #12]
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
 8005e74:	e04b      	b.n	8005f0e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	82fb      	strh	r3, [r7, #22]
 8005e84:	8afb      	ldrh	r3, [r7, #22]
 8005e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01b      	beq.n	8005ec6 <USB_EPClearStall+0x106>
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea4:	82bb      	strh	r3, [r7, #20]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	8abb      	ldrh	r3, [r7, #20]
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	827b      	strh	r3, [r7, #18]
 8005ede:	8a7b      	ldrh	r3, [r7, #18]
 8005ee0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ee4:	827b      	strh	r3, [r7, #18]
 8005ee6:	8a7b      	ldrh	r3, [r7, #18]
 8005ee8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005eec:	827b      	strh	r3, [r7, #18]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	8a7b      	ldrh	r3, [r7, #18]
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f26:	78fb      	ldrb	r3, [r7, #3]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d103      	bne.n	8005f34 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2280      	movs	r2, #128	; 0x80
 8005f30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr

08005f40 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr

08005f68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr

08005f9c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b08d      	sub	sp, #52	; 0x34
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	461a      	mov	r2, r3
 8005faa:	460b      	mov	r3, r1
 8005fac:	80fb      	strh	r3, [r7, #6]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	085b      	lsrs	r3, r3, #1
 8005fb8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	005a      	lsls	r2, r3, #1
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd4:	e01e      	b.n	8006014 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	3301      	adds	r3, #1
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	3302      	adds	r3, #2
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	3302      	adds	r3, #2
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	3301      	adds	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	3b01      	subs	r3, #1
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1dd      	bne.n	8005fd6 <USB_WritePMA+0x3a>
  }
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	3734      	adds	r7, #52	; 0x34
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr

08006026 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006026:	b480      	push	{r7}
 8006028:	b08b      	sub	sp, #44	; 0x2c
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	4611      	mov	r1, r2
 8006032:	461a      	mov	r2, r3
 8006034:	460b      	mov	r3, r1
 8006036:	80fb      	strh	r3, [r7, #6]
 8006038:	4613      	mov	r3, r2
 800603a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800603c:	88bb      	ldrh	r3, [r7, #4]
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	b29b      	uxth	r3, r3
 8006042:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	005a      	lsls	r2, r3, #1
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006058:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
 800605e:	e01b      	b.n	8006098 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	3302      	adds	r3, #2
 800606c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	3301      	adds	r3, #1
 800607a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	0a1b      	lsrs	r3, r3, #8
 8006080:	b2da      	uxtb	r2, r3
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	3302      	adds	r3, #2
 8006090:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	3b01      	subs	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e0      	bne.n	8006060 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800609e:	88bb      	ldrh	r3, [r7, #4]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	701a      	strb	r2, [r3, #0]
  }
}
 80060ba:	bf00      	nop
 80060bc:	372c      	adds	r7, #44	; 0x2c
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80060d4:	2302      	movs	r3, #2
 80060d6:	2203      	movs	r2, #3
 80060d8:	2181      	movs	r1, #129	; 0x81
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 fd2d 	bl	8007b3a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80060e6:	2302      	movs	r3, #2
 80060e8:	2203      	movs	r2, #3
 80060ea:	2101      	movs	r1, #1
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fd24 	bl	8007b3a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80060fa:	2018      	movs	r0, #24
 80060fc:	f001 fe32 	bl	8007d64 <USBD_static_malloc>
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d102      	bne.n	8006118 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
 8006116:	e011      	b.n	800613c <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	2302      	movs	r3, #2
 8006134:	2101      	movs	r1, #1
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 fdf0 	bl	8007d1c <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	460b      	mov	r3, r1
 8006150:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006152:	2181      	movs	r1, #129	; 0x81
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 fd16 	bl	8007b86 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006160:	2101      	movs	r1, #1
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 fd0f 	bl	8007b86 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	4618      	mov	r0, r3
 800618c:	f001 fdf6 	bl	8007d7c <USBD_static_free>
    pdev->pClassData = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d051      	beq.n	8006276 <USBD_CUSTOM_HID_Setup+0xd2>
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	f040 80d8 	bne.w	8006388 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	3b02      	subs	r3, #2
 80061de:	2b09      	cmp	r3, #9
 80061e0:	d841      	bhi.n	8006266 <USBD_CUSTOM_HID_Setup+0xc2>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <USBD_CUSTOM_HID_Setup+0x44>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	08006241 	.word	0x08006241
 80061ec:	0800621f 	.word	0x0800621f
 80061f0:	08006267 	.word	0x08006267
 80061f4:	08006267 	.word	0x08006267
 80061f8:	08006267 	.word	0x08006267
 80061fc:	08006267 	.word	0x08006267
 8006200:	08006267 	.word	0x08006267
 8006204:	08006251 	.word	0x08006251
 8006208:	0800622f 	.word	0x0800622f
 800620c:	08006211 	.word	0x08006211
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	885b      	ldrh	r3, [r3, #2]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	605a      	str	r2, [r3, #4]
          break;
 800621c:	e02a      	b.n	8006274 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	3304      	adds	r3, #4
 8006222:	2201      	movs	r2, #1
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 f975 	bl	8007516 <USBD_CtlSendData>
          break;
 800622c:	e022      	b.n	8006274 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	885b      	ldrh	r3, [r3, #2]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	b29b      	uxth	r3, r3
 8006236:	b2db      	uxtb	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	609a      	str	r2, [r3, #8]
          break;
 800623e:	e019      	b.n	8006274 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	3308      	adds	r3, #8
 8006244:	2201      	movs	r2, #1
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 f964 	bl	8007516 <USBD_CtlSendData>
          break;
 800624e:	e011      	b.n	8006274 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2201      	movs	r2, #1
 8006254:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006256:	6939      	ldr	r1, [r7, #16]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	88db      	ldrh	r3, [r3, #6]
 800625c:	461a      	mov	r2, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 f987 	bl	8007572 <USBD_CtlPrepareRx>
          break;
 8006264:	e006      	b.n	8006274 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 f8ea 	bl	8007442 <USBD_CtlError>
          ret = USBD_FAIL;
 800626e:	2302      	movs	r3, #2
 8006270:	75fb      	strb	r3, [r7, #23]
          break;
 8006272:	bf00      	nop
      }
      break;
 8006274:	e08f      	b.n	8006396 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	2b0b      	cmp	r3, #11
 800627c:	d87c      	bhi.n	8006378 <USBD_CUSTOM_HID_Setup+0x1d4>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <USBD_CUSTOM_HID_Setup+0xe0>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	080062b5 	.word	0x080062b5
 8006288:	08006379 	.word	0x08006379
 800628c:	08006379 	.word	0x08006379
 8006290:	08006379 	.word	0x08006379
 8006294:	08006379 	.word	0x08006379
 8006298:	08006379 	.word	0x08006379
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	08006379 	.word	0x08006379
 80062a4:	08006379 	.word	0x08006379
 80062a8:	08006379 	.word	0x08006379
 80062ac:	0800632b 	.word	0x0800632b
 80062b0:	08006353 	.word	0x08006353
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d107      	bne.n	80062ce <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80062be:	f107 030e 	add.w	r3, r7, #14
 80062c2:	2202      	movs	r2, #2
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f925 	bl	8007516 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062cc:	e05b      	b.n	8006386 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 f8b6 	bl	8007442 <USBD_CtlError>
            ret = USBD_FAIL;
 80062d6:	2302      	movs	r3, #2
 80062d8:	75fb      	strb	r3, [r7, #23]
          break;
 80062da:	e054      	b.n	8006386 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	885b      	ldrh	r3, [r3, #2]
 80062e0:	0a1b      	lsrs	r3, r3, #8
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b22      	cmp	r3, #34	; 0x22
 80062e6:	d10b      	bne.n	8006300 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	88db      	ldrh	r3, [r3, #6]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	bf28      	it	cs
 80062f0:	2302      	movcs	r3, #2
 80062f2:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	e00d      	b.n	800631c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	885b      	ldrh	r3, [r3, #2]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b21      	cmp	r3, #33	; 0x21
 800630a:	d107      	bne.n	800631c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800630c:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800630e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	88db      	ldrh	r3, [r3, #6]
 8006314:	2b09      	cmp	r3, #9
 8006316:	bf28      	it	cs
 8006318:	2309      	movcs	r3, #9
 800631a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800631c:	8bfb      	ldrh	r3, [r7, #30]
 800631e:	461a      	mov	r2, r3
 8006320:	69b9      	ldr	r1, [r7, #24]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 f8f7 	bl	8007516 <USBD_CtlSendData>
          break;
 8006328:	e02d      	b.n	8006386 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	2b03      	cmp	r3, #3
 8006332:	d107      	bne.n	8006344 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	330c      	adds	r3, #12
 8006338:	2201      	movs	r2, #1
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f8ea 	bl	8007516 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006342:	e020      	b.n	8006386 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f87b 	bl	8007442 <USBD_CtlError>
            ret = USBD_FAIL;
 800634c:	2302      	movs	r3, #2
 800634e:	75fb      	strb	r3, [r7, #23]
          break;
 8006350:	e019      	b.n	8006386 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	2b03      	cmp	r3, #3
 800635a:	d106      	bne.n	800636a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	885b      	ldrh	r3, [r3, #2]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006368:	e00d      	b.n	8006386 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 f868 	bl	8007442 <USBD_CtlError>
            ret = USBD_FAIL;
 8006372:	2302      	movs	r3, #2
 8006374:	75fb      	strb	r3, [r7, #23]
          break;
 8006376:	e006      	b.n	8006386 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 f861 	bl	8007442 <USBD_CtlError>
          ret = USBD_FAIL;
 8006380:	2302      	movs	r3, #2
 8006382:	75fb      	strb	r3, [r7, #23]
          break;
 8006384:	bf00      	nop
      }
      break;
 8006386:	e006      	b.n	8006396 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 f859 	bl	8007442 <USBD_CtlError>
      ret = USBD_FAIL;
 8006390:	2302      	movs	r3, #2
 8006392:	75fb      	strb	r3, [r7, #23]
      break;
 8006394:	bf00      	nop
  }
  return ret;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	200000c8 	.word	0x200000c8

080063a4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2229      	movs	r2, #41	; 0x29
 80063b0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80063b2:	4b03      	ldr	r3, [pc, #12]	; (80063c0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	20000044 	.word	0x20000044

080063c4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2229      	movs	r2, #41	; 0x29
 80063d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80063d2:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000070 	.word	0x20000070

080063e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2229      	movs	r2, #41	; 0x29
 80063f0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80063f2:	4b03      	ldr	r3, [pc, #12]	; (8006400 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	2000009c 	.word	0x2000009c

08006404 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	2200      	movs	r2, #0
 8006418:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr

08006426 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006438:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	7810      	ldrb	r0, [r2, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	7852      	ldrb	r2, [r2, #1]
 800644a:	4611      	mov	r1, r2
 800644c:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	2302      	movs	r3, #2
 8006452:	2101      	movs	r1, #1
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 fc61 	bl	8007d1c <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006472:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d10c      	bne.n	8006496 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	7810      	ldrb	r0, [r2, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	7852      	ldrb	r2, [r2, #1]
 800648c:	4611      	mov	r1, r2
 800648e:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	220a      	movs	r2, #10
 80064ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80064ae:	4b03      	ldr	r3, [pc, #12]	; (80064bc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	200000d4 	.word	0x200000d4

080064c0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80064ca:	2302      	movs	r3, #2
 80064cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006500:	2302      	movs	r3, #2
 8006502:	e01a      	b.n	800653a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	79fa      	ldrb	r2, [r7, #7]
 8006530:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f001 fa96 	bl	8007a64 <USBD_LL_Init>

  return USBD_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d006      	beq.n	8006564 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]
 8006562:	e001      	b.n	8006568 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006564:	2302      	movs	r3, #2
 8006566:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fac1 	bl	8007b04 <USBD_LL_Start>

  return USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr

080065a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80065ac:	2302      	movs	r3, #2
 80065ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00c      	beq.n	80065d4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	4611      	mov	r1, r2
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	460b      	mov	r3, r1
 80065e8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	4611      	mov	r1, r2
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3

  return USBD_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fed7 	bl	80073ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2b02      	cmp	r3, #2
 800663e:	d016      	beq.n	800666e <USBD_LL_SetupStage+0x6a>
 8006640:	2b02      	cmp	r3, #2
 8006642:	d81c      	bhi.n	800667e <USBD_LL_SetupStage+0x7a>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <USBD_LL_SetupStage+0x4a>
 8006648:	2b01      	cmp	r3, #1
 800664a:	d008      	beq.n	800665e <USBD_LL_SetupStage+0x5a>
 800664c:	e017      	b.n	800667e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f9ca 	bl	80069f0 <USBD_StdDevReq>
      break;
 800665c:	e01a      	b.n	8006694 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa2c 	bl	8006ac4 <USBD_StdItfReq>
      break;
 800666c:	e012      	b.n	8006694 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa6c 	bl	8006b54 <USBD_StdEPReq>
      break;
 800667c:	e00a      	b.n	8006694 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006684:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006688:	b2db      	uxtb	r3, r3
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fa99 	bl	8007bc4 <USBD_LL_StallEP>
      break;
 8006692:	bf00      	nop
  }

  return USBD_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b086      	sub	sp, #24
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	460b      	mov	r3, r1
 80066a8:	607a      	str	r2, [r7, #4]
 80066aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d14b      	bne.n	800674a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80066b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d134      	bne.n	800672e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d919      	bls.n	8006704 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d203      	bcs.n	80066f2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	e002      	b.n	80066f8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 ff56 	bl	80075ae <USBD_CtlContinueRx>
 8006702:	e038      	b.n	8006776 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006716:	2b03      	cmp	r3, #3
 8006718:	d105      	bne.n	8006726 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 ff53 	bl	80075d2 <USBD_CtlSendStatus>
 800672c:	e023      	b.n	8006776 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006734:	2b05      	cmp	r3, #5
 8006736:	d11e      	bne.n	8006776 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006740:	2100      	movs	r1, #0
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f001 fa3e 	bl	8007bc4 <USBD_LL_StallEP>
 8006748:	e015      	b.n	8006776 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00d      	beq.n	8006772 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800675c:	2b03      	cmp	r3, #3
 800675e:	d108      	bne.n	8006772 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	7afa      	ldrb	r2, [r7, #11]
 800676a:	4611      	mov	r1, r2
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	4798      	blx	r3
 8006770:	e001      	b.n	8006776 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006772:	2302      	movs	r3, #2
 8006774:	e000      	b.n	8006778 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	460b      	mov	r3, r1
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d17f      	bne.n	8006894 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3314      	adds	r3, #20
 8006798:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d15c      	bne.n	800685e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d915      	bls.n	80067dc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	1ad2      	subs	r2, r2, r3
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fec0 	bl	800754e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067ce:	2300      	movs	r3, #0
 80067d0:	2200      	movs	r2, #0
 80067d2:	2100      	movs	r1, #0
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f001 faa1 	bl	8007d1c <USBD_LL_PrepareReceive>
 80067da:	e04e      	b.n	800687a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	6912      	ldr	r2, [r2, #16]
 80067e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80067e8:	fb01 f202 	mul.w	r2, r1, r2
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11c      	bne.n	800682c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d316      	bcc.n	800682c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006808:	429a      	cmp	r2, r3
 800680a:	d20f      	bcs.n	800682c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800680c:	2200      	movs	r2, #0
 800680e:	2100      	movs	r1, #0
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fe9c 	bl	800754e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800681e:	2300      	movs	r3, #0
 8006820:	2200      	movs	r2, #0
 8006822:	2100      	movs	r1, #0
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f001 fa79 	bl	8007d1c <USBD_LL_PrepareReceive>
 800682a:	e026      	b.n	800687a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800683e:	2b03      	cmp	r3, #3
 8006840:	d105      	bne.n	800684e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f001 f9b7 	bl	8007bc4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fece 	bl	80075f8 <USBD_CtlReceiveStatus>
 800685c:	e00d      	b.n	800687a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006864:	2b04      	cmp	r3, #4
 8006866:	d004      	beq.n	8006872 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006872:	2180      	movs	r1, #128	; 0x80
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f001 f9a5 	bl	8007bc4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006880:	2b01      	cmp	r3, #1
 8006882:	d11d      	bne.n	80068c0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff fe81 	bl	800658c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006892:	e015      	b.n	80068c0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00d      	beq.n	80068bc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d108      	bne.n	80068bc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	7afa      	ldrb	r2, [r7, #11]
 80068b4:	4611      	mov	r1, r2
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	4798      	blx	r3
 80068ba:	e001      	b.n	80068c0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068bc:	2302      	movs	r3, #2
 80068be:	e000      	b.n	80068c2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068d2:	2340      	movs	r3, #64	; 0x40
 80068d4:	2200      	movs	r2, #0
 80068d6:	2100      	movs	r1, #0
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 f92e 	bl	8007b3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2240      	movs	r2, #64	; 0x40
 80068ea:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068ee:	2340      	movs	r3, #64	; 0x40
 80068f0:	2200      	movs	r2, #0
 80068f2:	2180      	movs	r1, #128	; 0x80
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 f920 	bl	8007b3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2240      	movs	r2, #64	; 0x40
 8006904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6852      	ldr	r2, [r2, #4]
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	4611      	mov	r1, r2
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4798      	blx	r3
  }

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	78fa      	ldrb	r2, [r7, #3]
 800695c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2204      	movs	r2, #4
 8006982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d105      	bne.n	80069b0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d10b      	bne.n	80069e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d005      	beq.n	8006a16 <USBD_StdDevReq+0x26>
 8006a0a:	2b40      	cmp	r3, #64	; 0x40
 8006a0c:	d84f      	bhi.n	8006aae <USBD_StdDevReq+0xbe>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <USBD_StdDevReq+0x36>
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d14b      	bne.n	8006aae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4798      	blx	r3
      break;
 8006a24:	e048      	b.n	8006ab8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2b09      	cmp	r3, #9
 8006a2c:	d839      	bhi.n	8006aa2 <USBD_StdDevReq+0xb2>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <USBD_StdDevReq+0x44>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a85 	.word	0x08006a85
 8006a38:	08006a99 	.word	0x08006a99
 8006a3c:	08006aa3 	.word	0x08006aa3
 8006a40:	08006a8f 	.word	0x08006a8f
 8006a44:	08006aa3 	.word	0x08006aa3
 8006a48:	08006a67 	.word	0x08006a67
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006aa3 	.word	0x08006aa3
 8006a54:	08006a7b 	.word	0x08006a7b
 8006a58:	08006a71 	.word	0x08006a71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f9dc 	bl	8006e1c <USBD_GetDescriptor>
          break;
 8006a64:	e022      	b.n	8006aac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fb3f 	bl	80070ec <USBD_SetAddress>
          break;
 8006a6e:	e01d      	b.n	8006aac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fb7e 	bl	8007174 <USBD_SetConfig>
          break;
 8006a78:	e018      	b.n	8006aac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fc07 	bl	8007290 <USBD_GetConfig>
          break;
 8006a82:	e013      	b.n	8006aac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fc37 	bl	80072fa <USBD_GetStatus>
          break;
 8006a8c:	e00e      	b.n	8006aac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fc65 	bl	8007360 <USBD_SetFeature>
          break;
 8006a96:	e009      	b.n	8006aac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fc74 	bl	8007388 <USBD_ClrFeature>
          break;
 8006aa0:	e004      	b.n	8006aac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fccc 	bl	8007442 <USBD_CtlError>
          break;
 8006aaa:	bf00      	nop
      }
      break;
 8006aac:	e004      	b.n	8006ab8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fcc6 	bl	8007442 <USBD_CtlError>
      break;
 8006ab6:	bf00      	nop
  }

  return ret;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop

08006ac4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d005      	beq.n	8006aea <USBD_StdItfReq+0x26>
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d82e      	bhi.n	8006b40 <USBD_StdItfReq+0x7c>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <USBD_StdItfReq+0x26>
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	d12a      	bne.n	8006b40 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af0:	3b01      	subs	r3, #1
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d81d      	bhi.n	8006b32 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	889b      	ldrh	r3, [r3, #4]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d813      	bhi.n	8006b28 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	88db      	ldrh	r3, [r3, #6]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d110      	bne.n	8006b3c <USBD_StdItfReq+0x78>
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10d      	bne.n	8006b3c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fd56 	bl	80075d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b26:	e009      	b.n	8006b3c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fc89 	bl	8007442 <USBD_CtlError>
          break;
 8006b30:	e004      	b.n	8006b3c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fc84 	bl	8007442 <USBD_CtlError>
          break;
 8006b3a:	e000      	b.n	8006b3e <USBD_StdItfReq+0x7a>
          break;
 8006b3c:	bf00      	nop
      }
      break;
 8006b3e:	e004      	b.n	8006b4a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fc7d 	bl	8007442 <USBD_CtlError>
      break;
 8006b48:	bf00      	nop
  }

  return USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	889b      	ldrh	r3, [r3, #4]
 8006b66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	d007      	beq.n	8006b84 <USBD_StdEPReq+0x30>
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	f200 8146 	bhi.w	8006e06 <USBD_StdEPReq+0x2b2>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <USBD_StdEPReq+0x40>
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	f040 8141 	bne.w	8006e06 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
      break;
 8006b92:	e13d      	b.n	8006e10 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d10a      	bne.n	8006bb6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	e12d      	b.n	8006e12 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d007      	beq.n	8006bce <USBD_StdEPReq+0x7a>
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	f300 811b 	bgt.w	8006dfa <USBD_StdEPReq+0x2a6>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d072      	beq.n	8006cae <USBD_StdEPReq+0x15a>
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d03a      	beq.n	8006c42 <USBD_StdEPReq+0xee>
 8006bcc:	e115      	b.n	8006dfa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d002      	beq.n	8006bde <USBD_StdEPReq+0x8a>
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d015      	beq.n	8006c08 <USBD_StdEPReq+0xb4>
 8006bdc:	e02b      	b.n	8006c36 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00c      	beq.n	8006bfe <USBD_StdEPReq+0xaa>
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d009      	beq.n	8006bfe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 ffe8 	bl	8007bc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 ffe4 	bl	8007bc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bfc:	e020      	b.n	8006c40 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fc1e 	bl	8007442 <USBD_CtlError>
              break;
 8006c06:	e01b      	b.n	8006c40 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	885b      	ldrh	r3, [r3, #2]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10e      	bne.n	8006c2e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00b      	beq.n	8006c2e <USBD_StdEPReq+0xda>
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d008      	beq.n	8006c2e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	88db      	ldrh	r3, [r3, #6]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 ffcb 	bl	8007bc4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fccf 	bl	80075d2 <USBD_CtlSendStatus>

              break;
 8006c34:	e004      	b.n	8006c40 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fc02 	bl	8007442 <USBD_CtlError>
              break;
 8006c3e:	bf00      	nop
          }
          break;
 8006c40:	e0e0      	b.n	8006e04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d002      	beq.n	8006c52 <USBD_StdEPReq+0xfe>
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d015      	beq.n	8006c7c <USBD_StdEPReq+0x128>
 8006c50:	e026      	b.n	8006ca0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00c      	beq.n	8006c72 <USBD_StdEPReq+0x11e>
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2b80      	cmp	r3, #128	; 0x80
 8006c5c:	d009      	beq.n	8006c72 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 ffae 	bl	8007bc4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 ffaa 	bl	8007bc4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c70:	e01c      	b.n	8006cac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fbe4 	bl	8007442 <USBD_CtlError>
              break;
 8006c7a:	e017      	b.n	8006cac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	885b      	ldrh	r3, [r3, #2]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d112      	bne.n	8006caa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 ffb5 	bl	8007c02 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fc9a 	bl	80075d2 <USBD_CtlSendStatus>
              }
              break;
 8006c9e:	e004      	b.n	8006caa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fbcd 	bl	8007442 <USBD_CtlError>
              break;
 8006ca8:	e000      	b.n	8006cac <USBD_StdEPReq+0x158>
              break;
 8006caa:	bf00      	nop
          }
          break;
 8006cac:	e0aa      	b.n	8006e04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d002      	beq.n	8006cbe <USBD_StdEPReq+0x16a>
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d032      	beq.n	8006d22 <USBD_StdEPReq+0x1ce>
 8006cbc:	e097      	b.n	8006dee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <USBD_StdEPReq+0x180>
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	2b80      	cmp	r3, #128	; 0x80
 8006cc8:	d004      	beq.n	8006cd4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fbb8 	bl	8007442 <USBD_CtlError>
                break;
 8006cd2:	e091      	b.n	8006df8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	da0b      	bge.n	8006cf4 <USBD_StdEPReq+0x1a0>
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	3310      	adds	r3, #16
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4413      	add	r3, r2
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	e00b      	b.n	8006d0c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2202      	movs	r2, #2
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fbfb 	bl	8007516 <USBD_CtlSendData>
              break;
 8006d20:	e06a      	b.n	8006df8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da11      	bge.n	8006d4e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	f003 020f 	and.w	r2, r3, #15
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3318      	adds	r3, #24
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d117      	bne.n	8006d74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fb7b 	bl	8007442 <USBD_CtlError>
                  break;
 8006d4c:	e054      	b.n	8006df8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	f003 020f 	and.w	r2, r3, #15
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fb68 	bl	8007442 <USBD_CtlError>
                  break;
 8006d72:	e041      	b.n	8006df8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	da0b      	bge.n	8006d94 <USBD_StdEPReq+0x240>
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	3310      	adds	r3, #16
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4413      	add	r3, r2
 8006d90:	3304      	adds	r3, #4
 8006d92:	e00b      	b.n	8006dac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	3304      	adds	r3, #4
 8006dac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <USBD_StdEPReq+0x266>
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	2b80      	cmp	r3, #128	; 0x80
 8006db8:	d103      	bne.n	8006dc2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e00e      	b.n	8006de0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 ff3a 	bl	8007c40 <USBD_LL_IsStallEP>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	e002      	b.n	8006de0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2202      	movs	r2, #2
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb95 	bl	8007516 <USBD_CtlSendData>
              break;
 8006dec:	e004      	b.n	8006df8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb26 	bl	8007442 <USBD_CtlError>
              break;
 8006df6:	bf00      	nop
          }
          break;
 8006df8:	e004      	b.n	8006e04 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fb20 	bl	8007442 <USBD_CtlError>
          break;
 8006e02:	bf00      	nop
      }
      break;
 8006e04:	e004      	b.n	8006e10 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fb1a 	bl	8007442 <USBD_CtlError>
      break;
 8006e0e:	bf00      	nop
  }

  return ret;
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	885b      	ldrh	r3, [r3, #2]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	2b06      	cmp	r3, #6
 8006e3e:	f200 8128 	bhi.w	8007092 <USBD_GetDescriptor+0x276>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <USBD_GetDescriptor+0x2c>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e65 	.word	0x08006e65
 8006e4c:	08006e7d 	.word	0x08006e7d
 8006e50:	08006ebd 	.word	0x08006ebd
 8006e54:	08007093 	.word	0x08007093
 8006e58:	08007093 	.word	0x08007093
 8006e5c:	08007033 	.word	0x08007033
 8006e60:	0800705f 	.word	0x0800705f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	7c12      	ldrb	r2, [r2, #16]
 8006e70:	f107 0108 	add.w	r1, r7, #8
 8006e74:	4610      	mov	r0, r2
 8006e76:	4798      	blx	r3
 8006e78:	60f8      	str	r0, [r7, #12]
      break;
 8006e7a:	e112      	b.n	80070a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	7c1b      	ldrb	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10d      	bne.n	8006ea0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f107 0208 	add.w	r2, r7, #8
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e9e:	e100      	b.n	80070a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	f107 0208 	add.w	r2, r7, #8
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
 8006eb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	701a      	strb	r2, [r3, #0]
      break;
 8006eba:	e0f2      	b.n	80070a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	885b      	ldrh	r3, [r3, #2]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	f200 80ac 	bhi.w	8007020 <USBD_GetDescriptor+0x204>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <USBD_GetDescriptor+0xb4>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ee9 	.word	0x08006ee9
 8006ed4:	08006f1d 	.word	0x08006f1d
 8006ed8:	08006f51 	.word	0x08006f51
 8006edc:	08006f85 	.word	0x08006f85
 8006ee0:	08006fb9 	.word	0x08006fb9
 8006ee4:	08006fed 	.word	0x08006fed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	7c12      	ldrb	r2, [r2, #16]
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0a:	e091      	b.n	8007030 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa97 	bl	8007442 <USBD_CtlError>
            err++;
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	3301      	adds	r3, #1
 8006f18:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1a:	e089      	b.n	8007030 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f3e:	e077      	b.n	8007030 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa7d 	bl	8007442 <USBD_CtlError>
            err++;
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f4e:	e06f      	b.n	8007030 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7c12      	ldrb	r2, [r2, #16]
 8006f68:	f107 0108 	add.w	r1, r7, #8
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f72:	e05d      	b.n	8007030 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa63 	bl	8007442 <USBD_CtlError>
            err++;
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	72fb      	strb	r3, [r7, #11]
          break;
 8006f82:	e055      	b.n	8007030 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	7c12      	ldrb	r2, [r2, #16]
 8006f9c:	f107 0108 	add.w	r1, r7, #8
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4798      	blx	r3
 8006fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fa6:	e043      	b.n	8007030 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa49 	bl	8007442 <USBD_CtlError>
            err++;
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fb6:	e03b      	b.n	8007030 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7c12      	ldrb	r2, [r2, #16]
 8006fd0:	f107 0108 	add.w	r1, r7, #8
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fda:	e029      	b.n	8007030 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa2f 	bl	8007442 <USBD_CtlError>
            err++;
 8006fe4:	7afb      	ldrb	r3, [r7, #11]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fea:	e021      	b.n	8007030 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00b      	beq.n	8007010 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	7c12      	ldrb	r2, [r2, #16]
 8007004:	f107 0108 	add.w	r1, r7, #8
 8007008:	4610      	mov	r0, r2
 800700a:	4798      	blx	r3
 800700c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700e:	e00f      	b.n	8007030 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa15 	bl	8007442 <USBD_CtlError>
            err++;
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	3301      	adds	r3, #1
 800701c:	72fb      	strb	r3, [r7, #11]
          break;
 800701e:	e007      	b.n	8007030 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa0d 	bl	8007442 <USBD_CtlError>
          err++;
 8007028:	7afb      	ldrb	r3, [r7, #11]
 800702a:	3301      	adds	r3, #1
 800702c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800702e:	e038      	b.n	80070a2 <USBD_GetDescriptor+0x286>
 8007030:	e037      	b.n	80070a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	7c1b      	ldrb	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007042:	f107 0208 	add.w	r2, r7, #8
 8007046:	4610      	mov	r0, r2
 8007048:	4798      	blx	r3
 800704a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800704c:	e029      	b.n	80070a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f9f6 	bl	8007442 <USBD_CtlError>
        err++;
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	3301      	adds	r3, #1
 800705a:	72fb      	strb	r3, [r7, #11]
      break;
 800705c:	e021      	b.n	80070a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7c1b      	ldrb	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10d      	bne.n	8007082 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	f107 0208 	add.w	r2, r7, #8
 8007072:	4610      	mov	r0, r2
 8007074:	4798      	blx	r3
 8007076:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3301      	adds	r3, #1
 800707c:	2207      	movs	r2, #7
 800707e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007080:	e00f      	b.n	80070a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f9dc 	bl	8007442 <USBD_CtlError>
        err++;
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	3301      	adds	r3, #1
 800708e:	72fb      	strb	r3, [r7, #11]
      break;
 8007090:	e007      	b.n	80070a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f9d4 	bl	8007442 <USBD_CtlError>
      err++;
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	3301      	adds	r3, #1
 800709e:	72fb      	strb	r3, [r7, #11]
      break;
 80070a0:	bf00      	nop
  }

  if (err != 0U)
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d11c      	bne.n	80070e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80070a8:	893b      	ldrh	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d011      	beq.n	80070d2 <USBD_GetDescriptor+0x2b6>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88db      	ldrh	r3, [r3, #6]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00d      	beq.n	80070d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88da      	ldrh	r2, [r3, #6]
 80070ba:	893b      	ldrh	r3, [r7, #8]
 80070bc:	4293      	cmp	r3, r2
 80070be:	bf28      	it	cs
 80070c0:	4613      	movcs	r3, r2
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070c6:	893b      	ldrh	r3, [r7, #8]
 80070c8:	461a      	mov	r2, r3
 80070ca:	68f9      	ldr	r1, [r7, #12]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa22 	bl	8007516 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88db      	ldrh	r3, [r3, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d104      	bne.n	80070e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa79 	bl	80075d2 <USBD_CtlSendStatus>
 80070e0:	e000      	b.n	80070e4 <USBD_GetDescriptor+0x2c8>
    return;
 80070e2:	bf00      	nop
    }
  }
}
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop

080070ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	889b      	ldrh	r3, [r3, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d130      	bne.n	8007160 <USBD_SetAddress+0x74>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	88db      	ldrh	r3, [r3, #6]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d12c      	bne.n	8007160 <USBD_SetAddress+0x74>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	885b      	ldrh	r3, [r3, #2]
 800710a:	2b7f      	cmp	r3, #127	; 0x7f
 800710c:	d828      	bhi.n	8007160 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	885b      	ldrh	r3, [r3, #2]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007118:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007120:	2b03      	cmp	r3, #3
 8007122:	d104      	bne.n	800712e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f98b 	bl	8007442 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712c:	e01d      	b.n	800716a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	7bfa      	ldrb	r2, [r7, #15]
 8007132:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fdac 	bl	8007c98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fa46 	bl	80075d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007154:	e009      	b.n	800716a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715e:	e004      	b.n	800716a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f96d 	bl	8007442 <USBD_CtlError>
  }
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	b2da      	uxtb	r2, r3
 8007184:	4b41      	ldr	r3, [pc, #260]	; (800728c <USBD_SetConfig+0x118>)
 8007186:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007188:	4b40      	ldr	r3, [pc, #256]	; (800728c <USBD_SetConfig+0x118>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d904      	bls.n	800719a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f955 	bl	8007442 <USBD_CtlError>
 8007198:	e075      	b.n	8007286 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d002      	beq.n	80071aa <USBD_SetConfig+0x36>
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d023      	beq.n	80071f0 <USBD_SetConfig+0x7c>
 80071a8:	e062      	b.n	8007270 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80071aa:	4b38      	ldr	r3, [pc, #224]	; (800728c <USBD_SetConfig+0x118>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01a      	beq.n	80071e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80071b2:	4b36      	ldr	r3, [pc, #216]	; (800728c <USBD_SetConfig+0x118>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2203      	movs	r2, #3
 80071c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071c4:	4b31      	ldr	r3, [pc, #196]	; (800728c <USBD_SetConfig+0x118>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff f9e8 	bl	80065a0 <USBD_SetClassConfig>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d104      	bne.n	80071e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f932 	bl	8007442 <USBD_CtlError>
            return;
 80071de:	e052      	b.n	8007286 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9f6 	bl	80075d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80071e6:	e04e      	b.n	8007286 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9f2 	bl	80075d2 <USBD_CtlSendStatus>
        break;
 80071ee:	e04a      	b.n	8007286 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80071f0:	4b26      	ldr	r3, [pc, #152]	; (800728c <USBD_SetConfig+0x118>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d112      	bne.n	800721e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007200:	4b22      	ldr	r3, [pc, #136]	; (800728c <USBD_SetConfig+0x118>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800720a:	4b20      	ldr	r3, [pc, #128]	; (800728c <USBD_SetConfig+0x118>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff f9e4 	bl	80065de <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9db 	bl	80075d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800721c:	e033      	b.n	8007286 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800721e:	4b1b      	ldr	r3, [pc, #108]	; (800728c <USBD_SetConfig+0x118>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d01d      	beq.n	8007268 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff f9d2 	bl	80065de <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800723a:	4b14      	ldr	r3, [pc, #80]	; (800728c <USBD_SetConfig+0x118>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <USBD_SetConfig+0x118>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff f9a8 	bl	80065a0 <USBD_SetClassConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	2b02      	cmp	r3, #2
 8007254:	d104      	bne.n	8007260 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f8f2 	bl	8007442 <USBD_CtlError>
            return;
 800725e:	e012      	b.n	8007286 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f9b6 	bl	80075d2 <USBD_CtlSendStatus>
        break;
 8007266:	e00e      	b.n	8007286 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f9b2 	bl	80075d2 <USBD_CtlSendStatus>
        break;
 800726e:	e00a      	b.n	8007286 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f8e5 	bl	8007442 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007278:	4b04      	ldr	r3, [pc, #16]	; (800728c <USBD_SetConfig+0x118>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff f9ad 	bl	80065de <USBD_ClrClassConfig>
        break;
 8007284:	bf00      	nop
    }
  }
}
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	200001d8 	.word	0x200001d8

08007290 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	88db      	ldrh	r3, [r3, #6]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d004      	beq.n	80072ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f8cc 	bl	8007442 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072aa:	e022      	b.n	80072f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	dc02      	bgt.n	80072bc <USBD_GetConfig+0x2c>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dc03      	bgt.n	80072c2 <USBD_GetConfig+0x32>
 80072ba:	e015      	b.n	80072e8 <USBD_GetConfig+0x58>
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d00b      	beq.n	80072d8 <USBD_GetConfig+0x48>
 80072c0:	e012      	b.n	80072e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3308      	adds	r3, #8
 80072cc:	2201      	movs	r2, #1
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f920 	bl	8007516 <USBD_CtlSendData>
        break;
 80072d6:	e00c      	b.n	80072f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3304      	adds	r3, #4
 80072dc:	2201      	movs	r2, #1
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f918 	bl	8007516 <USBD_CtlSendData>
        break;
 80072e6:	e004      	b.n	80072f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f8a9 	bl	8007442 <USBD_CtlError>
        break;
 80072f0:	bf00      	nop
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730a:	3b01      	subs	r3, #1
 800730c:	2b02      	cmp	r3, #2
 800730e:	d81e      	bhi.n	800734e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	88db      	ldrh	r3, [r3, #6]
 8007314:	2b02      	cmp	r3, #2
 8007316:	d004      	beq.n	8007322 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f891 	bl	8007442 <USBD_CtlError>
        break;
 8007320:	e01a      	b.n	8007358 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f043 0202 	orr.w	r2, r3, #2
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	330c      	adds	r3, #12
 8007342:	2202      	movs	r2, #2
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f8e5 	bl	8007516 <USBD_CtlSendData>
      break;
 800734c:	e004      	b.n	8007358 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f876 	bl	8007442 <USBD_CtlError>
      break;
 8007356:	bf00      	nop
  }
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	885b      	ldrh	r3, [r3, #2]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d106      	bne.n	8007380 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f929 	bl	80075d2 <USBD_CtlSendStatus>
  }
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007398:	3b01      	subs	r3, #1
 800739a:	2b02      	cmp	r3, #2
 800739c:	d80b      	bhi.n	80073b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	885b      	ldrh	r3, [r3, #2]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d10c      	bne.n	80073c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f90f 	bl	80075d2 <USBD_CtlSendStatus>
      }
      break;
 80073b4:	e004      	b.n	80073c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f842 	bl	8007442 <USBD_CtlError>
      break;
 80073be:	e000      	b.n	80073c2 <USBD_ClrFeature+0x3a>
      break;
 80073c0:	bf00      	nop
  }
}
 80073c2:	bf00      	nop
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781a      	ldrb	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	785a      	ldrb	r2, [r3, #1]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	3302      	adds	r3, #2
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	3303      	adds	r3, #3
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	3304      	adds	r3, #4
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	b29a      	uxth	r2, r3
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	3305      	adds	r3, #5
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	b29b      	uxth	r3, r3
 8007414:	4413      	add	r3, r2
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	3306      	adds	r3, #6
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	b29a      	uxth	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	3307      	adds	r3, #7
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	b29b      	uxth	r3, r3
 8007430:	4413      	add	r3, r2
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	80da      	strh	r2, [r3, #6]

}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr

08007442 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800744c:	2180      	movs	r1, #128	; 0x80
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fbb8 	bl	8007bc4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007454:	2100      	movs	r1, #0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fbb4 	bl	8007bc4 <USBD_LL_StallEP>
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d032      	beq.n	80074e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f834 	bl	80074e8 <USBD_GetLen>
 8007480:	4603      	mov	r3, r0
 8007482:	3301      	adds	r3, #1
 8007484:	b29b      	uxth	r3, r3
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	75fa      	strb	r2, [r7, #23]
 8007494:	461a      	mov	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4413      	add	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	7812      	ldrb	r2, [r2, #0]
 800749e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	75fa      	strb	r2, [r7, #23]
 80074a6:	461a      	mov	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4413      	add	r3, r2
 80074ac:	2203      	movs	r2, #3
 80074ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80074b0:	e012      	b.n	80074d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	60fa      	str	r2, [r7, #12]
 80074b8:	7dfa      	ldrb	r2, [r7, #23]
 80074ba:	1c51      	adds	r1, r2, #1
 80074bc:	75f9      	strb	r1, [r7, #23]
 80074be:	4611      	mov	r1, r2
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	440a      	add	r2, r1
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	75fa      	strb	r2, [r7, #23]
 80074ce:	461a      	mov	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4413      	add	r3, r2
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e8      	bne.n	80074b2 <USBD_GetString+0x4e>
    }
  }
}
 80074e0:	bf00      	nop
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80074f4:	e005      	b.n	8007502 <USBD_GetLen+0x1a>
  {
    len++;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	3301      	adds	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3301      	adds	r3, #1
 8007500:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f5      	bne.n	80074f6 <USBD_GetLen+0xe>
  }

  return len;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr

08007516 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	4613      	mov	r3, r2
 8007522:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2202      	movs	r2, #2
 8007528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800752c:	88fa      	ldrh	r2, [r7, #6]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007538:	88fb      	ldrh	r3, [r7, #6]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	2100      	movs	r1, #0
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fbc9 	bl	8007cd6 <USBD_LL_Transmit>

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	4613      	mov	r3, r2
 800755a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	2100      	movs	r1, #0
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fbb7 	bl	8007cd6 <USBD_LL_Transmit>

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	4613      	mov	r3, r2
 800757e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2203      	movs	r2, #3
 8007584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007588:	88fa      	ldrh	r2, [r7, #6]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	2100      	movs	r1, #0
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fbbc 	bl	8007d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	4613      	mov	r3, r2
 80075ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	2100      	movs	r1, #0
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fbaa 	bl	8007d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2204      	movs	r2, #4
 80075de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075e2:	2300      	movs	r3, #0
 80075e4:	2200      	movs	r2, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fb74 	bl	8007cd6 <USBD_LL_Transmit>

  return USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2205      	movs	r2, #5
 8007604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007608:	2300      	movs	r3, #0
 800760a:	2200      	movs	r2, #0
 800760c:	2100      	movs	r1, #0
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fb84 	bl	8007d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007624:	2200      	movs	r2, #0
 8007626:	4912      	ldr	r1, [pc, #72]	; (8007670 <MX_USB_DEVICE_Init+0x50>)
 8007628:	4812      	ldr	r0, [pc, #72]	; (8007674 <MX_USB_DEVICE_Init+0x54>)
 800762a:	f7fe ff5f 	bl	80064ec <USBD_Init>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007634:	f7f8 fea0 	bl	8000378 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007638:	490f      	ldr	r1, [pc, #60]	; (8007678 <MX_USB_DEVICE_Init+0x58>)
 800763a:	480e      	ldr	r0, [pc, #56]	; (8007674 <MX_USB_DEVICE_Init+0x54>)
 800763c:	f7fe ff81 	bl	8006542 <USBD_RegisterClass>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007646:	f7f8 fe97 	bl	8000378 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800764a:	490c      	ldr	r1, [pc, #48]	; (800767c <MX_USB_DEVICE_Init+0x5c>)
 800764c:	4809      	ldr	r0, [pc, #36]	; (8007674 <MX_USB_DEVICE_Init+0x54>)
 800764e:	f7fe ff37 	bl	80064c0 <USBD_CUSTOM_HID_RegisterInterface>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007658:	f7f8 fe8e 	bl	8000378 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800765c:	4805      	ldr	r0, [pc, #20]	; (8007674 <MX_USB_DEVICE_Init+0x54>)
 800765e:	f7fe ff89 	bl	8006574 <USBD_Start>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007668:	f7f8 fe86 	bl	8000378 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800766c:	bf00      	nop
 800766e:	bd80      	pop	{r7, pc}
 8007670:	200000f4 	.word	0x200000f4
 8007674:	200001dc 	.word	0x200001dc
 8007678:	2000000c 	.word	0x2000000c
 800767c:	200000e4 	.word	0x200000e4

08007680 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007684:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007686:	4618      	mov	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800768e:	b480      	push	{r7}
 8007690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007692:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007694:	4618      	mov	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	460a      	mov	r2, r1
 80076a6:	71fb      	strb	r3, [r7, #7]
 80076a8:	4613      	mov	r3, r2
 80076aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80076ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80076b0:	4803      	ldr	r0, [pc, #12]	; (80076c0 <CUSTOM_HID_OutEvent_FS+0x24>)
 80076b2:	f7f9 fdd7 	bl	8001264 <HAL_GPIO_TogglePin>
  return (USBD_OK);
 80076b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40011000 	.word	0x40011000

080076c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2212      	movs	r2, #18
 80076d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076d6:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000110 	.word	0x20000110

080076e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2204      	movs	r2, #4
 80076f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20000124 	.word	0x20000124

0800770c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4907      	ldr	r1, [pc, #28]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
 8007722:	4808      	ldr	r0, [pc, #32]	; (8007744 <USBD_FS_ProductStrDescriptor+0x38>)
 8007724:	f7ff fe9e 	bl	8007464 <USBD_GetString>
 8007728:	e004      	b.n	8007734 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4904      	ldr	r1, [pc, #16]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
 800772e:	4805      	ldr	r0, [pc, #20]	; (8007744 <USBD_FS_ProductStrDescriptor+0x38>)
 8007730:	f7ff fe98 	bl	8007464 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	200004a0 	.word	0x200004a0
 8007744:	08007e7c 	.word	0x08007e7c

08007748 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	6039      	str	r1, [r7, #0]
 8007752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	4904      	ldr	r1, [pc, #16]	; (8007768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007758:	4804      	ldr	r0, [pc, #16]	; (800776c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800775a:	f7ff fe83 	bl	8007464 <USBD_GetString>
  return USBD_StrDesc;
 800775e:	4b02      	ldr	r3, [pc, #8]	; (8007768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200004a0 	.word	0x200004a0
 800776c:	08007e90 	.word	0x08007e90

08007770 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	221a      	movs	r2, #26
 8007780:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007782:	f000 f843 	bl	800780c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007786:	4b02      	ldr	r3, [pc, #8]	; (8007790 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000128 	.word	0x20000128

08007794 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4907      	ldr	r1, [pc, #28]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077aa:	4808      	ldr	r0, [pc, #32]	; (80077cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077ac:	f7ff fe5a 	bl	8007464 <USBD_GetString>
 80077b0:	e004      	b.n	80077bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4904      	ldr	r1, [pc, #16]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077b6:	4805      	ldr	r0, [pc, #20]	; (80077cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077b8:	f7ff fe54 	bl	8007464 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077bc:	4b02      	ldr	r3, [pc, #8]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	200004a0 	.word	0x200004a0
 80077cc:	08007ea0 	.word	0x08007ea0

080077d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	4907      	ldr	r1, [pc, #28]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077e6:	4808      	ldr	r0, [pc, #32]	; (8007808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077e8:	f7ff fe3c 	bl	8007464 <USBD_GetString>
 80077ec:	e004      	b.n	80077f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	4904      	ldr	r1, [pc, #16]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077f2:	4805      	ldr	r0, [pc, #20]	; (8007808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077f4:	f7ff fe36 	bl	8007464 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	200004a0 	.word	0x200004a0
 8007808:	08007eac 	.word	0x08007eac

0800780c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007812:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <Get_SerialNum+0x44>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007818:	4b0e      	ldr	r3, [pc, #56]	; (8007854 <Get_SerialNum+0x48>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800781e:	4b0e      	ldr	r3, [pc, #56]	; (8007858 <Get_SerialNum+0x4c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007832:	2208      	movs	r2, #8
 8007834:	4909      	ldr	r1, [pc, #36]	; (800785c <Get_SerialNum+0x50>)
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 f814 	bl	8007864 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800783c:	2204      	movs	r2, #4
 800783e:	4908      	ldr	r1, [pc, #32]	; (8007860 <Get_SerialNum+0x54>)
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 f80f 	bl	8007864 <IntToUnicode>
  }
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	1ffff7e8 	.word	0x1ffff7e8
 8007854:	1ffff7ec 	.word	0x1ffff7ec
 8007858:	1ffff7f0 	.word	0x1ffff7f0
 800785c:	2000012a 	.word	0x2000012a
 8007860:	2000013a 	.word	0x2000013a

08007864 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]
 800787a:	e027      	b.n	80078cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	2b09      	cmp	r3, #9
 8007882:	d80b      	bhi.n	800789c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	0f1b      	lsrs	r3, r3, #28
 8007888:	b2da      	uxtb	r2, r3
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	4619      	mov	r1, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	440b      	add	r3, r1
 8007894:	3230      	adds	r2, #48	; 0x30
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	e00a      	b.n	80078b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0f1b      	lsrs	r3, r3, #28
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4619      	mov	r1, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	440b      	add	r3, r1
 80078ac:	3237      	adds	r2, #55	; 0x37
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	3301      	adds	r3, #1
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4413      	add	r3, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	3301      	adds	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
 80078cc:	7dfa      	ldrb	r2, [r7, #23]
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d3d3      	bcc.n	800787c <IntToUnicode+0x18>
  }
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a0d      	ldr	r2, [pc, #52]	; (8007924 <HAL_PCD_MspInit+0x44>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d113      	bne.n	800791a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80078f2:	4b0d      	ldr	r3, [pc, #52]	; (8007928 <HAL_PCD_MspInit+0x48>)
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <HAL_PCD_MspInit+0x48>)
 80078f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078fc:	61d3      	str	r3, [r2, #28]
 80078fe:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <HAL_PCD_MspInit+0x48>)
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	2014      	movs	r0, #20
 8007910:	f7f9 f975 	bl	8000bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007914:	2014      	movs	r0, #20
 8007916:	f7f9 f98e 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	40005c00 	.word	0x40005c00
 8007928:	40021000 	.word	0x40021000

0800792c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7fe fe5e 	bl	8006604 <USBD_LL_SetupStage>
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	440b      	add	r3, r1
 8007970:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	4619      	mov	r1, r3
 800797a:	f7fe fe90 	bl	800669e <USBD_LL_DataOutStage>
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	460b      	mov	r3, r1
 8007990:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007998:	78fa      	ldrb	r2, [r7, #3]
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	440b      	add	r3, r1
 80079a6:	333c      	adds	r3, #60	; 0x3c
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	4619      	mov	r1, r3
 80079ae:	f7fe fee7 	bl	8006780 <USBD_LL_DataInStage>
}
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe fff7 	bl	80069bc <USBD_LL_SOF>
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d001      	beq.n	80079ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079ea:	f7f8 fcc5 	bl	8000378 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079f4:	7bfa      	ldrb	r2, [r7, #15]
 80079f6:	4611      	mov	r1, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe ffa7 	bl	800694c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe ff60 	bl	80068ca <USBD_LL_Reset>
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe ffa1 	bl	800696a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a30:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <HAL_PCD_SuspendCallback+0x30>)
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	4a03      	ldr	r2, [pc, #12]	; (8007a44 <HAL_PCD_SuspendCallback+0x30>)
 8007a36:	f043 0306 	orr.w	r3, r3, #6
 8007a3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	e000ed00 	.word	0xe000ed00

08007a48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe ff9b 	bl	8006992 <USBD_LL_Resume>
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007a6c:	4a23      	ldr	r2, [pc, #140]	; (8007afc <USBD_LL_Init+0x98>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a21      	ldr	r2, [pc, #132]	; (8007afc <USBD_LL_Init+0x98>)
 8007a78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007a7c:	4b1f      	ldr	r3, [pc, #124]	; (8007afc <USBD_LL_Init+0x98>)
 8007a7e:	4a20      	ldr	r2, [pc, #128]	; (8007b00 <USBD_LL_Init+0x9c>)
 8007a80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a82:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <USBD_LL_Init+0x98>)
 8007a84:	2208      	movs	r2, #8
 8007a86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a88:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <USBD_LL_Init+0x98>)
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a8e:	4b1b      	ldr	r3, [pc, #108]	; (8007afc <USBD_LL_Init+0x98>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a94:	4b19      	ldr	r3, [pc, #100]	; (8007afc <USBD_LL_Init+0x98>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a9a:	4b18      	ldr	r3, [pc, #96]	; (8007afc <USBD_LL_Init+0x98>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007aa0:	4816      	ldr	r0, [pc, #88]	; (8007afc <USBD_LL_Init+0x98>)
 8007aa2:	f7f9 fbf8 	bl	8001296 <HAL_PCD_Init>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007aac:	f7f8 fc64 	bl	8000378 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ab6:	2318      	movs	r3, #24
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2100      	movs	r1, #0
 8007abc:	f7fb f855 	bl	8002b6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ac6:	2358      	movs	r3, #88	; 0x58
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2180      	movs	r1, #128	; 0x80
 8007acc:	f7fb f84d 	bl	8002b6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ad6:	2398      	movs	r3, #152	; 0x98
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2181      	movs	r1, #129	; 0x81
 8007adc:	f7fb f845 	bl	8002b6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ae6:	23d8      	movs	r3, #216	; 0xd8
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2101      	movs	r1, #1
 8007aec:	f7fb f83d 	bl	8002b6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	200006a0 	.word	0x200006a0
 8007b00:	40005c00 	.word	0x40005c00

08007b04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7f9 fcc6 	bl	80014ac <HAL_PCD_Start>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f93c 	bl	8007da4 <USBD_Get_USB_Status>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	4608      	mov	r0, r1
 8007b44:	4611      	mov	r1, r2
 8007b46:	461a      	mov	r2, r3
 8007b48:	4603      	mov	r3, r0
 8007b4a:	70fb      	strb	r3, [r7, #3]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70bb      	strb	r3, [r7, #2]
 8007b50:	4613      	mov	r3, r2
 8007b52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b62:	78bb      	ldrb	r3, [r7, #2]
 8007b64:	883a      	ldrh	r2, [r7, #0]
 8007b66:	78f9      	ldrb	r1, [r7, #3]
 8007b68:	f7f9 fe3e 	bl	80017e8 <HAL_PCD_EP_Open>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f916 	bl	8007da4 <USBD_Get_USB_Status>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7f9 fe85 	bl	80018b4 <HAL_PCD_EP_Close>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f8f7 	bl	8007da4 <USBD_Get_USB_Status>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bde:	78fa      	ldrb	r2, [r7, #3]
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7f9 ff2e 	bl	8001a44 <HAL_PCD_EP_SetStall>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f8d8 	bl	8007da4 <USBD_Get_USB_Status>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7f9 ff6f 	bl	8001b04 <HAL_PCD_EP_ClrStall>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 f8b9 	bl	8007da4 <USBD_Get_USB_Status>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da0c      	bge.n	8007c76 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	440b      	add	r3, r1
 8007c70:	3302      	adds	r3, #2
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	e00b      	b.n	8007c8e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c7c:	68f9      	ldr	r1, [r7, #12]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	440b      	add	r3, r1
 8007c88:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007c8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr

08007c98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7f9 fd71 	bl	800179e <HAL_PCD_SetAddress>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 f86e 	bl	8007da4 <USBD_Get_USB_Status>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	72fb      	strb	r3, [r7, #11]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cf8:	893b      	ldrh	r3, [r7, #8]
 8007cfa:	7af9      	ldrb	r1, [r7, #11]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	f7f9 fe5e 	bl	80019be <HAL_PCD_EP_Transmit>
 8007d02:	4603      	mov	r3, r0
 8007d04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f84b 	bl	8007da4 <USBD_Get_USB_Status>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d12:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	607a      	str	r2, [r7, #4]
 8007d26:	461a      	mov	r2, r3
 8007d28:	460b      	mov	r3, r1
 8007d2a:	72fb      	strb	r3, [r7, #11]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d3e:	893b      	ldrh	r3, [r7, #8]
 8007d40:	7af9      	ldrb	r1, [r7, #11]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	f7f9 fdfe 	bl	8001944 <HAL_PCD_EP_Receive>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f828 	bl	8007da4 <USBD_Get_USB_Status>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007d6c:	4b02      	ldr	r3, [pc, #8]	; (8007d78 <USBD_static_malloc+0x14>)
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr
 8007d78:	2000098c 	.word	0x2000098c

08007d7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]

}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr

08007d8e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr

08007da4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d817      	bhi.n	8007de8 <USBD_Get_USB_Status+0x44>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <USBD_Get_USB_Status+0x1c>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007dd7 	.word	0x08007dd7
 8007dc8:	08007ddd 	.word	0x08007ddd
 8007dcc:	08007de3 	.word	0x08007de3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd4:	e00b      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dda:	e008      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
    break;
 8007de0:	e005      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007de2:	2302      	movs	r3, #2
 8007de4:	73fb      	strb	r3, [r7, #15]
    break;
 8007de6:	e002      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007de8:	2302      	movs	r3, #2
 8007dea:	73fb      	strb	r3, [r7, #15]
    break;
 8007dec:	bf00      	nop
  }
  return usb_status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop

08007dfc <__libc_init_array>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	2600      	movs	r6, #0
 8007e00:	4d0c      	ldr	r5, [pc, #48]	; (8007e34 <__libc_init_array+0x38>)
 8007e02:	4c0d      	ldr	r4, [pc, #52]	; (8007e38 <__libc_init_array+0x3c>)
 8007e04:	1b64      	subs	r4, r4, r5
 8007e06:	10a4      	asrs	r4, r4, #2
 8007e08:	42a6      	cmp	r6, r4
 8007e0a:	d109      	bne.n	8007e20 <__libc_init_array+0x24>
 8007e0c:	f000 f822 	bl	8007e54 <_init>
 8007e10:	2600      	movs	r6, #0
 8007e12:	4d0a      	ldr	r5, [pc, #40]	; (8007e3c <__libc_init_array+0x40>)
 8007e14:	4c0a      	ldr	r4, [pc, #40]	; (8007e40 <__libc_init_array+0x44>)
 8007e16:	1b64      	subs	r4, r4, r5
 8007e18:	10a4      	asrs	r4, r4, #2
 8007e1a:	42a6      	cmp	r6, r4
 8007e1c:	d105      	bne.n	8007e2a <__libc_init_array+0x2e>
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e24:	4798      	blx	r3
 8007e26:	3601      	adds	r6, #1
 8007e28:	e7ee      	b.n	8007e08 <__libc_init_array+0xc>
 8007e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2e:	4798      	blx	r3
 8007e30:	3601      	adds	r6, #1
 8007e32:	e7f2      	b.n	8007e1a <__libc_init_array+0x1e>
 8007e34:	08007ed0 	.word	0x08007ed0
 8007e38:	08007ed0 	.word	0x08007ed0
 8007e3c:	08007ed0 	.word	0x08007ed0
 8007e40:	08007ed4 	.word	0x08007ed4

08007e44 <memset>:
 8007e44:	4603      	mov	r3, r0
 8007e46:	4402      	add	r2, r0
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d100      	bne.n	8007e4e <memset+0xa>
 8007e4c:	4770      	bx	lr
 8007e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e52:	e7f9      	b.n	8007e48 <memset+0x4>

08007e54 <_init>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	bf00      	nop
 8007e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5a:	bc08      	pop	{r3}
 8007e5c:	469e      	mov	lr, r3
 8007e5e:	4770      	bx	lr

08007e60 <_fini>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr

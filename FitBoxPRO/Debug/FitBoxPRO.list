
FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b414  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7dc  0800b7dc  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800b7dc  0800b7dc  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b7dc  0800b7dc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7dc  0800b7dc  0001b7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7e0  0800b7e0  0001b7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b7e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c40  20000208  0800b9e8  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  0800b9e8  00020e48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011887  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373a  00000000  00000000  00031ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  000351f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000361f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b699  00000000  00000000  00037068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014139  00000000  00000000  00052701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd44  00000000  00000000  0006683a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f457e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd8  00000000  00000000  000f45d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b50c 	.word	0x0800b50c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800b50c 	.word	0x0800b50c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fmul>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d06f      	beq.n	8000dc0 <__aeabi_fmul+0xf8>
 8000ce0:	441a      	add	r2, r3
 8000ce2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce6:	0240      	lsls	r0, r0, #9
 8000ce8:	bf18      	it	ne
 8000cea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cee:	d01e      	beq.n	8000d2e <__aeabi_fmul+0x66>
 8000cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d08:	bf3e      	ittt	cc
 8000d0a:	0049      	lslcc	r1, r1, #1
 8000d0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	ea40 0001 	orr.w	r0, r0, r1
 8000d16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d1a:	2afd      	cmp	r2, #253	; 0xfd
 8000d1c:	d81d      	bhi.n	8000d5a <__aeabi_fmul+0x92>
 8000d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	4770      	bx	lr
 8000d2e:	f090 0f00 	teq	r0, #0
 8000d32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d36:	bf08      	it	eq
 8000d38:	0249      	lsleq	r1, r1, #9
 8000d3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d42:	3a7f      	subs	r2, #127	; 0x7f
 8000d44:	bfc2      	ittt	gt
 8000d46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4e:	4770      	bxgt	lr
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	dc5d      	bgt.n	8000e18 <__aeabi_fmul+0x150>
 8000d5c:	f112 0f19 	cmn.w	r2, #25
 8000d60:	bfdc      	itt	le
 8000d62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d66:	4770      	bxle	lr
 8000d68:	f1c2 0200 	rsb	r2, r2, #0
 8000d6c:	0041      	lsls	r1, r0, #1
 8000d6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d72:	f1c2 0220 	rsb	r2, r2, #32
 8000d76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7e:	f140 0000 	adc.w	r0, r0, #0
 8000d82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d86:	bf08      	it	eq
 8000d88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8c:	4770      	bx	lr
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xce>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xe6>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e78f      	b.n	8000ce0 <__aeabi_fmul+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	bf18      	it	ne
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d00a      	beq.n	8000de6 <__aeabi_fmul+0x11e>
 8000dd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd4:	bf18      	it	ne
 8000dd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	d1d8      	bne.n	8000d8e <__aeabi_fmul+0xc6>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	bf17      	itett	ne
 8000dec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df0:	4608      	moveq	r0, r1
 8000df2:	f091 0f00 	teqne	r1, #0
 8000df6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dfa:	d014      	beq.n	8000e26 <__aeabi_fmul+0x15e>
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d101      	bne.n	8000e06 <__aeabi_fmul+0x13e>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	d10f      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e06:	ea93 0f0c 	teq	r3, ip
 8000e0a:	d103      	bne.n	8000e14 <__aeabi_fmul+0x14c>
 8000e0c:	024b      	lsls	r3, r1, #9
 8000e0e:	bf18      	it	ne
 8000e10:	4608      	movne	r0, r1
 8000e12:	d108      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e14:	ea80 0001 	eor.w	r0, r0, r1
 8000e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bx	lr
 8000e26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2e:	4770      	bx	lr

08000e30 <__aeabi_fdiv>:
 8000e30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e38:	bf1e      	ittt	ne
 8000e3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3e:	ea92 0f0c 	teqne	r2, ip
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d069      	beq.n	8000f1c <__aeabi_fdiv+0xec>
 8000e48:	eba2 0203 	sub.w	r2, r2, r3
 8000e4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e56:	d037      	beq.n	8000ec8 <__aeabi_fdiv+0x98>
 8000e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf38      	it	cc
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e76:	428b      	cmp	r3, r1
 8000e78:	bf24      	itt	cs
 8000e7a:	1a5b      	subcs	r3, r3, r1
 8000e7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e84:	bf24      	itt	cs
 8000e86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e92:	bf24      	itt	cs
 8000e94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	bf18      	it	ne
 8000eae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eb2:	d1e0      	bne.n	8000e76 <__aeabi_fdiv+0x46>
 8000eb4:	2afd      	cmp	r2, #253	; 0xfd
 8000eb6:	f63f af50 	bhi.w	8000d5a <__aeabi_fmul+0x92>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec0:	bf08      	it	eq
 8000ec2:	f020 0001 	biceq.w	r0, r0, #1
 8000ec6:	4770      	bx	lr
 8000ec8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ecc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed0:	327f      	adds	r2, #127	; 0x7f
 8000ed2:	bfc2      	ittt	gt
 8000ed4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000edc:	4770      	bxgt	lr
 8000ede:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	e737      	b.n	8000d5a <__aeabi_fmul+0x92>
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xc2>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xda>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e795      	b.n	8000e48 <__aeabi_fdiv+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	d108      	bne.n	8000f38 <__aeabi_fdiv+0x108>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	f47f af7d 	bne.w	8000e26 <__aeabi_fmul+0x15e>
 8000f2c:	ea93 0f0c 	teq	r3, ip
 8000f30:	f47f af70 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e776      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	d104      	bne.n	8000f48 <__aeabi_fdiv+0x118>
 8000f3e:	024b      	lsls	r3, r1, #9
 8000f40:	f43f af4c 	beq.w	8000ddc <__aeabi_fmul+0x114>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e76e      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f4c:	bf18      	it	ne
 8000f4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f52:	d1ca      	bne.n	8000eea <__aeabi_fdiv+0xba>
 8000f54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f58:	f47f af5c 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f60:	f47f af3c 	bne.w	8000ddc <__aeabi_fmul+0x114>
 8000f64:	e75f      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f66:	bf00      	nop

08000f68 <__aeabi_f2uiz>:
 8000f68:	0042      	lsls	r2, r0, #1
 8000f6a:	d20e      	bcs.n	8000f8a <__aeabi_f2uiz+0x22>
 8000f6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f70:	d30b      	bcc.n	8000f8a <__aeabi_f2uiz+0x22>
 8000f72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f7a:	d409      	bmi.n	8000f90 <__aeabi_f2uiz+0x28>
 8000f7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f84:	fa23 f002 	lsr.w	r0, r3, r2
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr
 8000f90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f94:	d101      	bne.n	8000f9a <__aeabi_f2uiz+0x32>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d102      	bne.n	8000fa0 <__aeabi_f2uiz+0x38>
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9e:	4770      	bx	lr
 8000fa0:	f04f 0000 	mov.w	r0, #0
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000fba:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d020      	beq.n	800100c <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 8000fca:	68f9      	ldr	r1, [r7, #12]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	0a19      	lsrs	r1, r3, #8
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2ca      	uxtb	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	0c19      	lsrs	r1, r3, #16
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3302      	adds	r3, #2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	0e19      	lsrs	r1, r3, #24
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	b2ca      	uxtb	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3304      	adds	r3, #4
 800100a:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001012:	d1cf      	bne.n	8000fb4 <read_flash+0xc>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <update_data_from_flash>:
		{0, 20, 40, 60, 80, 100}
		};

uint8_t inverter_config[3] = {0, 0, 0};

void update_data_from_flash(uint8_t (*sliders_data)[6], uint8_t (*range_x_data)[6], uint8_t (*inverter_config)){
 8001020:	b580      	push	{r7, lr}
 8001022:	b0bc      	sub	sp, #240	; 0xf0
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	char data[0xC0];
	read_flash((uint8_t *)data);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ffb9 	bl	8000fa8 <read_flash>
    char * token = strtok(data,",");				//first strtok go to variable directly
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	497f      	ldr	r1, [pc, #508]	; (8001238 <update_data_from_flash+0x218>)
 800103c:	4618      	mov	r0, r3
 800103e:	f009 f983 	bl	800a348 <strtok>
 8001042:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    sliders_data[0][0] = atoi(token);
 8001046:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800104a:	f009 f931 	bl	800a2b0 <atoi>
 800104e:	4603      	mov	r3, r0
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	701a      	strb	r2, [r3, #0]

    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800105c:	e016      	b.n	800108c <update_data_from_flash+0x6c>
    	token = strtok(NULL,",");
 800105e:	4976      	ldr	r1, [pc, #472]	; (8001238 <update_data_from_flash+0x218>)
 8001060:	2000      	movs	r0, #0
 8001062:	f009 f971 	bl	800a348 <strtok>
 8001066:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    	sliders_data[0][i] = atoi(token);
 800106a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800106e:	f009 f91f 	bl	800a2b0 <atoi>
 8001072:	4603      	mov	r3, r0
 8001074:	b2d9      	uxtb	r1, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800107c:	4413      	add	r3, r2
 800107e:	460a      	mov	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 8001082:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001086:	3301      	adds	r3, #1
 8001088:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800108c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001090:	2b05      	cmp	r3, #5
 8001092:	dde4      	ble.n	800105e <update_data_from_flash+0x3e>
    }

	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800109a:	e016      	b.n	80010ca <update_data_from_flash+0xaa>
		token = strtok(NULL,",");
 800109c:	4966      	ldr	r1, [pc, #408]	; (8001238 <update_data_from_flash+0x218>)
 800109e:	2000      	movs	r0, #0
 80010a0:	f009 f952 	bl	800a348 <strtok>
 80010a4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[0][i] = atoi(token);
 80010a8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80010ac:	f009 f900 	bl	800a2b0 <atoi>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b2d9      	uxtb	r1, r3
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010ba:	4413      	add	r3, r2
 80010bc:	460a      	mov	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 80010c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010c4:	3301      	adds	r3, #1
 80010c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80010ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	dde4      	ble.n	800109c <update_data_from_flash+0x7c>
	}

	token = strtok(NULL,",");						// inverted for first pedal
 80010d2:	4959      	ldr	r1, [pc, #356]	; (8001238 <update_data_from_flash+0x218>)
 80010d4:	2000      	movs	r0, #0
 80010d6:	f009 f937 	bl	800a348 <strtok>
 80010da:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[0] = atoi(token);
 80010de:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80010e2:	f009 f8e5 	bl	800a2b0 <atoi>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	701a      	strb	r2, [r3, #0]


	for (int i=0; i<6; i++){						// until all arrays be full filled
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80010f4:	e017      	b.n	8001126 <update_data_from_flash+0x106>
		token = strtok(NULL,",");
 80010f6:	4950      	ldr	r1, [pc, #320]	; (8001238 <update_data_from_flash+0x218>)
 80010f8:	2000      	movs	r0, #0
 80010fa:	f009 f925 	bl	800a348 <strtok>
 80010fe:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[1][i] = atoi(token);
 8001102:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001106:	f009 f8d3 	bl	800a2b0 <atoi>
 800110a:	4601      	mov	r1, r0
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	1d9a      	adds	r2, r3, #6
 8001110:	b2c9      	uxtb	r1, r1
 8001112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001116:	4413      	add	r3, r2
 8001118:	460a      	mov	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800111c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001120:	3301      	adds	r3, #1
 8001122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800112a:	2b05      	cmp	r3, #5
 800112c:	dde3      	ble.n	80010f6 <update_data_from_flash+0xd6>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001134:	e017      	b.n	8001166 <update_data_from_flash+0x146>
		token = strtok(NULL,",");
 8001136:	4940      	ldr	r1, [pc, #256]	; (8001238 <update_data_from_flash+0x218>)
 8001138:	2000      	movs	r0, #0
 800113a:	f009 f905 	bl	800a348 <strtok>
 800113e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[1][i] = atoi(token);
 8001142:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001146:	f009 f8b3 	bl	800a2b0 <atoi>
 800114a:	4601      	mov	r1, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1d9a      	adds	r2, r3, #6
 8001150:	b2c9      	uxtb	r1, r1
 8001152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001156:	4413      	add	r3, r2
 8001158:	460a      	mov	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800115c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800116a:	2b05      	cmp	r3, #5
 800116c:	dde3      	ble.n	8001136 <update_data_from_flash+0x116>
	}

	token = strtok(NULL,",");						// inverted for second pedal
 800116e:	4932      	ldr	r1, [pc, #200]	; (8001238 <update_data_from_flash+0x218>)
 8001170:	2000      	movs	r0, #0
 8001172:	f009 f8e9 	bl	800a348 <strtok>
 8001176:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[1] = atoi(token);
 800117a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800117e:	f009 f897 	bl	800a2b0 <atoi>
 8001182:	4602      	mov	r2, r0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3301      	adds	r3, #1
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<6; i++){						// until all arrays be full filled
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001192:	e018      	b.n	80011c6 <update_data_from_flash+0x1a6>
		token = strtok(NULL,",");
 8001194:	4928      	ldr	r1, [pc, #160]	; (8001238 <update_data_from_flash+0x218>)
 8001196:	2000      	movs	r0, #0
 8001198:	f009 f8d6 	bl	800a348 <strtok>
 800119c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[2][i] = atoi(token);
 80011a0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80011a4:	f009 f884 	bl	800a2b0 <atoi>
 80011a8:	4601      	mov	r1, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f103 020c 	add.w	r2, r3, #12
 80011b0:	b2c9      	uxtb	r1, r1
 80011b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011b6:	4413      	add	r3, r2
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80011c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	dde2      	ble.n	8001194 <update_data_from_flash+0x174>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80011d4:	e018      	b.n	8001208 <update_data_from_flash+0x1e8>
		token = strtok(NULL,",");
 80011d6:	4918      	ldr	r1, [pc, #96]	; (8001238 <update_data_from_flash+0x218>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f009 f8b5 	bl	800a348 <strtok>
 80011de:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[2][i] = atoi(token);
 80011e2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80011e6:	f009 f863 	bl	800a2b0 <atoi>
 80011ea:	4601      	mov	r1, r0
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f103 020c 	add.w	r2, r3, #12
 80011f2:	b2c9      	uxtb	r1, r1
 80011f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011f8:	4413      	add	r3, r2
 80011fa:	460a      	mov	r2, r1
 80011fc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001202:	3301      	adds	r3, #1
 8001204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800120c:	2b05      	cmp	r3, #5
 800120e:	dde2      	ble.n	80011d6 <update_data_from_flash+0x1b6>
	}

	token = strtok(NULL,",");						// inverted for third pedal
 8001210:	4909      	ldr	r1, [pc, #36]	; (8001238 <update_data_from_flash+0x218>)
 8001212:	2000      	movs	r0, #0
 8001214:	f009 f898 	bl	800a348 <strtok>
 8001218:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[2] = atoi(token);
 800121c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001220:	f009 f846 	bl	800a2b0 <atoi>
 8001224:	4602      	mov	r2, r0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3302      	adds	r3, #2
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

}
 800122e:	bf00      	nop
 8001230:	37f0      	adds	r7, #240	; 0xf0
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	0800b524 	.word	0x0800b524

0800123c <interpolacao_linear>:

float interpolacao_linear(float x, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	70fb      	strb	r3, [r7, #3]
 800124e:	460b      	mov	r3, r1
 8001250:	70bb      	strb	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	707b      	strb	r3, [r7, #1]
	//"""Realiza a interpolação de x sobre uma reta dada por [(x0,y0),(x1,y1)] e retorna o valor em y"""
	float y;
	y = (float)y0 + ((float)y1 - (float)y0) * (x-(float)x0)/((float)x1-(float)x0);
 8001256:	78bb      	ldrb	r3, [r7, #2]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fcdd 	bl	8000c18 <__aeabi_ui2f>
 800125e:	4604      	mov	r4, r0
 8001260:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fcd7 	bl	8000c18 <__aeabi_ui2f>
 800126a:	4605      	mov	r5, r0
 800126c:	78bb      	ldrb	r3, [r7, #2]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_ui2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	4628      	mov	r0, r5
 800127a:	f7ff fc1b 	bl	8000ab4 <__aeabi_fsub>
 800127e:	4603      	mov	r3, r0
 8001280:	461d      	mov	r5, r3
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fcc7 	bl	8000c18 <__aeabi_ui2f>
 800128a:	4603      	mov	r3, r0
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fc10 	bl	8000ab4 <__aeabi_fsub>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	4628      	mov	r0, r5
 800129a:	f7ff fd15 	bl	8000cc8 <__aeabi_fmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	461e      	mov	r6, r3
 80012a2:	787b      	ldrb	r3, [r7, #1]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fcb7 	bl	8000c18 <__aeabi_ui2f>
 80012aa:	4605      	mov	r5, r0
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcb2 	bl	8000c18 <__aeabi_ui2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4628      	mov	r0, r5
 80012ba:	f7ff fbfb 	bl	8000ab4 <__aeabi_fsub>
 80012be:	4603      	mov	r3, r0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4630      	mov	r0, r6
 80012c4:	f7ff fdb4 	bl	8000e30 <__aeabi_fdiv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4620      	mov	r0, r4
 80012ce:	f7ff fbf3 	bl	8000ab8 <__addsf3>
 80012d2:	4603      	mov	r3, r0
 80012d4:	60fb      	str	r3, [r7, #12]
	return y;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012e0 <ret_x0_y0_x1_y1>:

uint8_t * ret_x0_y0_x1_y1(double x, uint8_t * x_array, uint8_t * y_array){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
    //a funcao retorna o conjunto de pontos [(xa,ya),(xb,yb)] que formam uma reta
    //na qual o ponto x possa ser interpolado.\n
    //Os pontos precisam estar alistados em ordem crescente, e as listas de x e y precisam ter o mesmo tamanho."""
	static uint8_t x0y0x1y1array[4] = {0, 0, 0, 0};

	for (int i=0; i<6; i++){
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e02d      	b.n	8001350 <ret_x0_y0_x1_y1+0x70>
		if (x < (double)x_array[i]){
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f871 	bl	80003e4 <__aeabi_ui2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800130a:	f7ff fb57 	bl	80009bc <__aeabi_dcmplt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01a      	beq.n	800134a <ret_x0_y0_x1_y1+0x6a>
			x0y0x1y1array[0] = x_array[i-1];
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3b01      	subs	r3, #1
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
 8001320:	701a      	strb	r2, [r3, #0]
			x0y0x1y1array[1] = y_array[i-1];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3b01      	subs	r3, #1
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
 800132e:	705a      	strb	r2, [r3, #1]
			x0y0x1y1array[2] = x_array[i];
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
 800133a:	709a      	strb	r2, [r3, #2]
			x0y0x1y1array[3] = y_array[i];
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
 8001346:	70da      	strb	r2, [r3, #3]
			break;
 8001348:	e005      	b.n	8001356 <ret_x0_y0_x1_y1+0x76>
	for (int i=0; i<6; i++){
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b05      	cmp	r3, #5
 8001354:	ddce      	ble.n	80012f4 <ret_x0_y0_x1_y1+0x14>
		}
	}
	return x0y0x1y1array;
 8001356:	4b02      	ldr	r3, [pc, #8]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200002f0 	.word	0x200002f0
 8001364:	00000000 	.word	0x00000000

08001368 <set_output>:

uint16_t* set_output(uint16_t * valor_entrada, uint8_t (*sliders_data)[6], uint8_t (*range_x_data)[6], uint8_t * inverter_config){
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b08d      	sub	sp, #52	; 0x34
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
	//"""Método que calcula e atualiza o valor de saída de acordo com o valor da entrada"""

	static uint16_t valor_saida[3] = {0, 0, 0};
	float entrada_invertida[3] = {0, 0, 0};        //alterei pra usar menor memoria
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]

	for (int i=0; i<3; i++){
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
 800138c:	e0d8      	b.n	8001540 <set_output+0x1d8>
		entrada_invertida[i] = ((double)valor_entrada[i])*100/4095;		//converte o valor de entrada de 12bits para um range de 0,0 a 100,0
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f823 	bl	80003e4 <__aeabi_ui2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <set_output+0x1f8>)
 80013a4:	f7ff f898 	bl	80004d8 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	a369      	add	r3, pc, #420	; (adr r3, 8001558 <set_output+0x1f0>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f9b9 	bl	800072c <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fb23 	bl	8000a0c <__aeabi_d2f>
 80013c6:	4602      	mov	r2, r0
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	3328      	adds	r3, #40	; 0x28
 80013ce:	443b      	add	r3, r7
 80013d0:	f843 2c14 	str.w	r2, [r3, #-20]

		if (inverter_config[i] == 1){
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d111      	bne.n	8001404 <set_output+0x9c>
			entrada_invertida[i] = 100 - entrada_invertida[i];		// inverte a entrada caso o bit de inversao esteja ligado
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	3328      	adds	r3, #40	; 0x28
 80013e6:	443b      	add	r3, r7
 80013e8:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80013ec:	4619      	mov	r1, r3
 80013ee:	485d      	ldr	r0, [pc, #372]	; (8001564 <set_output+0x1fc>)
 80013f0:	f7ff fb60 	bl	8000ab4 <__aeabi_fsub>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3328      	adds	r3, #40	; 0x28
 80013fe:	443b      	add	r3, r7
 8001400:	f843 2c14 	str.w	r2, [r3, #-20]
		}
//		char buffer[12];
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", (uint16_t)entrada_invertida[i]), 100);
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", range_x_data[i][0]), 100);

		if ((uint16_t)entrada_invertida[i] <= range_x_data[i][0]){			// caso entrada esteja abaixa da calibracao minima
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	3328      	adds	r3, #40	; 0x28
 800140a:	443b      	add	r3, r7
 800140c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fda9 	bl	8000f68 <__aeabi_f2uiz>
 8001416:	4603      	mov	r3, r0
 8001418:	b299      	uxth	r1, r3
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4299      	cmp	r1, r3
 8001430:	d80e      	bhi.n	8001450 <set_output+0xe8>
			valor_saida[i] = (uint16_t)sliders_data[i][0];
 8001432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	461a      	mov	r2, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b299      	uxth	r1, r3
 8001446:	4a48      	ldr	r2, [pc, #288]	; (8001568 <set_output+0x200>)
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800144e:	e061      	b.n	8001514 <set_output+0x1ac>
			//continue;
		}
		else if ((uint16_t)entrada_invertida[i] >= range_x_data[i][5]){			// caso a entrada esteja acima da calibracao maxima
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	3328      	adds	r3, #40	; 0x28
 8001456:	443b      	add	r3, r7
 8001458:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fd83 	bl	8000f68 <__aeabi_f2uiz>
 8001462:	4603      	mov	r3, r0
 8001464:	b299      	uxth	r1, r3
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	795b      	ldrb	r3, [r3, #5]
 8001478:	b29b      	uxth	r3, r3
 800147a:	4299      	cmp	r1, r3
 800147c:	d30e      	bcc.n	800149c <set_output+0x134>
			valor_saida[i] = (uint16_t)sliders_data[i][5];
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	461a      	mov	r2, r3
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	4413      	add	r3, r2
 800148e:	795b      	ldrb	r3, [r3, #5]
 8001490:	b299      	uxth	r1, r3
 8001492:	4a35      	ldr	r2, [pc, #212]	; (8001568 <set_output+0x200>)
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800149a:	e03b      	b.n	8001514 <set_output+0x1ac>
			//continue;
		}
		else{
		uint8_t * x0y0x1y1_list = ret_x0_y0_x1_y1(entrada_invertida[i], range_x_data[i], sliders_data[i]);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	3328      	adds	r3, #40	; 0x28
 80014a2:	443b      	add	r3, r7
 80014a4:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffbd 	bl	8000428 <__aeabi_f2d>
 80014ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	461a      	mov	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	189c      	adds	r4, r3, r2
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	461a      	mov	r2, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	4622      	mov	r2, r4
 80014d0:	f7ff ff06 	bl	80012e0 <ret_x0_y0_x1_y1>
 80014d4:	6238      	str	r0, [r7, #32]
		valor_saida[i] = interpolacao_linear(entrada_invertida[i], x0y0x1y1_list[0], x0y0x1y1_list[1], x0y0x1y1_list[2], x0y0x1y1_list[3]);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	3328      	adds	r3, #40	; 0x28
 80014dc:	443b      	add	r3, r7
 80014de:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	7819      	ldrb	r1, [r3, #0]
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	3301      	adds	r3, #1
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	3302      	adds	r3, #2
 80014f0:	781c      	ldrb	r4, [r3, #0]
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	3303      	adds	r3, #3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	4623      	mov	r3, r4
 80014fc:	f7ff fe9e 	bl	800123c <interpolacao_linear>
 8001500:	4603      	mov	r3, r0
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd30 	bl	8000f68 <__aeabi_f2uiz>
 8001508:	4603      	mov	r3, r0
 800150a:	b299      	uxth	r1, r3
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <set_output+0x200>)
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		valor_saida[i] = valor_saida[i]*4095/100;         //transforma o valor de saida de 0-100 em 12 bits
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <set_output+0x200>)
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800151c:	461a      	mov	r2, r3
 800151e:	4613      	mov	r3, r2
 8001520:	031b      	lsls	r3, r3, #12
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <set_output+0x204>)
 8001526:	fb82 1203 	smull	r1, r2, r2, r3
 800152a:	1152      	asrs	r2, r2, #5
 800152c:	17db      	asrs	r3, r3, #31
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	b299      	uxth	r1, r3
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <set_output+0x200>)
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<3; i++){
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2b02      	cmp	r3, #2
 8001544:	f77f af23 	ble.w	800138e <set_output+0x26>
//		char buffer[8];
//	    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", valor_saida[0]), 100);
	}
	return valor_saida;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <set_output+0x200>)
}
 800154a:	4618      	mov	r0, r3
 800154c:	372c      	adds	r7, #44	; 0x2c
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	00000000 	.word	0x00000000
 800155c:	40affe00 	.word	0x40affe00
 8001560:	40590000 	.word	0x40590000
 8001564:	42c80000 	.word	0x42c80000
 8001568:	200002f4 	.word	0x200002f4
 800156c:	51eb851f 	.word	0x51eb851f

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001576:	f000 fbc1 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157a:	f000 f86b 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157e:	f000 f96b 	bl	8001858 <MX_GPIO_Init>
  MX_DMA_Init();
 8001582:	f000 f94b 	bl	800181c <MX_DMA_Init>
  MX_ADC1_Init();
 8001586:	f000 f8c3 	bl	8001710 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800158a:	f008 f9c3 	bl	8009914 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800158e:	f000 f91b 	bl	80017c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 8001592:	2203      	movs	r2, #3
 8001594:	4927      	ldr	r1, [pc, #156]	; (8001634 <main+0xc4>)
 8001596:	4828      	ldr	r0, [pc, #160]	; (8001638 <main+0xc8>)
 8001598:	f000 fd0e 	bl	8001fb8 <HAL_ADC_Start_DMA>
  update_data_from_flash(sliders_data, range_x_data, inverter_config);
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <main+0xcc>)
 800159e:	4928      	ldr	r1, [pc, #160]	; (8001640 <main+0xd0>)
 80015a0:	4828      	ldr	r0, [pc, #160]	; (8001644 <main+0xd4>)
 80015a2:	f7ff fd3d 	bl	8001020 <update_data_from_flash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (updating){
 80015a6:	4b28      	ldr	r3, [pc, #160]	; (8001648 <main+0xd8>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <main+0x4e>
		  updating = 0;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <main+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
		  update_data_from_flash(sliders_data, range_x_data, inverter_config);
 80015b4:	4a21      	ldr	r2, [pc, #132]	; (800163c <main+0xcc>)
 80015b6:	4922      	ldr	r1, [pc, #136]	; (8001640 <main+0xd0>)
 80015b8:	4822      	ldr	r0, [pc, #136]	; (8001644 <main+0xd4>)
 80015ba:	f7ff fd31 	bl	8001020 <update_data_from_flash>
	  }
	  uint16_t * OutputValue = set_output(ADCValue, sliders_data, range_x_data, inverter_config);
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <main+0xcc>)
 80015c0:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <main+0xd0>)
 80015c2:	4920      	ldr	r1, [pc, #128]	; (8001644 <main+0xd4>)
 80015c4:	481b      	ldr	r0, [pc, #108]	; (8001634 <main+0xc4>)
 80015c6:	f7ff fecf 	bl	8001368 <set_output>
 80015ca:	6078      	str	r0, [r7, #4]
	  joystickhid.rx_8lsb = (OutputValue[0]);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <main+0xdc>)
 80015d4:	701a      	strb	r2, [r3, #0]
	  joystickhid.ry_4lsb_rx_4msb = ((OutputValue[1] & 0xf) << 4 | OutputValue[0] >> 8);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3302      	adds	r3, #2
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <main+0xdc>)
 80015f2:	705a      	strb	r2, [r3, #1]
	  joystickhid.ry_8msb = OutputValue[1] >> 4;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3302      	adds	r3, #2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <main+0xdc>)
 8001602:	709a      	strb	r2, [r3, #2]
	  joystickhid.rz_8lsb = OutputValue[2];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <main+0xdc>)
 800160e:	70da      	strb	r2, [r3, #3]
	  joystickhid.rz_4msb = OutputValue[2] >> 8;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3304      	adds	r3, #4
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <main+0xdc>)
 800161e:	711a      	strb	r2, [r3, #4]
//  	  uint8_t Test[] = "Fim\r\n"; //Data to send
//  	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 8001620:	2208      	movs	r2, #8
 8001622:	490a      	ldr	r1, [pc, #40]	; (800164c <main+0xdc>)
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <main+0xe0>)
 8001626:	f007 f813 	bl	8008650 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(1);
 800162a:	2001      	movs	r0, #1
 800162c:	f000 fbc8 	bl	8001dc0 <HAL_Delay>
  {
 8001630:	e7b9      	b.n	80015a6 <main+0x36>
 8001632:	bf00      	nop
 8001634:	200002e4 	.word	0x200002e4
 8001638:	20000224 	.word	0x20000224
 800163c:	200002ec 	.word	0x200002ec
 8001640:	20000000 	.word	0x20000000
 8001644:	20000014 	.word	0x20000014
 8001648:	200002ea 	.word	0x200002ea
 800164c:	200002dc 	.word	0x200002dc
 8001650:	2000032c 	.word	0x2000032c

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165e:	2228      	movs	r2, #40	; 0x28
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f008 fe60 	bl	800a328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001692:	2301      	movs	r3, #1
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fae8 	bl	8004c80 <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016b6:	f000 f91b 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ba:	230f      	movs	r3, #15
 80016bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2101      	movs	r1, #1
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fd54 	bl	8005184 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016e2:	f000 f905 	bl	80018f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80016e6:	2312      	movs	r3, #18
 80016e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80016ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80016f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fedb 	bl	80054b4 <HAL_RCCEx_PeriphCLKConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001704:	f000 f8f4 	bl	80018f0 <Error_Handler>
  }
}
 8001708:	bf00      	nop
 800170a:	3750      	adds	r7, #80	; 0x50
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <MX_ADC1_Init+0xb0>)
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001724:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <MX_ADC1_Init+0xb0>)
 8001728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <MX_ADC1_Init+0xb0>)
 8001730:	2201      	movs	r2, #1
 8001732:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <MX_ADC1_Init+0xb0>)
 8001736:	2200      	movs	r2, #0
 8001738:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_ADC1_Init+0xb0>)
 800173c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001740:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_ADC1_Init+0xb0>)
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_ADC1_Init+0xb0>)
 800174a:	2203      	movs	r2, #3
 800174c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800174e:	481c      	ldr	r0, [pc, #112]	; (80017c0 <MX_ADC1_Init+0xb0>)
 8001750:	f000 fb5a 	bl	8001e08 <HAL_ADC_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800175a:	f000 f8c9 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001762:	2301      	movs	r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001766:	2306      	movs	r3, #6
 8001768:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <MX_ADC1_Init+0xb0>)
 8001770:	f000 fd1c 	bl	80021ac <HAL_ADC_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 f8b9 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800177e:	2301      	movs	r3, #1
 8001780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001782:	2302      	movs	r3, #2
 8001784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_ADC1_Init+0xb0>)
 800178c:	f000 fd0e 	bl	80021ac <HAL_ADC_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001796:	f000 f8ab 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800179a:	2302      	movs	r3, #2
 800179c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800179e:	2303      	movs	r3, #3
 80017a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <MX_ADC1_Init+0xb0>)
 80017a8:	f000 fd00 	bl	80021ac <HAL_ADC_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80017b2:	f000 f89d 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000224 	.word	0x20000224
 80017c4:	40012400 	.word	0x40012400

080017c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <MX_USART1_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 8001800:	f003 ff0e 	bl	8005620 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800180a:	f000 f871 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000298 	.word	0x20000298
 8001818:	40013800 	.word	0x40013800

0800181c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_DMA_Init+0x38>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <MX_DMA_Init+0x38>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_DMA_Init+0x38>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	200b      	movs	r0, #11
 8001840:	f000 ff85 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001844:	200b      	movs	r0, #11
 8001846:	f000 ff9e 	bl	8002786 <HAL_NVIC_EnableIRQ>

}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_GPIO_Init+0x90>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <MX_GPIO_Init+0x90>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_GPIO_Init+0x90>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_GPIO_Init+0x90>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <MX_GPIO_Init+0x90>)
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_GPIO_Init+0x90>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_GPIO_Init+0x90>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <MX_GPIO_Init+0x90>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_GPIO_Init+0x90>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_GPIO_Init+0x94>)
 80018bc:	f001 fd1c 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4619      	mov	r1, r3
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_GPIO_Init+0x94>)
 80018da:	f001 fb89 	bl	8002ff0 <HAL_GPIO_Init>

}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40011000 	.word	0x40011000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_MspInit+0x40>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_MspInit+0x40>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_MspInit+0x40>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_MspInit+0x40>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_MspInit+0x40>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_MspInit+0x40>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a29      	ldr	r2, [pc, #164]	; (8001a00 <HAL_ADC_MspInit+0xc0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d14a      	bne.n	80019f6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <HAL_ADC_MspInit+0xc4>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <HAL_ADC_MspInit+0xc4>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_ADC_MspInit+0xc4>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_ADC_MspInit+0xc4>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <HAL_ADC_MspInit+0xc4>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_ADC_MspInit+0xc4>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001990:	2307      	movs	r3, #7
 8001992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001994:	2303      	movs	r3, #3
 8001996:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	481a      	ldr	r0, [pc, #104]	; (8001a08 <HAL_ADC_MspInit+0xc8>)
 80019a0:	f001 fb26 	bl	8002ff0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019a6:	4a1a      	ldr	r2, [pc, #104]	; (8001a10 <HAL_ADC_MspInit+0xd0>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019ce:	2220      	movs	r2, #32
 80019d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019da:	480c      	ldr	r0, [pc, #48]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019dc:	f000 feee 	bl	80027bc <HAL_DMA_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80019e6:	f7ff ff83 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019ee:	621a      	str	r2, [r3, #32]
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_ADC_MspInit+0xcc>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40012400 	.word	0x40012400
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	20000254 	.word	0x20000254
 8001a10:	40020008 	.word	0x40020008

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_UART_MspInit+0x8c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d131      	bne.n	8001a98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4619      	mov	r1, r3
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <HAL_UART_MspInit+0x94>)
 8001a7a:	f001 fab9 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_UART_MspInit+0x94>)
 8001a94:	f001 faac 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af2:	f000 f949 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <DMA1_Channel1_IRQHandler+0x10>)
 8001b02:	f000 ff15 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000254 	.word	0x20000254

08001b10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b16:	f001 fd38 	bl	800358a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000af4 	.word	0x20000af4

08001b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
	return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <_kill>:

int _kill(int pid, int sig)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b3c:	f008 fbbc 	bl	800a2b8 <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2216      	movs	r2, #22
 8001b44:	601a      	str	r2, [r3, #0]
	return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_exit>:

void _exit (int status)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffe7 	bl	8001b32 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b64:	e7fe      	b.n	8001b64 <_exit+0x12>

08001b66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e00a      	b.n	8001b8e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b78:	f3af 8000 	nop.w
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	60ba      	str	r2, [r7, #8]
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dbf0      	blt.n	8001b78 <_read+0x12>
	}

return len;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e009      	b.n	8001bc6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	60ba      	str	r2, [r7, #8]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf1      	blt.n	8001bb2 <_write+0x12>
	}
	return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_close>:

int _close(int file)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfe:	605a      	str	r2, [r3, #4]
	return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <_isatty>:

int _isatty(int file)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	return 1;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f008 fb26 	bl	800a2b8 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20005000 	.word	0x20005000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	200002fc 	.word	0x200002fc
 8001ca0:	20000e48 	.word	0x20000e48

08001ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cd6:	f7ff ffe5 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cda:	f008 faf3 	bl	800a2c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cde:	f7ff fc47 	bl	8001570 <main>
  bx lr
 8001ce2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001cec:	0800b7e4 	.word	0x0800b7e4
  ldr r2, =_sbss
 8001cf0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001cf4:	20000e48 	.word	0x20000e48

08001cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC1_2_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_Init+0x28>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_Init+0x28>)
 8001d06:	f043 0310 	orr.w	r3, r3, #16
 8001d0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f000 fd13 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d12:	200f      	movs	r0, #15
 8001d14:	f000 f808 	bl	8001d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d18:	f7ff fdf0 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x54>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_InitTick+0x58>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fd2b 	bl	80027a2 <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00e      	b.n	8001d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d80a      	bhi.n	8001d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f000 fcf3 	bl	800274e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_InitTick+0x5c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000028 	.word	0x20000028
 8001d80:	20000030 	.word	0x20000030
 8001d84:	2000002c 	.word	0x2000002c

08001d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_IncTick+0x1c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_IncTick+0x20>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <HAL_IncTick+0x20>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	20000030 	.word	0x20000030
 8001da8:	20000300 	.word	0x20000300

08001dac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <HAL_GetTick+0x10>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20000300 	.word	0x20000300

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d005      	beq.n	8001de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_Delay+0x44>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffe0 	bl	8001dac <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8f7      	bhi.n	8001de8 <HAL_Delay+0x28>
  {
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000030 	.word	0x20000030

08001e08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0be      	b.n	8001fa8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d109      	bne.n	8001e4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fd7a 	bl	8001940 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 faff 	bl	8002450 <ADC_ConversionStop_Disable>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8099 	bne.w	8001f96 <HAL_ADC_Init+0x18e>
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 8095 	bne.w	8001f96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e74:	f023 0302 	bic.w	r3, r3, #2
 8001e78:	f043 0202 	orr.w	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7b1b      	ldrb	r3, [r3, #12]
 8001e8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea0:	d003      	beq.n	8001eaa <HAL_ADC_Init+0xa2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_ADC_Init+0xa8>
 8001eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eae:	e000      	b.n	8001eb2 <HAL_ADC_Init+0xaa>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7d1b      	ldrb	r3, [r3, #20]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d119      	bne.n	8001ef4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7b1b      	ldrb	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	035a      	lsls	r2, r3, #13
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	e00b      	b.n	8001ef4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_ADC_Init+0x1a8>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f24:	d003      	beq.n	8001f2e <HAL_ADC_Init+0x126>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d104      	bne.n	8001f38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	051b      	lsls	r3, r3, #20
 8001f36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_ADC_Init+0x1ac>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d10b      	bne.n	8001f74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f72:	e018      	b.n	8001fa6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	f023 0312 	bic.w	r3, r3, #18
 8001f7c:	f043 0210 	orr.w	r2, r3, #16
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f043 0210 	orr.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	ffe1f7fd 	.word	0xffe1f7fd
 8001fb4:	ff1f0efe 	.word	0xff1f0efe

08001fb8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a64      	ldr	r2, [pc, #400]	; (8002160 <HAL_ADC_Start_DMA+0x1a8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_ADC_Start_DMA+0x24>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_ADC_Start_DMA+0x1ac>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d106      	bne.n	8001fea <HAL_ADC_Start_DMA+0x32>
 8001fdc:	4b60      	ldr	r3, [pc, #384]	; (8002160 <HAL_ADC_Start_DMA+0x1a8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 80b3 	bne.w	8002150 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_Start_DMA+0x40>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0ae      	b.n	8002156 <HAL_ADC_Start_DMA+0x19e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f9cb 	bl	800239c <ADC_Enable>
 8002006:	4603      	mov	r3, r0
 8002008:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 809a 	bne.w	8002146 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <HAL_ADC_Start_DMA+0x1ac>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d105      	bne.n	800203c <HAL_ADC_Start_DMA+0x84>
 8002030:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <HAL_ADC_Start_DMA+0x1a8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d115      	bne.n	8002068 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002052:	2b00      	cmp	r3, #0
 8002054:	d026      	beq.n	80020a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800205e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002066:	e01d      	b.n	80020a4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a39      	ldr	r2, [pc, #228]	; (8002160 <HAL_ADC_Start_DMA+0x1a8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_ADC_Start_DMA+0xd0>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a38      	ldr	r2, [pc, #224]	; (8002164 <HAL_ADC_Start_DMA+0x1ac>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10d      	bne.n	80020a4 <HAL_ADC_Start_DMA+0xec>
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_ADC_Start_DMA+0x1a8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800209c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f023 0206 	bic.w	r2, r3, #6
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80020bc:	e002      	b.n	80020c4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a25      	ldr	r2, [pc, #148]	; (8002168 <HAL_ADC_Start_DMA+0x1b0>)
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a24      	ldr	r2, [pc, #144]	; (800216c <HAL_ADC_Start_DMA+0x1b4>)
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_ADC_Start_DMA+0x1b8>)
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0202 	mvn.w	r2, #2
 80020ec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020fc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a18      	ldr	r0, [r3, #32]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	334c      	adds	r3, #76	; 0x4c
 8002108:	4619      	mov	r1, r3
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f000 fbaf 	bl	8002870 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800211c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002120:	d108      	bne.n	8002134 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002130:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002132:	e00f      	b.n	8002154 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002142:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002144:	e006      	b.n	8002154 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800214e:	e001      	b.n	8002154 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002154:	7dfb      	ldrb	r3, [r7, #23]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40012400 	.word	0x40012400
 8002164:	40012800 	.word	0x40012800
 8002168:	080024d3 	.word	0x080024d3
 800216c:	0800254f 	.word	0x0800254f
 8002170:	0800256b 	.word	0x0800256b

08002174 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x20>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e0dc      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1da>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d81c      	bhi.n	8002216 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b05      	subs	r3, #5
 80021ee:	221f      	movs	r2, #31
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4019      	ands	r1, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3b05      	subs	r3, #5
 8002208:	fa00 f203 	lsl.w	r2, r0, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	635a      	str	r2, [r3, #52]	; 0x34
 8002214:	e03c      	b.n	8002290 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d81c      	bhi.n	8002258 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	3b23      	subs	r3, #35	; 0x23
 8002230:	221f      	movs	r2, #31
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	4019      	ands	r1, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b23      	subs	r3, #35	; 0x23
 800224a:	fa00 f203 	lsl.w	r2, r0, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
 8002256:	e01b      	b.n	8002290 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	3b41      	subs	r3, #65	; 0x41
 800226a:	221f      	movs	r2, #31
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	4019      	ands	r1, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b41      	subs	r3, #65	; 0x41
 8002284:	fa00 f203 	lsl.w	r2, r0, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b09      	cmp	r3, #9
 8002296:	d91c      	bls.n	80022d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68d9      	ldr	r1, [r3, #12]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	3b1e      	subs	r3, #30
 80022aa:	2207      	movs	r2, #7
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4019      	ands	r1, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6898      	ldr	r0, [r3, #8]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	3b1e      	subs	r3, #30
 80022c4:	fa00 f203 	lsl.w	r2, r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	e019      	b.n	8002306 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6919      	ldr	r1, [r3, #16]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	2207      	movs	r2, #7
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4019      	ands	r1, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6898      	ldr	r0, [r3, #8]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	fa00 f203 	lsl.w	r2, r0, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b10      	cmp	r3, #16
 800230c:	d003      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002312:	2b11      	cmp	r3, #17
 8002314:	d132      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_ADC_ConfigChannel+0x1e4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d125      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d126      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800233c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b10      	cmp	r3, #16
 8002344:	d11a      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_ADC_ConfigChannel+0x1e8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <HAL_ADC_ConfigChannel+0x1ec>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	0c9a      	lsrs	r2, r3, #18
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800235c:	e002      	b.n	8002364 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3b01      	subs	r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f9      	bne.n	800235e <HAL_ADC_ConfigChannel+0x1b2>
 800236a:	e007      	b.n	800237c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40012400 	.word	0x40012400
 8002394:	20000028 	.word	0x20000028
 8002398:	431bde83 	.word	0x431bde83

0800239c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d040      	beq.n	800243c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <ADC_Enable+0xac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <ADC_Enable+0xb0>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	0c9b      	lsrs	r3, r3, #18
 80023d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023d8:	e002      	b.n	80023e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023e6:	f7ff fce1 	bl	8001dac <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023ec:	e01f      	b.n	800242e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ee:	f7ff fcdd 	bl	8001dac <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d918      	bls.n	800242e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b01      	cmp	r3, #1
 8002408:	d011      	beq.n	800242e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e007      	b.n	800243e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d1d8      	bne.n	80023ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000028 	.word	0x20000028
 800244c:	431bde83 	.word	0x431bde83

08002450 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d12e      	bne.n	80024c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800247a:	f7ff fc97 	bl	8001dac <HAL_GetTick>
 800247e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002480:	e01b      	b.n	80024ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002482:	f7ff fc93 	bl	8001dac <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d914      	bls.n	80024ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10d      	bne.n	80024ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	f043 0210 	orr.w	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e007      	b.n	80024ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d0dc      	beq.n	8002482 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d127      	bne.n	800253c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002502:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002506:	d115      	bne.n	8002534 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800250c:	2b00      	cmp	r3, #0
 800250e:	d111      	bne.n	8002534 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fe1d 	bl	8002174 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800253a:	e004      	b.n	8002546 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff fe12 	bl	8002186 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f043 0204 	orr.w	r2, r3, #4
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fe01 	bl	8002198 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4906      	ldr	r1, [pc, #24]	; (8002638 <__NVIC_EnableIRQ+0x34>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff90 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff2d 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff42 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff90 	bl	8002690 <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5f 	bl	800263c <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff35 	bl	8002604 <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa2 	bl	80026f4 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e043      	b.n	800285a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_DMA_Init+0xa8>)
 80027da:	4413      	add	r3, r2
 80027dc:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_DMA_Init+0xac>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	009a      	lsls	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_DMA_Init+0xb0>)
 80027ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002806:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800280a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	bffdfff8 	.word	0xbffdfff8
 8002868:	cccccccd 	.word	0xcccccccd
 800286c:	40020000 	.word	0x40020000

08002870 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_DMA_Start_IT+0x20>
 800288c:	2302      	movs	r3, #2
 800288e:	e04a      	b.n	8002926 <HAL_DMA_Start_IT+0xb6>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d13a      	bne.n	8002918 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f938 	bl	8002b3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 020e 	orr.w	r2, r2, #14
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e00f      	b.n	8002906 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0204 	bic.w	r2, r2, #4
 80028f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 020a 	orr.w	r2, r2, #10
 8002904:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e005      	b.n	8002924 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002920:	2302      	movs	r3, #2
 8002922:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	2204      	movs	r2, #4
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d04f      	beq.n	80029f8 <HAL_DMA_IRQHandler+0xc8>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d04a      	beq.n	80029f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a66      	ldr	r2, [pc, #408]	; (8002b20 <HAL_DMA_IRQHandler+0x1f0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d029      	beq.n	80029de <HAL_DMA_IRQHandler+0xae>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a65      	ldr	r2, [pc, #404]	; (8002b24 <HAL_DMA_IRQHandler+0x1f4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_IRQHandler+0xaa>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a63      	ldr	r2, [pc, #396]	; (8002b28 <HAL_DMA_IRQHandler+0x1f8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01a      	beq.n	80029d4 <HAL_DMA_IRQHandler+0xa4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a62      	ldr	r2, [pc, #392]	; (8002b2c <HAL_DMA_IRQHandler+0x1fc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d012      	beq.n	80029ce <HAL_DMA_IRQHandler+0x9e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a60      	ldr	r2, [pc, #384]	; (8002b30 <HAL_DMA_IRQHandler+0x200>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00a      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x98>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5f      	ldr	r2, [pc, #380]	; (8002b34 <HAL_DMA_IRQHandler+0x204>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d102      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x92>
 80029bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029c0:	e00e      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029c6:	e00b      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029cc:	e008      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029d2:	e005      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d8:	e002      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029de:	2304      	movs	r3, #4
 80029e0:	4a55      	ldr	r2, [pc, #340]	; (8002b38 <HAL_DMA_IRQHandler+0x208>)
 80029e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8094 	beq.w	8002b16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	e08e      	b.n	8002b16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2202      	movs	r2, #2
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d056      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x186>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d051      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 020a 	bic.w	r2, r2, #10
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a38      	ldr	r2, [pc, #224]	; (8002b20 <HAL_DMA_IRQHandler+0x1f0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d029      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x166>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a37      	ldr	r2, [pc, #220]	; (8002b24 <HAL_DMA_IRQHandler+0x1f4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d022      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x162>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a35      	ldr	r2, [pc, #212]	; (8002b28 <HAL_DMA_IRQHandler+0x1f8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01a      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x15c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_DMA_IRQHandler+0x1fc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d012      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_DMA_IRQHandler+0x200>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00a      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x150>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a31      	ldr	r2, [pc, #196]	; (8002b34 <HAL_DMA_IRQHandler+0x204>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d102      	bne.n	8002a7a <HAL_DMA_IRQHandler+0x14a>
 8002a74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a78:	e00e      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7e:	e00b      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a84:	e008      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a8a:	e005      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a90:	e002      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a92:	2320      	movs	r3, #32
 8002a94:	e000      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a96:	2302      	movs	r3, #2
 8002a98:	4a27      	ldr	r2, [pc, #156]	; (8002b38 <HAL_DMA_IRQHandler+0x208>)
 8002a9a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d034      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ab4:	e02f      	b.n	8002b16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2208      	movs	r2, #8
 8002abc:	409a      	lsls	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d028      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x1e8>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d023      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020e 	bic.w	r2, r2, #14
 8002ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
    }
  }
  return;
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
}
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40020008 	.word	0x40020008
 8002b24:	4002001c 	.word	0x4002001c
 8002b28:	40020030 	.word	0x40020030
 8002b2c:	40020044 	.word	0x40020044
 8002b30:	40020058 	.word	0x40020058
 8002b34:	4002006c 	.word	0x4002006c
 8002b38:	40020000 	.word	0x40020000

08002b3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d108      	bne.n	8002b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b7a:	e007      	b.n	8002b8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bb2:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_FLASH_Program+0xd8>)
 8002bb4:	7e1b      	ldrb	r3, [r3, #24]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_FLASH_Program+0x26>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e054      	b.n	8002c68 <HAL_FLASH_Program+0xd0>
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_FLASH_Program+0xd8>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002bc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bc8:	f000 f8d4 	bl	8002d74 <FLASH_WaitForLastOperation>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d144      	bne.n	8002c60 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d102      	bne.n	8002be2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	757b      	strb	r3, [r7, #21]
 8002be0:	e007      	b.n	8002bf2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d102      	bne.n	8002bee <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002be8:	2302      	movs	r3, #2
 8002bea:	757b      	strb	r3, [r7, #21]
 8002bec:	e001      	b.n	8002bf2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002bee:	2304      	movs	r3, #4
 8002bf0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75bb      	strb	r3, [r7, #22]
 8002bf6:	e02d      	b.n	8002c54 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002bf8:	7dbb      	ldrb	r3, [r7, #22]
 8002bfa:	005a      	lsls	r2, r3, #1
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	eb02 0c03 	add.w	ip, r2, r3
 8002c02:	7dbb      	ldrb	r3, [r7, #22]
 8002c04:	0119      	lsls	r1, r3, #4
 8002c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c0a:	f1c1 0620 	rsb	r6, r1, #32
 8002c0e:	f1a1 0020 	sub.w	r0, r1, #32
 8002c12:	fa22 f401 	lsr.w	r4, r2, r1
 8002c16:	fa03 f606 	lsl.w	r6, r3, r6
 8002c1a:	4334      	orrs	r4, r6
 8002c1c:	fa23 f000 	lsr.w	r0, r3, r0
 8002c20:	4304      	orrs	r4, r0
 8002c22:	fa23 f501 	lsr.w	r5, r3, r1
 8002c26:	b2a3      	uxth	r3, r4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4660      	mov	r0, ip
 8002c2c:	f000 f886 	bl	8002d3c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c34:	f000 f89e 	bl	8002d74 <FLASH_WaitForLastOperation>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_FLASH_Program+0xdc>)
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <HAL_FLASH_Program+0xdc>)
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002c4e:	7dbb      	ldrb	r3, [r7, #22]
 8002c50:	3301      	adds	r3, #1
 8002c52:	75bb      	strb	r3, [r7, #22]
 8002c54:	7dba      	ldrb	r2, [r7, #22]
 8002c56:	7d7b      	ldrb	r3, [r7, #21]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3cd      	bcc.n	8002bf8 <HAL_FLASH_Program+0x60>
 8002c5c:	e000      	b.n	8002c60 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002c5e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_FLASH_Program+0xd8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	761a      	strb	r2, [r3, #24]

  return status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c70:	20000308 	.word	0x20000308
 8002c74:	40022000 	.word	0x40022000

08002c78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_FLASH_Unlock+0x40>)
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_FLASH_Unlock+0x40>)
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_FLASH_Unlock+0x44>)
 8002c92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_FLASH_Unlock+0x40>)
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_FLASH_Unlock+0x48>)
 8002c98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <HAL_FLASH_Unlock+0x40>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002caa:	79fb      	ldrb	r3, [r7, #7]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	45670123 	.word	0x45670123
 8002cc0:	cdef89ab 	.word	0xcdef89ab

08002cc4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_FLASH_Lock+0x1c>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_FLASH_Lock+0x1c>)
 8002cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40022000 	.word	0x40022000

08002ce4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cf6:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <HAL_FLASH_OB_Unlock+0x30>)
 8002cf8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_FLASH_OB_Unlock+0x34>)
 8002cfe:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000
 8002d14:	45670123 	.word	0x45670123
 8002d18:	cdef89ab 	.word	0xcdef89ab

08002d1c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_FLASH_OB_Lock+0x1c>)
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <HAL_FLASH_OB_Lock+0x1c>)
 8002d26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d2a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40022000 	.word	0x40022000

08002d3c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <FLASH_Program_HalfWord+0x30>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <FLASH_Program_HalfWord+0x34>)
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <FLASH_Program_HalfWord+0x34>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	887a      	ldrh	r2, [r7, #2]
 8002d5e:	801a      	strh	r2, [r3, #0]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000308 	.word	0x20000308
 8002d70:	40022000 	.word	0x40022000

08002d74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff f816 	bl	8001dac <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d82:	e010      	b.n	8002da6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d00c      	beq.n	8002da6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <FLASH_WaitForLastOperation+0x2e>
 8002d92:	f7ff f80b 	bl	8001dac <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d201      	bcs.n	8002da6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e025      	b.n	8002df2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <FLASH_WaitForLastOperation+0x88>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e8      	bne.n	8002d84 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <FLASH_WaitForLastOperation+0x88>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <FLASH_WaitForLastOperation+0x88>)
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <FLASH_WaitForLastOperation+0x88>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <FLASH_WaitForLastOperation+0x88>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <FLASH_WaitForLastOperation+0x88>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002de8:	f000 f80a 	bl	8002e00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40022000 	.word	0x40022000

08002e00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <FLASH_SetErrorCode+0x98>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <FLASH_SetErrorCode+0x9c>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <FLASH_SetErrorCode+0x9c>)
 8002e20:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f043 0310 	orr.w	r3, r3, #16
 8002e28:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <FLASH_SetErrorCode+0x98>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <FLASH_SetErrorCode+0x9c>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <FLASH_SetErrorCode+0x9c>)
 8002e40:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <FLASH_SetErrorCode+0x98>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <FLASH_SetErrorCode+0x9c>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <FLASH_SetErrorCode+0x9c>)
 8002e60:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <FLASH_SetErrorCode+0x98>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <FLASH_SetErrorCode+0x98>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f240 1201 	movw	r2, #257	; 0x101
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d106      	bne.n	8002e86 <FLASH_SetErrorCode+0x86>
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <FLASH_SetErrorCode+0x98>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <FLASH_SetErrorCode+0x98>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	61d3      	str	r3, [r2, #28]
}  
 8002e84:	e002      	b.n	8002e8c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <FLASH_SetErrorCode+0x98>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60d3      	str	r3, [r2, #12]
}  
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	20000308 	.word	0x20000308

08002ea0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_FLASHEx_Erase+0xd0>)
 8002eb4:	7e1b      	ldrb	r3, [r3, #24]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_FLASHEx_Erase+0x1e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e053      	b.n	8002f66 <HAL_FLASHEx_Erase+0xc6>
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_FLASHEx_Erase+0xd0>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d116      	bne.n	8002efa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002ecc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ed0:	f7ff ff50 	bl	8002d74 <FLASH_WaitForLastOperation>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d141      	bne.n	8002f5e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f000 f84c 	bl	8002f78 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ee0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ee4:	f7ff ff46 	bl	8002d74 <FLASH_WaitForLastOperation>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_FLASHEx_Erase+0xd4>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_FLASHEx_Erase+0xd4>)
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	6113      	str	r3, [r2, #16]
 8002ef8:	e031      	b.n	8002f5e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002efa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002efe:	f7ff ff39 	bl	8002d74 <FLASH_WaitForLastOperation>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d12a      	bne.n	8002f5e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	e019      	b.n	8002f4c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002f18:	68b8      	ldr	r0, [r7, #8]
 8002f1a:	f000 f849 	bl	8002fb0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f22:	f7ff ff27 	bl	8002d74 <FLASH_WaitForLastOperation>
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_FLASHEx_Erase+0xd4>)
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_FLASHEx_Erase+0xd4>)
 8002f30:	f023 0302 	bic.w	r3, r3, #2
 8002f34:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	601a      	str	r2, [r3, #0]
            break;
 8002f42:	e00c      	b.n	8002f5e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f4a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	029a      	lsls	r2, r3, #10
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3dc      	bcc.n	8002f18 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <HAL_FLASHEx_Erase+0xd0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	761a      	strb	r2, [r3, #24]

  return status;
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000308 	.word	0x20000308
 8002f74:	40022000 	.word	0x40022000

08002f78 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <FLASH_MassErase+0x30>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <FLASH_MassErase+0x34>)
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <FLASH_MassErase+0x34>)
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <FLASH_MassErase+0x34>)
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <FLASH_MassErase+0x34>)
 8002f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000308 	.word	0x20000308
 8002fac:	40022000 	.word	0x40022000

08002fb0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <FLASH_PageErase+0x38>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <FLASH_PageErase+0x3c>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <FLASH_PageErase+0x3c>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002fca:	4a08      	ldr	r2, [pc, #32]	; (8002fec <FLASH_PageErase+0x3c>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <FLASH_PageErase+0x3c>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	4a05      	ldr	r2, [pc, #20]	; (8002fec <FLASH_PageErase+0x3c>)
 8002fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fda:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000308 	.word	0x20000308
 8002fec:	40022000 	.word	0x40022000

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b08b      	sub	sp, #44	; 0x2c
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003002:	e169      	b.n	80032d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003004:	2201      	movs	r2, #1
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	429a      	cmp	r2, r3
 800301e:	f040 8158 	bne.w	80032d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a9a      	ldr	r2, [pc, #616]	; (8003290 <HAL_GPIO_Init+0x2a0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d05e      	beq.n	80030ea <HAL_GPIO_Init+0xfa>
 800302c:	4a98      	ldr	r2, [pc, #608]	; (8003290 <HAL_GPIO_Init+0x2a0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d875      	bhi.n	800311e <HAL_GPIO_Init+0x12e>
 8003032:	4a98      	ldr	r2, [pc, #608]	; (8003294 <HAL_GPIO_Init+0x2a4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d058      	beq.n	80030ea <HAL_GPIO_Init+0xfa>
 8003038:	4a96      	ldr	r2, [pc, #600]	; (8003294 <HAL_GPIO_Init+0x2a4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d86f      	bhi.n	800311e <HAL_GPIO_Init+0x12e>
 800303e:	4a96      	ldr	r2, [pc, #600]	; (8003298 <HAL_GPIO_Init+0x2a8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d052      	beq.n	80030ea <HAL_GPIO_Init+0xfa>
 8003044:	4a94      	ldr	r2, [pc, #592]	; (8003298 <HAL_GPIO_Init+0x2a8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d869      	bhi.n	800311e <HAL_GPIO_Init+0x12e>
 800304a:	4a94      	ldr	r2, [pc, #592]	; (800329c <HAL_GPIO_Init+0x2ac>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d04c      	beq.n	80030ea <HAL_GPIO_Init+0xfa>
 8003050:	4a92      	ldr	r2, [pc, #584]	; (800329c <HAL_GPIO_Init+0x2ac>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d863      	bhi.n	800311e <HAL_GPIO_Init+0x12e>
 8003056:	4a92      	ldr	r2, [pc, #584]	; (80032a0 <HAL_GPIO_Init+0x2b0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d046      	beq.n	80030ea <HAL_GPIO_Init+0xfa>
 800305c:	4a90      	ldr	r2, [pc, #576]	; (80032a0 <HAL_GPIO_Init+0x2b0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d85d      	bhi.n	800311e <HAL_GPIO_Init+0x12e>
 8003062:	2b12      	cmp	r3, #18
 8003064:	d82a      	bhi.n	80030bc <HAL_GPIO_Init+0xcc>
 8003066:	2b12      	cmp	r3, #18
 8003068:	d859      	bhi.n	800311e <HAL_GPIO_Init+0x12e>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_GPIO_Init+0x80>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	080030eb 	.word	0x080030eb
 8003074:	080030c5 	.word	0x080030c5
 8003078:	080030d7 	.word	0x080030d7
 800307c:	08003119 	.word	0x08003119
 8003080:	0800311f 	.word	0x0800311f
 8003084:	0800311f 	.word	0x0800311f
 8003088:	0800311f 	.word	0x0800311f
 800308c:	0800311f 	.word	0x0800311f
 8003090:	0800311f 	.word	0x0800311f
 8003094:	0800311f 	.word	0x0800311f
 8003098:	0800311f 	.word	0x0800311f
 800309c:	0800311f 	.word	0x0800311f
 80030a0:	0800311f 	.word	0x0800311f
 80030a4:	0800311f 	.word	0x0800311f
 80030a8:	0800311f 	.word	0x0800311f
 80030ac:	0800311f 	.word	0x0800311f
 80030b0:	0800311f 	.word	0x0800311f
 80030b4:	080030cd 	.word	0x080030cd
 80030b8:	080030e1 	.word	0x080030e1
 80030bc:	4a79      	ldr	r2, [pc, #484]	; (80032a4 <HAL_GPIO_Init+0x2b4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030c2:	e02c      	b.n	800311e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	623b      	str	r3, [r7, #32]
          break;
 80030ca:	e029      	b.n	8003120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	3304      	adds	r3, #4
 80030d2:	623b      	str	r3, [r7, #32]
          break;
 80030d4:	e024      	b.n	8003120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	3308      	adds	r3, #8
 80030dc:	623b      	str	r3, [r7, #32]
          break;
 80030de:	e01f      	b.n	8003120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	330c      	adds	r3, #12
 80030e6:	623b      	str	r3, [r7, #32]
          break;
 80030e8:	e01a      	b.n	8003120 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030f2:	2304      	movs	r3, #4
 80030f4:	623b      	str	r3, [r7, #32]
          break;
 80030f6:	e013      	b.n	8003120 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003100:	2308      	movs	r3, #8
 8003102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	611a      	str	r2, [r3, #16]
          break;
 800310a:	e009      	b.n	8003120 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800310c:	2308      	movs	r3, #8
 800310e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	615a      	str	r2, [r3, #20]
          break;
 8003116:	e003      	b.n	8003120 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
          break;
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x130>
          break;
 800311e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2bff      	cmp	r3, #255	; 0xff
 8003124:	d801      	bhi.n	800312a <HAL_GPIO_Init+0x13a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	e001      	b.n	800312e <HAL_GPIO_Init+0x13e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2bff      	cmp	r3, #255	; 0xff
 8003134:	d802      	bhi.n	800313c <HAL_GPIO_Init+0x14c>
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	e002      	b.n	8003142 <HAL_GPIO_Init+0x152>
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	3b08      	subs	r3, #8
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	210f      	movs	r1, #15
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	401a      	ands	r2, r3
 8003154:	6a39      	ldr	r1, [r7, #32]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	431a      	orrs	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80b1 	beq.w	80032d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_GPIO_Init+0x2b8>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4a4c      	ldr	r2, [pc, #304]	; (80032a8 <HAL_GPIO_Init+0x2b8>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6193      	str	r3, [r2, #24]
 800317c:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_GPIO_Init+0x2b8>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003188:	4a48      	ldr	r2, [pc, #288]	; (80032ac <HAL_GPIO_Init+0x2bc>)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4013      	ands	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a40      	ldr	r2, [pc, #256]	; (80032b0 <HAL_GPIO_Init+0x2c0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d013      	beq.n	80031dc <HAL_GPIO_Init+0x1ec>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3f      	ldr	r2, [pc, #252]	; (80032b4 <HAL_GPIO_Init+0x2c4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00d      	beq.n	80031d8 <HAL_GPIO_Init+0x1e8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a3e      	ldr	r2, [pc, #248]	; (80032b8 <HAL_GPIO_Init+0x2c8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <HAL_GPIO_Init+0x1e4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a3d      	ldr	r2, [pc, #244]	; (80032bc <HAL_GPIO_Init+0x2cc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_GPIO_Init+0x1e0>
 80031cc:	2303      	movs	r3, #3
 80031ce:	e006      	b.n	80031de <HAL_GPIO_Init+0x1ee>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e004      	b.n	80031de <HAL_GPIO_Init+0x1ee>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e002      	b.n	80031de <HAL_GPIO_Init+0x1ee>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_GPIO_Init+0x1ee>
 80031dc:	2300      	movs	r3, #0
 80031de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e0:	f002 0203 	and.w	r2, r2, #3
 80031e4:	0092      	lsls	r2, r2, #2
 80031e6:	4093      	lsls	r3, r2
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031ee:	492f      	ldr	r1, [pc, #188]	; (80032ac <HAL_GPIO_Init+0x2bc>)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	492c      	ldr	r1, [pc, #176]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	43db      	mvns	r3, r3
 800321e:	4928      	ldr	r1, [pc, #160]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003220:	4013      	ands	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4922      	ldr	r1, [pc, #136]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	43db      	mvns	r3, r3
 8003246:	491e      	ldr	r1, [pc, #120]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003248:	4013      	ands	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d006      	beq.n	8003266 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4918      	ldr	r1, [pc, #96]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
 8003264:	e006      	b.n	8003274 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	43db      	mvns	r3, r3
 800326e:	4914      	ldr	r1, [pc, #80]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003270:	4013      	ands	r3, r2
 8003272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d021      	beq.n	80032c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_GPIO_Init+0x2d0>)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	60cb      	str	r3, [r1, #12]
 800328c:	e021      	b.n	80032d2 <HAL_GPIO_Init+0x2e2>
 800328e:	bf00      	nop
 8003290:	10320000 	.word	0x10320000
 8003294:	10310000 	.word	0x10310000
 8003298:	10220000 	.word	0x10220000
 800329c:	10210000 	.word	0x10210000
 80032a0:	10120000 	.word	0x10120000
 80032a4:	10110000 	.word	0x10110000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40010800 	.word	0x40010800
 80032b4:	40010c00 	.word	0x40010c00
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_GPIO_Init+0x304>)
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	4909      	ldr	r1, [pc, #36]	; (80032f4 <HAL_GPIO_Init+0x304>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	3301      	adds	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	fa22 f303 	lsr.w	r3, r2, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f47f ae8e 	bne.w	8003004 <HAL_GPIO_Init+0x14>
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	372c      	adds	r7, #44	; 0x2c
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40010400 	.word	0x40010400

080032f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003308:	787b      	ldrb	r3, [r7, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	b08b      	sub	sp, #44	; 0x2c
 800332c:	af06      	add	r7, sp, #24
 800332e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0fd      	b.n	8003536 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f006 fd20 	bl	8009d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2203      	movs	r2, #3
 8003358:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f002 fa5f 	bl	8005824 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	687e      	ldr	r6, [r7, #4]
 800336e:	466d      	mov	r5, sp
 8003370:	f106 0410 	add.w	r4, r6, #16
 8003374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	1d33      	adds	r3, r6, #4
 800337e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003380:	6838      	ldr	r0, [r7, #0]
 8003382:	f002 fa29 	bl	80057d8 <USB_CoreInit>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0ce      	b.n	8003536 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fa5a 	bl	8005858 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e04c      	b.n	8003444 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	3301      	adds	r3, #1
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	b298      	uxth	r0, r3
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	3336      	adds	r3, #54	; 0x36
 80033e8:	4602      	mov	r2, r0
 80033ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	3303      	adds	r3, #3
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	3338      	adds	r3, #56	; 0x38
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	333c      	adds	r3, #60	; 0x3c
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	3340      	adds	r3, #64	; 0x40
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3301      	adds	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d3ad      	bcc.n	80033aa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	e044      	b.n	80034de <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	3301      	adds	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3b5      	bcc.n	8003454 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	687e      	ldr	r6, [r7, #4]
 80034f0:	466d      	mov	r5, sp
 80034f2:	f106 0410 	add.w	r4, r6, #16
 80034f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	602b      	str	r3, [r5, #0]
 80034fe:	1d33      	adds	r3, r6, #4
 8003500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003502:	6838      	ldr	r0, [r7, #0]
 8003504:	f002 f9b4 	bl	8005870 <USB_DevInit>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e00d      	b.n	8003536 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f004 fe66 	bl	8008200 <USB_DevDisconnect>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800353e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_PCD_Start+0x16>
 8003550:	2302      	movs	r3, #2
 8003552:	e016      	b.n	8003582 <HAL_PCD_Start+0x44>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f002 f949 	bl	80057f8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003566:	2101      	movs	r1, #1
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f006 fe6a 	bl	800a242 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f004 fe3a 	bl	80081ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b088      	sub	sp, #32
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f004 fe3c 	bl	8008214 <USB_ReadInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a6:	d102      	bne.n	80035ae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fb48 	bl	8003c3e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 fe2e 	bl	8008214 <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c2:	d112      	bne.n	80035ea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	b292      	uxth	r2, r2
 80035d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f006 fc54 	bl	8009e8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035e2:	2100      	movs	r1, #0
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f923 	bl	8003830 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 fe10 	bl	8008214 <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fe:	d10b      	bne.n	8003618 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003608:	b29a      	uxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003612:	b292      	uxth	r2, r2
 8003614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f004 fdf9 	bl	8008214 <USB_ReadInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362c:	d10b      	bne.n	8003646 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003640:	b292      	uxth	r2, r2
 8003642:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f004 fde2 	bl	8008214 <USB_ReadInterrupts>
 8003650:	4603      	mov	r3, r0
 8003652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365a:	d126      	bne.n	80036aa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003664:	b29a      	uxth	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	b292      	uxth	r2, r2
 8003670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0208 	bic.w	r2, r2, #8
 8003686:	b292      	uxth	r2, r2
 8003688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f006 fc35 	bl	8009efc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800369a:	b29a      	uxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036a4:	b292      	uxth	r2, r2
 80036a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 fdb0 	bl	8008214 <USB_ReadInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036be:	f040 8082 	bne.w	80037c6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e010      	b.n	80036ea <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	441a      	add	r2, r3
 80036d4:	7ffb      	ldrb	r3, [r7, #31]
 80036d6:	8812      	ldrh	r2, [r2, #0]
 80036d8:	b292      	uxth	r2, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	3320      	adds	r3, #32
 80036de:	443b      	add	r3, r7
 80036e0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	3301      	adds	r3, #1
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	7ffb      	ldrb	r3, [r7, #31]
 80036ec:	2b07      	cmp	r3, #7
 80036ee:	d9eb      	bls.n	80036c8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	b292      	uxth	r2, r2
 8003704:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	b292      	uxth	r2, r2
 800371c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003720:	bf00      	nop
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800372a:	b29b      	uxth	r3, r3
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f6      	beq.n	8003722 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	b292      	uxth	r2, r2
 8003748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800374c:	2300      	movs	r3, #0
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e00f      	b.n	8003772 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003752:	7ffb      	ldrb	r3, [r7, #31]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	4611      	mov	r1, r2
 800375a:	7ffa      	ldrb	r2, [r7, #31]
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	440a      	add	r2, r1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	3320      	adds	r3, #32
 8003764:	443b      	add	r3, r7
 8003766:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800376a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	3301      	adds	r3, #1
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	7ffb      	ldrb	r3, [r7, #31]
 8003774:	2b07      	cmp	r3, #7
 8003776:	d9ec      	bls.n	8003752 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	b292      	uxth	r2, r2
 800378c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	b292      	uxth	r2, r2
 80037a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0204 	orr.w	r2, r2, #4
 80037ba:	b292      	uxth	r2, r2
 80037bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f006 fb81 	bl	8009ec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f004 fd22 	bl	8008214 <USB_ReadInterrupts>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037da:	d10e      	bne.n	80037fa <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037ee:	b292      	uxth	r2, r2
 80037f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f006 fb3a 	bl	8009e6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fd08 	bl	8008214 <USB_ReadInterrupts>
 8003804:	4603      	mov	r3, r0
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d10b      	bne.n	8003828 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003822:	b292      	uxth	r2, r2
 8003824:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003828:	bf00      	nop
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_PCD_SetAddress+0x1a>
 8003846:	2302      	movs	r3, #2
 8003848:	e013      	b.n	8003872 <HAL_PCD_SetAddress+0x42>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f004 fcaf 	bl	80081c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	4608      	mov	r0, r1
 8003884:	4611      	mov	r1, r2
 8003886:	461a      	mov	r2, r3
 8003888:	4603      	mov	r3, r0
 800388a:	70fb      	strb	r3, [r7, #3]
 800388c:	460b      	mov	r3, r1
 800388e:	803b      	strh	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	da0e      	bge.n	80038be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	705a      	strb	r2, [r3, #1]
 80038bc:	e00e      	b.n	80038dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	f003 0207 	and.w	r2, r3, #7
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038e8:	883a      	ldrh	r2, [r7, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	78ba      	ldrb	r2, [r7, #2]
 80038f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003906:	78bb      	ldrb	r3, [r7, #2]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d102      	bne.n	8003912 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_PCD_EP_Open+0xa6>
 800391c:	2302      	movs	r3, #2
 800391e:	e00e      	b.n	800393e <HAL_PCD_EP_Open+0xc4>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	4618      	mov	r0, r3
 8003930:	f001 ffbe 	bl	80058b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800393c:	7afb      	ldrb	r3, [r7, #11]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003956:	2b00      	cmp	r3, #0
 8003958:	da0e      	bge.n	8003978 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	705a      	strb	r2, [r3, #1]
 8003976:	e00e      	b.n	8003996 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 0207 	and.w	r2, r3, #7
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	b2da      	uxtb	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_PCD_EP_Close+0x6a>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e00e      	b.n	80039ce <HAL_PCD_EP_Close+0x88>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68f9      	ldr	r1, [r7, #12]
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 fae0 	bl	8005f84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	460b      	mov	r3, r1
 80039e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	f003 0207 	and.w	r2, r3, #7
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2200      	movs	r2, #0
 8003a14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a16:	7afb      	ldrb	r3, [r7, #11]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a22:	7afb      	ldrb	r3, [r7, #11]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6979      	ldr	r1, [r7, #20]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f002 fc92 	bl	800635c <USB_EPStartXfer>
 8003a38:	e005      	b.n	8003a46 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6979      	ldr	r1, [r7, #20]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f002 fc8b 	bl	800635c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a9c:	7afb      	ldrb	r3, [r7, #11]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aa8:	7afb      	ldrb	r3, [r7, #11]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6979      	ldr	r1, [r7, #20]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f002 fc4f 	bl	800635c <USB_EPStartXfer>
 8003abe:	e005      	b.n	8003acc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6979      	ldr	r1, [r7, #20]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f002 fc48 	bl	800635c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 0207 	and.w	r2, r3, #7
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d901      	bls.n	8003af4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e04c      	b.n	8003b8e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da0e      	bge.n	8003b1a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	705a      	strb	r2, [r3, #1]
 8003b18:	e00c      	b.n	8003b34 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_PCD_EP_SetStall+0x7e>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e01c      	b.n	8003b8e <HAL_PCD_EP_SetStall+0xb8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68f9      	ldr	r1, [r7, #12]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 fa32 	bl	8007fcc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d108      	bne.n	8003b84 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f004 fb57 	bl	8008232 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d901      	bls.n	8003bb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e040      	b.n	8003c36 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	da0e      	bge.n	8003bda <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	705a      	strb	r2, [r3, #1]
 8003bd8:	e00e      	b.n	8003bf8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 0207 	and.w	r2, r3, #7
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_PCD_EP_ClrStall+0x82>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e00e      	b.n	8003c36 <HAL_PCD_EP_ClrStall+0xa0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68f9      	ldr	r1, [r7, #12]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f004 fa20 	bl	800806c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b08e      	sub	sp, #56	; 0x38
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c46:	e2ec      	b.n	8004222 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c50:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003c5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 8161 	bne.w	8003f2a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d152      	bne.n	8003d18 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	81fb      	strh	r3, [r7, #14]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3328      	adds	r3, #40	; 0x28
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	441a      	add	r2, r3
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f006 f8ae 	bl	8009e3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 829b 	beq.w	8004222 <PCD_EP_ISR_Handler+0x5e4>
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 8296 	bne.w	8004222 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	b292      	uxth	r2, r2
 8003d0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d16:	e284      	b.n	8004222 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d034      	beq.n	8003d9c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	3306      	adds	r3, #6
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f004 faae 	bl	80082d2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d82:	4013      	ands	r3, r2
 8003d84:	823b      	strh	r3, [r7, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	8a3a      	ldrh	r2, [r7, #16]
 8003d8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d90:	b292      	uxth	r2, r2
 8003d92:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f006 f823 	bl	8009de0 <HAL_PCD_SetupStageCallback>
 8003d9a:	e242      	b.n	8004222 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d9c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f280 823e 	bge.w	8004222 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003db2:	4013      	ands	r3, r2
 8003db4:	83bb      	strh	r3, [r7, #28]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	8bba      	ldrh	r2, [r7, #28]
 8003dbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3306      	adds	r3, #6
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d019      	beq.n	8003e2c <PCD_EP_ISR_Handler+0x1ee>
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	6959      	ldr	r1, [r3, #20]
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f004 fa5e 	bl	80082d2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	441a      	add	r2, r3
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e24:	2100      	movs	r1, #0
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f005 ffec 	bl	8009e04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 81f2 	bne.w	8004222 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	4413      	add	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d112      	bne.n	8003e8c <PCD_EP_ISR_Handler+0x24e>
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	e02f      	b.n	8003eec <PCD_EP_ISR_Handler+0x2ae>
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b3e      	cmp	r3, #62	; 0x3e
 8003e92:	d813      	bhi.n	8003ebc <PCD_EP_ISR_Handler+0x27e>
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <PCD_EP_ISR_Handler+0x270>
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	3301      	adds	r3, #1
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	029b      	lsls	r3, r3, #10
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	e017      	b.n	8003eec <PCD_EP_ISR_Handler+0x2ae>
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <PCD_EP_ISR_Handler+0x298>
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	029b      	lsls	r3, r3, #10
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efc:	827b      	strh	r3, [r7, #18]
 8003efe:	8a7b      	ldrh	r3, [r7, #18]
 8003f00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f04:	827b      	strh	r3, [r7, #18]
 8003f06:	8a7b      	ldrh	r3, [r7, #18]
 8003f08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f0c:	827b      	strh	r3, [r7, #18]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	8a7b      	ldrh	r3, [r7, #18]
 8003f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	8013      	strh	r3, [r2, #0]
 8003f28:	e17b      	b.n	8004222 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f3c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f280 80ea 	bge.w	800411a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f74:	b292      	uxth	r2, r2
 8003f76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f78:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	7b1b      	ldrb	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d122      	bne.n	8003fdc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	3306      	adds	r3, #6
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fbe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003fc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8087 	beq.w	80040d6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	6959      	ldr	r1, [r3, #20]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	88da      	ldrh	r2, [r3, #6]
 8003fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fd6:	f004 f97c 	bl	80082d2 <USB_ReadPMA>
 8003fda:	e07c      	b.n	80040d6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	78db      	ldrb	r3, [r3, #3]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d108      	bne.n	8003ff6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003fe4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f927 	bl	800423e <HAL_PCD_EP_DB_Receive>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003ff4:	e06f      	b.n	80040d6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004010:	847b      	strh	r3, [r7, #34]	; 0x22
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	441a      	add	r2, r3
 8004020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800402a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004032:	b29b      	uxth	r3, r3
 8004034:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d021      	beq.n	8004094 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004058:	b29b      	uxth	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	3302      	adds	r3, #2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004078:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800407a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800407c:	2b00      	cmp	r3, #0
 800407e:	d02a      	beq.n	80040d6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	6959      	ldr	r1, [r3, #20]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	891a      	ldrh	r2, [r3, #8]
 800408c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800408e:	f004 f920 	bl	80082d2 <USB_ReadPMA>
 8004092:	e020      	b.n	80040d6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409c:	b29b      	uxth	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	3306      	adds	r3, #6
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040bc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80040be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	6959      	ldr	r1, [r3, #20]
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	895a      	ldrh	r2, [r3, #10]
 80040d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040d2:	f004 f8fe 	bl	80082d2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040dc:	441a      	add	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040e8:	441a      	add	r2, r3
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <PCD_EP_ISR_Handler+0x4c2>
 80040f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d206      	bcs.n	800410e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f005 fe7c 	bl	8009e04 <HAL_PCD_DataOutStageCallback>
 800410c:	e005      	b.n	800411a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f002 f921 	bl	800635c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800411a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b00      	cmp	r3, #0
 8004122:	d07e      	beq.n	8004222 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004124:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	843b      	strh	r3, [r7, #32]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	8c3b      	ldrh	r3, [r7, #32]
 8004164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416c:	b29b      	uxth	r3, r3
 800416e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	78db      	ldrb	r3, [r3, #3]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d00c      	beq.n	8004192 <PCD_EP_ISR_Handler+0x554>
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	78db      	ldrb	r3, [r3, #3]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004184:	2b02      	cmp	r3, #2
 8004186:	d146      	bne.n	8004216 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004188:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d141      	bne.n	8004216 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	3302      	adds	r3, #2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ba:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	8bfb      	ldrh	r3, [r7, #30]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d906      	bls.n	80041d4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	8bfb      	ldrh	r3, [r7, #30]
 80041cc:	1ad2      	subs	r2, r2, r3
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	619a      	str	r2, [r3, #24]
 80041d2:	e002      	b.n	80041da <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	2200      	movs	r2, #0
 80041d8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f005 fe26 	bl	8009e3a <HAL_PCD_DataInStageCallback>
 80041ee:	e018      	b.n	8004222 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	8bfb      	ldrh	r3, [r7, #30]
 80041f6:	441a      	add	r2, r3
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	8bfb      	ldrh	r3, [r7, #30]
 8004202:	441a      	add	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800420e:	4618      	mov	r0, r3
 8004210:	f002 f8a4 	bl	800635c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004214:	e005      	b.n	8004222 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004216:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004218:	461a      	mov	r2, r3
 800421a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f91b 	bl	8004458 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800422a:	b29b      	uxth	r3, r3
 800422c:	b21b      	sxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	f6ff ad0a 	blt.w	8003c48 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3738      	adds	r7, #56	; 0x38
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b088      	sub	sp, #32
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	4613      	mov	r3, r2
 800424a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d07e      	beq.n	8004354 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	3302      	adds	r3, #2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	8b7b      	ldrh	r3, [r7, #26]
 8004286:	429a      	cmp	r2, r3
 8004288:	d306      	bcc.n	8004298 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	8b7b      	ldrh	r3, [r7, #26]
 8004290:	1ad2      	subs	r2, r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	619a      	str	r2, [r3, #24]
 8004296:	e002      	b.n	800429e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2200      	movs	r2, #0
 800429c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d123      	bne.n	80042ee <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c0:	833b      	strh	r3, [r7, #24]
 80042c2:	8b3b      	ldrh	r3, [r7, #24]
 80042c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042c8:	833b      	strh	r3, [r7, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	8b3b      	ldrh	r3, [r7, #24]
 80042da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01f      	beq.n	8004338 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	82fb      	strh	r3, [r7, #22]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	8afb      	ldrh	r3, [r7, #22]
 8004324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004338:	8b7b      	ldrh	r3, [r7, #26]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8087 	beq.w	800444e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6959      	ldr	r1, [r3, #20]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	891a      	ldrh	r2, [r3, #8]
 800434c:	8b7b      	ldrh	r3, [r7, #26]
 800434e:	f003 ffc0 	bl	80082d2 <USB_ReadPMA>
 8004352:	e07c      	b.n	800444e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435c:	b29b      	uxth	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	3306      	adds	r3, #6
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800437c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	8b7b      	ldrh	r3, [r7, #26]
 8004384:	429a      	cmp	r2, r3
 8004386:	d306      	bcc.n	8004396 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	8b7b      	ldrh	r3, [r7, #26]
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	619a      	str	r2, [r3, #24]
 8004394:	e002      	b.n	800439c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2200      	movs	r2, #0
 800439a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d123      	bne.n	80043ec <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	83fb      	strh	r3, [r7, #30]
 80043c0:	8bfb      	ldrh	r3, [r7, #30]
 80043c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043c6:	83fb      	strh	r3, [r7, #30]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	8bfb      	ldrh	r3, [r7, #30]
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d11f      	bne.n	8004436 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004410:	83bb      	strh	r3, [r7, #28]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	441a      	add	r2, r3
 8004420:	8bbb      	ldrh	r3, [r7, #28]
 8004422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004432:	b29b      	uxth	r3, r3
 8004434:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004436:	8b7b      	ldrh	r3, [r7, #26]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6959      	ldr	r1, [r3, #20]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	895a      	ldrh	r2, [r3, #10]
 8004448:	8b7b      	ldrh	r3, [r7, #26]
 800444a:	f003 ff42 	bl	80082d2 <USB_ReadPMA>
    }
  }

  return count;
 800444e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b0a2      	sub	sp, #136	; 0x88
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 81c7 	beq.w	8004800 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	3302      	adds	r3, #2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d907      	bls.n	80044ba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044b2:	1ad2      	subs	r2, r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	619a      	str	r2, [r3, #24]
 80044b8:	e002      	b.n	80044c0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f040 80b9 	bne.w	800463c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d126      	bne.n	8004520 <HAL_PCD_EP_DB_Transmit+0xc8>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	4413      	add	r3, r2
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	011a      	lsls	r2, r3, #4
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	4413      	add	r3, r2
 80044f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004504:	b29a      	uxth	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004518:	b29a      	uxth	r2, r3
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	e01a      	b.n	8004556 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d116      	bne.n	8004556 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004536:	b29b      	uxth	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	4413      	add	r3, r2
 800453e:	633b      	str	r3, [r7, #48]	; 0x30
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	011a      	lsls	r2, r3, #4
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	4413      	add	r3, r2
 800454a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	2200      	movs	r2, #0
 8004554:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d126      	bne.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4413      	add	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	011a      	lsls	r2, r3, #4
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4413      	add	r3, r2
 8004586:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004596:	b29a      	uxth	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	e017      	b.n	80045e2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d113      	bne.n	80045e2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	4413      	add	r3, r2
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	011a      	lsls	r2, r3, #4
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	4413      	add	r3, r2
 80045d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2200      	movs	r2, #0
 80045e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	4619      	mov	r1, r3
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f005 fc26 	bl	8009e3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 82d4 	beq.w	8004ba2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	827b      	strh	r3, [r7, #18]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	441a      	add	r2, r3
 8004624:	8a7b      	ldrh	r3, [r7, #18]
 8004626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004636:	b29b      	uxth	r3, r3
 8004638:	8013      	strh	r3, [r2, #0]
 800463a:	e2b2      	b.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d021      	beq.n	800468a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004690:	2b01      	cmp	r3, #1
 8004692:	f040 8286 	bne.w	8004ba2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800469e:	441a      	add	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046ac:	441a      	add	r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d309      	bcc.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6a1a      	ldr	r2, [r3, #32]
 80046c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ca:	1ad2      	subs	r2, r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	621a      	str	r2, [r3, #32]
 80046d0:	e015      	b.n	80046fe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80046da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046e8:	e009      	b.n	80046fe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	785b      	ldrb	r3, [r3, #1]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d155      	bne.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	63bb      	str	r3, [r7, #56]	; 0x38
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004714:	b29b      	uxth	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	4413      	add	r3, r2
 800471c:	63bb      	str	r3, [r7, #56]	; 0x38
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	011a      	lsls	r2, r3, #4
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	4413      	add	r3, r2
 8004728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
 800472e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004730:	2b00      	cmp	r3, #0
 8004732:	d112      	bne.n	800475a <HAL_PCD_EP_DB_Transmit+0x302>
 8004734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800473e:	b29a      	uxth	r2, r3
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004752:	b29a      	uxth	r2, r3
 8004754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	e047      	b.n	80047ea <HAL_PCD_EP_DB_Transmit+0x392>
 800475a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475c:	2b3e      	cmp	r3, #62	; 0x3e
 800475e:	d811      	bhi.n	8004784 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	64bb      	str	r3, [r7, #72]	; 0x48
 8004766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004772:	3301      	adds	r3, #1
 8004774:	64bb      	str	r3, [r7, #72]	; 0x48
 8004776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004778:	b29b      	uxth	r3, r3
 800477a:	029b      	lsls	r3, r3, #10
 800477c:	b29a      	uxth	r2, r3
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	e032      	b.n	80047ea <HAL_PCD_EP_DB_Transmit+0x392>
 8004784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	64bb      	str	r3, [r7, #72]	; 0x48
 800478a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <HAL_PCD_EP_DB_Transmit+0x342>
 8004794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004796:	3b01      	subs	r3, #1
 8004798:	64bb      	str	r3, [r7, #72]	; 0x48
 800479a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479c:	b29b      	uxth	r3, r3
 800479e:	029b      	lsls	r3, r3, #10
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	e01b      	b.n	80047ea <HAL_PCD_EP_DB_Transmit+0x392>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d117      	bne.n	80047ea <HAL_PCD_EP_DB_Transmit+0x392>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	643b      	str	r3, [r7, #64]	; 0x40
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ce:	4413      	add	r3, r2
 80047d0:	643b      	str	r3, [r7, #64]	; 0x40
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	011a      	lsls	r2, r3, #4
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	4413      	add	r3, r2
 80047dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6959      	ldr	r1, [r3, #20]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	891a      	ldrh	r2, [r3, #8]
 80047f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f003 fd25 	bl	8008248 <USB_WritePMA>
 80047fe:	e1d0      	b.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004808:	b29b      	uxth	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	3306      	adds	r3, #6
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004828:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004834:	429a      	cmp	r2, r3
 8004836:	d307      	bcc.n	8004848 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	699a      	ldr	r2, [r3, #24]
 800483c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004840:	1ad2      	subs	r2, r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	619a      	str	r2, [r3, #24]
 8004846:	e002      	b.n	800484e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 80c4 	bne.w	80049e0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d126      	bne.n	80048ae <HAL_PCD_EP_DB_Transmit+0x456>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	4413      	add	r3, r2
 8004876:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	011a      	lsls	r2, r3, #4
 800487e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004880:	4413      	add	r3, r2
 8004882:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004886:	66bb      	str	r3, [r7, #104]	; 0x68
 8004888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004892:	b29a      	uxth	r2, r3
 8004894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	e01a      	b.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	785b      	ldrb	r3, [r3, #1]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d116      	bne.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	677b      	str	r3, [r7, #116]	; 0x74
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ca:	4413      	add	r3, r2
 80048cc:	677b      	str	r3, [r7, #116]	; 0x74
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	011a      	lsls	r2, r3, #4
 80048d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d6:	4413      	add	r3, r2
 80048d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048dc:	673b      	str	r3, [r7, #112]	; 0x70
 80048de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e0:	2200      	movs	r2, #0
 80048e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d12f      	bne.n	8004952 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004902:	b29b      	uxth	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800490a:	4413      	add	r3, r2
 800490c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	011a      	lsls	r2, r3, #4
 8004916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800491a:	4413      	add	r3, r2
 800491c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004930:	b29a      	uxth	r2, r3
 8004932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004948:	b29a      	uxth	r2, r3
 800494a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800494e:	801a      	strh	r2, [r3, #0]
 8004950:	e017      	b.n	8004982 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d113      	bne.n	8004982 <HAL_PCD_EP_DB_Transmit+0x52a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004962:	b29b      	uxth	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004968:	4413      	add	r3, r2
 800496a:	67bb      	str	r3, [r7, #120]	; 0x78
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	011a      	lsls	r2, r3, #4
 8004972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004974:	4413      	add	r3, r2
 8004976:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800497a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800497c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800497e:	2200      	movs	r2, #0
 8004980:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	4619      	mov	r1, r3
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f005 fa56 	bl	8009e3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004994:	2b00      	cmp	r3, #0
 8004996:	f040 8104 	bne.w	8004ba2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]
 80049de:	e0e0      	b.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d121      	bne.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	441a      	add	r2, r3
 8004a16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	f040 80b4 	bne.w	8004ba2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a42:	441a      	add	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a50:	441a      	add	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d309      	bcc.n	8004a76 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6e:	1ad2      	subs	r2, r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	621a      	str	r2, [r3, #32]
 8004a74:	e015      	b.n	8004aa2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a8c:	e009      	b.n	8004aa2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2200      	movs	r2, #0
 8004a98:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	667b      	str	r3, [r7, #100]	; 0x64
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d155      	bne.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x704>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac4:	4413      	add	r3, r2
 8004ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	011a      	lsls	r2, r3, #4
 8004ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ad6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d112      	bne.n	8004b04 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	e044      	b.n	8004b8e <HAL_PCD_EP_DB_Transmit+0x736>
 8004b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b06:	2b3e      	cmp	r3, #62	; 0x3e
 8004b08:	d811      	bhi.n	8004b2e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	029b      	lsls	r3, r3, #10
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	e02f      	b.n	8004b8e <HAL_PCD_EP_DB_Transmit+0x736>
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	657b      	str	r3, [r7, #84]	; 0x54
 8004b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b40:	3b01      	subs	r3, #1
 8004b42:	657b      	str	r3, [r7, #84]	; 0x54
 8004b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	e018      	b.n	8004b8e <HAL_PCD_EP_DB_Transmit+0x736>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d114      	bne.n	8004b8e <HAL_PCD_EP_DB_Transmit+0x736>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b72:	4413      	add	r3, r2
 8004b74:	667b      	str	r3, [r7, #100]	; 0x64
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	011a      	lsls	r2, r3, #4
 8004b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b7e:	4413      	add	r3, r2
 8004b80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b84:	663b      	str	r3, [r7, #96]	; 0x60
 8004b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b8c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6959      	ldr	r1, [r3, #20]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	895a      	ldrh	r2, [r3, #10]
 8004b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f003 fb53 	bl	8008248 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbc:	823b      	strh	r3, [r7, #16]
 8004bbe:	8a3b      	ldrh	r3, [r7, #16]
 8004bc0:	f083 0310 	eor.w	r3, r3, #16
 8004bc4:	823b      	strh	r3, [r7, #16]
 8004bc6:	8a3b      	ldrh	r3, [r7, #16]
 8004bc8:	f083 0320 	eor.w	r3, r3, #32
 8004bcc:	823b      	strh	r3, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	8a3b      	ldrh	r3, [r7, #16]
 8004bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3788      	adds	r7, #136	; 0x88
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	817b      	strh	r3, [r7, #10]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c0e:	897b      	ldrh	r3, [r7, #10]
 8004c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1a:	897b      	ldrh	r3, [r7, #10]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e009      	b.n	8004c46 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c32:	897a      	ldrh	r2, [r7, #10]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c46:	893b      	ldrh	r3, [r7, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	80da      	strh	r2, [r3, #6]
 8004c5a:	e00b      	b.n	8004c74 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e272      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8087 	beq.w	8004dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ca0:	4b92      	ldr	r3, [pc, #584]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d00c      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cac:	4b8f      	ldr	r3, [pc, #572]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d112      	bne.n	8004cde <HAL_RCC_OscConfig+0x5e>
 8004cb8:	4b8c      	ldr	r3, [pc, #560]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d10b      	bne.n	8004cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc6:	4b89      	ldr	r3, [pc, #548]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d06c      	beq.n	8004dac <HAL_RCC_OscConfig+0x12c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d168      	bne.n	8004dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e24c      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x76>
 8004ce8:	4b80      	ldr	r3, [pc, #512]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a7f      	ldr	r2, [pc, #508]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e02e      	b.n	8004d54 <HAL_RCC_OscConfig+0xd4>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x98>
 8004cfe:	4b7b      	ldr	r3, [pc, #492]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a7a      	ldr	r2, [pc, #488]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	4b78      	ldr	r3, [pc, #480]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a77      	ldr	r2, [pc, #476]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e01d      	b.n	8004d54 <HAL_RCC_OscConfig+0xd4>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0xbc>
 8004d22:	4b72      	ldr	r3, [pc, #456]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a71      	ldr	r2, [pc, #452]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6e      	ldr	r2, [pc, #440]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xd4>
 8004d3c:	4b6b      	ldr	r3, [pc, #428]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a6a      	ldr	r2, [pc, #424]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	4b68      	ldr	r3, [pc, #416]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a67      	ldr	r2, [pc, #412]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd f826 	bl	8001dac <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fd f822 	bl	8001dac <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e200      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b5d      	ldr	r3, [pc, #372]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0xe4>
 8004d82:	e014      	b.n	8004dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fd f812 	bl	8001dac <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fd f80e 	bl	8001dac <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e1ec      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	4b53      	ldr	r3, [pc, #332]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x10c>
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d063      	beq.n	8004e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dba:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dc6:	4b49      	ldr	r3, [pc, #292]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d11c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x18c>
 8004dd2:	4b46      	ldr	r3, [pc, #280]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	4b43      	ldr	r3, [pc, #268]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_RCC_OscConfig+0x176>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1c0      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b3d      	ldr	r3, [pc, #244]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4939      	ldr	r1, [pc, #228]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	e03a      	b.n	8004e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e14:	4b36      	ldr	r3, [pc, #216]	; (8004ef0 <HAL_RCC_OscConfig+0x270>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1a:	f7fc ffc7 	bl	8001dac <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fc ffc3 	bl	8001dac <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1a1      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e34:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b2a      	ldr	r3, [pc, #168]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4927      	ldr	r1, [pc, #156]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e56:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <HAL_RCC_OscConfig+0x270>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5c:	f7fc ffa6 	bl	8001dac <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e64:	f7fc ffa2 	bl	8001dac <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e180      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e76:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d03a      	beq.n	8004f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d019      	beq.n	8004eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e96:	4b17      	ldr	r3, [pc, #92]	; (8004ef4 <HAL_RCC_OscConfig+0x274>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9c:	f7fc ff86 	bl	8001dac <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7fc ff82 	bl	8001dac <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e160      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f000 fad8 	bl	8005478 <RCC_Delay>
 8004ec8:	e01c      	b.n	8004f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed0:	f7fc ff6c 	bl	8001dac <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed6:	e00f      	b.n	8004ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed8:	f7fc ff68 	bl	8001dac <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d908      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e146      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
 8004eea:	bf00      	nop
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	42420000 	.word	0x42420000
 8004ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	4b92      	ldr	r3, [pc, #584]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e9      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a6 	beq.w	800505e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f16:	4b8b      	ldr	r3, [pc, #556]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f22:	4b88      	ldr	r3, [pc, #544]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	4a87      	ldr	r2, [pc, #540]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	61d3      	str	r3, [r2, #28]
 8004f2e:	4b85      	ldr	r3, [pc, #532]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b82      	ldr	r3, [pc, #520]	; (8005148 <HAL_RCC_OscConfig+0x4c8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d118      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4a:	4b7f      	ldr	r3, [pc, #508]	; (8005148 <HAL_RCC_OscConfig+0x4c8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a7e      	ldr	r2, [pc, #504]	; (8005148 <HAL_RCC_OscConfig+0x4c8>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f56:	f7fc ff29 	bl	8001dac <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fc ff25 	bl	8001dac <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b64      	cmp	r3, #100	; 0x64
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e103      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	4b75      	ldr	r3, [pc, #468]	; (8005148 <HAL_RCC_OscConfig+0x4c8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x312>
 8004f84:	4b6f      	ldr	r3, [pc, #444]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4a6e      	ldr	r2, [pc, #440]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6213      	str	r3, [r2, #32]
 8004f90:	e02d      	b.n	8004fee <HAL_RCC_OscConfig+0x36e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x334>
 8004f9a:	4b6a      	ldr	r3, [pc, #424]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4a69      	ldr	r2, [pc, #420]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6213      	str	r3, [r2, #32]
 8004fa6:	4b67      	ldr	r3, [pc, #412]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	4a66      	ldr	r2, [pc, #408]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	6213      	str	r3, [r2, #32]
 8004fb2:	e01c      	b.n	8004fee <HAL_RCC_OscConfig+0x36e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x356>
 8004fbc:	4b61      	ldr	r3, [pc, #388]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a60      	ldr	r2, [pc, #384]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	f043 0304 	orr.w	r3, r3, #4
 8004fc6:	6213      	str	r3, [r2, #32]
 8004fc8:	4b5e      	ldr	r3, [pc, #376]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	4a5d      	ldr	r2, [pc, #372]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	6213      	str	r3, [r2, #32]
 8004fd4:	e00b      	b.n	8004fee <HAL_RCC_OscConfig+0x36e>
 8004fd6:	4b5b      	ldr	r3, [pc, #364]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a5a      	ldr	r2, [pc, #360]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	6213      	str	r3, [r2, #32]
 8004fe2:	4b58      	ldr	r3, [pc, #352]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	4a57      	ldr	r2, [pc, #348]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d015      	beq.n	8005022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff6:	f7fc fed9 	bl	8001dac <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffe:	f7fc fed5 	bl	8001dac <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f241 3288 	movw	r2, #5000	; 0x1388
 800500c:	4293      	cmp	r3, r2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e0b1      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005014:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0ee      	beq.n	8004ffe <HAL_RCC_OscConfig+0x37e>
 8005020:	e014      	b.n	800504c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005022:	f7fc fec3 	bl	8001dac <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005028:	e00a      	b.n	8005040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fc febf 	bl	8001dac <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f241 3288 	movw	r2, #5000	; 0x1388
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e09b      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005040:	4b40      	ldr	r3, [pc, #256]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ee      	bne.n	800502a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800504c:	7dfb      	ldrb	r3, [r7, #23]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d105      	bne.n	800505e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005052:	4b3c      	ldr	r3, [pc, #240]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	4a3b      	ldr	r2, [pc, #236]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800505c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8087 	beq.w	8005176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005068:	4b36      	ldr	r3, [pc, #216]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 030c 	and.w	r3, r3, #12
 8005070:	2b08      	cmp	r3, #8
 8005072:	d061      	beq.n	8005138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d146      	bne.n	800510a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507c:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_RCC_OscConfig+0x4cc>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005082:	f7fc fe93 	bl	8001dac <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508a:	f7fc fe8f 	bl	8001dac <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e06d      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800509c:	4b29      	ldr	r3, [pc, #164]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d108      	bne.n	80050c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050b2:	4b24      	ldr	r3, [pc, #144]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	4921      	ldr	r1, [pc, #132]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c4:	4b1f      	ldr	r3, [pc, #124]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a19      	ldr	r1, [r3, #32]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	430b      	orrs	r3, r1
 80050d6:	491b      	ldr	r1, [pc, #108]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050dc:	4b1b      	ldr	r3, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x4cc>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fc fe63 	bl	8001dac <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ea:	f7fc fe5f 	bl	8001dac <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e03d      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x46a>
 8005108:	e035      	b.n	8005176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <HAL_RCC_OscConfig+0x4cc>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005110:	f7fc fe4c 	bl	8001dac <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005118:	f7fc fe48 	bl	8001dac <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e026      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_OscConfig+0x4c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x498>
 8005136:	e01e      	b.n	8005176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e019      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
 8005144:	40021000 	.word	0x40021000
 8005148:	40007000 	.word	0x40007000
 800514c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_OscConfig+0x500>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	429a      	cmp	r2, r3
 8005162:	d106      	bne.n	8005172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d001      	beq.n	8005176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000

08005184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0d0      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b6a      	ldr	r3, [pc, #424]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d910      	bls.n	80051c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b67      	ldr	r3, [pc, #412]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 0207 	bic.w	r2, r3, #7
 80051ae:	4965      	ldr	r1, [pc, #404]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b63      	ldr	r3, [pc, #396]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0b8      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d020      	beq.n	8005216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e0:	4b59      	ldr	r3, [pc, #356]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a58      	ldr	r2, [pc, #352]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f8:	4b53      	ldr	r3, [pc, #332]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a52      	ldr	r2, [pc, #328]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005204:	4b50      	ldr	r3, [pc, #320]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	494d      	ldr	r1, [pc, #308]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d040      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d107      	bne.n	800523a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522a:	4b47      	ldr	r3, [pc, #284]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d115      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e07f      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b41      	ldr	r3, [pc, #260]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e073      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005252:	4b3d      	ldr	r3, [pc, #244]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e06b      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005262:	4b39      	ldr	r3, [pc, #228]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4936      	ldr	r1, [pc, #216]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005274:	f7fc fd9a 	bl	8001dac <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7fc fd96 	bl	8001dac <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	; 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e053      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 020c 	and.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d1eb      	bne.n	800527c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b27      	ldr	r3, [pc, #156]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d210      	bcs.n	80052d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b24      	ldr	r3, [pc, #144]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 0207 	bic.w	r2, r3, #7
 80052ba:	4922      	ldr	r1, [pc, #136]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b20      	ldr	r3, [pc, #128]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e032      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4916      	ldr	r1, [pc, #88]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052fe:	4b12      	ldr	r3, [pc, #72]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	490e      	ldr	r1, [pc, #56]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005312:	f000 f821 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 8005316:	4602      	mov	r2, r0
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	490a      	ldr	r1, [pc, #40]	; (800534c <HAL_RCC_ClockConfig+0x1c8>)
 8005324:	5ccb      	ldrb	r3, [r1, r3]
 8005326:	fa22 f303 	lsr.w	r3, r2, r3
 800532a:	4a09      	ldr	r2, [pc, #36]	; (8005350 <HAL_RCC_ClockConfig+0x1cc>)
 800532c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800532e:	4b09      	ldr	r3, [pc, #36]	; (8005354 <HAL_RCC_ClockConfig+0x1d0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fc fcf8 	bl	8001d28 <HAL_InitTick>

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40022000 	.word	0x40022000
 8005348:	40021000 	.word	0x40021000
 800534c:	0800b57c 	.word	0x0800b57c
 8005350:	20000028 	.word	0x20000028
 8005354:	2000002c 	.word	0x2000002c

08005358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005358:	b490      	push	{r4, r7}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800535e:	4b29      	ldr	r3, [pc, #164]	; (8005404 <HAL_RCC_GetSysClockFreq+0xac>)
 8005360:	1d3c      	adds	r4, r7, #4
 8005362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005368:	f240 2301 	movw	r3, #513	; 0x201
 800536c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	2300      	movs	r3, #0
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005382:	4b21      	ldr	r3, [pc, #132]	; (8005408 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b04      	cmp	r3, #4
 8005390:	d002      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x40>
 8005392:	2b08      	cmp	r3, #8
 8005394:	d003      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x46>
 8005396:	e02b      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005398:	4b1c      	ldr	r3, [pc, #112]	; (800540c <HAL_RCC_GetSysClockFreq+0xb4>)
 800539a:	623b      	str	r3, [r7, #32]
      break;
 800539c:	e02b      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	0c9b      	lsrs	r3, r3, #18
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	3328      	adds	r3, #40	; 0x28
 80053a8:	443b      	add	r3, r7
 80053aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d012      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053ba:	4b13      	ldr	r3, [pc, #76]	; (8005408 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	0c5b      	lsrs	r3, r3, #17
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	3328      	adds	r3, #40	; 0x28
 80053c6:	443b      	add	r3, r7
 80053c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	4a0e      	ldr	r2, [pc, #56]	; (800540c <HAL_RCC_GetSysClockFreq+0xb4>)
 80053d2:	fb03 f202 	mul.w	r2, r3, r2
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	e004      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4a0b      	ldr	r2, [pc, #44]	; (8005410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	623b      	str	r3, [r7, #32]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b06      	ldr	r3, [pc, #24]	; (800540c <HAL_RCC_GetSysClockFreq+0xb4>)
 80053f2:	623b      	str	r3, [r7, #32]
      break;
 80053f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f6:	6a3b      	ldr	r3, [r7, #32]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	; 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc90      	pop	{r4, r7}
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	0800b528 	.word	0x0800b528
 8005408:	40021000 	.word	0x40021000
 800540c:	007a1200 	.word	0x007a1200
 8005410:	003d0900 	.word	0x003d0900

08005414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <HAL_RCC_GetHCLKFreq+0x10>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	20000028 	.word	0x20000028

08005428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800542c:	f7ff fff2 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4903      	ldr	r1, [pc, #12]	; (800544c <HAL_RCC_GetPCLK1Freq+0x24>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	0800b58c 	.word	0x0800b58c

08005450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005454:	f7ff ffde 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	0adb      	lsrs	r3, r3, #11
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4903      	ldr	r1, [pc, #12]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	0800b58c 	.word	0x0800b58c

08005478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <RCC_Delay+0x34>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <RCC_Delay+0x38>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	0a5b      	lsrs	r3, r3, #9
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005494:	bf00      	nop
  }
  while (Delay --);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1e5a      	subs	r2, r3, #1
 800549a:	60fa      	str	r2, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f9      	bne.n	8005494 <RCC_Delay+0x1c>
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	20000028 	.word	0x20000028
 80054b0:	10624dd3 	.word	0x10624dd3

080054b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d07d      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054d0:	2300      	movs	r3, #0
 80054d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d4:	4b4f      	ldr	r3, [pc, #316]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10d      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e0:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	4a4b      	ldr	r2, [pc, #300]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ea:	61d3      	str	r3, [r2, #28]
 80054ec:	4b49      	ldr	r3, [pc, #292]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fc:	4b46      	ldr	r3, [pc, #280]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d118      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005508:	4b43      	ldr	r3, [pc, #268]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a42      	ldr	r2, [pc, #264]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800550e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005514:	f7fc fc4a 	bl	8001dac <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551a:	e008      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551c:	f7fc fc46 	bl	8001dac <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b64      	cmp	r3, #100	; 0x64
 8005528:	d901      	bls.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e06d      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552e:	4b3a      	ldr	r3, [pc, #232]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800553a:	4b36      	ldr	r3, [pc, #216]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005542:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02e      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d027      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005558:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005560:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005562:	4b2e      	ldr	r3, [pc, #184]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005568:	4b2c      	ldr	r3, [pc, #176]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800556e:	4a29      	ldr	r2, [pc, #164]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d014      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557e:	f7fc fc15 	bl	8001dac <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005584:	e00a      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005586:	f7fc fc11 	bl	8001dac <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f241 3288 	movw	r2, #5000	; 0x1388
 8005594:	4293      	cmp	r3, r2
 8005596:	d901      	bls.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e036      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559c:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0ee      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055a8:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4917      	ldr	r1, [pc, #92]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d105      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c0:	4b14      	ldr	r3, [pc, #80]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	4a13      	ldr	r2, [pc, #76]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	490b      	ldr	r1, [pc, #44]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f6:	4b07      	ldr	r3, [pc, #28]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	4904      	ldr	r1, [pc, #16]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005604:	4313      	orrs	r3, r2
 8005606:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000
 8005618:	40007000 	.word	0x40007000
 800561c:	42420440 	.word	0x42420440

08005620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e03f      	b.n	80056b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fc f9e4 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	; 0x24
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f829 	bl	80056bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056f6:	f023 030c 	bic.w	r3, r3, #12
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	430b      	orrs	r3, r1
 8005702:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <UART_SetConfig+0x114>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d103      	bne.n	800572c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005724:	f7ff fe94 	bl	8005450 <HAL_RCC_GetPCLK2Freq>
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	e002      	b.n	8005732 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800572c:	f7ff fe7c 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 8005730:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009a      	lsls	r2, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <UART_SetConfig+0x118>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	0119      	lsls	r1, r3, #4
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009a      	lsls	r2, r3, #2
 800575c:	441a      	add	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	fbb2 f2f3 	udiv	r2, r2, r3
 8005768:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <UART_SetConfig+0x118>)
 800576a:	fba3 0302 	umull	r0, r3, r3, r2
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	2064      	movs	r0, #100	; 0x64
 8005772:	fb00 f303 	mul.w	r3, r0, r3
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	3332      	adds	r3, #50	; 0x32
 800577c:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <UART_SetConfig+0x118>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005788:	4419      	add	r1, r3
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009a      	lsls	r2, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a0:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <UART_SetConfig+0x118>)
 80057a2:	fba3 0302 	umull	r0, r3, r3, r2
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	2064      	movs	r0, #100	; 0x64
 80057aa:	fb00 f303 	mul.w	r3, r0, r3
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	3332      	adds	r3, #50	; 0x32
 80057b4:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <UART_SetConfig+0x118>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	440a      	add	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40013800 	.word	0x40013800
 80057d4:	51eb851f 	.word	0x51eb851f

080057d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057d8:	b084      	sub	sp, #16
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	f107 0014 	add.w	r0, r7, #20
 80057e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	b004      	add	sp, #16
 80057f6:	4770      	bx	lr

080057f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005808:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800580c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	b29a      	uxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800582c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005830:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	b29b      	uxth	r3, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	b29b      	uxth	r3, r3
 8005842:	4013      	ands	r3, r2
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005870:	b084      	sub	sp, #16
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	f107 0014 	add.w	r0, r7, #20
 800587e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	b004      	add	sp, #16
 80058ae:	4770      	bx	lr

080058b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b09b      	sub	sp, #108	; 0x6c
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	78db      	ldrb	r3, [r3, #3]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d81f      	bhi.n	8005922 <USB_ActivateEndpoint+0x72>
 80058e2:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <USB_ActivateEndpoint+0x38>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	08005915 	.word	0x08005915
 80058f0:	0800592b 	.word	0x0800592b
 80058f4:	08005907 	.word	0x08005907
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005900:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005904:	e012      	b.n	800592c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005906:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800590a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800590e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005912:	e00b      	b.n	800592c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005914:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800591c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005920:	e004      	b.n	800592c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005928:	e000      	b.n	800592c <USB_ActivateEndpoint+0x7c>
      break;
 800592a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800593a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594a:	b29b      	uxth	r3, r3
 800594c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005964:	b29a      	uxth	r2, r3
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	441a      	add	r2, r3
 800597c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005990:	b29b      	uxth	r3, r3
 8005992:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	7b1b      	ldrb	r3, [r3, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 8149 	bne.w	8005c30 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 8084 	beq.w	8005ab0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4413      	add	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	011a      	lsls	r2, r3, #4
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	88db      	ldrh	r3, [r3, #6]
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	81fb      	strh	r3, [r7, #14]
 80059ea:	89fb      	ldrh	r3, [r7, #14]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <USB_ActivateEndpoint+0x17c>
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	81bb      	strh	r3, [r7, #12]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	89bb      	ldrh	r3, [r7, #12]
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	78db      	ldrb	r3, [r3, #3]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d020      	beq.n	8005a76 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4a:	813b      	strh	r3, [r7, #8]
 8005a4c:	893b      	ldrh	r3, [r7, #8]
 8005a4e:	f083 0320 	eor.w	r3, r3, #32
 8005a52:	813b      	strh	r3, [r7, #8]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	893b      	ldrh	r3, [r7, #8]
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]
 8005a74:	e27f      	b.n	8005f76 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8c:	817b      	strh	r3, [r7, #10]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	897b      	ldrh	r3, [r7, #10]
 8005a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	8013      	strh	r3, [r2, #0]
 8005aae:	e262      	b.n	8005f76 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	4413      	add	r3, r2
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	011a      	lsls	r2, r3, #4
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	88db      	ldrh	r3, [r3, #6]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	4413      	add	r3, r2
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d112      	bne.n	8005b36 <USB_ActivateEndpoint+0x286>
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	e02f      	b.n	8005b96 <USB_ActivateEndpoint+0x2e6>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3c:	d813      	bhi.n	8005b66 <USB_ActivateEndpoint+0x2b6>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	663b      	str	r3, [r7, #96]	; 0x60
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <USB_ActivateEndpoint+0x2a8>
 8005b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b54:	3301      	adds	r3, #1
 8005b56:	663b      	str	r3, [r7, #96]	; 0x60
 8005b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	029b      	lsls	r3, r3, #10
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	e017      	b.n	8005b96 <USB_ActivateEndpoint+0x2e6>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <USB_ActivateEndpoint+0x2d0>
 8005b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	83fb      	strh	r3, [r7, #30]
 8005ba4:	8bfb      	ldrh	r3, [r7, #30]
 8005ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01b      	beq.n	8005be6 <USB_ActivateEndpoint+0x336>
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	83bb      	strh	r3, [r7, #28]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	441a      	add	r2, r3
 8005bd0:	8bbb      	ldrh	r3, [r7, #28]
 8005bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfc:	837b      	strh	r3, [r7, #26]
 8005bfe:	8b7b      	ldrh	r3, [r7, #26]
 8005c00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c04:	837b      	strh	r3, [r7, #26]
 8005c06:	8b7b      	ldrh	r3, [r7, #26]
 8005c08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c0c:	837b      	strh	r3, [r7, #26]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	8b7b      	ldrh	r3, [r7, #26]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	e1a2      	b.n	8005f76 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	441a      	add	r2, r3
 8005c54:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c7c:	4413      	add	r3, r2
 8005c7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	011a      	lsls	r2, r3, #4
 8005c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	891b      	ldrh	r3, [r3, #8]
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb0:	4413      	add	r3, r2
 8005cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	011a      	lsls	r2, r3, #4
 8005cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	895b      	ldrh	r3, [r3, #10]
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f040 8091 	bne.w	8005e00 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005cec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01b      	beq.n	8005d2e <USB_ActivateEndpoint+0x47e>
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01b      	beq.n	8005d7e <USB_ActivateEndpoint+0x4ce>
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d94:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005da0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005da4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ddc:	867b      	strh	r3, [r7, #50]	; 0x32
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	441a      	add	r2, r3
 8005de8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	8013      	strh	r3, [r2, #0]
 8005dfe:	e0ba      	b.n	8005f76 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01d      	beq.n	8005e58 <USB_ActivateEndpoint+0x5a8>
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01d      	beq.n	8005eb0 <USB_ActivateEndpoint+0x600>
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	78db      	ldrb	r3, [r3, #3]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d024      	beq.n	8005f02 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ece:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ed2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ed6:	f083 0320 	eor.w	r3, r3, #32
 8005eda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	441a      	add	r2, r3
 8005ee8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	8013      	strh	r3, [r2, #0]
 8005f00:	e01d      	b.n	8005f3e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	376c      	adds	r7, #108	; 0x6c
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b08d      	sub	sp, #52	; 0x34
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	7b1b      	ldrb	r3, [r3, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f040 808e 	bne.w	80060b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d044      	beq.n	800602a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	81bb      	strh	r3, [r7, #12]
 8005fae:	89bb      	ldrh	r3, [r7, #12]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <USB_DeactivateEndpoint+0x6c>
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	817b      	strh	r3, [r7, #10]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	441a      	add	r2, r3
 8005fda:	897b      	ldrh	r3, [r7, #10]
 8005fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006006:	813b      	strh	r3, [r7, #8]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	893b      	ldrh	r3, [r7, #8]
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
 8006028:	e192      	b.n	8006350 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	827b      	strh	r3, [r7, #18]
 8006038:	8a7b      	ldrh	r3, [r7, #18]
 800603a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01b      	beq.n	800607a <USB_DeactivateEndpoint+0xf6>
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006058:	823b      	strh	r3, [r7, #16]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	8a3b      	ldrh	r3, [r7, #16]
 8006066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006076:	b29b      	uxth	r3, r3
 8006078:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	81fb      	strh	r3, [r7, #14]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	441a      	add	r2, r3
 800609c:	89fb      	ldrh	r3, [r7, #14]
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
 80060b2:	e14d      	b.n	8006350 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 80a5 	bne.w	8006208 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	843b      	strh	r3, [r7, #32]
 80060cc:	8c3b      	ldrh	r3, [r7, #32]
 80060ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01b      	beq.n	800610e <USB_DeactivateEndpoint+0x18a>
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ec:	83fb      	strh	r3, [r7, #30]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	441a      	add	r2, r3
 80060f8:	8bfb      	ldrh	r3, [r7, #30]
 80060fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610a:	b29b      	uxth	r3, r3
 800610c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	83bb      	strh	r3, [r7, #28]
 800611c:	8bbb      	ldrh	r3, [r7, #28]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01b      	beq.n	800615e <USB_DeactivateEndpoint+0x1da>
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	837b      	strh	r3, [r7, #26]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	8b7b      	ldrh	r3, [r7, #26]
 800614a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800615a:	b29b      	uxth	r3, r3
 800615c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	833b      	strh	r3, [r7, #24]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8b3b      	ldrh	r3, [r7, #24]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	82fb      	strh	r3, [r7, #22]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	8afb      	ldrh	r3, [r7, #22]
 80061ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e4:	82bb      	strh	r3, [r7, #20]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8abb      	ldrh	r3, [r7, #20]
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]
 8006206:	e0a3      	b.n	8006350 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01b      	beq.n	8006258 <USB_DeactivateEndpoint+0x2d4>
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006254:	b29b      	uxth	r3, r3
 8006256:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01b      	beq.n	80062a8 <USB_DeactivateEndpoint+0x324>
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	853b      	strh	r3, [r7, #40]	; 0x28
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006314:	b29b      	uxth	r3, r3
 8006316:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3734      	adds	r7, #52	; 0x34
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b0cc      	sub	sp, #304	; 0x130
 8006360:	af00      	add	r7, sp, #0
 8006362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006366:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800636a:	6018      	str	r0, [r3, #0]
 800636c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006374:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	2b01      	cmp	r3, #1
 8006384:	f041 817d 	bne.w	8007682 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699a      	ldr	r2, [r3, #24]
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d908      	bls.n	80063b6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80063b4:	e007      	b.n	80063c6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80063b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	7b1b      	ldrb	r3, [r3, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d152      	bne.n	800647c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6959      	ldr	r1, [r3, #20]
 80063e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	88da      	ldrh	r2, [r3, #6]
 80063ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80063fc:	6800      	ldr	r0, [r0, #0]
 80063fe:	f001 ff23 	bl	8008248 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006406:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800640a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800640e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006424:	b29b      	uxth	r3, r3
 8006426:	4619      	mov	r1, r3
 8006428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006430:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006434:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	440a      	add	r2, r1
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	011a      	lsls	r2, r3, #4
 800644c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006450:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4413      	add	r3, r2
 8006458:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800645c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006460:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646a:	b29a      	uxth	r2, r3
 800646c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006470:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	f001 b8b5 	b.w	80075e6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	78db      	ldrb	r3, [r3, #3]
 8006488:	2b02      	cmp	r3, #2
 800648a:	f040 84c6 	bne.w	8006e1a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800648e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6a1a      	ldr	r2, [r3, #32]
 800649a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	f240 8443 	bls.w	8006d32 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80064ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80064d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	441a      	add	r2, r3
 80064f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006518:	1ad2      	subs	r2, r2, r3
 800651a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 823e 	beq.w	80069ca <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006556:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800655a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 809a 	bne.w	80066a8 <USB_EPStartXfer+0x34c>
 8006574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006580:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006596:	b29b      	uxth	r3, r3
 8006598:	4619      	mov	r1, r3
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065a6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	440a      	add	r2, r1
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	011a      	lsls	r2, r3, #4
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d122      	bne.n	8006626 <USB_EPStartXfer+0x2ca>
 80065e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006616:	b29a      	uxth	r2, r3
 8006618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	e079      	b.n	800671a <USB_EPStartXfer+0x3be>
 8006626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662a:	2b3e      	cmp	r3, #62	; 0x3e
 800662c:	d81b      	bhi.n	8006666 <USB_EPStartXfer+0x30a>
 800662e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <USB_EPStartXfer+0x2f2>
 8006644:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006648:	3301      	adds	r3, #1
 800664a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800664e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006652:	b29b      	uxth	r3, r3
 8006654:	029b      	lsls	r3, r3, #10
 8006656:	b29a      	uxth	r2, r3
 8006658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	e059      	b.n	800671a <USB_EPStartXfer+0x3be>
 8006666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <USB_EPStartXfer+0x32a>
 800667c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006680:	3b01      	subs	r3, #1
 8006682:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800668a:	b29b      	uxth	r3, r3
 800668c:	029b      	lsls	r3, r3, #10
 800668e:	b29b      	uxth	r3, r3
 8006690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006698:	b29a      	uxth	r2, r3
 800669a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	e038      	b.n	800671a <USB_EPStartXfer+0x3be>
 80066a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d130      	bne.n	800671a <USB_EPStartXfer+0x3be>
 80066b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4619      	mov	r1, r3
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80066d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066d6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	440a      	add	r2, r1
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4413      	add	r3, r2
 80066fa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80066fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670c:	b29a      	uxth	r2, r3
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800671a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	895b      	ldrh	r3, [r3, #10]
 8006726:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800672a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6959      	ldr	r1, [r3, #20]
 8006736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673a:	b29b      	uxth	r3, r3
 800673c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006740:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006744:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006748:	6800      	ldr	r0, [r0, #0]
 800674a:	f001 fd7d 	bl	8008248 <USB_WritePMA>
            ep->xfer_buff += len;
 800674e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675e:	441a      	add	r2, r3
 8006760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800676c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a1a      	ldr	r2, [r3, #32]
 8006778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	429a      	cmp	r2, r3
 8006786:	d90f      	bls.n	80067a8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6a1a      	ldr	r2, [r3, #32]
 8006794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006798:	1ad2      	subs	r2, r2, r3
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	621a      	str	r2, [r3, #32]
 80067a6:	e00e      	b.n	80067c6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 809a 	bne.w	800690c <USB_EPStartXfer+0x5b0>
 80067d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80067e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067e4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	4619      	mov	r1, r3
 80067fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006802:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006806:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800680a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	440a      	add	r2, r1
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	011a      	lsls	r2, r3, #4
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4413      	add	r3, r2
 800682e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006836:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d122      	bne.n	800688a <USB_EPStartXfer+0x52e>
 8006844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006848:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006856:	b29a      	uxth	r2, r3
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	801a      	strh	r2, [r3, #0]
 8006864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006868:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006880:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	e083      	b.n	8006992 <USB_EPStartXfer+0x636>
 800688a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688e:	2b3e      	cmp	r3, #62	; 0x3e
 8006890:	d81b      	bhi.n	80068ca <USB_EPStartXfer+0x56e>
 8006892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800689c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <USB_EPStartXfer+0x556>
 80068a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068ac:	3301      	adds	r3, #1
 80068ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	029b      	lsls	r3, r3, #10
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	e063      	b.n	8006992 <USB_EPStartXfer+0x636>
 80068ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d104      	bne.n	80068ea <USB_EPStartXfer+0x58e>
 80068e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068e4:	3b01      	subs	r3, #1
 80068e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e042      	b.n	8006992 <USB_EPStartXfer+0x636>
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d13a      	bne.n	8006992 <USB_EPStartXfer+0x636>
 800691c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006920:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006924:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006928:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693e:	b29b      	uxth	r3, r3
 8006940:	4619      	mov	r1, r3
 8006942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006946:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800694a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800694e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	440a      	add	r2, r1
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	011a      	lsls	r2, r3, #4
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4413      	add	r3, r2
 8006972:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006984:	b29a      	uxth	r2, r3
 8006986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	891b      	ldrh	r3, [r3, #8]
 800699e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6959      	ldr	r1, [r3, #20]
 80069ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069c0:	6800      	ldr	r0, [r0, #0]
 80069c2:	f001 fc41 	bl	8008248 <USB_WritePMA>
 80069c6:	f000 be0e 	b.w	80075e6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d16d      	bne.n	8006ab6 <USB_EPStartXfer+0x75a>
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069fa:	4413      	add	r3, r2
 80069fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d112      	bne.n	8006a44 <USB_EPStartXfer+0x6e8>
 8006a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	e063      	b.n	8006b0c <USB_EPStartXfer+0x7b0>
 8006a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a48:	2b3e      	cmp	r3, #62	; 0x3e
 8006a4a:	d817      	bhi.n	8006a7c <USB_EPStartXfer+0x720>
 8006a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <USB_EPStartXfer+0x710>
 8006a62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a66:	3301      	adds	r3, #1
 8006a68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	029b      	lsls	r3, r3, #10
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a78:	801a      	strh	r2, [r3, #0]
 8006a7a:	e047      	b.n	8006b0c <USB_EPStartXfer+0x7b0>
 8006a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <USB_EPStartXfer+0x740>
 8006a92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a96:	3b01      	subs	r3, #1
 8006a98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	029b      	lsls	r3, r3, #10
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	e02a      	b.n	8006b0c <USB_EPStartXfer+0x7b0>
 8006ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	785b      	ldrb	r3, [r3, #1]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d122      	bne.n	8006b0c <USB_EPStartXfer+0x7b0>
 8006ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae6:	4413      	add	r3, r2
 8006ae8:	653b      	str	r3, [r7, #80]	; 0x50
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	011a      	lsls	r2, r3, #4
 8006af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	891b      	ldrh	r3, [r3, #8]
 8006b18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6959      	ldr	r1, [r3, #20]
 8006b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b32:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b36:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	f001 fb84 	bl	8008248 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b50:	441a      	add	r2, r3
 8006b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d90f      	bls.n	8006b9a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a1a      	ldr	r2, [r3, #32]
 8006b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8a:	1ad2      	subs	r2, r2, r3
 8006b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	621a      	str	r2, [r3, #32]
 8006b98:	e00e      	b.n	8006bb8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	785b      	ldrb	r3, [r3, #1]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d16d      	bne.n	8006cb0 <USB_EPStartXfer+0x954>
 8006bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	63bb      	str	r3, [r7, #56]	; 0x38
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	4413      	add	r3, r2
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d112      	bne.n	8006c3e <USB_EPStartXfer+0x8e2>
 8006c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	e05d      	b.n	8006cfa <USB_EPStartXfer+0x99e>
 8006c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c42:	2b3e      	cmp	r3, #62	; 0x3e
 8006c44:	d817      	bhi.n	8006c76 <USB_EPStartXfer+0x91a>
 8006c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <USB_EPStartXfer+0x90a>
 8006c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c60:	3301      	adds	r3, #1
 8006c62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	029b      	lsls	r3, r3, #10
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	e041      	b.n	8006cfa <USB_EPStartXfer+0x99e>
 8006c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d104      	bne.n	8006c96 <USB_EPStartXfer+0x93a>
 8006c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c90:	3b01      	subs	r3, #1
 8006c92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	029b      	lsls	r3, r3, #10
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cac:	801a      	strh	r2, [r3, #0]
 8006cae:	e024      	b.n	8006cfa <USB_EPStartXfer+0x99e>
 8006cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d11c      	bne.n	8006cfa <USB_EPStartXfer+0x99e>
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd4:	4413      	add	r3, r2
 8006cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	011a      	lsls	r2, r3, #4
 8006ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce8:	4413      	add	r3, r2
 8006cea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	895b      	ldrh	r3, [r3, #10]
 8006d06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6959      	ldr	r1, [r3, #20]
 8006d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d28:	6800      	ldr	r0, [r0, #0]
 8006d2a:	f001 fa8d 	bl	8008248 <USB_WritePMA>
 8006d2e:	f000 bc5a 	b.w	80075e6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d68:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	441a      	add	r2, r3
 8006d86:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dbe:	4413      	add	r3, r2
 8006dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	011a      	lsls	r2, r3, #4
 8006dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006de2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	891b      	ldrh	r3, [r3, #8]
 8006df0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6959      	ldr	r1, [r3, #20]
 8006e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e0a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e0e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e12:	6800      	ldr	r0, [r0, #0]
 8006e14:	f001 fa18 	bl	8008248 <USB_WritePMA>
 8006e18:	e3e5      	b.n	80075e6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e40:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6a1a      	ldr	r2, [r3, #32]
 8006e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e86:	1ad2      	subs	r2, r2, r3
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 81bc 	beq.w	8007234 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d16d      	bne.n	8006fb6 <USB_EPStartXfer+0xc5a>
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006efa:	4413      	add	r3, r2
 8006efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	011a      	lsls	r2, r3, #4
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0e:	4413      	add	r3, r2
 8006f10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f14:	677b      	str	r3, [r7, #116]	; 0x74
 8006f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d112      	bne.n	8006f44 <USB_EPStartXfer+0xbe8>
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f40:	801a      	strh	r2, [r3, #0]
 8006f42:	e060      	b.n	8007006 <USB_EPStartXfer+0xcaa>
 8006f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f48:	2b3e      	cmp	r3, #62	; 0x3e
 8006f4a:	d817      	bhi.n	8006f7c <USB_EPStartXfer+0xc20>
 8006f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <USB_EPStartXfer+0xc10>
 8006f62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f66:	3301      	adds	r3, #1
 8006f68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	029b      	lsls	r3, r3, #10
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f78:	801a      	strh	r2, [r3, #0]
 8006f7a:	e044      	b.n	8007006 <USB_EPStartXfer+0xcaa>
 8006f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <USB_EPStartXfer+0xc40>
 8006f92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f96:	3b01      	subs	r3, #1
 8006f98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	029b      	lsls	r3, r3, #10
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e027      	b.n	8007006 <USB_EPStartXfer+0xcaa>
 8006fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d11f      	bne.n	8007006 <USB_EPStartXfer+0xcaa>
 8006fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fdc:	4413      	add	r3, r2
 8006fde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	011a      	lsls	r2, r3, #4
 8006ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007000:	b29a      	uxth	r2, r3
 8007002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007004:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	895b      	ldrh	r3, [r3, #10]
 8007012:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6959      	ldr	r1, [r3, #20]
 8007022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007026:	b29b      	uxth	r3, r3
 8007028:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800702c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007030:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007034:	6800      	ldr	r0, [r0, #0]
 8007036:	f001 f907 	bl	8008248 <USB_WritePMA>
          ep->xfer_buff += len;
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704a:	441a      	add	r2, r3
 800704c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6a1a      	ldr	r2, [r3, #32]
 8007064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d90f      	bls.n	8007094 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a1a      	ldr	r2, [r3, #32]
 8007080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007084:	1ad2      	subs	r2, r2, r3
 8007086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	621a      	str	r2, [r3, #32]
 8007092:	e00e      	b.n	80070b2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80070a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80070b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 8295 	beq.w	80075e6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d16d      	bne.n	80071a8 <USB_EPStartXfer+0xe4c>
 80070cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070ec:	4413      	add	r3, r2
 80070ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80070f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	011a      	lsls	r2, r3, #4
 80070fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007100:	4413      	add	r3, r2
 8007102:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007106:	667b      	str	r3, [r7, #100]	; 0x64
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d112      	bne.n	8007136 <USB_EPStartXfer+0xdda>
 8007110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800711a:	b29a      	uxth	r2, r3
 800711c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712e:	b29a      	uxth	r2, r3
 8007130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	e063      	b.n	80071fe <USB_EPStartXfer+0xea2>
 8007136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713a:	2b3e      	cmp	r3, #62	; 0x3e
 800713c:	d817      	bhi.n	800716e <USB_EPStartXfer+0xe12>
 800713e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <USB_EPStartXfer+0xe02>
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007158:	3301      	adds	r3, #1
 800715a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800715e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007162:	b29b      	uxth	r3, r3
 8007164:	029b      	lsls	r3, r3, #10
 8007166:	b29a      	uxth	r2, r3
 8007168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e047      	b.n	80071fe <USB_EPStartXfer+0xea2>
 800716e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <USB_EPStartXfer+0xe32>
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007188:	3b01      	subs	r3, #1
 800718a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007192:	b29b      	uxth	r3, r3
 8007194:	029b      	lsls	r3, r3, #10
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	e02a      	b.n	80071fe <USB_EPStartXfer+0xea2>
 80071a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d122      	bne.n	80071fe <USB_EPStartXfer+0xea2>
 80071b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	673b      	str	r3, [r7, #112]	; 0x70
 80071c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071d8:	4413      	add	r3, r2
 80071da:	673b      	str	r3, [r7, #112]	; 0x70
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	011a      	lsls	r2, r3, #4
 80071ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071ec:	4413      	add	r3, r2
 80071ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	891b      	ldrh	r3, [r3, #8]
 800720a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800720e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6959      	ldr	r1, [r3, #20]
 800721a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721e:	b29b      	uxth	r3, r3
 8007220:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007224:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007228:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800722c:	6800      	ldr	r0, [r0, #0]
 800722e:	f001 f80b 	bl	8008248 <USB_WritePMA>
 8007232:	e1d8      	b.n	80075e6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d178      	bne.n	8007336 <USB_EPStartXfer+0xfda>
 8007244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007268:	4413      	add	r3, r2
 800726a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800726e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	011a      	lsls	r2, r3, #4
 800727c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007280:	4413      	add	r3, r2
 8007282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800728a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d116      	bne.n	80072c0 <USB_EPStartXfer+0xf64>
 8007292:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800729e:	b29a      	uxth	r2, r3
 80072a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a4:	801a      	strh	r2, [r3, #0]
 80072a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072bc:	801a      	strh	r2, [r3, #0]
 80072be:	e06b      	b.n	8007398 <USB_EPStartXfer+0x103c>
 80072c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c4:	2b3e      	cmp	r3, #62	; 0x3e
 80072c6:	d818      	bhi.n	80072fa <USB_EPStartXfer+0xf9e>
 80072c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80072d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <USB_EPStartXfer+0xf8c>
 80072de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80072e2:	3301      	adds	r3, #1
 80072e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80072e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	029b      	lsls	r3, r3, #10
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	e04e      	b.n	8007398 <USB_EPStartXfer+0x103c>
 80072fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007308:	f003 031f 	and.w	r3, r3, #31
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <USB_EPStartXfer+0xfbe>
 8007310:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007314:	3b01      	subs	r3, #1
 8007316:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800731a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800731e:	b29b      	uxth	r3, r3
 8007320:	029b      	lsls	r3, r3, #10
 8007322:	b29b      	uxth	r3, r3
 8007324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800732c:	b29a      	uxth	r2, r3
 800732e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	e030      	b.n	8007398 <USB_EPStartXfer+0x103c>
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	785b      	ldrb	r3, [r3, #1]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d128      	bne.n	8007398 <USB_EPStartXfer+0x103c>
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007362:	b29b      	uxth	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800736a:	4413      	add	r3, r2
 800736c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	011a      	lsls	r2, r3, #4
 800737e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007382:	4413      	add	r3, r2
 8007384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800738c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007390:	b29a      	uxth	r2, r3
 8007392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007396:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	891b      	ldrh	r3, [r3, #8]
 80073a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6959      	ldr	r1, [r3, #20]
 80073b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073be:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073c6:	6800      	ldr	r0, [r0, #0]
 80073c8:	f000 ff3e 	bl	8008248 <USB_WritePMA>
          ep->xfer_buff += len;
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695a      	ldr	r2, [r3, #20]
 80073d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073dc:	441a      	add	r2, r3
 80073de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80073ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a1a      	ldr	r2, [r3, #32]
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	429a      	cmp	r2, r3
 8007404:	d90f      	bls.n	8007426 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6a1a      	ldr	r2, [r3, #32]
 8007412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	621a      	str	r2, [r3, #32]
 8007424:	e00e      	b.n	8007444 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2200      	movs	r2, #0
 8007442:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80cc 	beq.w	80075e6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800744e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007452:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800745c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	785b      	ldrb	r3, [r3, #1]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d178      	bne.n	800755e <USB_EPStartXfer+0x1202>
 800746c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800747a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007488:	b29b      	uxth	r3, r3
 800748a:	461a      	mov	r2, r3
 800748c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007490:	4413      	add	r3, r2
 8007492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	011a      	lsls	r2, r3, #4
 80074a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074a8:	4413      	add	r3, r2
 80074aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d116      	bne.n	80074e8 <USB_EPStartXfer+0x118c>
 80074ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074de:	b29a      	uxth	r2, r3
 80074e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e064      	b.n	80075b2 <USB_EPStartXfer+0x1256>
 80074e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ec:	2b3e      	cmp	r3, #62	; 0x3e
 80074ee:	d818      	bhi.n	8007522 <USB_EPStartXfer+0x11c6>
 80074f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80074fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <USB_EPStartXfer+0x11b4>
 8007506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800750a:	3301      	adds	r3, #1
 800750c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007514:	b29b      	uxth	r3, r3
 8007516:	029b      	lsls	r3, r3, #10
 8007518:	b29a      	uxth	r2, r3
 800751a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	e047      	b.n	80075b2 <USB_EPStartXfer+0x1256>
 8007522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800752c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007530:	f003 031f 	and.w	r3, r3, #31
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <USB_EPStartXfer+0x11e6>
 8007538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800753c:	3b01      	subs	r3, #1
 800753e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007546:	b29b      	uxth	r3, r3
 8007548:	029b      	lsls	r3, r3, #10
 800754a:	b29b      	uxth	r3, r3
 800754c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007554:	b29a      	uxth	r2, r3
 8007556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e029      	b.n	80075b2 <USB_EPStartXfer+0x1256>
 800755e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d121      	bne.n	80075b2 <USB_EPStartXfer+0x1256>
 800756e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800757c:	b29b      	uxth	r3, r3
 800757e:	461a      	mov	r2, r3
 8007580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007584:	4413      	add	r3, r2
 8007586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800758a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	011a      	lsls	r2, r3, #4
 8007598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800759c:	4413      	add	r3, r2
 800759e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	895b      	ldrh	r3, [r3, #10]
 80075be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6959      	ldr	r1, [r3, #20]
 80075ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075e0:	6800      	ldr	r0, [r0, #0]
 80075e2:	f000 fe31 	bl	8008248 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80075e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007608:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800760c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007614:	8013      	strh	r3, [r2, #0]
 8007616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800761e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007622:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007626:	8812      	ldrh	r2, [r2, #0]
 8007628:	f082 0210 	eor.w	r2, r2, #16
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007636:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800763a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800763e:	8812      	ldrh	r2, [r2, #0]
 8007640:	f082 0220 	eor.w	r2, r2, #32
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	441a      	add	r2, r3
 8007660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007664:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]
 800767e:	f000 bc9f 	b.w	8007fc0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	7b1b      	ldrb	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 80ae 	bne.w	80077f0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d917      	bls.n	80076e0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80076b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80076c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	699a      	ldr	r2, [r3, #24]
 80076cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d0:	1ad2      	subs	r2, r2, r3
 80076d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	619a      	str	r2, [r3, #24]
 80076de:	e00e      	b.n	80076fe <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80076e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80076f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800770c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800771a:	b29b      	uxth	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007722:	4413      	add	r3, r2
 8007724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	011a      	lsls	r2, r3, #4
 8007736:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800773a:	4413      	add	r3, r2
 800773c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d116      	bne.n	800777a <USB_EPStartXfer+0x141e>
 800774c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007758:	b29a      	uxth	r2, r3
 800775a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007770:	b29a      	uxth	r2, r3
 8007772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e3e8      	b.n	8007f4c <USB_EPStartXfer+0x1bf0>
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	2b3e      	cmp	r3, #62	; 0x3e
 8007780:	d818      	bhi.n	80077b4 <USB_EPStartXfer+0x1458>
 8007782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800778c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <USB_EPStartXfer+0x1446>
 8007798:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800779c:	3301      	adds	r3, #1
 800779e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	029b      	lsls	r3, r3, #10
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	e3cb      	b.n	8007f4c <USB_EPStartXfer+0x1bf0>
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <USB_EPStartXfer+0x1478>
 80077ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077ce:	3b01      	subs	r3, #1
 80077d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077d8:	b29b      	uxth	r3, r3
 80077da:	029b      	lsls	r3, r3, #10
 80077dc:	b29b      	uxth	r3, r3
 80077de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ec:	801a      	strh	r2, [r3, #0]
 80077ee:	e3ad      	b.n	8007f4c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80077f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	78db      	ldrb	r3, [r3, #3]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	f040 8200 	bne.w	8007c02 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	785b      	ldrb	r3, [r3, #1]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f040 8091 	bne.w	8007936 <USB_EPStartXfer+0x15da>
 8007814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007826:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007830:	b29b      	uxth	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007838:	4413      	add	r3, r2
 800783a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800783e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	011a      	lsls	r2, r3, #4
 800784c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007850:	4413      	add	r3, r2
 8007852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800785a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d116      	bne.n	8007898 <USB_EPStartXfer+0x153c>
 800786a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007876:	b29a      	uxth	r2, r3
 8007878:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788e:	b29a      	uxth	r2, r3
 8007890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	e083      	b.n	80079a0 <USB_EPStartXfer+0x1644>
 8007898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b3e      	cmp	r3, #62	; 0x3e
 80078a6:	d820      	bhi.n	80078ea <USB_EPStartXfer+0x158e>
 80078a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	085b      	lsrs	r3, r3, #1
 80078b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <USB_EPStartXfer+0x157c>
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d2:	3301      	adds	r3, #1
 80078d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078dc:	b29b      	uxth	r3, r3
 80078de:	029b      	lsls	r3, r3, #10
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	e05a      	b.n	80079a0 <USB_EPStartXfer+0x1644>
 80078ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <USB_EPStartXfer+0x15be>
 8007910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007914:	3b01      	subs	r3, #1
 8007916:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791e:	b29b      	uxth	r3, r3
 8007920:	029b      	lsls	r3, r3, #10
 8007922:	b29b      	uxth	r3, r3
 8007924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792c:	b29a      	uxth	r2, r3
 800792e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007932:	801a      	strh	r2, [r3, #0]
 8007934:	e034      	b.n	80079a0 <USB_EPStartXfer+0x1644>
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d12c      	bne.n	80079a0 <USB_EPStartXfer+0x1644>
 8007946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007958:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007962:	b29b      	uxth	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800796a:	4413      	add	r3, r2
 800796c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	011a      	lsls	r2, r3, #4
 800797e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007982:	4413      	add	r3, r2
 8007984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800798c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	b29a      	uxth	r2, r3
 800799a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800799e:	801a      	strh	r2, [r3, #0]
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	785b      	ldrb	r3, [r3, #1]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 8091 	bne.w	8007ae2 <USB_EPStartXfer+0x1786>
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079dc:	b29b      	uxth	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079e4:	4413      	add	r3, r2
 80079e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	011a      	lsls	r2, r3, #4
 80079f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079fc:	4413      	add	r3, r2
 80079fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d116      	bne.n	8007a44 <USB_EPStartXfer+0x16e8>
 8007a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a28:	801a      	strh	r2, [r3, #0]
 8007a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	e07c      	b.n	8007b3e <USB_EPStartXfer+0x17e2>
 8007a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	2b3e      	cmp	r3, #62	; 0x3e
 8007a52:	d820      	bhi.n	8007a96 <USB_EPStartXfer+0x173a>
 8007a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <USB_EPStartXfer+0x1728>
 8007a7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a7e:	3301      	adds	r3, #1
 8007a80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	029b      	lsls	r3, r3, #10
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	e053      	b.n	8007b3e <USB_EPStartXfer+0x17e2>
 8007a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	095b      	lsrs	r3, r3, #5
 8007aa4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <USB_EPStartXfer+0x176a>
 8007abc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	029b      	lsls	r3, r3, #10
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ade:	801a      	strh	r2, [r3, #0]
 8007ae0:	e02d      	b.n	8007b3e <USB_EPStartXfer+0x17e2>
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d125      	bne.n	8007b3e <USB_EPStartXfer+0x17e2>
 8007af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	461a      	mov	r2, r3
 8007b04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b08:	4413      	add	r3, r2
 8007b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	011a      	lsls	r2, r3, #4
 8007b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b20:	4413      	add	r3, r2
 8007b22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b3c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 81fe 	beq.w	8007f4c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b70:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <USB_EPStartXfer+0x182c>
 8007b7c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10d      	bne.n	8007ba4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b88:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 81db 	bne.w	8007f4c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f040 81d4 	bne.w	8007f4c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	441a      	add	r2, r3
 8007be8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]
 8007c00:	e1a4      	b.n	8007f4c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	78db      	ldrb	r3, [r3, #3]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	f040 819a 	bne.w	8007f48 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d917      	bls.n	8007c60 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699a      	ldr	r2, [r3, #24]
 8007c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c50:	1ad2      	subs	r2, r2, r3
 8007c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	619a      	str	r2, [r3, #24]
 8007c5e:	e00e      	b.n	8007c7e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d178      	bne.n	8007d80 <USB_EPStartXfer+0x1a24>
 8007c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	011a      	lsls	r2, r3, #4
 8007cc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d116      	bne.n	8007d0a <USB_EPStartXfer+0x19ae>
 8007cdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d06:	801a      	strh	r2, [r3, #0]
 8007d08:	e06b      	b.n	8007de2 <USB_EPStartXfer+0x1a86>
 8007d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d10:	d818      	bhi.n	8007d44 <USB_EPStartXfer+0x19e8>
 8007d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d004      	beq.n	8007d32 <USB_EPStartXfer+0x19d6>
 8007d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	029b      	lsls	r3, r3, #10
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	e04e      	b.n	8007de2 <USB_EPStartXfer+0x1a86>
 8007d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d52:	f003 031f 	and.w	r3, r3, #31
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d104      	bne.n	8007d64 <USB_EPStartXfer+0x1a08>
 8007d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	029b      	lsls	r3, r3, #10
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d7c:	801a      	strh	r2, [r3, #0]
 8007d7e:	e030      	b.n	8007de2 <USB_EPStartXfer+0x1a86>
 8007d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d128      	bne.n	8007de2 <USB_EPStartXfer+0x1a86>
 8007d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	461a      	mov	r2, r3
 8007db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db4:	4413      	add	r3, r2
 8007db6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	011a      	lsls	r2, r3, #4
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dcc:	4413      	add	r3, r2
 8007dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d178      	bne.n	8007ef2 <USB_EPStartXfer+0x1b96>
 8007e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e24:	4413      	add	r3, r2
 8007e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	011a      	lsls	r2, r3, #4
 8007e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d116      	bne.n	8007e7c <USB_EPStartXfer+0x1b20>
 8007e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	e067      	b.n	8007f4c <USB_EPStartXfer+0x1bf0>
 8007e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e80:	2b3e      	cmp	r3, #62	; 0x3e
 8007e82:	d818      	bhi.n	8007eb6 <USB_EPStartXfer+0x1b5a>
 8007e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <USB_EPStartXfer+0x1b48>
 8007e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ea4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	029b      	lsls	r3, r3, #10
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	e04a      	b.n	8007f4c <USB_EPStartXfer+0x1bf0>
 8007eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eba:	095b      	lsrs	r3, r3, #5
 8007ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec4:	f003 031f 	and.w	r3, r3, #31
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <USB_EPStartXfer+0x1b7a>
 8007ecc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	029b      	lsls	r3, r3, #10
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eee:	801a      	strh	r2, [r3, #0]
 8007ef0:	e02c      	b.n	8007f4c <USB_EPStartXfer+0x1bf0>
 8007ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	785b      	ldrb	r3, [r3, #1]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d124      	bne.n	8007f4c <USB_EPStartXfer+0x1bf0>
 8007f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	461a      	mov	r2, r3
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f18:	4413      	add	r3, r2
 8007f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	011a      	lsls	r2, r3, #4
 8007f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f30:	4413      	add	r3, r2
 8007f32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	801a      	strh	r2, [r3, #0]
 8007f46:	e001      	b.n	8007f4c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e03a      	b.n	8007fc2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f72:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f76:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f82:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	785b      	ldrb	r3, [r3, #1]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d020      	beq.n	8008020 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ff4:	81bb      	strh	r3, [r7, #12]
 8007ff6:	89bb      	ldrh	r3, [r7, #12]
 8007ff8:	f083 0310 	eor.w	r3, r3, #16
 8007ffc:	81bb      	strh	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	441a      	add	r2, r3
 8008008:	89bb      	ldrh	r3, [r7, #12]
 800800a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801a:	b29b      	uxth	r3, r3
 800801c:	8013      	strh	r3, [r2, #0]
 800801e:	e01f      	b.n	8008060 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008036:	81fb      	strh	r3, [r7, #14]
 8008038:	89fb      	ldrh	r3, [r7, #14]
 800803a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800803e:	81fb      	strh	r3, [r7, #14]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	441a      	add	r2, r3
 800804a:	89fb      	ldrh	r3, [r7, #14]
 800804c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805c:	b29b      	uxth	r3, r3
 800805e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	bc80      	pop	{r7}
 800806a:	4770      	bx	lr

0800806c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	7b1b      	ldrb	r3, [r3, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	f040 809d 	bne.w	80081ba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	785b      	ldrb	r3, [r3, #1]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d04c      	beq.n	8008122 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	823b      	strh	r3, [r7, #16]
 8008096:	8a3b      	ldrh	r3, [r7, #16]
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <USB_EPClearStall+0x6c>
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b6:	81fb      	strh	r3, [r7, #14]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	441a      	add	r2, r3
 80080c2:	89fb      	ldrh	r3, [r7, #14]
 80080c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	78db      	ldrb	r3, [r3, #3]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d06c      	beq.n	80081ba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f6:	81bb      	strh	r3, [r7, #12]
 80080f8:	89bb      	ldrh	r3, [r7, #12]
 80080fa:	f083 0320 	eor.w	r3, r3, #32
 80080fe:	81bb      	strh	r3, [r7, #12]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	89bb      	ldrh	r3, [r7, #12]
 800810c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811c:	b29b      	uxth	r3, r3
 800811e:	8013      	strh	r3, [r2, #0]
 8008120:	e04b      	b.n	80081ba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	82fb      	strh	r3, [r7, #22]
 8008130:	8afb      	ldrh	r3, [r7, #22]
 8008132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d01b      	beq.n	8008172 <USB_EPClearStall+0x106>
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008150:	82bb      	strh	r3, [r7, #20]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	441a      	add	r2, r3
 800815c:	8abb      	ldrh	r3, [r7, #20]
 800815e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800816a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816e:	b29b      	uxth	r3, r3
 8008170:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008188:	827b      	strh	r3, [r7, #18]
 800818a:	8a7b      	ldrh	r3, [r7, #18]
 800818c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008190:	827b      	strh	r3, [r7, #18]
 8008192:	8a7b      	ldrh	r3, [r7, #18]
 8008194:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008198:	827b      	strh	r3, [r7, #18]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	441a      	add	r2, r3
 80081a4:	8a7b      	ldrh	r3, [r7, #18]
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr

080081c6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d103      	bne.n	80081e0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2280      	movs	r2, #128	; 0x80
 80081dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr

080081ec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008222:	b29b      	uxth	r3, r3
 8008224:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008226:	68fb      	ldr	r3, [r7, #12]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	bc80      	pop	{r7}
 8008230:	4770      	bx	lr

08008232 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008248:	b480      	push	{r7}
 800824a:	b08d      	sub	sp, #52	; 0x34
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4611      	mov	r1, r2
 8008254:	461a      	mov	r2, r3
 8008256:	460b      	mov	r3, r1
 8008258:	80fb      	strh	r3, [r7, #6]
 800825a:	4613      	mov	r3, r2
 800825c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800825e:	88bb      	ldrh	r3, [r7, #4]
 8008260:	3301      	adds	r3, #1
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	005a      	lsls	r2, r3, #1
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008280:	e01e      	b.n	80082c0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	3301      	adds	r3, #1
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	b29b      	uxth	r3, r3
 8008298:	461a      	mov	r2, r3
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	4313      	orrs	r3, r2
 800829e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	3302      	adds	r3, #2
 80082ac:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	3302      	adds	r3, #2
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	3301      	adds	r3, #1
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	3b01      	subs	r3, #1
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1dd      	bne.n	8008282 <USB_WritePMA+0x3a>
  }
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	3734      	adds	r7, #52	; 0x34
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr

080082d2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b08b      	sub	sp, #44	; 0x2c
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	4611      	mov	r1, r2
 80082de:	461a      	mov	r2, r3
 80082e0:	460b      	mov	r3, r1
 80082e2:	80fb      	strh	r3, [r7, #6]
 80082e4:	4613      	mov	r3, r2
 80082e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80082e8:	88bb      	ldrh	r3, [r7, #4]
 80082ea:	085b      	lsrs	r3, r3, #1
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	005a      	lsls	r2, r3, #1
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008304:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
 800830a:	e01b      	b.n	8008344 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	3302      	adds	r3, #2
 8008318:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	b2da      	uxtb	r2, r3
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	3301      	adds	r3, #1
 8008326:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	b2da      	uxtb	r2, r3
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	3301      	adds	r3, #1
 8008336:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	3302      	adds	r3, #2
 800833c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	3b01      	subs	r3, #1
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e0      	bne.n	800830c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800834a:	88bb      	ldrh	r3, [r7, #4]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	b2da      	uxtb	r2, r3
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	701a      	strb	r2, [r3, #0]
  }
}
 8008366:	bf00      	nop
 8008368:	372c      	adds	r7, #44	; 0x2c
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr

08008370 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008380:	2302      	movs	r3, #2
 8008382:	2203      	movs	r2, #3
 8008384:	2181      	movs	r1, #129	; 0x81
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 fe31 	bl	8009fee <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008392:	2302      	movs	r3, #2
 8008394:	2203      	movs	r2, #3
 8008396:	2101      	movs	r1, #1
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fe28 	bl	8009fee <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80083a6:	2054      	movs	r0, #84	; 0x54
 80083a8:	f001 ff36 	bl	800a218 <USBD_static_malloc>
 80083ac:	4602      	mov	r2, r0
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80083be:	2301      	movs	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]
 80083c2:	e012      	b.n	80083ea <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ca:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	2340      	movs	r3, #64	; 0x40
 80083e2:	2101      	movs	r1, #1
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 fef3 	bl	800a1d0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008400:	2181      	movs	r1, #129	; 0x81
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 fe19 	bl	800a03a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800840e:	2101      	movs	r1, #1
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 fe12 	bl	800a03a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00e      	beq.n	8008446 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fef9 	bl	800a230 <USBD_static_free>
    pdev->pClassData = NULL;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008460:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008466:	2300      	movs	r3, #0
 8008468:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800847a:	2b00      	cmp	r3, #0
 800847c:	d051      	beq.n	8008522 <USBD_CUSTOM_HID_Setup+0xd2>
 800847e:	2b20      	cmp	r3, #32
 8008480:	f040 80d8 	bne.w	8008634 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	3b02      	subs	r3, #2
 800848a:	2b09      	cmp	r3, #9
 800848c:	d841      	bhi.n	8008512 <USBD_CUSTOM_HID_Setup+0xc2>
 800848e:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <USBD_CUSTOM_HID_Setup+0x44>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	080084ed 	.word	0x080084ed
 8008498:	080084cb 	.word	0x080084cb
 800849c:	08008513 	.word	0x08008513
 80084a0:	08008513 	.word	0x08008513
 80084a4:	08008513 	.word	0x08008513
 80084a8:	08008513 	.word	0x08008513
 80084ac:	08008513 	.word	0x08008513
 80084b0:	080084fd 	.word	0x080084fd
 80084b4:	080084db 	.word	0x080084db
 80084b8:	080084bd 	.word	0x080084bd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	885b      	ldrh	r3, [r3, #2]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80084c8:	e02a      	b.n	8008520 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3340      	adds	r3, #64	; 0x40
 80084ce:	2201      	movs	r2, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 f999 	bl	800980a <USBD_CtlSendData>
          break;
 80084d8:	e022      	b.n	8008520 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	885b      	ldrh	r3, [r3, #2]
 80084de:	0a1b      	lsrs	r3, r3, #8
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80084ea:	e019      	b.n	8008520 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	3344      	adds	r3, #68	; 0x44
 80084f0:	2201      	movs	r2, #1
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f988 	bl	800980a <USBD_CtlSendData>
          break;
 80084fa:	e011      	b.n	8008520 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	2201      	movs	r2, #1
 8008500:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008502:	6939      	ldr	r1, [r7, #16]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	88db      	ldrh	r3, [r3, #6]
 8008508:	461a      	mov	r2, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 f9ab 	bl	8009866 <USBD_CtlPrepareRx>
          break;
 8008510:	e006      	b.n	8008520 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 f90e 	bl	8009736 <USBD_CtlError>
          ret = USBD_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	75fb      	strb	r3, [r7, #23]
          break;
 800851e:	bf00      	nop
      }
      break;
 8008520:	e08f      	b.n	8008642 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b0b      	cmp	r3, #11
 8008528:	d87c      	bhi.n	8008624 <USBD_CUSTOM_HID_Setup+0x1d4>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <USBD_CUSTOM_HID_Setup+0xe0>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008561 	.word	0x08008561
 8008534:	08008625 	.word	0x08008625
 8008538:	08008625 	.word	0x08008625
 800853c:	08008625 	.word	0x08008625
 8008540:	08008625 	.word	0x08008625
 8008544:	08008625 	.word	0x08008625
 8008548:	08008589 	.word	0x08008589
 800854c:	08008625 	.word	0x08008625
 8008550:	08008625 	.word	0x08008625
 8008554:	08008625 	.word	0x08008625
 8008558:	080085d7 	.word	0x080085d7
 800855c:	080085ff 	.word	0x080085ff
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008566:	2b03      	cmp	r3, #3
 8008568:	d107      	bne.n	800857a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800856a:	f107 030e 	add.w	r3, r7, #14
 800856e:	2202      	movs	r2, #2
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 f949 	bl	800980a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008578:	e05b      	b.n	8008632 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 f8da 	bl	8009736 <USBD_CtlError>
            ret = USBD_FAIL;
 8008582:	2302      	movs	r3, #2
 8008584:	75fb      	strb	r3, [r7, #23]
          break;
 8008586:	e054      	b.n	8008632 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	885b      	ldrh	r3, [r3, #2]
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	b29b      	uxth	r3, r3
 8008590:	2b22      	cmp	r3, #34	; 0x22
 8008592:	d10b      	bne.n	80085ac <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	88db      	ldrh	r3, [r3, #6]
 8008598:	2b36      	cmp	r3, #54	; 0x36
 800859a:	bf28      	it	cs
 800859c:	2336      	movcs	r3, #54	; 0x36
 800859e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	61bb      	str	r3, [r7, #24]
 80085aa:	e00d      	b.n	80085c8 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	885b      	ldrh	r3, [r3, #2]
 80085b0:	0a1b      	lsrs	r3, r3, #8
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b21      	cmp	r3, #33	; 0x21
 80085b6:	d107      	bne.n	80085c8 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80085b8:	4b24      	ldr	r3, [pc, #144]	; (800864c <USBD_CUSTOM_HID_Setup+0x1fc>)
 80085ba:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	88db      	ldrh	r3, [r3, #6]
 80085c0:	2b09      	cmp	r3, #9
 80085c2:	bf28      	it	cs
 80085c4:	2309      	movcs	r3, #9
 80085c6:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80085c8:	8bfb      	ldrh	r3, [r7, #30]
 80085ca:	461a      	mov	r2, r3
 80085cc:	69b9      	ldr	r1, [r7, #24]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 f91b 	bl	800980a <USBD_CtlSendData>
          break;
 80085d4:	e02d      	b.n	8008632 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d107      	bne.n	80085f0 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	3348      	adds	r3, #72	; 0x48
 80085e4:	2201      	movs	r2, #1
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 f90e 	bl	800980a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085ee:	e020      	b.n	8008632 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 f89f 	bl	8009736 <USBD_CtlError>
            ret = USBD_FAIL;
 80085f8:	2302      	movs	r3, #2
 80085fa:	75fb      	strb	r3, [r7, #23]
          break;
 80085fc:	e019      	b.n	8008632 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008604:	2b03      	cmp	r3, #3
 8008606:	d106      	bne.n	8008616 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	885b      	ldrh	r3, [r3, #2]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008614:	e00d      	b.n	8008632 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f88c 	bl	8009736 <USBD_CtlError>
            ret = USBD_FAIL;
 800861e:	2302      	movs	r3, #2
 8008620:	75fb      	strb	r3, [r7, #23]
          break;
 8008622:	e006      	b.n	8008632 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f885 	bl	8009736 <USBD_CtlError>
          ret = USBD_FAIL;
 800862c:	2302      	movs	r3, #2
 800862e:	75fb      	strb	r3, [r7, #23]
          break;
 8008630:	bf00      	nop
      }
      break;
 8008632:	e006      	b.n	8008642 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 f87d 	bl	8009736 <USBD_CtlError>
      ret = USBD_FAIL;
 800863c:	2302      	movs	r3, #2
 800863e:	75fb      	strb	r3, [r7, #23]
      break;
 8008640:	bf00      	nop
  }
  return ret;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3720      	adds	r7, #32
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	200000f0 	.word	0x200000f0

08008650 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800866c:	2b03      	cmp	r3, #3
 800866e:	d111      	bne.n	8008694 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	2181      	movs	r1, #129	; 0x81
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f001 fd7e 	bl	800a18a <USBD_LL_Transmit>
 800868e:	e001      	b.n	8008694 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008690:	2301      	movs	r3, #1
 8008692:	e000      	b.n	8008696 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2229      	movs	r2, #41	; 0x29
 80086ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80086ae:	4b03      	ldr	r3, [pc, #12]	; (80086bc <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	2000006c 	.word	0x2000006c

080086c0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2229      	movs	r2, #41	; 0x29
 80086cc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80086ce:	4b03      	ldr	r3, [pc, #12]	; (80086dc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	20000098 	.word	0x20000098

080086e0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2229      	movs	r2, #41	; 0x29
 80086ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80086ee:	4b03      	ldr	r3, [pc, #12]	; (80086fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	200000c4 	.word	0x200000c4

08008700 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr

08008724 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008736:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	4610      	mov	r0, r2
 8008744:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	2340      	movs	r3, #64	; 0x40
 800874a:	2101      	movs	r1, #1
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fd3f 	bl	800a1d0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008770:	2b01      	cmp	r3, #1
 8008772:	d109      	bne.n	8008788 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4610      	mov	r0, r2
 8008780:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	220a      	movs	r2, #10
 80087a0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80087a2:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	200000fc 	.word	0x200000fc

080087b4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80087be:	2302      	movs	r3, #2
 80087c0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d005      	beq.n	80087d4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr

080087e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087f4:	2302      	movs	r3, #2
 80087f6:	e01a      	b.n	800882e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	79fa      	ldrb	r2, [r7, #7]
 8008824:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f001 fb76 	bl	8009f18 <USBD_LL_Init>

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d006      	beq.n	8008858 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
 8008856:	e001      	b.n	800885c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008858:	2302      	movs	r3, #2
 800885a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	bc80      	pop	{r7}
 8008866:	4770      	bx	lr

08008868 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 fba1 	bl	8009fb8 <USBD_LL_Start>

  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	bc80      	pop	{r7}
 8008892:	4770      	bx	lr

08008894 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088a0:	2302      	movs	r3, #2
 80088a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00c      	beq.n	80088c8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	4611      	mov	r1, r2
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fed7 	bl	80096be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800892c:	f003 031f 	and.w	r3, r3, #31
 8008930:	2b02      	cmp	r3, #2
 8008932:	d016      	beq.n	8008962 <USBD_LL_SetupStage+0x6a>
 8008934:	2b02      	cmp	r3, #2
 8008936:	d81c      	bhi.n	8008972 <USBD_LL_SetupStage+0x7a>
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <USBD_LL_SetupStage+0x4a>
 800893c:	2b01      	cmp	r3, #1
 800893e:	d008      	beq.n	8008952 <USBD_LL_SetupStage+0x5a>
 8008940:	e017      	b.n	8008972 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f9ca 	bl	8008ce4 <USBD_StdDevReq>
      break;
 8008950:	e01a      	b.n	8008988 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fa2c 	bl	8008db8 <USBD_StdItfReq>
      break;
 8008960:	e012      	b.n	8008988 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa6c 	bl	8008e48 <USBD_StdEPReq>
      break;
 8008970:	e00a      	b.n	8008988 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008978:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800897c:	b2db      	uxtb	r3, r3
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 fb79 	bl	800a078 <USBD_LL_StallEP>
      break;
 8008986:	bf00      	nop
  }

  return USBD_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b086      	sub	sp, #24
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	460b      	mov	r3, r1
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d14b      	bne.n	8008a3e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d134      	bne.n	8008a22 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d919      	bls.n	80089f8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	1ad2      	subs	r2, r2, r3
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80089da:	429a      	cmp	r2, r3
 80089dc:	d203      	bcs.n	80089e6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	e002      	b.n	80089ec <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 ff56 	bl	80098a2 <USBD_CtlContinueRx>
 80089f6:	e038      	b.n	8008a6a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00a      	beq.n	8008a1a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d105      	bne.n	8008a1a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 ff53 	bl	80098c6 <USBD_CtlSendStatus>
 8008a20:	e023      	b.n	8008a6a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a28:	2b05      	cmp	r3, #5
 8008a2a:	d11e      	bne.n	8008a6a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008a34:	2100      	movs	r1, #0
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f001 fb1e 	bl	800a078 <USBD_LL_StallEP>
 8008a3c:	e015      	b.n	8008a6a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00d      	beq.n	8008a66 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d108      	bne.n	8008a66 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	7afa      	ldrb	r2, [r7, #11]
 8008a5e:	4611      	mov	r1, r2
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	4798      	blx	r3
 8008a64:	e001      	b.n	8008a6a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a66:	2302      	movs	r3, #2
 8008a68:	e000      	b.n	8008a6c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d17f      	bne.n	8008b88 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d15c      	bne.n	8008b52 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d915      	bls.n	8008ad0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	1ad2      	subs	r2, r2, r3
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 fec0 	bl	8009842 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f001 fb81 	bl	800a1d0 <USBD_LL_PrepareReceive>
 8008ace:	e04e      	b.n	8008b6e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	6912      	ldr	r2, [r2, #16]
 8008ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008adc:	fb01 f202 	mul.w	r2, r1, r2
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d11c      	bne.n	8008b20 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d316      	bcc.n	8008b20 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d20f      	bcs.n	8008b20 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b00:	2200      	movs	r2, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 fe9c 	bl	8009842 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b12:	2300      	movs	r3, #0
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f001 fb59 	bl	800a1d0 <USBD_LL_PrepareReceive>
 8008b1e:	e026      	b.n	8008b6e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d105      	bne.n	8008b42 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b42:	2180      	movs	r1, #128	; 0x80
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f001 fa97 	bl	800a078 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 fece 	bl	80098ec <USBD_CtlReceiveStatus>
 8008b50:	e00d      	b.n	8008b6e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d004      	beq.n	8008b66 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d103      	bne.n	8008b6e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b66:	2180      	movs	r1, #128	; 0x80
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f001 fa85 	bl	800a078 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d11d      	bne.n	8008bb4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7ff fe81 	bl	8008880 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b86:	e015      	b.n	8008bb4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00d      	beq.n	8008bb0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d108      	bne.n	8008bb0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	7afa      	ldrb	r2, [r7, #11]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	4798      	blx	r3
 8008bae:	e001      	b.n	8008bb4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e000      	b.n	8008bb6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bc6:	2340      	movs	r3, #64	; 0x40
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2100      	movs	r1, #0
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 fa0e 	bl	8009fee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2240      	movs	r2, #64	; 0x40
 8008bde:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008be2:	2340      	movs	r3, #64	; 0x40
 8008be4:	2200      	movs	r2, #0
 8008be6:	2180      	movs	r1, #128	; 0x80
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fa00 	bl	8009fee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2240      	movs	r2, #64	; 0x40
 8008bf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d009      	beq.n	8008c36 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6852      	ldr	r2, [r2, #4]
 8008c2e:	b2d2      	uxtb	r2, r2
 8008c30:	4611      	mov	r1, r2
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
  }

  return USBD_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	78fa      	ldrb	r2, [r7, #3]
 8008c50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr

08008c5e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2204      	movs	r2, #4
 8008c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr

08008c86 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d105      	bne.n	8008ca4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr

08008cb0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d10b      	bne.n	8008cda <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cfa:	2b40      	cmp	r3, #64	; 0x40
 8008cfc:	d005      	beq.n	8008d0a <USBD_StdDevReq+0x26>
 8008cfe:	2b40      	cmp	r3, #64	; 0x40
 8008d00:	d84f      	bhi.n	8008da2 <USBD_StdDevReq+0xbe>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <USBD_StdDevReq+0x36>
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	d14b      	bne.n	8008da2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	4798      	blx	r3
      break;
 8008d18:	e048      	b.n	8008dac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	2b09      	cmp	r3, #9
 8008d20:	d839      	bhi.n	8008d96 <USBD_StdDevReq+0xb2>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <USBD_StdDevReq+0x44>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008d79 	.word	0x08008d79
 8008d2c:	08008d8d 	.word	0x08008d8d
 8008d30:	08008d97 	.word	0x08008d97
 8008d34:	08008d83 	.word	0x08008d83
 8008d38:	08008d97 	.word	0x08008d97
 8008d3c:	08008d5b 	.word	0x08008d5b
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d97 	.word	0x08008d97
 8008d48:	08008d6f 	.word	0x08008d6f
 8008d4c:	08008d65 	.word	0x08008d65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f9dc 	bl	8009110 <USBD_GetDescriptor>
          break;
 8008d58:	e022      	b.n	8008da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fb3f 	bl	80093e0 <USBD_SetAddress>
          break;
 8008d62:	e01d      	b.n	8008da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fb7e 	bl	8009468 <USBD_SetConfig>
          break;
 8008d6c:	e018      	b.n	8008da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fc07 	bl	8009584 <USBD_GetConfig>
          break;
 8008d76:	e013      	b.n	8008da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fc37 	bl	80095ee <USBD_GetStatus>
          break;
 8008d80:	e00e      	b.n	8008da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fc65 	bl	8009654 <USBD_SetFeature>
          break;
 8008d8a:	e009      	b.n	8008da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fc74 	bl	800967c <USBD_ClrFeature>
          break;
 8008d94:	e004      	b.n	8008da0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fccc 	bl	8009736 <USBD_CtlError>
          break;
 8008d9e:	bf00      	nop
      }
      break;
 8008da0:	e004      	b.n	8008dac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fcc6 	bl	8009736 <USBD_CtlError>
      break;
 8008daa:	bf00      	nop
  }

  return ret;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop

08008db8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d005      	beq.n	8008dde <USBD_StdItfReq+0x26>
 8008dd2:	2b40      	cmp	r3, #64	; 0x40
 8008dd4:	d82e      	bhi.n	8008e34 <USBD_StdItfReq+0x7c>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <USBD_StdItfReq+0x26>
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d12a      	bne.n	8008e34 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de4:	3b01      	subs	r3, #1
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d81d      	bhi.n	8008e26 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	889b      	ldrh	r3, [r3, #4]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d813      	bhi.n	8008e1c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d110      	bne.n	8008e30 <USBD_StdItfReq+0x78>
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10d      	bne.n	8008e30 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fd56 	bl	80098c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e1a:	e009      	b.n	8008e30 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fc89 	bl	8009736 <USBD_CtlError>
          break;
 8008e24:	e004      	b.n	8008e30 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fc84 	bl	8009736 <USBD_CtlError>
          break;
 8008e2e:	e000      	b.n	8008e32 <USBD_StdItfReq+0x7a>
          break;
 8008e30:	bf00      	nop
      }
      break;
 8008e32:	e004      	b.n	8008e3e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fc7d 	bl	8009736 <USBD_CtlError>
      break;
 8008e3c:	bf00      	nop
  }

  return USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	889b      	ldrh	r3, [r3, #4]
 8008e5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	d007      	beq.n	8008e78 <USBD_StdEPReq+0x30>
 8008e68:	2b40      	cmp	r3, #64	; 0x40
 8008e6a:	f200 8146 	bhi.w	80090fa <USBD_StdEPReq+0x2b2>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <USBD_StdEPReq+0x40>
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	f040 8141 	bne.w	80090fa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
      break;
 8008e86:	e13d      	b.n	8009104 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d10a      	bne.n	8008eaa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	e12d      	b.n	8009106 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d007      	beq.n	8008ec2 <USBD_StdEPReq+0x7a>
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	f300 811b 	bgt.w	80090ee <USBD_StdEPReq+0x2a6>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d072      	beq.n	8008fa2 <USBD_StdEPReq+0x15a>
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d03a      	beq.n	8008f36 <USBD_StdEPReq+0xee>
 8008ec0:	e115      	b.n	80090ee <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d002      	beq.n	8008ed2 <USBD_StdEPReq+0x8a>
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d015      	beq.n	8008efc <USBD_StdEPReq+0xb4>
 8008ed0:	e02b      	b.n	8008f2a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00c      	beq.n	8008ef2 <USBD_StdEPReq+0xaa>
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b80      	cmp	r3, #128	; 0x80
 8008edc:	d009      	beq.n	8008ef2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 f8c8 	bl	800a078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ee8:	2180      	movs	r1, #128	; 0x80
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 f8c4 	bl	800a078 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ef0:	e020      	b.n	8008f34 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fc1e 	bl	8009736 <USBD_CtlError>
              break;
 8008efa:	e01b      	b.n	8008f34 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	885b      	ldrh	r3, [r3, #2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10e      	bne.n	8008f22 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <USBD_StdEPReq+0xda>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d008      	beq.n	8008f22 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	88db      	ldrh	r3, [r3, #6]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f8ab 	bl	800a078 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fccf 	bl	80098c6 <USBD_CtlSendStatus>

              break;
 8008f28:	e004      	b.n	8008f34 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fc02 	bl	8009736 <USBD_CtlError>
              break;
 8008f32:	bf00      	nop
          }
          break;
 8008f34:	e0e0      	b.n	80090f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d002      	beq.n	8008f46 <USBD_StdEPReq+0xfe>
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d015      	beq.n	8008f70 <USBD_StdEPReq+0x128>
 8008f44:	e026      	b.n	8008f94 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00c      	beq.n	8008f66 <USBD_StdEPReq+0x11e>
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b80      	cmp	r3, #128	; 0x80
 8008f50:	d009      	beq.n	8008f66 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 f88e 	bl	800a078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f5c:	2180      	movs	r1, #128	; 0x80
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f88a 	bl	800a078 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f64:	e01c      	b.n	8008fa0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fbe4 	bl	8009736 <USBD_CtlError>
              break;
 8008f6e:	e017      	b.n	8008fa0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	885b      	ldrh	r3, [r3, #2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d112      	bne.n	8008f9e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d004      	beq.n	8008f8c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 f895 	bl	800a0b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fc9a 	bl	80098c6 <USBD_CtlSendStatus>
              }
              break;
 8008f92:	e004      	b.n	8008f9e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fbcd 	bl	8009736 <USBD_CtlError>
              break;
 8008f9c:	e000      	b.n	8008fa0 <USBD_StdEPReq+0x158>
              break;
 8008f9e:	bf00      	nop
          }
          break;
 8008fa0:	e0aa      	b.n	80090f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d002      	beq.n	8008fb2 <USBD_StdEPReq+0x16a>
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d032      	beq.n	8009016 <USBD_StdEPReq+0x1ce>
 8008fb0:	e097      	b.n	80090e2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d007      	beq.n	8008fc8 <USBD_StdEPReq+0x180>
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b80      	cmp	r3, #128	; 0x80
 8008fbc:	d004      	beq.n	8008fc8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fbb8 	bl	8009736 <USBD_CtlError>
                break;
 8008fc6:	e091      	b.n	80090ec <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	da0b      	bge.n	8008fe8 <USBD_StdEPReq+0x1a0>
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	3310      	adds	r3, #16
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	e00b      	b.n	8009000 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	3304      	adds	r3, #4
 8009000:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2202      	movs	r2, #2
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fbfb 	bl	800980a <USBD_CtlSendData>
              break;
 8009014:	e06a      	b.n	80090ec <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da11      	bge.n	8009042 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	f003 020f 	and.w	r2, r3, #15
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	4613      	mov	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	440b      	add	r3, r1
 8009030:	3318      	adds	r3, #24
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d117      	bne.n	8009068 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fb7b 	bl	8009736 <USBD_CtlError>
                  break;
 8009040:	e054      	b.n	80090ec <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	f003 020f 	and.w	r2, r3, #15
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	4613      	mov	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fb68 	bl	8009736 <USBD_CtlError>
                  break;
 8009066:	e041      	b.n	80090ec <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da0b      	bge.n	8009088 <USBD_StdEPReq+0x240>
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	3310      	adds	r3, #16
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4413      	add	r3, r2
 8009084:	3304      	adds	r3, #4
 8009086:	e00b      	b.n	80090a0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	3304      	adds	r3, #4
 80090a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <USBD_StdEPReq+0x266>
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	2b80      	cmp	r3, #128	; 0x80
 80090ac:	d103      	bne.n	80090b6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	e00e      	b.n	80090d4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 f81a 	bl	800a0f4 <USBD_LL_IsStallEP>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2201      	movs	r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	e002      	b.n	80090d4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2202      	movs	r2, #2
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fb95 	bl	800980a <USBD_CtlSendData>
              break;
 80090e0:	e004      	b.n	80090ec <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fb26 	bl	8009736 <USBD_CtlError>
              break;
 80090ea:	bf00      	nop
          }
          break;
 80090ec:	e004      	b.n	80090f8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fb20 	bl	8009736 <USBD_CtlError>
          break;
 80090f6:	bf00      	nop
      }
      break;
 80090f8:	e004      	b.n	8009104 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fb1a 	bl	8009736 <USBD_CtlError>
      break;
 8009102:	bf00      	nop
  }

  return ret;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	885b      	ldrh	r3, [r3, #2]
 800912a:	0a1b      	lsrs	r3, r3, #8
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	2b06      	cmp	r3, #6
 8009132:	f200 8128 	bhi.w	8009386 <USBD_GetDescriptor+0x276>
 8009136:	a201      	add	r2, pc, #4	; (adr r2, 800913c <USBD_GetDescriptor+0x2c>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	08009159 	.word	0x08009159
 8009140:	08009171 	.word	0x08009171
 8009144:	080091b1 	.word	0x080091b1
 8009148:	08009387 	.word	0x08009387
 800914c:	08009387 	.word	0x08009387
 8009150:	08009327 	.word	0x08009327
 8009154:	08009353 	.word	0x08009353
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	7c12      	ldrb	r2, [r2, #16]
 8009164:	f107 0108 	add.w	r1, r7, #8
 8009168:	4610      	mov	r0, r2
 800916a:	4798      	blx	r3
 800916c:	60f8      	str	r0, [r7, #12]
      break;
 800916e:	e112      	b.n	8009396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	7c1b      	ldrb	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10d      	bne.n	8009194 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009180:	f107 0208 	add.w	r2, r7, #8
 8009184:	4610      	mov	r0, r2
 8009186:	4798      	blx	r3
 8009188:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3301      	adds	r3, #1
 800918e:	2202      	movs	r2, #2
 8009190:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009192:	e100      	b.n	8009396 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	f107 0208 	add.w	r2, r7, #8
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3301      	adds	r3, #1
 80091aa:	2202      	movs	r2, #2
 80091ac:	701a      	strb	r2, [r3, #0]
      break;
 80091ae:	e0f2      	b.n	8009396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	885b      	ldrh	r3, [r3, #2]
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b05      	cmp	r3, #5
 80091b8:	f200 80ac 	bhi.w	8009314 <USBD_GetDescriptor+0x204>
 80091bc:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <USBD_GetDescriptor+0xb4>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	080091dd 	.word	0x080091dd
 80091c8:	08009211 	.word	0x08009211
 80091cc:	08009245 	.word	0x08009245
 80091d0:	08009279 	.word	0x08009279
 80091d4:	080092ad 	.word	0x080092ad
 80091d8:	080092e1 	.word	0x080092e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	7c12      	ldrb	r2, [r2, #16]
 80091f4:	f107 0108 	add.w	r1, r7, #8
 80091f8:	4610      	mov	r0, r2
 80091fa:	4798      	blx	r3
 80091fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091fe:	e091      	b.n	8009324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa97 	bl	8009736 <USBD_CtlError>
            err++;
 8009208:	7afb      	ldrb	r3, [r7, #11]
 800920a:	3301      	adds	r3, #1
 800920c:	72fb      	strb	r3, [r7, #11]
          break;
 800920e:	e089      	b.n	8009324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00b      	beq.n	8009234 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	7c12      	ldrb	r2, [r2, #16]
 8009228:	f107 0108 	add.w	r1, r7, #8
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
 8009230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009232:	e077      	b.n	8009324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fa7d 	bl	8009736 <USBD_CtlError>
            err++;
 800923c:	7afb      	ldrb	r3, [r7, #11]
 800923e:	3301      	adds	r3, #1
 8009240:	72fb      	strb	r3, [r7, #11]
          break;
 8009242:	e06f      	b.n	8009324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00b      	beq.n	8009268 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	7c12      	ldrb	r2, [r2, #16]
 800925c:	f107 0108 	add.w	r1, r7, #8
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
 8009264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009266:	e05d      	b.n	8009324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fa63 	bl	8009736 <USBD_CtlError>
            err++;
 8009270:	7afb      	ldrb	r3, [r7, #11]
 8009272:	3301      	adds	r3, #1
 8009274:	72fb      	strb	r3, [r7, #11]
          break;
 8009276:	e055      	b.n	8009324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	7c12      	ldrb	r2, [r2, #16]
 8009290:	f107 0108 	add.w	r1, r7, #8
 8009294:	4610      	mov	r0, r2
 8009296:	4798      	blx	r3
 8009298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800929a:	e043      	b.n	8009324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fa49 	bl	8009736 <USBD_CtlError>
            err++;
 80092a4:	7afb      	ldrb	r3, [r7, #11]
 80092a6:	3301      	adds	r3, #1
 80092a8:	72fb      	strb	r3, [r7, #11]
          break;
 80092aa:	e03b      	b.n	8009324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00b      	beq.n	80092d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	7c12      	ldrb	r2, [r2, #16]
 80092c4:	f107 0108 	add.w	r1, r7, #8
 80092c8:	4610      	mov	r0, r2
 80092ca:	4798      	blx	r3
 80092cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ce:	e029      	b.n	8009324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa2f 	bl	8009736 <USBD_CtlError>
            err++;
 80092d8:	7afb      	ldrb	r3, [r7, #11]
 80092da:	3301      	adds	r3, #1
 80092dc:	72fb      	strb	r3, [r7, #11]
          break;
 80092de:	e021      	b.n	8009324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00b      	beq.n	8009304 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	7c12      	ldrb	r2, [r2, #16]
 80092f8:	f107 0108 	add.w	r1, r7, #8
 80092fc:	4610      	mov	r0, r2
 80092fe:	4798      	blx	r3
 8009300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009302:	e00f      	b.n	8009324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fa15 	bl	8009736 <USBD_CtlError>
            err++;
 800930c:	7afb      	ldrb	r3, [r7, #11]
 800930e:	3301      	adds	r3, #1
 8009310:	72fb      	strb	r3, [r7, #11]
          break;
 8009312:	e007      	b.n	8009324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa0d 	bl	8009736 <USBD_CtlError>
          err++;
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	3301      	adds	r3, #1
 8009320:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009322:	e038      	b.n	8009396 <USBD_GetDescriptor+0x286>
 8009324:	e037      	b.n	8009396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	7c1b      	ldrb	r3, [r3, #16]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	f107 0208 	add.w	r2, r7, #8
 800933a:	4610      	mov	r0, r2
 800933c:	4798      	blx	r3
 800933e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009340:	e029      	b.n	8009396 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f9f6 	bl	8009736 <USBD_CtlError>
        err++;
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	3301      	adds	r3, #1
 800934e:	72fb      	strb	r3, [r7, #11]
      break;
 8009350:	e021      	b.n	8009396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	7c1b      	ldrb	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10d      	bne.n	8009376 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	f107 0208 	add.w	r2, r7, #8
 8009366:	4610      	mov	r0, r2
 8009368:	4798      	blx	r3
 800936a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3301      	adds	r3, #1
 8009370:	2207      	movs	r2, #7
 8009372:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009374:	e00f      	b.n	8009396 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f9dc 	bl	8009736 <USBD_CtlError>
        err++;
 800937e:	7afb      	ldrb	r3, [r7, #11]
 8009380:	3301      	adds	r3, #1
 8009382:	72fb      	strb	r3, [r7, #11]
      break;
 8009384:	e007      	b.n	8009396 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f9d4 	bl	8009736 <USBD_CtlError>
      err++;
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	3301      	adds	r3, #1
 8009392:	72fb      	strb	r3, [r7, #11]
      break;
 8009394:	bf00      	nop
  }

  if (err != 0U)
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d11c      	bne.n	80093d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800939c:	893b      	ldrh	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d011      	beq.n	80093c6 <USBD_GetDescriptor+0x2b6>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	88db      	ldrh	r3, [r3, #6]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00d      	beq.n	80093c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	88da      	ldrh	r2, [r3, #6]
 80093ae:	893b      	ldrh	r3, [r7, #8]
 80093b0:	4293      	cmp	r3, r2
 80093b2:	bf28      	it	cs
 80093b4:	4613      	movcs	r3, r2
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093ba:	893b      	ldrh	r3, [r7, #8]
 80093bc:	461a      	mov	r2, r3
 80093be:	68f9      	ldr	r1, [r7, #12]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fa22 	bl	800980a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	88db      	ldrh	r3, [r3, #6]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d104      	bne.n	80093d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fa79 	bl	80098c6 <USBD_CtlSendStatus>
 80093d4:	e000      	b.n	80093d8 <USBD_GetDescriptor+0x2c8>
    return;
 80093d6:	bf00      	nop
    }
  }
}
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop

080093e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	889b      	ldrh	r3, [r3, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d130      	bne.n	8009454 <USBD_SetAddress+0x74>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	88db      	ldrh	r3, [r3, #6]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d12c      	bne.n	8009454 <USBD_SetAddress+0x74>
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	885b      	ldrh	r3, [r3, #2]
 80093fe:	2b7f      	cmp	r3, #127	; 0x7f
 8009400:	d828      	bhi.n	8009454 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	885b      	ldrh	r3, [r3, #2]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800940c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009414:	2b03      	cmp	r3, #3
 8009416:	d104      	bne.n	8009422 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f98b 	bl	8009736 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009420:	e01d      	b.n	800945e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	7bfa      	ldrb	r2, [r7, #15]
 8009426:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fe8c 	bl	800a14c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fa46 	bl	80098c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d004      	beq.n	800944a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009448:	e009      	b.n	800945e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009452:	e004      	b.n	800945e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f96d 	bl	8009736 <USBD_CtlError>
  }
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	885b      	ldrh	r3, [r3, #2]
 8009476:	b2da      	uxtb	r2, r3
 8009478:	4b41      	ldr	r3, [pc, #260]	; (8009580 <USBD_SetConfig+0x118>)
 800947a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800947c:	4b40      	ldr	r3, [pc, #256]	; (8009580 <USBD_SetConfig+0x118>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d904      	bls.n	800948e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f955 	bl	8009736 <USBD_CtlError>
 800948c:	e075      	b.n	800957a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009494:	2b02      	cmp	r3, #2
 8009496:	d002      	beq.n	800949e <USBD_SetConfig+0x36>
 8009498:	2b03      	cmp	r3, #3
 800949a:	d023      	beq.n	80094e4 <USBD_SetConfig+0x7c>
 800949c:	e062      	b.n	8009564 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800949e:	4b38      	ldr	r3, [pc, #224]	; (8009580 <USBD_SetConfig+0x118>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d01a      	beq.n	80094dc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80094a6:	4b36      	ldr	r3, [pc, #216]	; (8009580 <USBD_SetConfig+0x118>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2203      	movs	r2, #3
 80094b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094b8:	4b31      	ldr	r3, [pc, #196]	; (8009580 <USBD_SetConfig+0x118>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff f9e8 	bl	8008894 <USBD_SetClassConfig>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d104      	bne.n	80094d4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f932 	bl	8009736 <USBD_CtlError>
            return;
 80094d2:	e052      	b.n	800957a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f9f6 	bl	80098c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80094da:	e04e      	b.n	800957a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f9f2 	bl	80098c6 <USBD_CtlSendStatus>
        break;
 80094e2:	e04a      	b.n	800957a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80094e4:	4b26      	ldr	r3, [pc, #152]	; (8009580 <USBD_SetConfig+0x118>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d112      	bne.n	8009512 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80094f4:	4b22      	ldr	r3, [pc, #136]	; (8009580 <USBD_SetConfig+0x118>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	461a      	mov	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80094fe:	4b20      	ldr	r3, [pc, #128]	; (8009580 <USBD_SetConfig+0x118>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff f9e4 	bl	80088d2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f9db 	bl	80098c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009510:	e033      	b.n	800957a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009512:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <USBD_SetConfig+0x118>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d01d      	beq.n	800955c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff f9d2 	bl	80088d2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <USBD_SetConfig+0x118>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009538:	4b11      	ldr	r3, [pc, #68]	; (8009580 <USBD_SetConfig+0x118>)
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7ff f9a8 	bl	8008894 <USBD_SetClassConfig>
 8009544:	4603      	mov	r3, r0
 8009546:	2b02      	cmp	r3, #2
 8009548:	d104      	bne.n	8009554 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f8f2 	bl	8009736 <USBD_CtlError>
            return;
 8009552:	e012      	b.n	800957a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f9b6 	bl	80098c6 <USBD_CtlSendStatus>
        break;
 800955a:	e00e      	b.n	800957a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f9b2 	bl	80098c6 <USBD_CtlSendStatus>
        break;
 8009562:	e00a      	b.n	800957a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f8e5 	bl	8009736 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800956c:	4b04      	ldr	r3, [pc, #16]	; (8009580 <USBD_SetConfig+0x118>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff f9ad 	bl	80088d2 <USBD_ClrClassConfig>
        break;
 8009578:	bf00      	nop
    }
  }
}
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20000328 	.word	0x20000328

08009584 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	88db      	ldrh	r3, [r3, #6]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d004      	beq.n	80095a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f8cc 	bl	8009736 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800959e:	e022      	b.n	80095e6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	dc02      	bgt.n	80095b0 <USBD_GetConfig+0x2c>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dc03      	bgt.n	80095b6 <USBD_GetConfig+0x32>
 80095ae:	e015      	b.n	80095dc <USBD_GetConfig+0x58>
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d00b      	beq.n	80095cc <USBD_GetConfig+0x48>
 80095b4:	e012      	b.n	80095dc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3308      	adds	r3, #8
 80095c0:	2201      	movs	r2, #1
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f920 	bl	800980a <USBD_CtlSendData>
        break;
 80095ca:	e00c      	b.n	80095e6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3304      	adds	r3, #4
 80095d0:	2201      	movs	r2, #1
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f918 	bl	800980a <USBD_CtlSendData>
        break;
 80095da:	e004      	b.n	80095e6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f8a9 	bl	8009736 <USBD_CtlError>
        break;
 80095e4:	bf00      	nop
}
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b02      	cmp	r3, #2
 8009602:	d81e      	bhi.n	8009642 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	88db      	ldrh	r3, [r3, #6]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d004      	beq.n	8009616 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f891 	bl	8009736 <USBD_CtlError>
        break;
 8009614:	e01a      	b.n	800964c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f043 0202 	orr.w	r2, r3, #2
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	330c      	adds	r3, #12
 8009636:	2202      	movs	r2, #2
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f8e5 	bl	800980a <USBD_CtlSendData>
      break;
 8009640:	e004      	b.n	800964c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f876 	bl	8009736 <USBD_CtlError>
      break;
 800964a:	bf00      	nop
  }
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	885b      	ldrh	r3, [r3, #2]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d106      	bne.n	8009674 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f929 	bl	80098c6 <USBD_CtlSendStatus>
  }
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968c:	3b01      	subs	r3, #1
 800968e:	2b02      	cmp	r3, #2
 8009690:	d80b      	bhi.n	80096aa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	885b      	ldrh	r3, [r3, #2]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d10c      	bne.n	80096b4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f90f 	bl	80098c6 <USBD_CtlSendStatus>
      }
      break;
 80096a8:	e004      	b.n	80096b4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f842 	bl	8009736 <USBD_CtlError>
      break;
 80096b2:	e000      	b.n	80096b6 <USBD_ClrFeature+0x3a>
      break;
 80096b4:	bf00      	nop
  }
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	785a      	ldrb	r2, [r3, #1]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	3302      	adds	r3, #2
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b29a      	uxth	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	3303      	adds	r3, #3
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	4413      	add	r3, r2
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	3304      	adds	r3, #4
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	3305      	adds	r3, #5
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	b29b      	uxth	r3, r3
 8009704:	021b      	lsls	r3, r3, #8
 8009706:	b29b      	uxth	r3, r3
 8009708:	4413      	add	r3, r2
 800970a:	b29a      	uxth	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	3306      	adds	r3, #6
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	b29a      	uxth	r2, r3
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	3307      	adds	r3, #7
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	b29b      	uxth	r3, r3
 8009724:	4413      	add	r3, r2
 8009726:	b29a      	uxth	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	80da      	strh	r2, [r3, #6]

}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr

08009736 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009740:	2180      	movs	r1, #128	; 0x80
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fc98 	bl	800a078 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009748:	2100      	movs	r1, #0
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fc94 	bl	800a078 <USBD_LL_StallEP>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d032      	beq.n	80097d4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f834 	bl	80097dc <USBD_GetLen>
 8009774:	4603      	mov	r3, r0
 8009776:	3301      	adds	r3, #1
 8009778:	b29b      	uxth	r3, r3
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	b29a      	uxth	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	75fa      	strb	r2, [r7, #23]
 8009788:	461a      	mov	r2, r3
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	4413      	add	r3, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	7812      	ldrb	r2, [r2, #0]
 8009792:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	75fa      	strb	r2, [r7, #23]
 800979a:	461a      	mov	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4413      	add	r3, r2
 80097a0:	2203      	movs	r2, #3
 80097a2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80097a4:	e012      	b.n	80097cc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	60fa      	str	r2, [r7, #12]
 80097ac:	7dfa      	ldrb	r2, [r7, #23]
 80097ae:	1c51      	adds	r1, r2, #1
 80097b0:	75f9      	strb	r1, [r7, #23]
 80097b2:	4611      	mov	r1, r2
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	440a      	add	r2, r1
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	75fa      	strb	r2, [r7, #23]
 80097c2:	461a      	mov	r2, r3
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	4413      	add	r3, r2
 80097c8:	2200      	movs	r2, #0
 80097ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e8      	bne.n	80097a6 <USBD_GetString+0x4e>
    }
  }
}
 80097d4:	bf00      	nop
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80097e8:	e005      	b.n	80097f6 <USBD_GetLen+0x1a>
  {
    len++;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	3301      	adds	r3, #1
 80097ee:	73fb      	strb	r3, [r7, #15]
    buf++;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3301      	adds	r3, #1
 80097f4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f5      	bne.n	80097ea <USBD_GetLen+0xe>
  }

  return len;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	bc80      	pop	{r7}
 8009808:	4770      	bx	lr

0800980a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	4613      	mov	r3, r2
 8009816:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2202      	movs	r2, #2
 800981c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009820:	88fa      	ldrh	r2, [r7, #6]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009826:	88fa      	ldrh	r2, [r7, #6]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800982c:	88fb      	ldrh	r3, [r7, #6]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	2100      	movs	r1, #0
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fca9 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	4613      	mov	r3, r2
 800984e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009850:	88fb      	ldrh	r3, [r7, #6]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	2100      	movs	r1, #0
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 fc97 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	4613      	mov	r3, r2
 8009872:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2203      	movs	r2, #3
 8009878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800987c:	88fa      	ldrh	r2, [r7, #6]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009884:	88fa      	ldrh	r2, [r7, #6]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800988c:	88fb      	ldrh	r3, [r7, #6]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	2100      	movs	r1, #0
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fc9c 	bl	800a1d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	4613      	mov	r3, r2
 80098ae:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098b0:	88fb      	ldrh	r3, [r7, #6]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	2100      	movs	r1, #0
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 fc8a 	bl	800a1d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b082      	sub	sp, #8
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2204      	movs	r2, #4
 80098d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098d6:	2300      	movs	r3, #0
 80098d8:	2200      	movs	r2, #0
 80098da:	2100      	movs	r1, #0
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fc54 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2205      	movs	r2, #5
 80098f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098fc:	2300      	movs	r3, #0
 80098fe:	2200      	movs	r2, #0
 8009900:	2100      	movs	r1, #0
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fc64 	bl	800a1d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009918:	2200      	movs	r2, #0
 800991a:	4912      	ldr	r1, [pc, #72]	; (8009964 <MX_USB_DEVICE_Init+0x50>)
 800991c:	4812      	ldr	r0, [pc, #72]	; (8009968 <MX_USB_DEVICE_Init+0x54>)
 800991e:	f7fe ff5f 	bl	80087e0 <USBD_Init>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009928:	f7f7 ffe2 	bl	80018f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800992c:	490f      	ldr	r1, [pc, #60]	; (800996c <MX_USB_DEVICE_Init+0x58>)
 800992e:	480e      	ldr	r0, [pc, #56]	; (8009968 <MX_USB_DEVICE_Init+0x54>)
 8009930:	f7fe ff81 	bl	8008836 <USBD_RegisterClass>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800993a:	f7f7 ffd9 	bl	80018f0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800993e:	490c      	ldr	r1, [pc, #48]	; (8009970 <MX_USB_DEVICE_Init+0x5c>)
 8009940:	4809      	ldr	r0, [pc, #36]	; (8009968 <MX_USB_DEVICE_Init+0x54>)
 8009942:	f7fe ff37 	bl	80087b4 <USBD_CUSTOM_HID_RegisterInterface>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800994c:	f7f7 ffd0 	bl	80018f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009950:	4805      	ldr	r0, [pc, #20]	; (8009968 <MX_USB_DEVICE_Init+0x54>)
 8009952:	f7fe ff89 	bl	8008868 <USBD_Start>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800995c:	f7f7 ffc8 	bl	80018f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009960:	bf00      	nop
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20000150 	.word	0x20000150
 8009968:	2000032c 	.word	0x2000032c
 800996c:	20000034 	.word	0x20000034
 8009970:	20000140 	.word	0x20000140

08009974 <save_to_flash>:
  */

/* USER CODE BEGIN PRIVATE_MACRO */

void save_to_flash(uint8_t *data)
{
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	b08f      	sub	sp, #60	; 0x3c
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	466b      	mov	r3, sp
 8009980:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7f6 fbe4 	bl	8000150 <strlen>
 8009988:	4603      	mov	r3, r0
 800998a:	089e      	lsrs	r6, r3, #2
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7f6 fbdf 	bl	8000150 <strlen>
 8009992:	4603      	mov	r3, r0
 8009994:	f003 0303 	and.w	r3, r3, #3
 8009998:	2b00      	cmp	r3, #0
 800999a:	bf14      	ite	ne
 800999c:	2301      	movne	r3, #1
 800999e:	2300      	moveq	r3, #0
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	18f1      	adds	r1, r6, r3
 80099a4:	460b      	mov	r3, r1
 80099a6:	3b01      	subs	r3, #1
 80099a8:	637b      	str	r3, [r7, #52]	; 0x34
 80099aa:	2300      	movs	r3, #0
 80099ac:	4688      	mov	r8, r1
 80099ae:	4699      	mov	r9, r3
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80099bc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80099c0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80099c4:	2300      	movs	r3, #0
 80099c6:	460c      	mov	r4, r1
 80099c8:	461d      	mov	r5, r3
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	016b      	lsls	r3, r5, #5
 80099d4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80099d8:	0162      	lsls	r2, r4, #5
 80099da:	008b      	lsls	r3, r1, #2
 80099dc:	3307      	adds	r3, #7
 80099de:	08db      	lsrs	r3, r3, #3
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	ebad 0d03 	sub.w	sp, sp, r3
 80099e6:	466b      	mov	r3, sp
 80099e8:	3303      	adds	r3, #3
 80099ea:	089b      	lsrs	r3, r3, #2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 80099f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099f2:	f7f6 fbad 	bl	8000150 <strlen>
 80099f6:	4603      	mov	r3, r0
 80099f8:	461a      	mov	r2, r3
 80099fa:	2100      	movs	r1, #0
 80099fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099fe:	f000 fc93 	bl	800a328 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a06:	f000 fc97 	bl	800a338 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8009a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a0c:	f7f6 fba0 	bl	8000150 <strlen>
 8009a10:	4603      	mov	r3, r0
 8009a12:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8009a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a16:	f7f6 fb9b 	bl	8000150 <strlen>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f003 0303 	and.w	r3, r3, #3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bf14      	ite	ne
 8009a24:	2301      	movne	r3, #1
 8009a26:	2300      	moveq	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7f6 fb8e 	bl	8000150 <strlen>
 8009a34:	4603      	mov	r3, r0
 8009a36:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 8009a38:	b29c      	uxth	r4, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7f6 fb88 	bl	8000150 <strlen>
 8009a40:	4603      	mov	r3, r0
 8009a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bf14      	ite	ne
 8009a4a:	2301      	movne	r3, #1
 8009a4c:	2300      	moveq	r3, #0
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	4423      	add	r3, r4
 8009a54:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8009a56:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8009a58:	f7f9 f90e 	bl	8002c78 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 8009a5c:	f7f9 f942 	bl	8002ce4 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 8009a64:	4b21      	ldr	r3, [pc, #132]	; (8009aec <save_to_flash+0x178>)
 8009a66:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 8009a68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	613b      	str	r3, [r7, #16]
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8009a76:	f107 0214 	add.w	r2, r7, #20
 8009a7a:	f107 0318 	add.w	r3, r7, #24
 8009a7e:	4611      	mov	r1, r2
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7f9 fa0d 	bl	8002ea0 <HAL_FLASHEx_Erase>
 8009a86:	4603      	mov	r3, r0
 8009a88:	72fb      	strb	r3, [r7, #11]
	  while(index < data_length)
 8009a8a:	e020      	b.n	8009ace <save_to_flash+0x15a>
	  {
		  if (status == HAL_OK)
 8009a8c:	7afb      	ldrb	r3, [r7, #11]
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d11c      	bne.n	8009ace <save_to_flash+0x15a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8009a9a:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	469a      	mov	sl, r3
 8009aaa:	4693      	mov	fp, r2
 8009aac:	4652      	mov	r2, sl
 8009aae:	465b      	mov	r3, fp
 8009ab0:	2002      	movs	r0, #2
 8009ab2:	f7f9 f871 	bl	8002b98 <HAL_FLASH_Program>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d105      	bne.n	8009ace <save_to_flash+0x15a>
			  {
				  write_cnt += 4;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	613b      	str	r3, [r7, #16]
				  index++;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3301      	adds	r3, #1
 8009acc:	60fb      	str	r3, [r7, #12]
	  while(index < data_length)
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d3da      	bcc.n	8009a8c <save_to_flash+0x118>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8009ad6:	f7f9 f921 	bl	8002d1c <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 8009ada:	f7f9 f8f3 	bl	8002cc4 <HAL_FLASH_Lock>
 8009ade:	f8d7 d000 	ldr.w	sp, [r7]
}
 8009ae2:	bf00      	nop
 8009ae4:	373c      	adds	r7, #60	; 0x3c
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aec:	08019000 	.word	0x08019000

08009af0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009af4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc80      	pop	{r7}
 8009afc:	4770      	bx	lr

08009afe <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009afe:	b480      	push	{r7}
 8009b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009b02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bc80      	pop	{r7}
 8009b0a:	4770      	bx	lr

08009b0c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

    static uint8_t position;
	static char * data_to_send[0xC0]; //0x40 * 3

    if (state[0] == 'I'){
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b49      	cmp	r3, #73	; 0x49
 8009b1a:	d104      	bne.n	8009b26 <CUSTOM_HID_OutEvent_FS+0x1a>
		position = 0;
 8009b1c:	4b13      	ldr	r3, [pc, #76]	; (8009b6c <CUSTOM_HID_OutEvent_FS+0x60>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	701a      	strb	r2, [r3, #0]
		return 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e01d      	b.n	8009b62 <CUSTOM_HID_OutEvent_FS+0x56>
	}

    memcpy(&data_to_send[position], state, 0x40);
 8009b26:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <CUSTOM_HID_OutEvent_FS+0x60>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4a10      	ldr	r2, [pc, #64]	; (8009b70 <CUSTOM_HID_OutEvent_FS+0x64>)
 8009b2e:	4413      	add	r3, r2
 8009b30:	2240      	movs	r2, #64	; 0x40
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 fbe9 	bl	800a30c <memcpy>
    position = position+16;
 8009b3a:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <CUSTOM_HID_OutEvent_FS+0x60>)
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	3310      	adds	r3, #16
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <CUSTOM_HID_OutEvent_FS+0x60>)
 8009b44:	701a      	strb	r2, [r3, #0]

	if (position >= 48){  //informa que a terceira linha foi recebida
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <CUSTOM_HID_OutEvent_FS+0x60>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2b2f      	cmp	r3, #47	; 0x2f
 8009b4c:	d908      	bls.n	8009b60 <CUSTOM_HID_OutEvent_FS+0x54>
	    position = 0;
 8009b4e:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <CUSTOM_HID_OutEvent_FS+0x60>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	701a      	strb	r2, [r3, #0]
		save_to_flash((uint8_t *)data_to_send);
 8009b54:	4806      	ldr	r0, [pc, #24]	; (8009b70 <CUSTOM_HID_OutEvent_FS+0x64>)
 8009b56:	f7ff ff0d 	bl	8009974 <save_to_flash>
		updating = 1;
 8009b5a:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <CUSTOM_HID_OutEvent_FS+0x68>)
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(5); delay aqui trava o stm
	}
	return (USBD_OK);
 8009b60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200005f0 	.word	0x200005f0
 8009b70:	200005f4 	.word	0x200005f4
 8009b74:	200002ea 	.word	0x200002ea

08009b78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	6039      	str	r1, [r7, #0]
 8009b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2212      	movs	r2, #18
 8009b88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b8a:	4b03      	ldr	r3, [pc, #12]	; (8009b98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bc80      	pop	{r7}
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	2000016c 	.word	0x2000016c

08009b9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	6039      	str	r1, [r7, #0]
 8009ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2204      	movs	r2, #4
 8009bac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bae:	4b03      	ldr	r3, [pc, #12]	; (8009bbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	20000180 	.word	0x20000180

08009bc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	6039      	str	r1, [r7, #0]
 8009bca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d105      	bne.n	8009bde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	4907      	ldr	r1, [pc, #28]	; (8009bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bd6:	4808      	ldr	r0, [pc, #32]	; (8009bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bd8:	f7ff fdbe 	bl	8009758 <USBD_GetString>
 8009bdc:	e004      	b.n	8009be8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	4904      	ldr	r1, [pc, #16]	; (8009bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009be2:	4805      	ldr	r0, [pc, #20]	; (8009bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009be4:	f7ff fdb8 	bl	8009758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009be8:	4b02      	ldr	r3, [pc, #8]	; (8009bf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200008f4 	.word	0x200008f4
 8009bf8:	0800b538 	.word	0x0800b538

08009bfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	6039      	str	r1, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	4904      	ldr	r1, [pc, #16]	; (8009c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c0c:	4804      	ldr	r0, [pc, #16]	; (8009c20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c0e:	f7ff fda3 	bl	8009758 <USBD_GetString>
  return USBD_StrDesc;
 8009c12:	4b02      	ldr	r3, [pc, #8]	; (8009c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	200008f4 	.word	0x200008f4
 8009c20:	0800b54c 	.word	0x0800b54c

08009c24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	6039      	str	r1, [r7, #0]
 8009c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	221a      	movs	r2, #26
 8009c34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c36:	f000 f843 	bl	8009cc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c3a:	4b02      	ldr	r3, [pc, #8]	; (8009c44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	20000184 	.word	0x20000184

08009c48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	6039      	str	r1, [r7, #0]
 8009c52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d105      	bne.n	8009c66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	4907      	ldr	r1, [pc, #28]	; (8009c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c5e:	4808      	ldr	r0, [pc, #32]	; (8009c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c60:	f7ff fd7a 	bl	8009758 <USBD_GetString>
 8009c64:	e004      	b.n	8009c70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	4904      	ldr	r1, [pc, #16]	; (8009c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c6a:	4805      	ldr	r0, [pc, #20]	; (8009c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c6c:	f7ff fd74 	bl	8009758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c70:	4b02      	ldr	r3, [pc, #8]	; (8009c7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	200008f4 	.word	0x200008f4
 8009c80:	0800b55c 	.word	0x0800b55c

08009c84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6039      	str	r1, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	4907      	ldr	r1, [pc, #28]	; (8009cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c9a:	4808      	ldr	r0, [pc, #32]	; (8009cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c9c:	f7ff fd5c 	bl	8009758 <USBD_GetString>
 8009ca0:	e004      	b.n	8009cac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4904      	ldr	r1, [pc, #16]	; (8009cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ca6:	4805      	ldr	r0, [pc, #20]	; (8009cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ca8:	f7ff fd56 	bl	8009758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	200008f4 	.word	0x200008f4
 8009cbc:	0800b568 	.word	0x0800b568

08009cc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cc6:	4b0f      	ldr	r3, [pc, #60]	; (8009d04 <Get_SerialNum+0x44>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <Get_SerialNum+0x48>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cd2:	4b0e      	ldr	r3, [pc, #56]	; (8009d0c <Get_SerialNum+0x4c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4413      	add	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d009      	beq.n	8009cfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ce6:	2208      	movs	r2, #8
 8009ce8:	4909      	ldr	r1, [pc, #36]	; (8009d10 <Get_SerialNum+0x50>)
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f814 	bl	8009d18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cf0:	2204      	movs	r2, #4
 8009cf2:	4908      	ldr	r1, [pc, #32]	; (8009d14 <Get_SerialNum+0x54>)
 8009cf4:	68b8      	ldr	r0, [r7, #8]
 8009cf6:	f000 f80f 	bl	8009d18 <IntToUnicode>
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	1ffff7e8 	.word	0x1ffff7e8
 8009d08:	1ffff7ec 	.word	0x1ffff7ec
 8009d0c:	1ffff7f0 	.word	0x1ffff7f0
 8009d10:	20000186 	.word	0x20000186
 8009d14:	20000196 	.word	0x20000196

08009d18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]
 8009d2e:	e027      	b.n	8009d80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	0f1b      	lsrs	r3, r3, #28
 8009d34:	2b09      	cmp	r3, #9
 8009d36:	d80b      	bhi.n	8009d50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	0f1b      	lsrs	r3, r3, #28
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	7dfb      	ldrb	r3, [r7, #23]
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	4619      	mov	r1, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	440b      	add	r3, r1
 8009d48:	3230      	adds	r2, #48	; 0x30
 8009d4a:	b2d2      	uxtb	r2, r2
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	e00a      	b.n	8009d66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	0f1b      	lsrs	r3, r3, #28
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	440b      	add	r3, r1
 8009d60:	3237      	adds	r2, #55	; 0x37
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	3301      	adds	r3, #1
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	4413      	add	r3, r2
 8009d76:	2200      	movs	r2, #0
 8009d78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	75fb      	strb	r3, [r7, #23]
 8009d80:	7dfa      	ldrb	r2, [r7, #23]
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d3d3      	bcc.n	8009d30 <IntToUnicode+0x18>
  }
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bc80      	pop	{r7}
 8009d92:	4770      	bx	lr

08009d94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a0d      	ldr	r2, [pc, #52]	; (8009dd8 <HAL_PCD_MspInit+0x44>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d113      	bne.n	8009dce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009da6:	4b0d      	ldr	r3, [pc, #52]	; (8009ddc <HAL_PCD_MspInit+0x48>)
 8009da8:	69db      	ldr	r3, [r3, #28]
 8009daa:	4a0c      	ldr	r2, [pc, #48]	; (8009ddc <HAL_PCD_MspInit+0x48>)
 8009dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009db0:	61d3      	str	r3, [r2, #28]
 8009db2:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <HAL_PCD_MspInit+0x48>)
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	2014      	movs	r0, #20
 8009dc4:	f7f8 fcc3 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009dc8:	2014      	movs	r0, #20
 8009dca:	f7f8 fcdc 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009dce:	bf00      	nop
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	40005c00 	.word	0x40005c00
 8009ddc:	40021000 	.word	0x40021000

08009de0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009df4:	4619      	mov	r1, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	f7fe fd7e 	bl	80088f8 <USBD_LL_SetupStage>
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e16:	78fa      	ldrb	r2, [r7, #3]
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	00db      	lsls	r3, r3, #3
 8009e22:	440b      	add	r3, r1
 8009e24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f7fe fdb0 	bl	8008992 <USBD_LL_DataOutStage>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	4613      	mov	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	440b      	add	r3, r1
 8009e5a:	333c      	adds	r3, #60	; 0x3c
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7fe fe07 	bl	8008a74 <USBD_LL_DataInStage>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe ff17 	bl	8008cb0 <USBD_LL_SOF>
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e92:	2301      	movs	r3, #1
 8009e94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d001      	beq.n	8009ea2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e9e:	f7f7 fd27 	bl	80018f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ea8:	7bfa      	ldrb	r2, [r7, #15]
 8009eaa:	4611      	mov	r1, r2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe fec7 	bl	8008c40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe fe80 	bl	8008bbe <USBD_LL_Reset>
}
 8009ebe:	bf00      	nop
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe fec1 	bl	8008c5e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d005      	beq.n	8009ef0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ee4:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <HAL_PCD_SuspendCallback+0x30>)
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	4a03      	ldr	r2, [pc, #12]	; (8009ef8 <HAL_PCD_SuspendCallback+0x30>)
 8009eea:	f043 0306 	orr.w	r3, r3, #6
 8009eee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	e000ed00 	.word	0xe000ed00

08009efc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe febb 	bl	8008c86 <USBD_LL_Resume>
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f20:	4a23      	ldr	r2, [pc, #140]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a21      	ldr	r2, [pc, #132]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009f30:	4b1f      	ldr	r3, [pc, #124]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f32:	4a20      	ldr	r2, [pc, #128]	; (8009fb4 <USBD_LL_Init+0x9c>)
 8009f34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f36:	4b1e      	ldr	r3, [pc, #120]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f38:	2208      	movs	r2, #8
 8009f3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f3c:	4b1c      	ldr	r3, [pc, #112]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f3e:	2202      	movs	r2, #2
 8009f40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f42:	4b1b      	ldr	r3, [pc, #108]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f48:	4b19      	ldr	r3, [pc, #100]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f4e:	4b18      	ldr	r3, [pc, #96]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f54:	4816      	ldr	r0, [pc, #88]	; (8009fb0 <USBD_LL_Init+0x98>)
 8009f56:	f7f9 f9e7 	bl	8003328 <HAL_PCD_Init>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009f60:	f7f7 fcc6 	bl	80018f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f6a:	2318      	movs	r3, #24
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2100      	movs	r1, #0
 8009f70:	f7fa fe44 	bl	8004bfc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f7a:	2358      	movs	r3, #88	; 0x58
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2180      	movs	r1, #128	; 0x80
 8009f80:	f7fa fe3c 	bl	8004bfc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f8a:	2398      	movs	r3, #152	; 0x98
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2181      	movs	r1, #129	; 0x81
 8009f90:	f7fa fe34 	bl	8004bfc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f9a:	23d8      	movs	r3, #216	; 0xd8
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	f7fa fe2c 	bl	8004bfc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000af4 	.word	0x20000af4
 8009fb4:	40005c00 	.word	0x40005c00

08009fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f9 fab5 	bl	800353e <HAL_PCD_Start>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f93c 	bl	800a258 <USBD_Get_USB_Status>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	70fb      	strb	r3, [r7, #3]
 800a000:	460b      	mov	r3, r1
 800a002:	70bb      	strb	r3, [r7, #2]
 800a004:	4613      	mov	r3, r2
 800a006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a016:	78bb      	ldrb	r3, [r7, #2]
 800a018:	883a      	ldrh	r2, [r7, #0]
 800a01a:	78f9      	ldrb	r1, [r7, #3]
 800a01c:	f7f9 fc2d 	bl	800387a <HAL_PCD_EP_Open>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f916 	bl	800a258 <USBD_Get_USB_Status>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a030:	7bbb      	ldrb	r3, [r7, #14]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7f9 fc74 	bl	8003946 <HAL_PCD_EP_Close>
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f8f7 	bl	800a258 <USBD_Get_USB_Status>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a092:	78fa      	ldrb	r2, [r7, #3]
 800a094:	4611      	mov	r1, r2
 800a096:	4618      	mov	r0, r3
 800a098:	f7f9 fd1d 	bl	8003ad6 <HAL_PCD_EP_SetStall>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f8d8 	bl	800a258 <USBD_Get_USB_Status>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7f9 fd5e 	bl	8003b96 <HAL_PCD_EP_ClrStall>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f8b9 	bl	800a258 <USBD_Get_USB_Status>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	da0c      	bge.n	800a12a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a116:	68f9      	ldr	r1, [r7, #12]
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	440b      	add	r3, r1
 800a124:	3302      	adds	r3, #2
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	e00b      	b.n	800a142 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a130:	68f9      	ldr	r1, [r7, #12]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	440b      	add	r3, r1
 800a13c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a140:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7f9 fb60 	bl	8003830 <HAL_PCD_SetAddress>
 800a170:	4603      	mov	r3, r0
 800a172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f86e 	bl	800a258 <USBD_Get_USB_Status>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a180:	7bbb      	ldrb	r3, [r7, #14]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b086      	sub	sp, #24
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	461a      	mov	r2, r3
 800a196:	460b      	mov	r3, r1
 800a198:	72fb      	strb	r3, [r7, #11]
 800a19a:	4613      	mov	r3, r2
 800a19c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1ac:	893b      	ldrh	r3, [r7, #8]
 800a1ae:	7af9      	ldrb	r1, [r7, #11]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	f7f9 fc4d 	bl	8003a50 <HAL_PCD_EP_Transmit>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 f84b 	bl	800a258 <USBD_Get_USB_Status>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	607a      	str	r2, [r7, #4]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	460b      	mov	r3, r1
 800a1de:	72fb      	strb	r3, [r7, #11]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1f2:	893b      	ldrh	r3, [r7, #8]
 800a1f4:	7af9      	ldrb	r1, [r7, #11]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	f7f9 fbed 	bl	80039d6 <HAL_PCD_EP_Receive>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f828 	bl	800a258 <USBD_Get_USB_Status>
 800a208:	4603      	mov	r3, r0
 800a20a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a20c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a220:	4b02      	ldr	r3, [pc, #8]	; (800a22c <USBD_static_malloc+0x14>)
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	bc80      	pop	{r7}
 800a22a:	4770      	bx	lr
 800a22c:	20000de0 	.word	0x20000de0

0800a230 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]

}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bc80      	pop	{r7}
 800a240:	4770      	bx	lr

0800a242 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a242:	b480      	push	{r7}
 800a244:	b083      	sub	sp, #12
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	bc80      	pop	{r7}
 800a256:	4770      	bx	lr

0800a258 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a266:	79fb      	ldrb	r3, [r7, #7]
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d817      	bhi.n	800a29c <USBD_Get_USB_Status+0x44>
 800a26c:	a201      	add	r2, pc, #4	; (adr r2, 800a274 <USBD_Get_USB_Status+0x1c>)
 800a26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a272:	bf00      	nop
 800a274:	0800a285 	.word	0x0800a285
 800a278:	0800a28b 	.word	0x0800a28b
 800a27c:	0800a291 	.word	0x0800a291
 800a280:	0800a297 	.word	0x0800a297
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
    break;
 800a288:	e00b      	b.n	800a2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a28a:	2302      	movs	r3, #2
 800a28c:	73fb      	strb	r3, [r7, #15]
    break;
 800a28e:	e008      	b.n	800a2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a290:	2301      	movs	r3, #1
 800a292:	73fb      	strb	r3, [r7, #15]
    break;
 800a294:	e005      	b.n	800a2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a296:	2302      	movs	r3, #2
 800a298:	73fb      	strb	r3, [r7, #15]
    break;
 800a29a:	e002      	b.n	800a2a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a29c:	2302      	movs	r3, #2
 800a29e:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a0:	bf00      	nop
  }
  return usb_status;
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bc80      	pop	{r7}
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop

0800a2b0 <atoi>:
 800a2b0:	220a      	movs	r2, #10
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	f000 b920 	b.w	800a4f8 <strtol>

0800a2b8 <__errno>:
 800a2b8:	4b01      	ldr	r3, [pc, #4]	; (800a2c0 <__errno+0x8>)
 800a2ba:	6818      	ldr	r0, [r3, #0]
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	200001a0 	.word	0x200001a0

0800a2c4 <__libc_init_array>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	2600      	movs	r6, #0
 800a2c8:	4d0c      	ldr	r5, [pc, #48]	; (800a2fc <__libc_init_array+0x38>)
 800a2ca:	4c0d      	ldr	r4, [pc, #52]	; (800a300 <__libc_init_array+0x3c>)
 800a2cc:	1b64      	subs	r4, r4, r5
 800a2ce:	10a4      	asrs	r4, r4, #2
 800a2d0:	42a6      	cmp	r6, r4
 800a2d2:	d109      	bne.n	800a2e8 <__libc_init_array+0x24>
 800a2d4:	f001 f91a 	bl	800b50c <_init>
 800a2d8:	2600      	movs	r6, #0
 800a2da:	4d0a      	ldr	r5, [pc, #40]	; (800a304 <__libc_init_array+0x40>)
 800a2dc:	4c0a      	ldr	r4, [pc, #40]	; (800a308 <__libc_init_array+0x44>)
 800a2de:	1b64      	subs	r4, r4, r5
 800a2e0:	10a4      	asrs	r4, r4, #2
 800a2e2:	42a6      	cmp	r6, r4
 800a2e4:	d105      	bne.n	800a2f2 <__libc_init_array+0x2e>
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ec:	4798      	blx	r3
 800a2ee:	3601      	adds	r6, #1
 800a2f0:	e7ee      	b.n	800a2d0 <__libc_init_array+0xc>
 800a2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f6:	4798      	blx	r3
 800a2f8:	3601      	adds	r6, #1
 800a2fa:	e7f2      	b.n	800a2e2 <__libc_init_array+0x1e>
 800a2fc:	0800b7dc 	.word	0x0800b7dc
 800a300:	0800b7dc 	.word	0x0800b7dc
 800a304:	0800b7dc 	.word	0x0800b7dc
 800a308:	0800b7e0 	.word	0x0800b7e0

0800a30c <memcpy>:
 800a30c:	440a      	add	r2, r1
 800a30e:	4291      	cmp	r1, r2
 800a310:	f100 33ff 	add.w	r3, r0, #4294967295
 800a314:	d100      	bne.n	800a318 <memcpy+0xc>
 800a316:	4770      	bx	lr
 800a318:	b510      	push	{r4, lr}
 800a31a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a31e:	4291      	cmp	r1, r2
 800a320:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a324:	d1f9      	bne.n	800a31a <memcpy+0xe>
 800a326:	bd10      	pop	{r4, pc}

0800a328 <memset>:
 800a328:	4603      	mov	r3, r0
 800a32a:	4402      	add	r2, r0
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d100      	bne.n	800a332 <memset+0xa>
 800a330:	4770      	bx	lr
 800a332:	f803 1b01 	strb.w	r1, [r3], #1
 800a336:	e7f9      	b.n	800a32c <memset+0x4>

0800a338 <strcpy>:
 800a338:	4603      	mov	r3, r0
 800a33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a33e:	f803 2b01 	strb.w	r2, [r3], #1
 800a342:	2a00      	cmp	r2, #0
 800a344:	d1f9      	bne.n	800a33a <strcpy+0x2>
 800a346:	4770      	bx	lr

0800a348 <strtok>:
 800a348:	4b16      	ldr	r3, [pc, #88]	; (800a3a4 <strtok+0x5c>)
 800a34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34e:	681f      	ldr	r7, [r3, #0]
 800a350:	4605      	mov	r5, r0
 800a352:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a354:	460e      	mov	r6, r1
 800a356:	b9ec      	cbnz	r4, 800a394 <strtok+0x4c>
 800a358:	2050      	movs	r0, #80	; 0x50
 800a35a:	f000 f907 	bl	800a56c <malloc>
 800a35e:	4602      	mov	r2, r0
 800a360:	65b8      	str	r0, [r7, #88]	; 0x58
 800a362:	b920      	cbnz	r0, 800a36e <strtok+0x26>
 800a364:	2157      	movs	r1, #87	; 0x57
 800a366:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <strtok+0x60>)
 800a368:	4810      	ldr	r0, [pc, #64]	; (800a3ac <strtok+0x64>)
 800a36a:	f000 f8cf 	bl	800a50c <__assert_func>
 800a36e:	e9c0 4400 	strd	r4, r4, [r0]
 800a372:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a376:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a37a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a37e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a382:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a386:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a38a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a38e:	6184      	str	r4, [r0, #24]
 800a390:	7704      	strb	r4, [r0, #28]
 800a392:	6244      	str	r4, [r0, #36]	; 0x24
 800a394:	4631      	mov	r1, r6
 800a396:	4628      	mov	r0, r5
 800a398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a39a:	2301      	movs	r3, #1
 800a39c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a0:	f000 b806 	b.w	800a3b0 <__strtok_r>
 800a3a4:	200001a0 	.word	0x200001a0
 800a3a8:	0800b598 	.word	0x0800b598
 800a3ac:	0800b5af 	.word	0x0800b5af

0800a3b0 <__strtok_r>:
 800a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3b2:	b908      	cbnz	r0, 800a3b8 <__strtok_r+0x8>
 800a3b4:	6810      	ldr	r0, [r2, #0]
 800a3b6:	b188      	cbz	r0, 800a3dc <__strtok_r+0x2c>
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a3c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a3c6:	b91e      	cbnz	r6, 800a3d0 <__strtok_r+0x20>
 800a3c8:	b965      	cbnz	r5, 800a3e4 <__strtok_r+0x34>
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	6015      	str	r5, [r2, #0]
 800a3ce:	e005      	b.n	800a3dc <__strtok_r+0x2c>
 800a3d0:	42b5      	cmp	r5, r6
 800a3d2:	d1f6      	bne.n	800a3c2 <__strtok_r+0x12>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1f0      	bne.n	800a3ba <__strtok_r+0xa>
 800a3d8:	6014      	str	r4, [r2, #0]
 800a3da:	7003      	strb	r3, [r0, #0]
 800a3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3de:	461c      	mov	r4, r3
 800a3e0:	e00c      	b.n	800a3fc <__strtok_r+0x4c>
 800a3e2:	b915      	cbnz	r5, 800a3ea <__strtok_r+0x3a>
 800a3e4:	460e      	mov	r6, r1
 800a3e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a3ee:	42ab      	cmp	r3, r5
 800a3f0:	d1f7      	bne.n	800a3e2 <__strtok_r+0x32>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0f3      	beq.n	800a3de <__strtok_r+0x2e>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a3fc:	6014      	str	r4, [r2, #0]
 800a3fe:	e7ed      	b.n	800a3dc <__strtok_r+0x2c>

0800a400 <_strtol_l.constprop.0>:
 800a400:	2b01      	cmp	r3, #1
 800a402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a406:	4680      	mov	r8, r0
 800a408:	d001      	beq.n	800a40e <_strtol_l.constprop.0+0xe>
 800a40a:	2b24      	cmp	r3, #36	; 0x24
 800a40c:	d906      	bls.n	800a41c <_strtol_l.constprop.0+0x1c>
 800a40e:	f7ff ff53 	bl	800a2b8 <__errno>
 800a412:	2316      	movs	r3, #22
 800a414:	6003      	str	r3, [r0, #0]
 800a416:	2000      	movs	r0, #0
 800a418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41c:	460d      	mov	r5, r1
 800a41e:	4f35      	ldr	r7, [pc, #212]	; (800a4f4 <_strtol_l.constprop.0+0xf4>)
 800a420:	4628      	mov	r0, r5
 800a422:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a426:	5de6      	ldrb	r6, [r4, r7]
 800a428:	f016 0608 	ands.w	r6, r6, #8
 800a42c:	d1f8      	bne.n	800a420 <_strtol_l.constprop.0+0x20>
 800a42e:	2c2d      	cmp	r4, #45	; 0x2d
 800a430:	d12f      	bne.n	800a492 <_strtol_l.constprop.0+0x92>
 800a432:	2601      	movs	r6, #1
 800a434:	782c      	ldrb	r4, [r5, #0]
 800a436:	1c85      	adds	r5, r0, #2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d057      	beq.n	800a4ec <_strtol_l.constprop.0+0xec>
 800a43c:	2b10      	cmp	r3, #16
 800a43e:	d109      	bne.n	800a454 <_strtol_l.constprop.0+0x54>
 800a440:	2c30      	cmp	r4, #48	; 0x30
 800a442:	d107      	bne.n	800a454 <_strtol_l.constprop.0+0x54>
 800a444:	7828      	ldrb	r0, [r5, #0]
 800a446:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a44a:	2858      	cmp	r0, #88	; 0x58
 800a44c:	d149      	bne.n	800a4e2 <_strtol_l.constprop.0+0xe2>
 800a44e:	2310      	movs	r3, #16
 800a450:	786c      	ldrb	r4, [r5, #1]
 800a452:	3502      	adds	r5, #2
 800a454:	2700      	movs	r7, #0
 800a456:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a45a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a45e:	fbbe f9f3 	udiv	r9, lr, r3
 800a462:	4638      	mov	r0, r7
 800a464:	fb03 ea19 	mls	sl, r3, r9, lr
 800a468:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a46c:	f1bc 0f09 	cmp.w	ip, #9
 800a470:	d814      	bhi.n	800a49c <_strtol_l.constprop.0+0x9c>
 800a472:	4664      	mov	r4, ip
 800a474:	42a3      	cmp	r3, r4
 800a476:	dd22      	ble.n	800a4be <_strtol_l.constprop.0+0xbe>
 800a478:	2f00      	cmp	r7, #0
 800a47a:	db1d      	blt.n	800a4b8 <_strtol_l.constprop.0+0xb8>
 800a47c:	4581      	cmp	r9, r0
 800a47e:	d31b      	bcc.n	800a4b8 <_strtol_l.constprop.0+0xb8>
 800a480:	d101      	bne.n	800a486 <_strtol_l.constprop.0+0x86>
 800a482:	45a2      	cmp	sl, r4
 800a484:	db18      	blt.n	800a4b8 <_strtol_l.constprop.0+0xb8>
 800a486:	2701      	movs	r7, #1
 800a488:	fb00 4003 	mla	r0, r0, r3, r4
 800a48c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a490:	e7ea      	b.n	800a468 <_strtol_l.constprop.0+0x68>
 800a492:	2c2b      	cmp	r4, #43	; 0x2b
 800a494:	bf04      	itt	eq
 800a496:	782c      	ldrbeq	r4, [r5, #0]
 800a498:	1c85      	addeq	r5, r0, #2
 800a49a:	e7cd      	b.n	800a438 <_strtol_l.constprop.0+0x38>
 800a49c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a4a0:	f1bc 0f19 	cmp.w	ip, #25
 800a4a4:	d801      	bhi.n	800a4aa <_strtol_l.constprop.0+0xaa>
 800a4a6:	3c37      	subs	r4, #55	; 0x37
 800a4a8:	e7e4      	b.n	800a474 <_strtol_l.constprop.0+0x74>
 800a4aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a4ae:	f1bc 0f19 	cmp.w	ip, #25
 800a4b2:	d804      	bhi.n	800a4be <_strtol_l.constprop.0+0xbe>
 800a4b4:	3c57      	subs	r4, #87	; 0x57
 800a4b6:	e7dd      	b.n	800a474 <_strtol_l.constprop.0+0x74>
 800a4b8:	f04f 37ff 	mov.w	r7, #4294967295
 800a4bc:	e7e6      	b.n	800a48c <_strtol_l.constprop.0+0x8c>
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	da07      	bge.n	800a4d2 <_strtol_l.constprop.0+0xd2>
 800a4c2:	2322      	movs	r3, #34	; 0x22
 800a4c4:	4670      	mov	r0, lr
 800a4c6:	f8c8 3000 	str.w	r3, [r8]
 800a4ca:	2a00      	cmp	r2, #0
 800a4cc:	d0a4      	beq.n	800a418 <_strtol_l.constprop.0+0x18>
 800a4ce:	1e69      	subs	r1, r5, #1
 800a4d0:	e005      	b.n	800a4de <_strtol_l.constprop.0+0xde>
 800a4d2:	b106      	cbz	r6, 800a4d6 <_strtol_l.constprop.0+0xd6>
 800a4d4:	4240      	negs	r0, r0
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	d09e      	beq.n	800a418 <_strtol_l.constprop.0+0x18>
 800a4da:	2f00      	cmp	r7, #0
 800a4dc:	d1f7      	bne.n	800a4ce <_strtol_l.constprop.0+0xce>
 800a4de:	6011      	str	r1, [r2, #0]
 800a4e0:	e79a      	b.n	800a418 <_strtol_l.constprop.0+0x18>
 800a4e2:	2430      	movs	r4, #48	; 0x30
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1b5      	bne.n	800a454 <_strtol_l.constprop.0+0x54>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	e7b3      	b.n	800a454 <_strtol_l.constprop.0+0x54>
 800a4ec:	2c30      	cmp	r4, #48	; 0x30
 800a4ee:	d0a9      	beq.n	800a444 <_strtol_l.constprop.0+0x44>
 800a4f0:	230a      	movs	r3, #10
 800a4f2:	e7af      	b.n	800a454 <_strtol_l.constprop.0+0x54>
 800a4f4:	0800b649 	.word	0x0800b649

0800a4f8 <strtol>:
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	460a      	mov	r2, r1
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	4802      	ldr	r0, [pc, #8]	; (800a508 <strtol+0x10>)
 800a500:	6800      	ldr	r0, [r0, #0]
 800a502:	f7ff bf7d 	b.w	800a400 <_strtol_l.constprop.0>
 800a506:	bf00      	nop
 800a508:	200001a0 	.word	0x200001a0

0800a50c <__assert_func>:
 800a50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a50e:	4614      	mov	r4, r2
 800a510:	461a      	mov	r2, r3
 800a512:	4b09      	ldr	r3, [pc, #36]	; (800a538 <__assert_func+0x2c>)
 800a514:	4605      	mov	r5, r0
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68d8      	ldr	r0, [r3, #12]
 800a51a:	b14c      	cbz	r4, 800a530 <__assert_func+0x24>
 800a51c:	4b07      	ldr	r3, [pc, #28]	; (800a53c <__assert_func+0x30>)
 800a51e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a522:	9100      	str	r1, [sp, #0]
 800a524:	462b      	mov	r3, r5
 800a526:	4906      	ldr	r1, [pc, #24]	; (800a540 <__assert_func+0x34>)
 800a528:	f000 f80e 	bl	800a548 <fiprintf>
 800a52c:	f000 fcc0 	bl	800aeb0 <abort>
 800a530:	4b04      	ldr	r3, [pc, #16]	; (800a544 <__assert_func+0x38>)
 800a532:	461c      	mov	r4, r3
 800a534:	e7f3      	b.n	800a51e <__assert_func+0x12>
 800a536:	bf00      	nop
 800a538:	200001a0 	.word	0x200001a0
 800a53c:	0800b60c 	.word	0x0800b60c
 800a540:	0800b619 	.word	0x0800b619
 800a544:	0800b647 	.word	0x0800b647

0800a548 <fiprintf>:
 800a548:	b40e      	push	{r1, r2, r3}
 800a54a:	b503      	push	{r0, r1, lr}
 800a54c:	4601      	mov	r1, r0
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	4805      	ldr	r0, [pc, #20]	; (800a568 <fiprintf+0x20>)
 800a552:	f853 2b04 	ldr.w	r2, [r3], #4
 800a556:	6800      	ldr	r0, [r0, #0]
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	f000 f913 	bl	800a784 <_vfiprintf_r>
 800a55e:	b002      	add	sp, #8
 800a560:	f85d eb04 	ldr.w	lr, [sp], #4
 800a564:	b003      	add	sp, #12
 800a566:	4770      	bx	lr
 800a568:	200001a0 	.word	0x200001a0

0800a56c <malloc>:
 800a56c:	4b02      	ldr	r3, [pc, #8]	; (800a578 <malloc+0xc>)
 800a56e:	4601      	mov	r1, r0
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	f000 b86b 	b.w	800a64c <_malloc_r>
 800a576:	bf00      	nop
 800a578:	200001a0 	.word	0x200001a0

0800a57c <_free_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4605      	mov	r5, r0
 800a580:	2900      	cmp	r1, #0
 800a582:	d040      	beq.n	800a606 <_free_r+0x8a>
 800a584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a588:	1f0c      	subs	r4, r1, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfb8      	it	lt
 800a58e:	18e4      	addlt	r4, r4, r3
 800a590:	f000 fec0 	bl	800b314 <__malloc_lock>
 800a594:	4a1c      	ldr	r2, [pc, #112]	; (800a608 <_free_r+0x8c>)
 800a596:	6813      	ldr	r3, [r2, #0]
 800a598:	b933      	cbnz	r3, 800a5a8 <_free_r+0x2c>
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	4628      	mov	r0, r5
 800a5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a4:	f000 bebc 	b.w	800b320 <__malloc_unlock>
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d908      	bls.n	800a5be <_free_r+0x42>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf01      	itttt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	1809      	addeq	r1, r1, r0
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	e7ed      	b.n	800a59a <_free_r+0x1e>
 800a5be:	461a      	mov	r2, r3
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	b10b      	cbz	r3, 800a5c8 <_free_r+0x4c>
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d9fa      	bls.n	800a5be <_free_r+0x42>
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	1850      	adds	r0, r2, r1
 800a5cc:	42a0      	cmp	r0, r4
 800a5ce:	d10b      	bne.n	800a5e8 <_free_r+0x6c>
 800a5d0:	6820      	ldr	r0, [r4, #0]
 800a5d2:	4401      	add	r1, r0
 800a5d4:	1850      	adds	r0, r2, r1
 800a5d6:	4283      	cmp	r3, r0
 800a5d8:	6011      	str	r1, [r2, #0]
 800a5da:	d1e0      	bne.n	800a59e <_free_r+0x22>
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	4401      	add	r1, r0
 800a5e2:	6011      	str	r1, [r2, #0]
 800a5e4:	6053      	str	r3, [r2, #4]
 800a5e6:	e7da      	b.n	800a59e <_free_r+0x22>
 800a5e8:	d902      	bls.n	800a5f0 <_free_r+0x74>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	e7d6      	b.n	800a59e <_free_r+0x22>
 800a5f0:	6820      	ldr	r0, [r4, #0]
 800a5f2:	1821      	adds	r1, r4, r0
 800a5f4:	428b      	cmp	r3, r1
 800a5f6:	bf01      	itttt	eq
 800a5f8:	6819      	ldreq	r1, [r3, #0]
 800a5fa:	685b      	ldreq	r3, [r3, #4]
 800a5fc:	1809      	addeq	r1, r1, r0
 800a5fe:	6021      	streq	r1, [r4, #0]
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	6054      	str	r4, [r2, #4]
 800a604:	e7cb      	b.n	800a59e <_free_r+0x22>
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	20000e38 	.word	0x20000e38

0800a60c <sbrk_aligned>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	4e0e      	ldr	r6, [pc, #56]	; (800a648 <sbrk_aligned+0x3c>)
 800a610:	460c      	mov	r4, r1
 800a612:	6831      	ldr	r1, [r6, #0]
 800a614:	4605      	mov	r5, r0
 800a616:	b911      	cbnz	r1, 800a61e <sbrk_aligned+0x12>
 800a618:	f000 fb7a 	bl	800ad10 <_sbrk_r>
 800a61c:	6030      	str	r0, [r6, #0]
 800a61e:	4621      	mov	r1, r4
 800a620:	4628      	mov	r0, r5
 800a622:	f000 fb75 	bl	800ad10 <_sbrk_r>
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	d00a      	beq.n	800a640 <sbrk_aligned+0x34>
 800a62a:	1cc4      	adds	r4, r0, #3
 800a62c:	f024 0403 	bic.w	r4, r4, #3
 800a630:	42a0      	cmp	r0, r4
 800a632:	d007      	beq.n	800a644 <sbrk_aligned+0x38>
 800a634:	1a21      	subs	r1, r4, r0
 800a636:	4628      	mov	r0, r5
 800a638:	f000 fb6a 	bl	800ad10 <_sbrk_r>
 800a63c:	3001      	adds	r0, #1
 800a63e:	d101      	bne.n	800a644 <sbrk_aligned+0x38>
 800a640:	f04f 34ff 	mov.w	r4, #4294967295
 800a644:	4620      	mov	r0, r4
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	20000e3c 	.word	0x20000e3c

0800a64c <_malloc_r>:
 800a64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a650:	1ccd      	adds	r5, r1, #3
 800a652:	f025 0503 	bic.w	r5, r5, #3
 800a656:	3508      	adds	r5, #8
 800a658:	2d0c      	cmp	r5, #12
 800a65a:	bf38      	it	cc
 800a65c:	250c      	movcc	r5, #12
 800a65e:	2d00      	cmp	r5, #0
 800a660:	4607      	mov	r7, r0
 800a662:	db01      	blt.n	800a668 <_malloc_r+0x1c>
 800a664:	42a9      	cmp	r1, r5
 800a666:	d905      	bls.n	800a674 <_malloc_r+0x28>
 800a668:	230c      	movs	r3, #12
 800a66a:	2600      	movs	r6, #0
 800a66c:	603b      	str	r3, [r7, #0]
 800a66e:	4630      	mov	r0, r6
 800a670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a674:	4e2e      	ldr	r6, [pc, #184]	; (800a730 <_malloc_r+0xe4>)
 800a676:	f000 fe4d 	bl	800b314 <__malloc_lock>
 800a67a:	6833      	ldr	r3, [r6, #0]
 800a67c:	461c      	mov	r4, r3
 800a67e:	bb34      	cbnz	r4, 800a6ce <_malloc_r+0x82>
 800a680:	4629      	mov	r1, r5
 800a682:	4638      	mov	r0, r7
 800a684:	f7ff ffc2 	bl	800a60c <sbrk_aligned>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	4604      	mov	r4, r0
 800a68c:	d14d      	bne.n	800a72a <_malloc_r+0xde>
 800a68e:	6834      	ldr	r4, [r6, #0]
 800a690:	4626      	mov	r6, r4
 800a692:	2e00      	cmp	r6, #0
 800a694:	d140      	bne.n	800a718 <_malloc_r+0xcc>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	4631      	mov	r1, r6
 800a69a:	4638      	mov	r0, r7
 800a69c:	eb04 0803 	add.w	r8, r4, r3
 800a6a0:	f000 fb36 	bl	800ad10 <_sbrk_r>
 800a6a4:	4580      	cmp	r8, r0
 800a6a6:	d13a      	bne.n	800a71e <_malloc_r+0xd2>
 800a6a8:	6821      	ldr	r1, [r4, #0]
 800a6aa:	3503      	adds	r5, #3
 800a6ac:	1a6d      	subs	r5, r5, r1
 800a6ae:	f025 0503 	bic.w	r5, r5, #3
 800a6b2:	3508      	adds	r5, #8
 800a6b4:	2d0c      	cmp	r5, #12
 800a6b6:	bf38      	it	cc
 800a6b8:	250c      	movcc	r5, #12
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	4629      	mov	r1, r5
 800a6be:	f7ff ffa5 	bl	800a60c <sbrk_aligned>
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	d02b      	beq.n	800a71e <_malloc_r+0xd2>
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	442b      	add	r3, r5
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	e00e      	b.n	800a6ec <_malloc_r+0xa0>
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	1b52      	subs	r2, r2, r5
 800a6d2:	d41e      	bmi.n	800a712 <_malloc_r+0xc6>
 800a6d4:	2a0b      	cmp	r2, #11
 800a6d6:	d916      	bls.n	800a706 <_malloc_r+0xba>
 800a6d8:	1961      	adds	r1, r4, r5
 800a6da:	42a3      	cmp	r3, r4
 800a6dc:	6025      	str	r5, [r4, #0]
 800a6de:	bf18      	it	ne
 800a6e0:	6059      	strne	r1, [r3, #4]
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	bf08      	it	eq
 800a6e6:	6031      	streq	r1, [r6, #0]
 800a6e8:	5162      	str	r2, [r4, r5]
 800a6ea:	604b      	str	r3, [r1, #4]
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	f104 060b 	add.w	r6, r4, #11
 800a6f2:	f000 fe15 	bl	800b320 <__malloc_unlock>
 800a6f6:	f026 0607 	bic.w	r6, r6, #7
 800a6fa:	1d23      	adds	r3, r4, #4
 800a6fc:	1af2      	subs	r2, r6, r3
 800a6fe:	d0b6      	beq.n	800a66e <_malloc_r+0x22>
 800a700:	1b9b      	subs	r3, r3, r6
 800a702:	50a3      	str	r3, [r4, r2]
 800a704:	e7b3      	b.n	800a66e <_malloc_r+0x22>
 800a706:	6862      	ldr	r2, [r4, #4]
 800a708:	42a3      	cmp	r3, r4
 800a70a:	bf0c      	ite	eq
 800a70c:	6032      	streq	r2, [r6, #0]
 800a70e:	605a      	strne	r2, [r3, #4]
 800a710:	e7ec      	b.n	800a6ec <_malloc_r+0xa0>
 800a712:	4623      	mov	r3, r4
 800a714:	6864      	ldr	r4, [r4, #4]
 800a716:	e7b2      	b.n	800a67e <_malloc_r+0x32>
 800a718:	4634      	mov	r4, r6
 800a71a:	6876      	ldr	r6, [r6, #4]
 800a71c:	e7b9      	b.n	800a692 <_malloc_r+0x46>
 800a71e:	230c      	movs	r3, #12
 800a720:	4638      	mov	r0, r7
 800a722:	603b      	str	r3, [r7, #0]
 800a724:	f000 fdfc 	bl	800b320 <__malloc_unlock>
 800a728:	e7a1      	b.n	800a66e <_malloc_r+0x22>
 800a72a:	6025      	str	r5, [r4, #0]
 800a72c:	e7de      	b.n	800a6ec <_malloc_r+0xa0>
 800a72e:	bf00      	nop
 800a730:	20000e38 	.word	0x20000e38

0800a734 <__sfputc_r>:
 800a734:	6893      	ldr	r3, [r2, #8]
 800a736:	b410      	push	{r4}
 800a738:	3b01      	subs	r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	6093      	str	r3, [r2, #8]
 800a73e:	da07      	bge.n	800a750 <__sfputc_r+0x1c>
 800a740:	6994      	ldr	r4, [r2, #24]
 800a742:	42a3      	cmp	r3, r4
 800a744:	db01      	blt.n	800a74a <__sfputc_r+0x16>
 800a746:	290a      	cmp	r1, #10
 800a748:	d102      	bne.n	800a750 <__sfputc_r+0x1c>
 800a74a:	bc10      	pop	{r4}
 800a74c:	f000 baf0 	b.w	800ad30 <__swbuf_r>
 800a750:	6813      	ldr	r3, [r2, #0]
 800a752:	1c58      	adds	r0, r3, #1
 800a754:	6010      	str	r0, [r2, #0]
 800a756:	7019      	strb	r1, [r3, #0]
 800a758:	4608      	mov	r0, r1
 800a75a:	bc10      	pop	{r4}
 800a75c:	4770      	bx	lr

0800a75e <__sfputs_r>:
 800a75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a760:	4606      	mov	r6, r0
 800a762:	460f      	mov	r7, r1
 800a764:	4614      	mov	r4, r2
 800a766:	18d5      	adds	r5, r2, r3
 800a768:	42ac      	cmp	r4, r5
 800a76a:	d101      	bne.n	800a770 <__sfputs_r+0x12>
 800a76c:	2000      	movs	r0, #0
 800a76e:	e007      	b.n	800a780 <__sfputs_r+0x22>
 800a770:	463a      	mov	r2, r7
 800a772:	4630      	mov	r0, r6
 800a774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a778:	f7ff ffdc 	bl	800a734 <__sfputc_r>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d1f3      	bne.n	800a768 <__sfputs_r+0xa>
 800a780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a784 <_vfiprintf_r>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	460d      	mov	r5, r1
 800a78a:	4614      	mov	r4, r2
 800a78c:	4698      	mov	r8, r3
 800a78e:	4606      	mov	r6, r0
 800a790:	b09d      	sub	sp, #116	; 0x74
 800a792:	b118      	cbz	r0, 800a79c <_vfiprintf_r+0x18>
 800a794:	6983      	ldr	r3, [r0, #24]
 800a796:	b90b      	cbnz	r3, 800a79c <_vfiprintf_r+0x18>
 800a798:	f000 fca8 	bl	800b0ec <__sinit>
 800a79c:	4b89      	ldr	r3, [pc, #548]	; (800a9c4 <_vfiprintf_r+0x240>)
 800a79e:	429d      	cmp	r5, r3
 800a7a0:	d11b      	bne.n	800a7da <_vfiprintf_r+0x56>
 800a7a2:	6875      	ldr	r5, [r6, #4]
 800a7a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7a6:	07d9      	lsls	r1, r3, #31
 800a7a8:	d405      	bmi.n	800a7b6 <_vfiprintf_r+0x32>
 800a7aa:	89ab      	ldrh	r3, [r5, #12]
 800a7ac:	059a      	lsls	r2, r3, #22
 800a7ae:	d402      	bmi.n	800a7b6 <_vfiprintf_r+0x32>
 800a7b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7b2:	f000 fd39 	bl	800b228 <__retarget_lock_acquire_recursive>
 800a7b6:	89ab      	ldrh	r3, [r5, #12]
 800a7b8:	071b      	lsls	r3, r3, #28
 800a7ba:	d501      	bpl.n	800a7c0 <_vfiprintf_r+0x3c>
 800a7bc:	692b      	ldr	r3, [r5, #16]
 800a7be:	b9eb      	cbnz	r3, 800a7fc <_vfiprintf_r+0x78>
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f000 fb06 	bl	800add4 <__swsetup_r>
 800a7c8:	b1c0      	cbz	r0, 800a7fc <_vfiprintf_r+0x78>
 800a7ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7cc:	07dc      	lsls	r4, r3, #31
 800a7ce:	d50e      	bpl.n	800a7ee <_vfiprintf_r+0x6a>
 800a7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d4:	b01d      	add	sp, #116	; 0x74
 800a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	4b7b      	ldr	r3, [pc, #492]	; (800a9c8 <_vfiprintf_r+0x244>)
 800a7dc:	429d      	cmp	r5, r3
 800a7de:	d101      	bne.n	800a7e4 <_vfiprintf_r+0x60>
 800a7e0:	68b5      	ldr	r5, [r6, #8]
 800a7e2:	e7df      	b.n	800a7a4 <_vfiprintf_r+0x20>
 800a7e4:	4b79      	ldr	r3, [pc, #484]	; (800a9cc <_vfiprintf_r+0x248>)
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	bf08      	it	eq
 800a7ea:	68f5      	ldreq	r5, [r6, #12]
 800a7ec:	e7da      	b.n	800a7a4 <_vfiprintf_r+0x20>
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	0598      	lsls	r0, r3, #22
 800a7f2:	d4ed      	bmi.n	800a7d0 <_vfiprintf_r+0x4c>
 800a7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f6:	f000 fd18 	bl	800b22a <__retarget_lock_release_recursive>
 800a7fa:	e7e9      	b.n	800a7d0 <_vfiprintf_r+0x4c>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a800:	2320      	movs	r3, #32
 800a802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a806:	2330      	movs	r3, #48	; 0x30
 800a808:	f04f 0901 	mov.w	r9, #1
 800a80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a810:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a9d0 <_vfiprintf_r+0x24c>
 800a814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a818:	4623      	mov	r3, r4
 800a81a:	469a      	mov	sl, r3
 800a81c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a820:	b10a      	cbz	r2, 800a826 <_vfiprintf_r+0xa2>
 800a822:	2a25      	cmp	r2, #37	; 0x25
 800a824:	d1f9      	bne.n	800a81a <_vfiprintf_r+0x96>
 800a826:	ebba 0b04 	subs.w	fp, sl, r4
 800a82a:	d00b      	beq.n	800a844 <_vfiprintf_r+0xc0>
 800a82c:	465b      	mov	r3, fp
 800a82e:	4622      	mov	r2, r4
 800a830:	4629      	mov	r1, r5
 800a832:	4630      	mov	r0, r6
 800a834:	f7ff ff93 	bl	800a75e <__sfputs_r>
 800a838:	3001      	adds	r0, #1
 800a83a:	f000 80aa 	beq.w	800a992 <_vfiprintf_r+0x20e>
 800a83e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a840:	445a      	add	r2, fp
 800a842:	9209      	str	r2, [sp, #36]	; 0x24
 800a844:	f89a 3000 	ldrb.w	r3, [sl]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 80a2 	beq.w	800a992 <_vfiprintf_r+0x20e>
 800a84e:	2300      	movs	r3, #0
 800a850:	f04f 32ff 	mov.w	r2, #4294967295
 800a854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a858:	f10a 0a01 	add.w	sl, sl, #1
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	9307      	str	r3, [sp, #28]
 800a860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a864:	931a      	str	r3, [sp, #104]	; 0x68
 800a866:	4654      	mov	r4, sl
 800a868:	2205      	movs	r2, #5
 800a86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a86e:	4858      	ldr	r0, [pc, #352]	; (800a9d0 <_vfiprintf_r+0x24c>)
 800a870:	f000 fd42 	bl	800b2f8 <memchr>
 800a874:	9a04      	ldr	r2, [sp, #16]
 800a876:	b9d8      	cbnz	r0, 800a8b0 <_vfiprintf_r+0x12c>
 800a878:	06d1      	lsls	r1, r2, #27
 800a87a:	bf44      	itt	mi
 800a87c:	2320      	movmi	r3, #32
 800a87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a882:	0713      	lsls	r3, r2, #28
 800a884:	bf44      	itt	mi
 800a886:	232b      	movmi	r3, #43	; 0x2b
 800a888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a88c:	f89a 3000 	ldrb.w	r3, [sl]
 800a890:	2b2a      	cmp	r3, #42	; 0x2a
 800a892:	d015      	beq.n	800a8c0 <_vfiprintf_r+0x13c>
 800a894:	4654      	mov	r4, sl
 800a896:	2000      	movs	r0, #0
 800a898:	f04f 0c0a 	mov.w	ip, #10
 800a89c:	9a07      	ldr	r2, [sp, #28]
 800a89e:	4621      	mov	r1, r4
 800a8a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8a4:	3b30      	subs	r3, #48	; 0x30
 800a8a6:	2b09      	cmp	r3, #9
 800a8a8:	d94e      	bls.n	800a948 <_vfiprintf_r+0x1c4>
 800a8aa:	b1b0      	cbz	r0, 800a8da <_vfiprintf_r+0x156>
 800a8ac:	9207      	str	r2, [sp, #28]
 800a8ae:	e014      	b.n	800a8da <_vfiprintf_r+0x156>
 800a8b0:	eba0 0308 	sub.w	r3, r0, r8
 800a8b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	46a2      	mov	sl, r4
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	e7d2      	b.n	800a866 <_vfiprintf_r+0xe2>
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	1d19      	adds	r1, r3, #4
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	9103      	str	r1, [sp, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bfbb      	ittet	lt
 800a8cc:	425b      	neglt	r3, r3
 800a8ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a8d2:	9307      	strge	r3, [sp, #28]
 800a8d4:	9307      	strlt	r3, [sp, #28]
 800a8d6:	bfb8      	it	lt
 800a8d8:	9204      	strlt	r2, [sp, #16]
 800a8da:	7823      	ldrb	r3, [r4, #0]
 800a8dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a8de:	d10c      	bne.n	800a8fa <_vfiprintf_r+0x176>
 800a8e0:	7863      	ldrb	r3, [r4, #1]
 800a8e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8e4:	d135      	bne.n	800a952 <_vfiprintf_r+0x1ce>
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	3402      	adds	r4, #2
 800a8ea:	1d1a      	adds	r2, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9203      	str	r2, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfb8      	it	lt
 800a8f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8f8:	9305      	str	r3, [sp, #20]
 800a8fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a9d4 <_vfiprintf_r+0x250>
 800a8fe:	2203      	movs	r2, #3
 800a900:	4650      	mov	r0, sl
 800a902:	7821      	ldrb	r1, [r4, #0]
 800a904:	f000 fcf8 	bl	800b2f8 <memchr>
 800a908:	b140      	cbz	r0, 800a91c <_vfiprintf_r+0x198>
 800a90a:	2340      	movs	r3, #64	; 0x40
 800a90c:	eba0 000a 	sub.w	r0, r0, sl
 800a910:	fa03 f000 	lsl.w	r0, r3, r0
 800a914:	9b04      	ldr	r3, [sp, #16]
 800a916:	3401      	adds	r4, #1
 800a918:	4303      	orrs	r3, r0
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a920:	2206      	movs	r2, #6
 800a922:	482d      	ldr	r0, [pc, #180]	; (800a9d8 <_vfiprintf_r+0x254>)
 800a924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a928:	f000 fce6 	bl	800b2f8 <memchr>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d03f      	beq.n	800a9b0 <_vfiprintf_r+0x22c>
 800a930:	4b2a      	ldr	r3, [pc, #168]	; (800a9dc <_vfiprintf_r+0x258>)
 800a932:	bb1b      	cbnz	r3, 800a97c <_vfiprintf_r+0x1f8>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	3307      	adds	r3, #7
 800a938:	f023 0307 	bic.w	r3, r3, #7
 800a93c:	3308      	adds	r3, #8
 800a93e:	9303      	str	r3, [sp, #12]
 800a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a942:	443b      	add	r3, r7
 800a944:	9309      	str	r3, [sp, #36]	; 0x24
 800a946:	e767      	b.n	800a818 <_vfiprintf_r+0x94>
 800a948:	460c      	mov	r4, r1
 800a94a:	2001      	movs	r0, #1
 800a94c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a950:	e7a5      	b.n	800a89e <_vfiprintf_r+0x11a>
 800a952:	2300      	movs	r3, #0
 800a954:	f04f 0c0a 	mov.w	ip, #10
 800a958:	4619      	mov	r1, r3
 800a95a:	3401      	adds	r4, #1
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	4620      	mov	r0, r4
 800a960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a964:	3a30      	subs	r2, #48	; 0x30
 800a966:	2a09      	cmp	r2, #9
 800a968:	d903      	bls.n	800a972 <_vfiprintf_r+0x1ee>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0c5      	beq.n	800a8fa <_vfiprintf_r+0x176>
 800a96e:	9105      	str	r1, [sp, #20]
 800a970:	e7c3      	b.n	800a8fa <_vfiprintf_r+0x176>
 800a972:	4604      	mov	r4, r0
 800a974:	2301      	movs	r3, #1
 800a976:	fb0c 2101 	mla	r1, ip, r1, r2
 800a97a:	e7f0      	b.n	800a95e <_vfiprintf_r+0x1da>
 800a97c:	ab03      	add	r3, sp, #12
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	462a      	mov	r2, r5
 800a982:	4630      	mov	r0, r6
 800a984:	4b16      	ldr	r3, [pc, #88]	; (800a9e0 <_vfiprintf_r+0x25c>)
 800a986:	a904      	add	r1, sp, #16
 800a988:	f3af 8000 	nop.w
 800a98c:	4607      	mov	r7, r0
 800a98e:	1c78      	adds	r0, r7, #1
 800a990:	d1d6      	bne.n	800a940 <_vfiprintf_r+0x1bc>
 800a992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a994:	07d9      	lsls	r1, r3, #31
 800a996:	d405      	bmi.n	800a9a4 <_vfiprintf_r+0x220>
 800a998:	89ab      	ldrh	r3, [r5, #12]
 800a99a:	059a      	lsls	r2, r3, #22
 800a99c:	d402      	bmi.n	800a9a4 <_vfiprintf_r+0x220>
 800a99e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9a0:	f000 fc43 	bl	800b22a <__retarget_lock_release_recursive>
 800a9a4:	89ab      	ldrh	r3, [r5, #12]
 800a9a6:	065b      	lsls	r3, r3, #25
 800a9a8:	f53f af12 	bmi.w	800a7d0 <_vfiprintf_r+0x4c>
 800a9ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ae:	e711      	b.n	800a7d4 <_vfiprintf_r+0x50>
 800a9b0:	ab03      	add	r3, sp, #12
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	462a      	mov	r2, r5
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <_vfiprintf_r+0x25c>)
 800a9ba:	a904      	add	r1, sp, #16
 800a9bc:	f000 f882 	bl	800aac4 <_printf_i>
 800a9c0:	e7e4      	b.n	800a98c <_vfiprintf_r+0x208>
 800a9c2:	bf00      	nop
 800a9c4:	0800b79c 	.word	0x0800b79c
 800a9c8:	0800b7bc 	.word	0x0800b7bc
 800a9cc:	0800b77c 	.word	0x0800b77c
 800a9d0:	0800b749 	.word	0x0800b749
 800a9d4:	0800b74f 	.word	0x0800b74f
 800a9d8:	0800b753 	.word	0x0800b753
 800a9dc:	00000000 	.word	0x00000000
 800a9e0:	0800a75f 	.word	0x0800a75f

0800a9e4 <_printf_common>:
 800a9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e8:	4616      	mov	r6, r2
 800a9ea:	4699      	mov	r9, r3
 800a9ec:	688a      	ldr	r2, [r1, #8]
 800a9ee:	690b      	ldr	r3, [r1, #16]
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	bfb8      	it	lt
 800a9f6:	4613      	movlt	r3, r2
 800a9f8:	6033      	str	r3, [r6, #0]
 800a9fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9fe:	460c      	mov	r4, r1
 800aa00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa04:	b10a      	cbz	r2, 800aa0a <_printf_common+0x26>
 800aa06:	3301      	adds	r3, #1
 800aa08:	6033      	str	r3, [r6, #0]
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	0699      	lsls	r1, r3, #26
 800aa0e:	bf42      	ittt	mi
 800aa10:	6833      	ldrmi	r3, [r6, #0]
 800aa12:	3302      	addmi	r3, #2
 800aa14:	6033      	strmi	r3, [r6, #0]
 800aa16:	6825      	ldr	r5, [r4, #0]
 800aa18:	f015 0506 	ands.w	r5, r5, #6
 800aa1c:	d106      	bne.n	800aa2c <_printf_common+0x48>
 800aa1e:	f104 0a19 	add.w	sl, r4, #25
 800aa22:	68e3      	ldr	r3, [r4, #12]
 800aa24:	6832      	ldr	r2, [r6, #0]
 800aa26:	1a9b      	subs	r3, r3, r2
 800aa28:	42ab      	cmp	r3, r5
 800aa2a:	dc28      	bgt.n	800aa7e <_printf_common+0x9a>
 800aa2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa30:	1e13      	subs	r3, r2, #0
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	bf18      	it	ne
 800aa36:	2301      	movne	r3, #1
 800aa38:	0692      	lsls	r2, r2, #26
 800aa3a:	d42d      	bmi.n	800aa98 <_printf_common+0xb4>
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa44:	47c0      	blx	r8
 800aa46:	3001      	adds	r0, #1
 800aa48:	d020      	beq.n	800aa8c <_printf_common+0xa8>
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	68e5      	ldr	r5, [r4, #12]
 800aa4e:	f003 0306 	and.w	r3, r3, #6
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	bf18      	it	ne
 800aa56:	2500      	movne	r5, #0
 800aa58:	6832      	ldr	r2, [r6, #0]
 800aa5a:	f04f 0600 	mov.w	r6, #0
 800aa5e:	68a3      	ldr	r3, [r4, #8]
 800aa60:	bf08      	it	eq
 800aa62:	1aad      	subeq	r5, r5, r2
 800aa64:	6922      	ldr	r2, [r4, #16]
 800aa66:	bf08      	it	eq
 800aa68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	bfc4      	itt	gt
 800aa70:	1a9b      	subgt	r3, r3, r2
 800aa72:	18ed      	addgt	r5, r5, r3
 800aa74:	341a      	adds	r4, #26
 800aa76:	42b5      	cmp	r5, r6
 800aa78:	d11a      	bne.n	800aab0 <_printf_common+0xcc>
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e008      	b.n	800aa90 <_printf_common+0xac>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4652      	mov	r2, sl
 800aa82:	4649      	mov	r1, r9
 800aa84:	4638      	mov	r0, r7
 800aa86:	47c0      	blx	r8
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d103      	bne.n	800aa94 <_printf_common+0xb0>
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa94:	3501      	adds	r5, #1
 800aa96:	e7c4      	b.n	800aa22 <_printf_common+0x3e>
 800aa98:	2030      	movs	r0, #48	; 0x30
 800aa9a:	18e1      	adds	r1, r4, r3
 800aa9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaa6:	4422      	add	r2, r4
 800aaa8:	3302      	adds	r3, #2
 800aaaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaae:	e7c5      	b.n	800aa3c <_printf_common+0x58>
 800aab0:	2301      	movs	r3, #1
 800aab2:	4622      	mov	r2, r4
 800aab4:	4649      	mov	r1, r9
 800aab6:	4638      	mov	r0, r7
 800aab8:	47c0      	blx	r8
 800aaba:	3001      	adds	r0, #1
 800aabc:	d0e6      	beq.n	800aa8c <_printf_common+0xa8>
 800aabe:	3601      	adds	r6, #1
 800aac0:	e7d9      	b.n	800aa76 <_printf_common+0x92>
	...

0800aac4 <_printf_i>:
 800aac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aac8:	7e0f      	ldrb	r7, [r1, #24]
 800aaca:	4691      	mov	r9, r2
 800aacc:	2f78      	cmp	r7, #120	; 0x78
 800aace:	4680      	mov	r8, r0
 800aad0:	460c      	mov	r4, r1
 800aad2:	469a      	mov	sl, r3
 800aad4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aada:	d807      	bhi.n	800aaec <_printf_i+0x28>
 800aadc:	2f62      	cmp	r7, #98	; 0x62
 800aade:	d80a      	bhi.n	800aaf6 <_printf_i+0x32>
 800aae0:	2f00      	cmp	r7, #0
 800aae2:	f000 80d9 	beq.w	800ac98 <_printf_i+0x1d4>
 800aae6:	2f58      	cmp	r7, #88	; 0x58
 800aae8:	f000 80a4 	beq.w	800ac34 <_printf_i+0x170>
 800aaec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aaf4:	e03a      	b.n	800ab6c <_printf_i+0xa8>
 800aaf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aafa:	2b15      	cmp	r3, #21
 800aafc:	d8f6      	bhi.n	800aaec <_printf_i+0x28>
 800aafe:	a101      	add	r1, pc, #4	; (adr r1, 800ab04 <_printf_i+0x40>)
 800ab00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab04:	0800ab5d 	.word	0x0800ab5d
 800ab08:	0800ab71 	.word	0x0800ab71
 800ab0c:	0800aaed 	.word	0x0800aaed
 800ab10:	0800aaed 	.word	0x0800aaed
 800ab14:	0800aaed 	.word	0x0800aaed
 800ab18:	0800aaed 	.word	0x0800aaed
 800ab1c:	0800ab71 	.word	0x0800ab71
 800ab20:	0800aaed 	.word	0x0800aaed
 800ab24:	0800aaed 	.word	0x0800aaed
 800ab28:	0800aaed 	.word	0x0800aaed
 800ab2c:	0800aaed 	.word	0x0800aaed
 800ab30:	0800ac7f 	.word	0x0800ac7f
 800ab34:	0800aba1 	.word	0x0800aba1
 800ab38:	0800ac61 	.word	0x0800ac61
 800ab3c:	0800aaed 	.word	0x0800aaed
 800ab40:	0800aaed 	.word	0x0800aaed
 800ab44:	0800aca1 	.word	0x0800aca1
 800ab48:	0800aaed 	.word	0x0800aaed
 800ab4c:	0800aba1 	.word	0x0800aba1
 800ab50:	0800aaed 	.word	0x0800aaed
 800ab54:	0800aaed 	.word	0x0800aaed
 800ab58:	0800ac69 	.word	0x0800ac69
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	1d1a      	adds	r2, r3, #4
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	602a      	str	r2, [r5, #0]
 800ab64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e0a4      	b.n	800acba <_printf_i+0x1f6>
 800ab70:	6820      	ldr	r0, [r4, #0]
 800ab72:	6829      	ldr	r1, [r5, #0]
 800ab74:	0606      	lsls	r6, r0, #24
 800ab76:	f101 0304 	add.w	r3, r1, #4
 800ab7a:	d50a      	bpl.n	800ab92 <_printf_i+0xce>
 800ab7c:	680e      	ldr	r6, [r1, #0]
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	2e00      	cmp	r6, #0
 800ab82:	da03      	bge.n	800ab8c <_printf_i+0xc8>
 800ab84:	232d      	movs	r3, #45	; 0x2d
 800ab86:	4276      	negs	r6, r6
 800ab88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab8c:	230a      	movs	r3, #10
 800ab8e:	485e      	ldr	r0, [pc, #376]	; (800ad08 <_printf_i+0x244>)
 800ab90:	e019      	b.n	800abc6 <_printf_i+0x102>
 800ab92:	680e      	ldr	r6, [r1, #0]
 800ab94:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	bf18      	it	ne
 800ab9c:	b236      	sxthne	r6, r6
 800ab9e:	e7ef      	b.n	800ab80 <_printf_i+0xbc>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	6820      	ldr	r0, [r4, #0]
 800aba4:	1d19      	adds	r1, r3, #4
 800aba6:	6029      	str	r1, [r5, #0]
 800aba8:	0601      	lsls	r1, r0, #24
 800abaa:	d501      	bpl.n	800abb0 <_printf_i+0xec>
 800abac:	681e      	ldr	r6, [r3, #0]
 800abae:	e002      	b.n	800abb6 <_printf_i+0xf2>
 800abb0:	0646      	lsls	r6, r0, #25
 800abb2:	d5fb      	bpl.n	800abac <_printf_i+0xe8>
 800abb4:	881e      	ldrh	r6, [r3, #0]
 800abb6:	2f6f      	cmp	r7, #111	; 0x6f
 800abb8:	bf0c      	ite	eq
 800abba:	2308      	moveq	r3, #8
 800abbc:	230a      	movne	r3, #10
 800abbe:	4852      	ldr	r0, [pc, #328]	; (800ad08 <_printf_i+0x244>)
 800abc0:	2100      	movs	r1, #0
 800abc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abc6:	6865      	ldr	r5, [r4, #4]
 800abc8:	2d00      	cmp	r5, #0
 800abca:	bfa8      	it	ge
 800abcc:	6821      	ldrge	r1, [r4, #0]
 800abce:	60a5      	str	r5, [r4, #8]
 800abd0:	bfa4      	itt	ge
 800abd2:	f021 0104 	bicge.w	r1, r1, #4
 800abd6:	6021      	strge	r1, [r4, #0]
 800abd8:	b90e      	cbnz	r6, 800abde <_printf_i+0x11a>
 800abda:	2d00      	cmp	r5, #0
 800abdc:	d04d      	beq.n	800ac7a <_printf_i+0x1b6>
 800abde:	4615      	mov	r5, r2
 800abe0:	fbb6 f1f3 	udiv	r1, r6, r3
 800abe4:	fb03 6711 	mls	r7, r3, r1, r6
 800abe8:	5dc7      	ldrb	r7, [r0, r7]
 800abea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abee:	4637      	mov	r7, r6
 800abf0:	42bb      	cmp	r3, r7
 800abf2:	460e      	mov	r6, r1
 800abf4:	d9f4      	bls.n	800abe0 <_printf_i+0x11c>
 800abf6:	2b08      	cmp	r3, #8
 800abf8:	d10b      	bne.n	800ac12 <_printf_i+0x14e>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	07de      	lsls	r6, r3, #31
 800abfe:	d508      	bpl.n	800ac12 <_printf_i+0x14e>
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	6861      	ldr	r1, [r4, #4]
 800ac04:	4299      	cmp	r1, r3
 800ac06:	bfde      	ittt	le
 800ac08:	2330      	movle	r3, #48	; 0x30
 800ac0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac12:	1b52      	subs	r2, r2, r5
 800ac14:	6122      	str	r2, [r4, #16]
 800ac16:	464b      	mov	r3, r9
 800ac18:	4621      	mov	r1, r4
 800ac1a:	4640      	mov	r0, r8
 800ac1c:	f8cd a000 	str.w	sl, [sp]
 800ac20:	aa03      	add	r2, sp, #12
 800ac22:	f7ff fedf 	bl	800a9e4 <_printf_common>
 800ac26:	3001      	adds	r0, #1
 800ac28:	d14c      	bne.n	800acc4 <_printf_i+0x200>
 800ac2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2e:	b004      	add	sp, #16
 800ac30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac34:	4834      	ldr	r0, [pc, #208]	; (800ad08 <_printf_i+0x244>)
 800ac36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac3a:	6829      	ldr	r1, [r5, #0]
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac42:	6029      	str	r1, [r5, #0]
 800ac44:	061d      	lsls	r5, r3, #24
 800ac46:	d514      	bpl.n	800ac72 <_printf_i+0x1ae>
 800ac48:	07df      	lsls	r7, r3, #31
 800ac4a:	bf44      	itt	mi
 800ac4c:	f043 0320 	orrmi.w	r3, r3, #32
 800ac50:	6023      	strmi	r3, [r4, #0]
 800ac52:	b91e      	cbnz	r6, 800ac5c <_printf_i+0x198>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	f023 0320 	bic.w	r3, r3, #32
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	e7af      	b.n	800abc0 <_printf_i+0xfc>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	f043 0320 	orr.w	r3, r3, #32
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	2378      	movs	r3, #120	; 0x78
 800ac6a:	4828      	ldr	r0, [pc, #160]	; (800ad0c <_printf_i+0x248>)
 800ac6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac70:	e7e3      	b.n	800ac3a <_printf_i+0x176>
 800ac72:	0659      	lsls	r1, r3, #25
 800ac74:	bf48      	it	mi
 800ac76:	b2b6      	uxthmi	r6, r6
 800ac78:	e7e6      	b.n	800ac48 <_printf_i+0x184>
 800ac7a:	4615      	mov	r5, r2
 800ac7c:	e7bb      	b.n	800abf6 <_printf_i+0x132>
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	6826      	ldr	r6, [r4, #0]
 800ac82:	1d18      	adds	r0, r3, #4
 800ac84:	6961      	ldr	r1, [r4, #20]
 800ac86:	6028      	str	r0, [r5, #0]
 800ac88:	0635      	lsls	r5, r6, #24
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	d501      	bpl.n	800ac92 <_printf_i+0x1ce>
 800ac8e:	6019      	str	r1, [r3, #0]
 800ac90:	e002      	b.n	800ac98 <_printf_i+0x1d4>
 800ac92:	0670      	lsls	r0, r6, #25
 800ac94:	d5fb      	bpl.n	800ac8e <_printf_i+0x1ca>
 800ac96:	8019      	strh	r1, [r3, #0]
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4615      	mov	r5, r2
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	e7ba      	b.n	800ac16 <_printf_i+0x152>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	2100      	movs	r1, #0
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	602a      	str	r2, [r5, #0]
 800aca8:	681d      	ldr	r5, [r3, #0]
 800acaa:	6862      	ldr	r2, [r4, #4]
 800acac:	4628      	mov	r0, r5
 800acae:	f000 fb23 	bl	800b2f8 <memchr>
 800acb2:	b108      	cbz	r0, 800acb8 <_printf_i+0x1f4>
 800acb4:	1b40      	subs	r0, r0, r5
 800acb6:	6060      	str	r0, [r4, #4]
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	6123      	str	r3, [r4, #16]
 800acbc:	2300      	movs	r3, #0
 800acbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc2:	e7a8      	b.n	800ac16 <_printf_i+0x152>
 800acc4:	462a      	mov	r2, r5
 800acc6:	4649      	mov	r1, r9
 800acc8:	4640      	mov	r0, r8
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	47d0      	blx	sl
 800acce:	3001      	adds	r0, #1
 800acd0:	d0ab      	beq.n	800ac2a <_printf_i+0x166>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	079b      	lsls	r3, r3, #30
 800acd6:	d413      	bmi.n	800ad00 <_printf_i+0x23c>
 800acd8:	68e0      	ldr	r0, [r4, #12]
 800acda:	9b03      	ldr	r3, [sp, #12]
 800acdc:	4298      	cmp	r0, r3
 800acde:	bfb8      	it	lt
 800ace0:	4618      	movlt	r0, r3
 800ace2:	e7a4      	b.n	800ac2e <_printf_i+0x16a>
 800ace4:	2301      	movs	r3, #1
 800ace6:	4632      	mov	r2, r6
 800ace8:	4649      	mov	r1, r9
 800acea:	4640      	mov	r0, r8
 800acec:	47d0      	blx	sl
 800acee:	3001      	adds	r0, #1
 800acf0:	d09b      	beq.n	800ac2a <_printf_i+0x166>
 800acf2:	3501      	adds	r5, #1
 800acf4:	68e3      	ldr	r3, [r4, #12]
 800acf6:	9903      	ldr	r1, [sp, #12]
 800acf8:	1a5b      	subs	r3, r3, r1
 800acfa:	42ab      	cmp	r3, r5
 800acfc:	dcf2      	bgt.n	800ace4 <_printf_i+0x220>
 800acfe:	e7eb      	b.n	800acd8 <_printf_i+0x214>
 800ad00:	2500      	movs	r5, #0
 800ad02:	f104 0619 	add.w	r6, r4, #25
 800ad06:	e7f5      	b.n	800acf4 <_printf_i+0x230>
 800ad08:	0800b75a 	.word	0x0800b75a
 800ad0c:	0800b76b 	.word	0x0800b76b

0800ad10 <_sbrk_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	2300      	movs	r3, #0
 800ad14:	4d05      	ldr	r5, [pc, #20]	; (800ad2c <_sbrk_r+0x1c>)
 800ad16:	4604      	mov	r4, r0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	f7f6 ff8c 	bl	8001c38 <_sbrk>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_sbrk_r+0x1a>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_sbrk_r+0x1a>
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	20000e44 	.word	0x20000e44

0800ad30 <__swbuf_r>:
 800ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad32:	460e      	mov	r6, r1
 800ad34:	4614      	mov	r4, r2
 800ad36:	4605      	mov	r5, r0
 800ad38:	b118      	cbz	r0, 800ad42 <__swbuf_r+0x12>
 800ad3a:	6983      	ldr	r3, [r0, #24]
 800ad3c:	b90b      	cbnz	r3, 800ad42 <__swbuf_r+0x12>
 800ad3e:	f000 f9d5 	bl	800b0ec <__sinit>
 800ad42:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <__swbuf_r+0x98>)
 800ad44:	429c      	cmp	r4, r3
 800ad46:	d12b      	bne.n	800ada0 <__swbuf_r+0x70>
 800ad48:	686c      	ldr	r4, [r5, #4]
 800ad4a:	69a3      	ldr	r3, [r4, #24]
 800ad4c:	60a3      	str	r3, [r4, #8]
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	071a      	lsls	r2, r3, #28
 800ad52:	d52f      	bpl.n	800adb4 <__swbuf_r+0x84>
 800ad54:	6923      	ldr	r3, [r4, #16]
 800ad56:	b36b      	cbz	r3, 800adb4 <__swbuf_r+0x84>
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	6820      	ldr	r0, [r4, #0]
 800ad5c:	b2f6      	uxtb	r6, r6
 800ad5e:	1ac0      	subs	r0, r0, r3
 800ad60:	6963      	ldr	r3, [r4, #20]
 800ad62:	4637      	mov	r7, r6
 800ad64:	4283      	cmp	r3, r0
 800ad66:	dc04      	bgt.n	800ad72 <__swbuf_r+0x42>
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f000 f92a 	bl	800afc4 <_fflush_r>
 800ad70:	bb30      	cbnz	r0, 800adc0 <__swbuf_r+0x90>
 800ad72:	68a3      	ldr	r3, [r4, #8]
 800ad74:	3001      	adds	r0, #1
 800ad76:	3b01      	subs	r3, #1
 800ad78:	60a3      	str	r3, [r4, #8]
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	6022      	str	r2, [r4, #0]
 800ad80:	701e      	strb	r6, [r3, #0]
 800ad82:	6963      	ldr	r3, [r4, #20]
 800ad84:	4283      	cmp	r3, r0
 800ad86:	d004      	beq.n	800ad92 <__swbuf_r+0x62>
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	07db      	lsls	r3, r3, #31
 800ad8c:	d506      	bpl.n	800ad9c <__swbuf_r+0x6c>
 800ad8e:	2e0a      	cmp	r6, #10
 800ad90:	d104      	bne.n	800ad9c <__swbuf_r+0x6c>
 800ad92:	4621      	mov	r1, r4
 800ad94:	4628      	mov	r0, r5
 800ad96:	f000 f915 	bl	800afc4 <_fflush_r>
 800ad9a:	b988      	cbnz	r0, 800adc0 <__swbuf_r+0x90>
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada0:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <__swbuf_r+0x9c>)
 800ada2:	429c      	cmp	r4, r3
 800ada4:	d101      	bne.n	800adaa <__swbuf_r+0x7a>
 800ada6:	68ac      	ldr	r4, [r5, #8]
 800ada8:	e7cf      	b.n	800ad4a <__swbuf_r+0x1a>
 800adaa:	4b09      	ldr	r3, [pc, #36]	; (800add0 <__swbuf_r+0xa0>)
 800adac:	429c      	cmp	r4, r3
 800adae:	bf08      	it	eq
 800adb0:	68ec      	ldreq	r4, [r5, #12]
 800adb2:	e7ca      	b.n	800ad4a <__swbuf_r+0x1a>
 800adb4:	4621      	mov	r1, r4
 800adb6:	4628      	mov	r0, r5
 800adb8:	f000 f80c 	bl	800add4 <__swsetup_r>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d0cb      	beq.n	800ad58 <__swbuf_r+0x28>
 800adc0:	f04f 37ff 	mov.w	r7, #4294967295
 800adc4:	e7ea      	b.n	800ad9c <__swbuf_r+0x6c>
 800adc6:	bf00      	nop
 800adc8:	0800b79c 	.word	0x0800b79c
 800adcc:	0800b7bc 	.word	0x0800b7bc
 800add0:	0800b77c 	.word	0x0800b77c

0800add4 <__swsetup_r>:
 800add4:	4b32      	ldr	r3, [pc, #200]	; (800aea0 <__swsetup_r+0xcc>)
 800add6:	b570      	push	{r4, r5, r6, lr}
 800add8:	681d      	ldr	r5, [r3, #0]
 800adda:	4606      	mov	r6, r0
 800addc:	460c      	mov	r4, r1
 800adde:	b125      	cbz	r5, 800adea <__swsetup_r+0x16>
 800ade0:	69ab      	ldr	r3, [r5, #24]
 800ade2:	b913      	cbnz	r3, 800adea <__swsetup_r+0x16>
 800ade4:	4628      	mov	r0, r5
 800ade6:	f000 f981 	bl	800b0ec <__sinit>
 800adea:	4b2e      	ldr	r3, [pc, #184]	; (800aea4 <__swsetup_r+0xd0>)
 800adec:	429c      	cmp	r4, r3
 800adee:	d10f      	bne.n	800ae10 <__swsetup_r+0x3c>
 800adf0:	686c      	ldr	r4, [r5, #4]
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adf8:	0719      	lsls	r1, r3, #28
 800adfa:	d42c      	bmi.n	800ae56 <__swsetup_r+0x82>
 800adfc:	06dd      	lsls	r5, r3, #27
 800adfe:	d411      	bmi.n	800ae24 <__swsetup_r+0x50>
 800ae00:	2309      	movs	r3, #9
 800ae02:	6033      	str	r3, [r6, #0]
 800ae04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	e03e      	b.n	800ae8e <__swsetup_r+0xba>
 800ae10:	4b25      	ldr	r3, [pc, #148]	; (800aea8 <__swsetup_r+0xd4>)
 800ae12:	429c      	cmp	r4, r3
 800ae14:	d101      	bne.n	800ae1a <__swsetup_r+0x46>
 800ae16:	68ac      	ldr	r4, [r5, #8]
 800ae18:	e7eb      	b.n	800adf2 <__swsetup_r+0x1e>
 800ae1a:	4b24      	ldr	r3, [pc, #144]	; (800aeac <__swsetup_r+0xd8>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	bf08      	it	eq
 800ae20:	68ec      	ldreq	r4, [r5, #12]
 800ae22:	e7e6      	b.n	800adf2 <__swsetup_r+0x1e>
 800ae24:	0758      	lsls	r0, r3, #29
 800ae26:	d512      	bpl.n	800ae4e <__swsetup_r+0x7a>
 800ae28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae2a:	b141      	cbz	r1, 800ae3e <__swsetup_r+0x6a>
 800ae2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae30:	4299      	cmp	r1, r3
 800ae32:	d002      	beq.n	800ae3a <__swsetup_r+0x66>
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7ff fba1 	bl	800a57c <_free_r>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae44:	81a3      	strh	r3, [r4, #12]
 800ae46:	2300      	movs	r3, #0
 800ae48:	6063      	str	r3, [r4, #4]
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f043 0308 	orr.w	r3, r3, #8
 800ae54:	81a3      	strh	r3, [r4, #12]
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	b94b      	cbnz	r3, 800ae6e <__swsetup_r+0x9a>
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae64:	d003      	beq.n	800ae6e <__swsetup_r+0x9a>
 800ae66:	4621      	mov	r1, r4
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f000 fa05 	bl	800b278 <__smakebuf_r>
 800ae6e:	89a0      	ldrh	r0, [r4, #12]
 800ae70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae74:	f010 0301 	ands.w	r3, r0, #1
 800ae78:	d00a      	beq.n	800ae90 <__swsetup_r+0xbc>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60a3      	str	r3, [r4, #8]
 800ae7e:	6963      	ldr	r3, [r4, #20]
 800ae80:	425b      	negs	r3, r3
 800ae82:	61a3      	str	r3, [r4, #24]
 800ae84:	6923      	ldr	r3, [r4, #16]
 800ae86:	b943      	cbnz	r3, 800ae9a <__swsetup_r+0xc6>
 800ae88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae8c:	d1ba      	bne.n	800ae04 <__swsetup_r+0x30>
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	0781      	lsls	r1, r0, #30
 800ae92:	bf58      	it	pl
 800ae94:	6963      	ldrpl	r3, [r4, #20]
 800ae96:	60a3      	str	r3, [r4, #8]
 800ae98:	e7f4      	b.n	800ae84 <__swsetup_r+0xb0>
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	e7f7      	b.n	800ae8e <__swsetup_r+0xba>
 800ae9e:	bf00      	nop
 800aea0:	200001a0 	.word	0x200001a0
 800aea4:	0800b79c 	.word	0x0800b79c
 800aea8:	0800b7bc 	.word	0x0800b7bc
 800aeac:	0800b77c 	.word	0x0800b77c

0800aeb0 <abort>:
 800aeb0:	2006      	movs	r0, #6
 800aeb2:	b508      	push	{r3, lr}
 800aeb4:	f000 fa62 	bl	800b37c <raise>
 800aeb8:	2001      	movs	r0, #1
 800aeba:	f7f6 fe4a 	bl	8001b52 <_exit>
	...

0800aec0 <__sflush_r>:
 800aec0:	898a      	ldrh	r2, [r1, #12]
 800aec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec4:	4605      	mov	r5, r0
 800aec6:	0710      	lsls	r0, r2, #28
 800aec8:	460c      	mov	r4, r1
 800aeca:	d457      	bmi.n	800af7c <__sflush_r+0xbc>
 800aecc:	684b      	ldr	r3, [r1, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	dc04      	bgt.n	800aedc <__sflush_r+0x1c>
 800aed2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	dc01      	bgt.n	800aedc <__sflush_r+0x1c>
 800aed8:	2000      	movs	r0, #0
 800aeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aedc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aede:	2e00      	cmp	r6, #0
 800aee0:	d0fa      	beq.n	800aed8 <__sflush_r+0x18>
 800aee2:	2300      	movs	r3, #0
 800aee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aee8:	682f      	ldr	r7, [r5, #0]
 800aeea:	602b      	str	r3, [r5, #0]
 800aeec:	d032      	beq.n	800af54 <__sflush_r+0x94>
 800aeee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	075a      	lsls	r2, r3, #29
 800aef4:	d505      	bpl.n	800af02 <__sflush_r+0x42>
 800aef6:	6863      	ldr	r3, [r4, #4]
 800aef8:	1ac0      	subs	r0, r0, r3
 800aefa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aefc:	b10b      	cbz	r3, 800af02 <__sflush_r+0x42>
 800aefe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af00:	1ac0      	subs	r0, r0, r3
 800af02:	2300      	movs	r3, #0
 800af04:	4602      	mov	r2, r0
 800af06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af08:	4628      	mov	r0, r5
 800af0a:	6a21      	ldr	r1, [r4, #32]
 800af0c:	47b0      	blx	r6
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	d106      	bne.n	800af22 <__sflush_r+0x62>
 800af14:	6829      	ldr	r1, [r5, #0]
 800af16:	291d      	cmp	r1, #29
 800af18:	d82c      	bhi.n	800af74 <__sflush_r+0xb4>
 800af1a:	4a29      	ldr	r2, [pc, #164]	; (800afc0 <__sflush_r+0x100>)
 800af1c:	40ca      	lsrs	r2, r1
 800af1e:	07d6      	lsls	r6, r2, #31
 800af20:	d528      	bpl.n	800af74 <__sflush_r+0xb4>
 800af22:	2200      	movs	r2, #0
 800af24:	6062      	str	r2, [r4, #4]
 800af26:	6922      	ldr	r2, [r4, #16]
 800af28:	04d9      	lsls	r1, r3, #19
 800af2a:	6022      	str	r2, [r4, #0]
 800af2c:	d504      	bpl.n	800af38 <__sflush_r+0x78>
 800af2e:	1c42      	adds	r2, r0, #1
 800af30:	d101      	bne.n	800af36 <__sflush_r+0x76>
 800af32:	682b      	ldr	r3, [r5, #0]
 800af34:	b903      	cbnz	r3, 800af38 <__sflush_r+0x78>
 800af36:	6560      	str	r0, [r4, #84]	; 0x54
 800af38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af3a:	602f      	str	r7, [r5, #0]
 800af3c:	2900      	cmp	r1, #0
 800af3e:	d0cb      	beq.n	800aed8 <__sflush_r+0x18>
 800af40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af44:	4299      	cmp	r1, r3
 800af46:	d002      	beq.n	800af4e <__sflush_r+0x8e>
 800af48:	4628      	mov	r0, r5
 800af4a:	f7ff fb17 	bl	800a57c <_free_r>
 800af4e:	2000      	movs	r0, #0
 800af50:	6360      	str	r0, [r4, #52]	; 0x34
 800af52:	e7c2      	b.n	800aeda <__sflush_r+0x1a>
 800af54:	6a21      	ldr	r1, [r4, #32]
 800af56:	2301      	movs	r3, #1
 800af58:	4628      	mov	r0, r5
 800af5a:	47b0      	blx	r6
 800af5c:	1c41      	adds	r1, r0, #1
 800af5e:	d1c7      	bne.n	800aef0 <__sflush_r+0x30>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0c4      	beq.n	800aef0 <__sflush_r+0x30>
 800af66:	2b1d      	cmp	r3, #29
 800af68:	d001      	beq.n	800af6e <__sflush_r+0xae>
 800af6a:	2b16      	cmp	r3, #22
 800af6c:	d101      	bne.n	800af72 <__sflush_r+0xb2>
 800af6e:	602f      	str	r7, [r5, #0]
 800af70:	e7b2      	b.n	800aed8 <__sflush_r+0x18>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af78:	81a3      	strh	r3, [r4, #12]
 800af7a:	e7ae      	b.n	800aeda <__sflush_r+0x1a>
 800af7c:	690f      	ldr	r7, [r1, #16]
 800af7e:	2f00      	cmp	r7, #0
 800af80:	d0aa      	beq.n	800aed8 <__sflush_r+0x18>
 800af82:	0793      	lsls	r3, r2, #30
 800af84:	bf18      	it	ne
 800af86:	2300      	movne	r3, #0
 800af88:	680e      	ldr	r6, [r1, #0]
 800af8a:	bf08      	it	eq
 800af8c:	694b      	ldreq	r3, [r1, #20]
 800af8e:	1bf6      	subs	r6, r6, r7
 800af90:	600f      	str	r7, [r1, #0]
 800af92:	608b      	str	r3, [r1, #8]
 800af94:	2e00      	cmp	r6, #0
 800af96:	dd9f      	ble.n	800aed8 <__sflush_r+0x18>
 800af98:	4633      	mov	r3, r6
 800af9a:	463a      	mov	r2, r7
 800af9c:	4628      	mov	r0, r5
 800af9e:	6a21      	ldr	r1, [r4, #32]
 800afa0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800afa4:	47e0      	blx	ip
 800afa6:	2800      	cmp	r0, #0
 800afa8:	dc06      	bgt.n	800afb8 <__sflush_r+0xf8>
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f04f 30ff 	mov.w	r0, #4294967295
 800afb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb4:	81a3      	strh	r3, [r4, #12]
 800afb6:	e790      	b.n	800aeda <__sflush_r+0x1a>
 800afb8:	4407      	add	r7, r0
 800afba:	1a36      	subs	r6, r6, r0
 800afbc:	e7ea      	b.n	800af94 <__sflush_r+0xd4>
 800afbe:	bf00      	nop
 800afc0:	20400001 	.word	0x20400001

0800afc4 <_fflush_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	690b      	ldr	r3, [r1, #16]
 800afc8:	4605      	mov	r5, r0
 800afca:	460c      	mov	r4, r1
 800afcc:	b913      	cbnz	r3, 800afd4 <_fflush_r+0x10>
 800afce:	2500      	movs	r5, #0
 800afd0:	4628      	mov	r0, r5
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	b118      	cbz	r0, 800afde <_fflush_r+0x1a>
 800afd6:	6983      	ldr	r3, [r0, #24]
 800afd8:	b90b      	cbnz	r3, 800afde <_fflush_r+0x1a>
 800afda:	f000 f887 	bl	800b0ec <__sinit>
 800afde:	4b14      	ldr	r3, [pc, #80]	; (800b030 <_fflush_r+0x6c>)
 800afe0:	429c      	cmp	r4, r3
 800afe2:	d11b      	bne.n	800b01c <_fflush_r+0x58>
 800afe4:	686c      	ldr	r4, [r5, #4]
 800afe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0ef      	beq.n	800afce <_fflush_r+0xa>
 800afee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aff0:	07d0      	lsls	r0, r2, #31
 800aff2:	d404      	bmi.n	800affe <_fflush_r+0x3a>
 800aff4:	0599      	lsls	r1, r3, #22
 800aff6:	d402      	bmi.n	800affe <_fflush_r+0x3a>
 800aff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800affa:	f000 f915 	bl	800b228 <__retarget_lock_acquire_recursive>
 800affe:	4628      	mov	r0, r5
 800b000:	4621      	mov	r1, r4
 800b002:	f7ff ff5d 	bl	800aec0 <__sflush_r>
 800b006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b008:	4605      	mov	r5, r0
 800b00a:	07da      	lsls	r2, r3, #31
 800b00c:	d4e0      	bmi.n	800afd0 <_fflush_r+0xc>
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	059b      	lsls	r3, r3, #22
 800b012:	d4dd      	bmi.n	800afd0 <_fflush_r+0xc>
 800b014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b016:	f000 f908 	bl	800b22a <__retarget_lock_release_recursive>
 800b01a:	e7d9      	b.n	800afd0 <_fflush_r+0xc>
 800b01c:	4b05      	ldr	r3, [pc, #20]	; (800b034 <_fflush_r+0x70>)
 800b01e:	429c      	cmp	r4, r3
 800b020:	d101      	bne.n	800b026 <_fflush_r+0x62>
 800b022:	68ac      	ldr	r4, [r5, #8]
 800b024:	e7df      	b.n	800afe6 <_fflush_r+0x22>
 800b026:	4b04      	ldr	r3, [pc, #16]	; (800b038 <_fflush_r+0x74>)
 800b028:	429c      	cmp	r4, r3
 800b02a:	bf08      	it	eq
 800b02c:	68ec      	ldreq	r4, [r5, #12]
 800b02e:	e7da      	b.n	800afe6 <_fflush_r+0x22>
 800b030:	0800b79c 	.word	0x0800b79c
 800b034:	0800b7bc 	.word	0x0800b7bc
 800b038:	0800b77c 	.word	0x0800b77c

0800b03c <std>:
 800b03c:	2300      	movs	r3, #0
 800b03e:	b510      	push	{r4, lr}
 800b040:	4604      	mov	r4, r0
 800b042:	e9c0 3300 	strd	r3, r3, [r0]
 800b046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b04a:	6083      	str	r3, [r0, #8]
 800b04c:	8181      	strh	r1, [r0, #12]
 800b04e:	6643      	str	r3, [r0, #100]	; 0x64
 800b050:	81c2      	strh	r2, [r0, #14]
 800b052:	6183      	str	r3, [r0, #24]
 800b054:	4619      	mov	r1, r3
 800b056:	2208      	movs	r2, #8
 800b058:	305c      	adds	r0, #92	; 0x5c
 800b05a:	f7ff f965 	bl	800a328 <memset>
 800b05e:	4b05      	ldr	r3, [pc, #20]	; (800b074 <std+0x38>)
 800b060:	6224      	str	r4, [r4, #32]
 800b062:	6263      	str	r3, [r4, #36]	; 0x24
 800b064:	4b04      	ldr	r3, [pc, #16]	; (800b078 <std+0x3c>)
 800b066:	62a3      	str	r3, [r4, #40]	; 0x28
 800b068:	4b04      	ldr	r3, [pc, #16]	; (800b07c <std+0x40>)
 800b06a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b06c:	4b04      	ldr	r3, [pc, #16]	; (800b080 <std+0x44>)
 800b06e:	6323      	str	r3, [r4, #48]	; 0x30
 800b070:	bd10      	pop	{r4, pc}
 800b072:	bf00      	nop
 800b074:	0800b3b5 	.word	0x0800b3b5
 800b078:	0800b3d7 	.word	0x0800b3d7
 800b07c:	0800b40f 	.word	0x0800b40f
 800b080:	0800b433 	.word	0x0800b433

0800b084 <_cleanup_r>:
 800b084:	4901      	ldr	r1, [pc, #4]	; (800b08c <_cleanup_r+0x8>)
 800b086:	f000 b8af 	b.w	800b1e8 <_fwalk_reent>
 800b08a:	bf00      	nop
 800b08c:	0800afc5 	.word	0x0800afc5

0800b090 <__sfmoreglue>:
 800b090:	2268      	movs	r2, #104	; 0x68
 800b092:	b570      	push	{r4, r5, r6, lr}
 800b094:	1e4d      	subs	r5, r1, #1
 800b096:	4355      	muls	r5, r2
 800b098:	460e      	mov	r6, r1
 800b09a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b09e:	f7ff fad5 	bl	800a64c <_malloc_r>
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	b140      	cbz	r0, 800b0b8 <__sfmoreglue+0x28>
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b0ac:	300c      	adds	r0, #12
 800b0ae:	60a0      	str	r0, [r4, #8]
 800b0b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0b4:	f7ff f938 	bl	800a328 <memset>
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}

0800b0bc <__sfp_lock_acquire>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	; (800b0c4 <__sfp_lock_acquire+0x8>)
 800b0be:	f000 b8b3 	b.w	800b228 <__retarget_lock_acquire_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	20000e41 	.word	0x20000e41

0800b0c8 <__sfp_lock_release>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	; (800b0d0 <__sfp_lock_release+0x8>)
 800b0ca:	f000 b8ae 	b.w	800b22a <__retarget_lock_release_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	20000e41 	.word	0x20000e41

0800b0d4 <__sinit_lock_acquire>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	; (800b0dc <__sinit_lock_acquire+0x8>)
 800b0d6:	f000 b8a7 	b.w	800b228 <__retarget_lock_acquire_recursive>
 800b0da:	bf00      	nop
 800b0dc:	20000e42 	.word	0x20000e42

0800b0e0 <__sinit_lock_release>:
 800b0e0:	4801      	ldr	r0, [pc, #4]	; (800b0e8 <__sinit_lock_release+0x8>)
 800b0e2:	f000 b8a2 	b.w	800b22a <__retarget_lock_release_recursive>
 800b0e6:	bf00      	nop
 800b0e8:	20000e42 	.word	0x20000e42

0800b0ec <__sinit>:
 800b0ec:	b510      	push	{r4, lr}
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	f7ff fff0 	bl	800b0d4 <__sinit_lock_acquire>
 800b0f4:	69a3      	ldr	r3, [r4, #24]
 800b0f6:	b11b      	cbz	r3, 800b100 <__sinit+0x14>
 800b0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0fc:	f7ff bff0 	b.w	800b0e0 <__sinit_lock_release>
 800b100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b104:	6523      	str	r3, [r4, #80]	; 0x50
 800b106:	4b13      	ldr	r3, [pc, #76]	; (800b154 <__sinit+0x68>)
 800b108:	4a13      	ldr	r2, [pc, #76]	; (800b158 <__sinit+0x6c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b10e:	42a3      	cmp	r3, r4
 800b110:	bf08      	it	eq
 800b112:	2301      	moveq	r3, #1
 800b114:	4620      	mov	r0, r4
 800b116:	bf08      	it	eq
 800b118:	61a3      	streq	r3, [r4, #24]
 800b11a:	f000 f81f 	bl	800b15c <__sfp>
 800b11e:	6060      	str	r0, [r4, #4]
 800b120:	4620      	mov	r0, r4
 800b122:	f000 f81b 	bl	800b15c <__sfp>
 800b126:	60a0      	str	r0, [r4, #8]
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 f817 	bl	800b15c <__sfp>
 800b12e:	2200      	movs	r2, #0
 800b130:	2104      	movs	r1, #4
 800b132:	60e0      	str	r0, [r4, #12]
 800b134:	6860      	ldr	r0, [r4, #4]
 800b136:	f7ff ff81 	bl	800b03c <std>
 800b13a:	2201      	movs	r2, #1
 800b13c:	2109      	movs	r1, #9
 800b13e:	68a0      	ldr	r0, [r4, #8]
 800b140:	f7ff ff7c 	bl	800b03c <std>
 800b144:	2202      	movs	r2, #2
 800b146:	2112      	movs	r1, #18
 800b148:	68e0      	ldr	r0, [r4, #12]
 800b14a:	f7ff ff77 	bl	800b03c <std>
 800b14e:	2301      	movs	r3, #1
 800b150:	61a3      	str	r3, [r4, #24]
 800b152:	e7d1      	b.n	800b0f8 <__sinit+0xc>
 800b154:	0800b594 	.word	0x0800b594
 800b158:	0800b085 	.word	0x0800b085

0800b15c <__sfp>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	4607      	mov	r7, r0
 800b160:	f7ff ffac 	bl	800b0bc <__sfp_lock_acquire>
 800b164:	4b1e      	ldr	r3, [pc, #120]	; (800b1e0 <__sfp+0x84>)
 800b166:	681e      	ldr	r6, [r3, #0]
 800b168:	69b3      	ldr	r3, [r6, #24]
 800b16a:	b913      	cbnz	r3, 800b172 <__sfp+0x16>
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7ff ffbd 	bl	800b0ec <__sinit>
 800b172:	3648      	adds	r6, #72	; 0x48
 800b174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b178:	3b01      	subs	r3, #1
 800b17a:	d503      	bpl.n	800b184 <__sfp+0x28>
 800b17c:	6833      	ldr	r3, [r6, #0]
 800b17e:	b30b      	cbz	r3, 800b1c4 <__sfp+0x68>
 800b180:	6836      	ldr	r6, [r6, #0]
 800b182:	e7f7      	b.n	800b174 <__sfp+0x18>
 800b184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b188:	b9d5      	cbnz	r5, 800b1c0 <__sfp+0x64>
 800b18a:	4b16      	ldr	r3, [pc, #88]	; (800b1e4 <__sfp+0x88>)
 800b18c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b190:	60e3      	str	r3, [r4, #12]
 800b192:	6665      	str	r5, [r4, #100]	; 0x64
 800b194:	f000 f847 	bl	800b226 <__retarget_lock_init_recursive>
 800b198:	f7ff ff96 	bl	800b0c8 <__sfp_lock_release>
 800b19c:	2208      	movs	r2, #8
 800b19e:	4629      	mov	r1, r5
 800b1a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1a8:	6025      	str	r5, [r4, #0]
 800b1aa:	61a5      	str	r5, [r4, #24]
 800b1ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1b0:	f7ff f8ba 	bl	800a328 <memset>
 800b1b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1bc:	4620      	mov	r0, r4
 800b1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c0:	3468      	adds	r4, #104	; 0x68
 800b1c2:	e7d9      	b.n	800b178 <__sfp+0x1c>
 800b1c4:	2104      	movs	r1, #4
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f7ff ff62 	bl	800b090 <__sfmoreglue>
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	6030      	str	r0, [r6, #0]
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d1d5      	bne.n	800b180 <__sfp+0x24>
 800b1d4:	f7ff ff78 	bl	800b0c8 <__sfp_lock_release>
 800b1d8:	230c      	movs	r3, #12
 800b1da:	603b      	str	r3, [r7, #0]
 800b1dc:	e7ee      	b.n	800b1bc <__sfp+0x60>
 800b1de:	bf00      	nop
 800b1e0:	0800b594 	.word	0x0800b594
 800b1e4:	ffff0001 	.word	0xffff0001

0800b1e8 <_fwalk_reent>:
 800b1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ec:	4606      	mov	r6, r0
 800b1ee:	4688      	mov	r8, r1
 800b1f0:	2700      	movs	r7, #0
 800b1f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b1fe:	d505      	bpl.n	800b20c <_fwalk_reent+0x24>
 800b200:	6824      	ldr	r4, [r4, #0]
 800b202:	2c00      	cmp	r4, #0
 800b204:	d1f7      	bne.n	800b1f6 <_fwalk_reent+0xe>
 800b206:	4638      	mov	r0, r7
 800b208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20c:	89ab      	ldrh	r3, [r5, #12]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d907      	bls.n	800b222 <_fwalk_reent+0x3a>
 800b212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b216:	3301      	adds	r3, #1
 800b218:	d003      	beq.n	800b222 <_fwalk_reent+0x3a>
 800b21a:	4629      	mov	r1, r5
 800b21c:	4630      	mov	r0, r6
 800b21e:	47c0      	blx	r8
 800b220:	4307      	orrs	r7, r0
 800b222:	3568      	adds	r5, #104	; 0x68
 800b224:	e7e9      	b.n	800b1fa <_fwalk_reent+0x12>

0800b226 <__retarget_lock_init_recursive>:
 800b226:	4770      	bx	lr

0800b228 <__retarget_lock_acquire_recursive>:
 800b228:	4770      	bx	lr

0800b22a <__retarget_lock_release_recursive>:
 800b22a:	4770      	bx	lr

0800b22c <__swhatbuf_r>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	460e      	mov	r6, r1
 800b230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b234:	4614      	mov	r4, r2
 800b236:	2900      	cmp	r1, #0
 800b238:	461d      	mov	r5, r3
 800b23a:	b096      	sub	sp, #88	; 0x58
 800b23c:	da08      	bge.n	800b250 <__swhatbuf_r+0x24>
 800b23e:	2200      	movs	r2, #0
 800b240:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b244:	602a      	str	r2, [r5, #0]
 800b246:	061a      	lsls	r2, r3, #24
 800b248:	d410      	bmi.n	800b26c <__swhatbuf_r+0x40>
 800b24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24e:	e00e      	b.n	800b26e <__swhatbuf_r+0x42>
 800b250:	466a      	mov	r2, sp
 800b252:	f000 f915 	bl	800b480 <_fstat_r>
 800b256:	2800      	cmp	r0, #0
 800b258:	dbf1      	blt.n	800b23e <__swhatbuf_r+0x12>
 800b25a:	9a01      	ldr	r2, [sp, #4]
 800b25c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b264:	425a      	negs	r2, r3
 800b266:	415a      	adcs	r2, r3
 800b268:	602a      	str	r2, [r5, #0]
 800b26a:	e7ee      	b.n	800b24a <__swhatbuf_r+0x1e>
 800b26c:	2340      	movs	r3, #64	; 0x40
 800b26e:	2000      	movs	r0, #0
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	b016      	add	sp, #88	; 0x58
 800b274:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b278 <__smakebuf_r>:
 800b278:	898b      	ldrh	r3, [r1, #12]
 800b27a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b27c:	079d      	lsls	r5, r3, #30
 800b27e:	4606      	mov	r6, r0
 800b280:	460c      	mov	r4, r1
 800b282:	d507      	bpl.n	800b294 <__smakebuf_r+0x1c>
 800b284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	2301      	movs	r3, #1
 800b28e:	6163      	str	r3, [r4, #20]
 800b290:	b002      	add	sp, #8
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	466a      	mov	r2, sp
 800b296:	ab01      	add	r3, sp, #4
 800b298:	f7ff ffc8 	bl	800b22c <__swhatbuf_r>
 800b29c:	9900      	ldr	r1, [sp, #0]
 800b29e:	4605      	mov	r5, r0
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff f9d3 	bl	800a64c <_malloc_r>
 800b2a6:	b948      	cbnz	r0, 800b2bc <__smakebuf_r+0x44>
 800b2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ac:	059a      	lsls	r2, r3, #22
 800b2ae:	d4ef      	bmi.n	800b290 <__smakebuf_r+0x18>
 800b2b0:	f023 0303 	bic.w	r3, r3, #3
 800b2b4:	f043 0302 	orr.w	r3, r3, #2
 800b2b8:	81a3      	strh	r3, [r4, #12]
 800b2ba:	e7e3      	b.n	800b284 <__smakebuf_r+0xc>
 800b2bc:	4b0d      	ldr	r3, [pc, #52]	; (800b2f4 <__smakebuf_r+0x7c>)
 800b2be:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	6020      	str	r0, [r4, #0]
 800b2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c8:	81a3      	strh	r3, [r4, #12]
 800b2ca:	9b00      	ldr	r3, [sp, #0]
 800b2cc:	6120      	str	r0, [r4, #16]
 800b2ce:	6163      	str	r3, [r4, #20]
 800b2d0:	9b01      	ldr	r3, [sp, #4]
 800b2d2:	b15b      	cbz	r3, 800b2ec <__smakebuf_r+0x74>
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2da:	f000 f8e3 	bl	800b4a4 <_isatty_r>
 800b2de:	b128      	cbz	r0, 800b2ec <__smakebuf_r+0x74>
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	f023 0303 	bic.w	r3, r3, #3
 800b2e6:	f043 0301 	orr.w	r3, r3, #1
 800b2ea:	81a3      	strh	r3, [r4, #12]
 800b2ec:	89a0      	ldrh	r0, [r4, #12]
 800b2ee:	4305      	orrs	r5, r0
 800b2f0:	81a5      	strh	r5, [r4, #12]
 800b2f2:	e7cd      	b.n	800b290 <__smakebuf_r+0x18>
 800b2f4:	0800b085 	.word	0x0800b085

0800b2f8 <memchr>:
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	b510      	push	{r4, lr}
 800b2fc:	b2c9      	uxtb	r1, r1
 800b2fe:	4402      	add	r2, r0
 800b300:	4293      	cmp	r3, r2
 800b302:	4618      	mov	r0, r3
 800b304:	d101      	bne.n	800b30a <memchr+0x12>
 800b306:	2000      	movs	r0, #0
 800b308:	e003      	b.n	800b312 <memchr+0x1a>
 800b30a:	7804      	ldrb	r4, [r0, #0]
 800b30c:	3301      	adds	r3, #1
 800b30e:	428c      	cmp	r4, r1
 800b310:	d1f6      	bne.n	800b300 <memchr+0x8>
 800b312:	bd10      	pop	{r4, pc}

0800b314 <__malloc_lock>:
 800b314:	4801      	ldr	r0, [pc, #4]	; (800b31c <__malloc_lock+0x8>)
 800b316:	f7ff bf87 	b.w	800b228 <__retarget_lock_acquire_recursive>
 800b31a:	bf00      	nop
 800b31c:	20000e40 	.word	0x20000e40

0800b320 <__malloc_unlock>:
 800b320:	4801      	ldr	r0, [pc, #4]	; (800b328 <__malloc_unlock+0x8>)
 800b322:	f7ff bf82 	b.w	800b22a <__retarget_lock_release_recursive>
 800b326:	bf00      	nop
 800b328:	20000e40 	.word	0x20000e40

0800b32c <_raise_r>:
 800b32c:	291f      	cmp	r1, #31
 800b32e:	b538      	push	{r3, r4, r5, lr}
 800b330:	4604      	mov	r4, r0
 800b332:	460d      	mov	r5, r1
 800b334:	d904      	bls.n	800b340 <_raise_r+0x14>
 800b336:	2316      	movs	r3, #22
 800b338:	6003      	str	r3, [r0, #0]
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
 800b340:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b342:	b112      	cbz	r2, 800b34a <_raise_r+0x1e>
 800b344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b348:	b94b      	cbnz	r3, 800b35e <_raise_r+0x32>
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 f830 	bl	800b3b0 <_getpid_r>
 800b350:	462a      	mov	r2, r5
 800b352:	4601      	mov	r1, r0
 800b354:	4620      	mov	r0, r4
 800b356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b35a:	f000 b817 	b.w	800b38c <_kill_r>
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d00a      	beq.n	800b378 <_raise_r+0x4c>
 800b362:	1c59      	adds	r1, r3, #1
 800b364:	d103      	bne.n	800b36e <_raise_r+0x42>
 800b366:	2316      	movs	r3, #22
 800b368:	6003      	str	r3, [r0, #0]
 800b36a:	2001      	movs	r0, #1
 800b36c:	e7e7      	b.n	800b33e <_raise_r+0x12>
 800b36e:	2400      	movs	r4, #0
 800b370:	4628      	mov	r0, r5
 800b372:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b376:	4798      	blx	r3
 800b378:	2000      	movs	r0, #0
 800b37a:	e7e0      	b.n	800b33e <_raise_r+0x12>

0800b37c <raise>:
 800b37c:	4b02      	ldr	r3, [pc, #8]	; (800b388 <raise+0xc>)
 800b37e:	4601      	mov	r1, r0
 800b380:	6818      	ldr	r0, [r3, #0]
 800b382:	f7ff bfd3 	b.w	800b32c <_raise_r>
 800b386:	bf00      	nop
 800b388:	200001a0 	.word	0x200001a0

0800b38c <_kill_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	2300      	movs	r3, #0
 800b390:	4d06      	ldr	r5, [pc, #24]	; (800b3ac <_kill_r+0x20>)
 800b392:	4604      	mov	r4, r0
 800b394:	4608      	mov	r0, r1
 800b396:	4611      	mov	r1, r2
 800b398:	602b      	str	r3, [r5, #0]
 800b39a:	f7f6 fbca 	bl	8001b32 <_kill>
 800b39e:	1c43      	adds	r3, r0, #1
 800b3a0:	d102      	bne.n	800b3a8 <_kill_r+0x1c>
 800b3a2:	682b      	ldr	r3, [r5, #0]
 800b3a4:	b103      	cbz	r3, 800b3a8 <_kill_r+0x1c>
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	bd38      	pop	{r3, r4, r5, pc}
 800b3aa:	bf00      	nop
 800b3ac:	20000e44 	.word	0x20000e44

0800b3b0 <_getpid_r>:
 800b3b0:	f7f6 bbb8 	b.w	8001b24 <_getpid>

0800b3b4 <__sread>:
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3bc:	f000 f894 	bl	800b4e8 <_read_r>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	bfab      	itete	ge
 800b3c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3c8:	181b      	addge	r3, r3, r0
 800b3ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3ce:	bfac      	ite	ge
 800b3d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3d2:	81a3      	strhlt	r3, [r4, #12]
 800b3d4:	bd10      	pop	{r4, pc}

0800b3d6 <__swrite>:
 800b3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	461f      	mov	r7, r3
 800b3dc:	898b      	ldrh	r3, [r1, #12]
 800b3de:	4605      	mov	r5, r0
 800b3e0:	05db      	lsls	r3, r3, #23
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	4616      	mov	r6, r2
 800b3e6:	d505      	bpl.n	800b3f4 <__swrite+0x1e>
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f0:	f000 f868 	bl	800b4c4 <_lseek_r>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3fc:	81a3      	strh	r3, [r4, #12]
 800b3fe:	4628      	mov	r0, r5
 800b400:	463b      	mov	r3, r7
 800b402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b40a:	f000 b817 	b.w	800b43c <_write_r>

0800b40e <__sseek>:
 800b40e:	b510      	push	{r4, lr}
 800b410:	460c      	mov	r4, r1
 800b412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b416:	f000 f855 	bl	800b4c4 <_lseek_r>
 800b41a:	1c43      	adds	r3, r0, #1
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	bf15      	itete	ne
 800b420:	6560      	strne	r0, [r4, #84]	; 0x54
 800b422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b42a:	81a3      	strheq	r3, [r4, #12]
 800b42c:	bf18      	it	ne
 800b42e:	81a3      	strhne	r3, [r4, #12]
 800b430:	bd10      	pop	{r4, pc}

0800b432 <__sclose>:
 800b432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b436:	f000 b813 	b.w	800b460 <_close_r>
	...

0800b43c <_write_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	4611      	mov	r1, r2
 800b444:	2200      	movs	r2, #0
 800b446:	4d05      	ldr	r5, [pc, #20]	; (800b45c <_write_r+0x20>)
 800b448:	602a      	str	r2, [r5, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f7f6 fba8 	bl	8001ba0 <_write>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_write_r+0x1e>
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	b103      	cbz	r3, 800b45a <_write_r+0x1e>
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	20000e44 	.word	0x20000e44

0800b460 <_close_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	2300      	movs	r3, #0
 800b464:	4d05      	ldr	r5, [pc, #20]	; (800b47c <_close_r+0x1c>)
 800b466:	4604      	mov	r4, r0
 800b468:	4608      	mov	r0, r1
 800b46a:	602b      	str	r3, [r5, #0]
 800b46c:	f7f6 fbb4 	bl	8001bd8 <_close>
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	d102      	bne.n	800b47a <_close_r+0x1a>
 800b474:	682b      	ldr	r3, [r5, #0]
 800b476:	b103      	cbz	r3, 800b47a <_close_r+0x1a>
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	bd38      	pop	{r3, r4, r5, pc}
 800b47c:	20000e44 	.word	0x20000e44

0800b480 <_fstat_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	2300      	movs	r3, #0
 800b484:	4d06      	ldr	r5, [pc, #24]	; (800b4a0 <_fstat_r+0x20>)
 800b486:	4604      	mov	r4, r0
 800b488:	4608      	mov	r0, r1
 800b48a:	4611      	mov	r1, r2
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	f7f6 fbae 	bl	8001bee <_fstat>
 800b492:	1c43      	adds	r3, r0, #1
 800b494:	d102      	bne.n	800b49c <_fstat_r+0x1c>
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	b103      	cbz	r3, 800b49c <_fstat_r+0x1c>
 800b49a:	6023      	str	r3, [r4, #0]
 800b49c:	bd38      	pop	{r3, r4, r5, pc}
 800b49e:	bf00      	nop
 800b4a0:	20000e44 	.word	0x20000e44

0800b4a4 <_isatty_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4d05      	ldr	r5, [pc, #20]	; (800b4c0 <_isatty_r+0x1c>)
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	f7f6 fbac 	bl	8001c0c <_isatty>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_isatty_r+0x1a>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_isatty_r+0x1a>
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	20000e44 	.word	0x20000e44

0800b4c4 <_lseek_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4d05      	ldr	r5, [pc, #20]	; (800b4e4 <_lseek_r+0x20>)
 800b4d0:	602a      	str	r2, [r5, #0]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f7f6 fba4 	bl	8001c20 <_lseek>
 800b4d8:	1c43      	adds	r3, r0, #1
 800b4da:	d102      	bne.n	800b4e2 <_lseek_r+0x1e>
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	b103      	cbz	r3, 800b4e2 <_lseek_r+0x1e>
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	20000e44 	.word	0x20000e44

0800b4e8 <_read_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	4d05      	ldr	r5, [pc, #20]	; (800b508 <_read_r+0x20>)
 800b4f4:	602a      	str	r2, [r5, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f7f6 fb35 	bl	8001b66 <_read>
 800b4fc:	1c43      	adds	r3, r0, #1
 800b4fe:	d102      	bne.n	800b506 <_read_r+0x1e>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	b103      	cbz	r3, 800b506 <_read_r+0x1e>
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	20000e44 	.word	0x20000e44

0800b50c <_init>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr

0800b518 <_fini>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr


FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba4  08007ba4  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08007ba4  08007ba4  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ba4  08007ba4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000164  08007d10  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  08007d10  000209c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0fc  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fa  00000000  00000000  0002d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002fc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  000307c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ec7  00000000  00000000  000311b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f003  00000000  00000000  0004b077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008989d  00000000  00000000  0005a07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b60  00000000  00000000  000e3968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08007b28 	.word	0x08007b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08007b28 	.word	0x08007b28

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9b4 	bl	80004bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a2 	bl	80002a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f862 	bl	8000224 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000160:	f007 f8c8 	bl	80072f4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b094      	sub	sp, #80	; 0x50
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f007 fccf 	bl	8007b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	f107 0314 	add.w	r3, r7, #20
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	605a      	str	r2, [r3, #4]
 8000184:	609a      	str	r2, [r3, #8]
 8000186:	60da      	str	r2, [r3, #12]
 8000188:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fb85 	bl	80028cc <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c8:	f000 f8b6 	bl	8000338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001e2:	f107 0314 	add.w	r3, r7, #20
 80001e6:	2101      	movs	r1, #1
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 fdf1 	bl	8002dd0 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f4:	f000 f8a0 	bl	8000338 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80001f8:	2312      	movs	r3, #18
 80001fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80001fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000200:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000206:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	4618      	mov	r0, r3
 800020c:	f002 ff46 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000216:	f000 f88f 	bl	8000338 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3750      	adds	r7, #80	; 0x50
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <MX_ADC1_Init+0x74>)
 8000236:	4a19      	ldr	r2, [pc, #100]	; (800029c <MX_ADC1_Init+0x78>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <MX_ADC1_Init+0x74>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <MX_ADC1_Init+0x74>)
 8000242:	2200      	movs	r2, #0
 8000244:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <MX_ADC1_Init+0x74>)
 800024e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000252:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <MX_ADC1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_ADC1_Init+0x74>)
 800025c:	2201      	movs	r2, #1
 800025e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <MX_ADC1_Init+0x74>)
 8000262:	f000 f9b1 	bl	80005c8 <HAL_ADC_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800026c:	f000 f864 	bl	8000338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000274:	2301      	movs	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4619      	mov	r1, r3
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <MX_ADC1_Init+0x74>)
 8000282:	f000 fa79 	bl	8000778 <HAL_ADC_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800028c:	f000 f854 	bl	8000338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	3710      	adds	r7, #16
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000180 	.word	0x20000180
 800029c:	40012400 	.word	0x40012400

080002a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b4:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <MX_GPIO_Init+0x90>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <MX_GPIO_Init+0x90>)
 80002ba:	f043 0310 	orr.w	r3, r3, #16
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_GPIO_Init+0x90>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0310 	and.w	r3, r3, #16
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a17      	ldr	r2, [pc, #92]	; (8000330 <MX_GPIO_Init+0x90>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <MX_GPIO_Init+0x90>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000302:	480c      	ldr	r0, [pc, #48]	; (8000334 <MX_GPIO_Init+0x94>)
 8000304:	f000 fe04 	bl	8000f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	2301      	movs	r3, #1
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000316:	2302      	movs	r3, #2
 8000318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	4804      	ldr	r0, [pc, #16]	; (8000334 <MX_GPIO_Init+0x94>)
 8000322:	f000 fc71 	bl	8000c08 <HAL_GPIO_Init>

}
 8000326:	bf00      	nop
 8000328:	3720      	adds	r7, #32
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000
 8000334:	40011000 	.word	0x40011000

08000338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033c:	b672      	cpsid	i
}
 800033e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000340:	e7fe      	b.n	8000340 <Error_Handler+0x8>
	...

08000344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <HAL_MspInit+0x40>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <HAL_MspInit+0x40>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <HAL_MspInit+0x40>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <HAL_MspInit+0x40>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <HAL_MspInit+0x40>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800036c:	61d3      	str	r3, [r2, #28]
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <HAL_MspInit+0x40>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <HAL_ADC_MspInit+0x6c>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d121      	bne.n	80003ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <HAL_ADC_MspInit+0x70>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <HAL_ADC_MspInit+0x70>)
 80003ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <HAL_ADC_MspInit+0x70>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <HAL_ADC_MspInit+0x70>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <HAL_ADC_MspInit+0x70>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <HAL_ADC_MspInit+0x70>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80003d8:	2307      	movs	r3, #7
 80003da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003dc:	2303      	movs	r3, #3
 80003de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <HAL_ADC_MspInit+0x74>)
 80003e8:	f000 fc0e 	bl	8000c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80003ec:	bf00      	nop
 80003ee:	3720      	adds	r7, #32
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40012400 	.word	0x40012400
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800

08000400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <NMI_Handler+0x4>

08000406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <HardFault_Handler+0x4>

0800040c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <MemManage_Handler+0x4>

08000412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <BusFault_Handler+0x4>

08000418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <UsageFault_Handler+0x4>

0800041e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000446:	f000 f87f 	bl	8000548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000454:	4802      	ldr	r0, [pc, #8]	; (8000460 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000456:	f000 febd 	bl	80011d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	2000067c 	.word	0x2000067c

08000464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	; (80004a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	; (80004b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000496:	f7ff ffe5 	bl	8000464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800049a:	f007 fb19 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049e:	f7ff fe55 	bl	800014c <main>
  bx lr
 80004a2:	4770      	bx	lr
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80004ac:	08007bac 	.word	0x08007bac
  ldr r2, =_sbss
 80004b0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80004b4:	200009c0 	.word	0x200009c0

080004b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC1_2_IRQHandler>
	...

080004bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_Init+0x28>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <HAL_Init+0x28>)
 80004c6:	f043 0310 	orr.w	r3, r3, #16
 80004ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004cc:	2003      	movs	r0, #3
 80004ce:	f000 fb59 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004d2:	200f      	movs	r0, #15
 80004d4:	f000 f808 	bl	80004e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004d8:	f7ff ff34 	bl	8000344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40022000 	.word	0x40022000

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_InitTick+0x54>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_InitTick+0x58>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fb71 	bl	8000bee <HAL_SYSTICK_Config>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	e00e      	b.n	8000534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d80a      	bhi.n	8000532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051c:	2200      	movs	r2, #0
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	f04f 30ff 	mov.w	r0, #4294967295
 8000524:	f000 fb39 	bl	8000b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <HAL_InitTick+0x5c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800052e:	2300      	movs	r3, #0
 8000530:	e000      	b.n	8000534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000000 	.word	0x20000000
 8000540:	20000008 	.word	0x20000008
 8000544:	20000004 	.word	0x20000004

08000548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_IncTick+0x1c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_IncTick+0x20>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <HAL_IncTick+0x20>)
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20000008 	.word	0x20000008
 8000568:	200001b0 	.word	0x200001b0

0800056c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <HAL_GetTick+0x10>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	200001b0 	.word	0x200001b0

08000580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff fff0 	bl	800056c <HAL_GetTick>
 800058c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000598:	d005      	beq.n	80005a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_Delay+0x44>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4413      	add	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a6:	bf00      	nop
 80005a8:	f7ff ffe0 	bl	800056c <HAL_GetTick>
 80005ac:	4602      	mov	r2, r0
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8f7      	bhi.n	80005a8 <HAL_Delay+0x28>
  {
  }
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000008 	.word	0x20000008

080005c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005d0:	2300      	movs	r3, #0
 80005d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d101      	bne.n	80005ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e0be      	b.n	8000768 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d109      	bne.n	800060c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff febe 	bl	8000388 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f9ab 	bl	8000968 <ADC_ConversionStop_Disable>
 8000612:	4603      	mov	r3, r0
 8000614:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800061a:	f003 0310 	and.w	r3, r3, #16
 800061e:	2b00      	cmp	r3, #0
 8000620:	f040 8099 	bne.w	8000756 <HAL_ADC_Init+0x18e>
 8000624:	7dfb      	ldrb	r3, [r7, #23]
 8000626:	2b00      	cmp	r3, #0
 8000628:	f040 8095 	bne.w	8000756 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000630:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000634:	f023 0302 	bic.w	r3, r3, #2
 8000638:	f043 0202 	orr.w	r2, r3, #2
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000648:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	7b1b      	ldrb	r3, [r3, #12]
 800064e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000650:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	4313      	orrs	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000660:	d003      	beq.n	800066a <HAL_ADC_Init+0xa2>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d102      	bne.n	8000670 <HAL_ADC_Init+0xa8>
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	e000      	b.n	8000672 <HAL_ADC_Init+0xaa>
 8000670:	2300      	movs	r3, #0
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	4313      	orrs	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7d1b      	ldrb	r3, [r3, #20]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d119      	bne.n	80006b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7b1b      	ldrb	r3, [r3, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d109      	bne.n	800069c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	3b01      	subs	r3, #1
 800068e:	035a      	lsls	r2, r3, #13
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	4313      	orrs	r3, r2
 8000694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	e00b      	b.n	80006b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a0:	f043 0220 	orr.w	r2, r3, #32
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ac:	f043 0201 	orr.w	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	430a      	orrs	r2, r1
 80006c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <HAL_ADC_Init+0x1a8>)
 80006d0:	4013      	ands	r3, r2
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	6812      	ldr	r2, [r2, #0]
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	430b      	orrs	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006e4:	d003      	beq.n	80006ee <HAL_ADC_Init+0x126>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d104      	bne.n	80006f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	051b      	lsls	r3, r3, #20
 80006f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	430a      	orrs	r2, r1
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_ADC_Init+0x1ac>)
 8000714:	4013      	ands	r3, r2
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	429a      	cmp	r2, r3
 800071a:	d10b      	bne.n	8000734 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000726:	f023 0303 	bic.w	r3, r3, #3
 800072a:	f043 0201 	orr.w	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000732:	e018      	b.n	8000766 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000738:	f023 0312 	bic.w	r3, r3, #18
 800073c:	f043 0210 	orr.w	r2, r3, #16
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000748:	f043 0201 	orr.w	r2, r3, #1
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000750:	2301      	movs	r3, #1
 8000752:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000754:	e007      	b.n	8000766 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075a:	f043 0210 	orr.w	r2, r3, #16
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000766:	7dfb      	ldrb	r3, [r7, #23]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	ffe1f7fd 	.word	0xffe1f7fd
 8000774:	ff1f0efe 	.word	0xff1f0efe

08000778 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000790:	2b01      	cmp	r3, #1
 8000792:	d101      	bne.n	8000798 <HAL_ADC_ConfigChannel+0x20>
 8000794:	2302      	movs	r3, #2
 8000796:	e0dc      	b.n	8000952 <HAL_ADC_ConfigChannel+0x1da>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2201      	movs	r2, #1
 800079c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b06      	cmp	r3, #6
 80007a6:	d81c      	bhi.n	80007e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	4613      	mov	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	3b05      	subs	r3, #5
 80007ba:	221f      	movs	r2, #31
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	4019      	ands	r1, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	3b05      	subs	r3, #5
 80007d4:	fa00 f203 	lsl.w	r2, r0, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	635a      	str	r2, [r3, #52]	; 0x34
 80007e0:	e03c      	b.n	800085c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b0c      	cmp	r3, #12
 80007e8:	d81c      	bhi.n	8000824 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	3b23      	subs	r3, #35	; 0x23
 80007fc:	221f      	movs	r2, #31
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	4019      	ands	r1, r3
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685a      	ldr	r2, [r3, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	3b23      	subs	r3, #35	; 0x23
 8000816:	fa00 f203 	lsl.w	r2, r0, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	430a      	orrs	r2, r1
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
 8000822:	e01b      	b.n	800085c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	3b41      	subs	r3, #65	; 0x41
 8000836:	221f      	movs	r2, #31
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	4019      	ands	r1, r3
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	4613      	mov	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	3b41      	subs	r3, #65	; 0x41
 8000850:	fa00 f203 	lsl.w	r2, r0, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	430a      	orrs	r2, r1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b09      	cmp	r3, #9
 8000862:	d91c      	bls.n	800089e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68d9      	ldr	r1, [r3, #12]
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	3b1e      	subs	r3, #30
 8000876:	2207      	movs	r2, #7
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	4019      	ands	r1, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	6898      	ldr	r0, [r3, #8]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	3b1e      	subs	r3, #30
 8000890:	fa00 f203 	lsl.w	r2, r0, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	430a      	orrs	r2, r1
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	e019      	b.n	80008d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6919      	ldr	r1, [r3, #16]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	2207      	movs	r2, #7
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	4019      	ands	r1, r3
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	6898      	ldr	r0, [r3, #8]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	fa00 f203 	lsl.w	r2, r0, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b10      	cmp	r3, #16
 80008d8:	d003      	beq.n	80008e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008de:	2b11      	cmp	r3, #17
 80008e0:	d132      	bne.n	8000948 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_ADC_ConfigChannel+0x1e4>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d125      	bne.n	8000938 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d126      	bne.n	8000948 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000908:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b10      	cmp	r3, #16
 8000910:	d11a      	bne.n	8000948 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_ADC_ConfigChannel+0x1e8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <HAL_ADC_ConfigChannel+0x1ec>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9a      	lsrs	r2, r3, #18
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000928:	e002      	b.n	8000930 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	3b01      	subs	r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f9      	bne.n	800092a <HAL_ADC_ConfigChannel+0x1b2>
 8000936:	e007      	b.n	8000948 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093c:	f043 0220 	orr.w	r2, r3, #32
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000950:	7bfb      	ldrb	r3, [r7, #15]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40012400 	.word	0x40012400
 8000960:	20000000 	.word	0x20000000
 8000964:	431bde83 	.word	0x431bde83

08000968 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	2b01      	cmp	r3, #1
 8000980:	d12e      	bne.n	80009e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f022 0201 	bic.w	r2, r2, #1
 8000990:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000992:	f7ff fdeb 	bl	800056c <HAL_GetTick>
 8000996:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000998:	e01b      	b.n	80009d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800099a:	f7ff fde7 	bl	800056c <HAL_GetTick>
 800099e:	4602      	mov	r2, r0
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d914      	bls.n	80009d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d10d      	bne.n	80009d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ba:	f043 0210 	orr.w	r2, r3, #16
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	f043 0201 	orr.w	r2, r3, #1
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e007      	b.n	80009e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d0dc      	beq.n	800099a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db0b      	blt.n	8000a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f003 021f 	and.w	r2, r3, #31
 8000a68:	4906      	ldr	r1, [pc, #24]	; (8000a84 <__NVIC_EnableIRQ+0x34>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	2001      	movs	r0, #1
 8000a72:	fa00 f202 	lsl.w	r2, r0, r2
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff90 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff2d 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff42 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff90 	bl	8000adc <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5f 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff35 	bl	8000a50 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffa2 	bl	8000b40 <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	e169      	b.n	8000ef0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8158 	bne.w	8000eea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	4a9a      	ldr	r2, [pc, #616]	; (8000ea8 <HAL_GPIO_Init+0x2a0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d05e      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c44:	4a98      	ldr	r2, [pc, #608]	; (8000ea8 <HAL_GPIO_Init+0x2a0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d875      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c4a:	4a98      	ldr	r2, [pc, #608]	; (8000eac <HAL_GPIO_Init+0x2a4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d058      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c50:	4a96      	ldr	r2, [pc, #600]	; (8000eac <HAL_GPIO_Init+0x2a4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d86f      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c56:	4a96      	ldr	r2, [pc, #600]	; (8000eb0 <HAL_GPIO_Init+0x2a8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d052      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c5c:	4a94      	ldr	r2, [pc, #592]	; (8000eb0 <HAL_GPIO_Init+0x2a8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d869      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c62:	4a94      	ldr	r2, [pc, #592]	; (8000eb4 <HAL_GPIO_Init+0x2ac>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d04c      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c68:	4a92      	ldr	r2, [pc, #584]	; (8000eb4 <HAL_GPIO_Init+0x2ac>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d863      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c6e:	4a92      	ldr	r2, [pc, #584]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d046      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c74:	4a90      	ldr	r2, [pc, #576]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d85d      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d82a      	bhi.n	8000cd4 <HAL_GPIO_Init+0xcc>
 8000c7e:	2b12      	cmp	r3, #18
 8000c80:	d859      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c82:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <HAL_GPIO_Init+0x80>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000d03 	.word	0x08000d03
 8000c8c:	08000cdd 	.word	0x08000cdd
 8000c90:	08000cef 	.word	0x08000cef
 8000c94:	08000d31 	.word	0x08000d31
 8000c98:	08000d37 	.word	0x08000d37
 8000c9c:	08000d37 	.word	0x08000d37
 8000ca0:	08000d37 	.word	0x08000d37
 8000ca4:	08000d37 	.word	0x08000d37
 8000ca8:	08000d37 	.word	0x08000d37
 8000cac:	08000d37 	.word	0x08000d37
 8000cb0:	08000d37 	.word	0x08000d37
 8000cb4:	08000d37 	.word	0x08000d37
 8000cb8:	08000d37 	.word	0x08000d37
 8000cbc:	08000d37 	.word	0x08000d37
 8000cc0:	08000d37 	.word	0x08000d37
 8000cc4:	08000d37 	.word	0x08000d37
 8000cc8:	08000d37 	.word	0x08000d37
 8000ccc:	08000ce5 	.word	0x08000ce5
 8000cd0:	08000cf9 	.word	0x08000cf9
 8000cd4:	4a79      	ldr	r2, [pc, #484]	; (8000ebc <HAL_GPIO_Init+0x2b4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cda:	e02c      	b.n	8000d36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e029      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e024      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e01f      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	623b      	str	r3, [r7, #32]
          break;
 8000d00:	e01a      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e013      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d105      	bne.n	8000d24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	611a      	str	r2, [r3, #16]
          break;
 8000d22:	e009      	b.n	8000d38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d24:	2308      	movs	r3, #8
 8000d26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	615a      	str	r2, [r3, #20]
          break;
 8000d2e:	e003      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          break;
 8000d36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2bff      	cmp	r3, #255	; 0xff
 8000d3c:	d801      	bhi.n	8000d42 <HAL_GPIO_Init+0x13a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	e001      	b.n	8000d46 <HAL_GPIO_Init+0x13e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3304      	adds	r3, #4
 8000d46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2bff      	cmp	r3, #255	; 0xff
 8000d4c:	d802      	bhi.n	8000d54 <HAL_GPIO_Init+0x14c>
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x152>
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	3b08      	subs	r3, #8
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	210f      	movs	r1, #15
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	6a39      	ldr	r1, [r7, #32]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80b1 	beq.w	8000eea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d88:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a4c      	ldr	r2, [pc, #304]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da0:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <HAL_GPIO_Init+0x2bc>)
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a40      	ldr	r2, [pc, #256]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d013      	beq.n	8000df4 <HAL_GPIO_Init+0x1ec>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a3f      	ldr	r2, [pc, #252]	; (8000ecc <HAL_GPIO_Init+0x2c4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d00d      	beq.n	8000df0 <HAL_GPIO_Init+0x1e8>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <HAL_GPIO_Init+0x2c8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d007      	beq.n	8000dec <HAL_GPIO_Init+0x1e4>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a3d      	ldr	r2, [pc, #244]	; (8000ed4 <HAL_GPIO_Init+0x2cc>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d101      	bne.n	8000de8 <HAL_GPIO_Init+0x1e0>
 8000de4:	2303      	movs	r3, #3
 8000de6:	e006      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000de8:	2304      	movs	r3, #4
 8000dea:	e004      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e002      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000df4:	2300      	movs	r3, #0
 8000df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e06:	492f      	ldr	r1, [pc, #188]	; (8000ec4 <HAL_GPIO_Init+0x2bc>)
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	492c      	ldr	r1, [pc, #176]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4928      	ldr	r1, [pc, #160]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4922      	ldr	r1, [pc, #136]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	491e      	ldr	r1, [pc, #120]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	4918      	ldr	r1, [pc, #96]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	608b      	str	r3, [r1, #8]
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4914      	ldr	r1, [pc, #80]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d021      	beq.n	8000edc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60cb      	str	r3, [r1, #12]
 8000ea4:	e021      	b.n	8000eea <HAL_GPIO_Init+0x2e2>
 8000ea6:	bf00      	nop
 8000ea8:	10320000 	.word	0x10320000
 8000eac:	10310000 	.word	0x10310000
 8000eb0:	10220000 	.word	0x10220000
 8000eb4:	10210000 	.word	0x10210000
 8000eb8:	10120000 	.word	0x10120000
 8000ebc:	10110000 	.word	0x10110000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40010c00 	.word	0x40010c00
 8000ed0:	40011000 	.word	0x40011000
 8000ed4:	40011400 	.word	0x40011400
 8000ed8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	4909      	ldr	r1, [pc, #36]	; (8000f0c <HAL_GPIO_Init+0x304>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	3301      	adds	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f47f ae8e 	bne.w	8000c1c <HAL_GPIO_Init+0x14>
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	372c      	adds	r7, #44	; 0x2c
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40010400 	.word	0x40010400

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f2c:	e003      	b.n	8000f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	041a      	lsls	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43d9      	mvns	r1, r3
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	400b      	ands	r3, r1
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	611a      	str	r2, [r3, #16]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f74:	b08b      	sub	sp, #44	; 0x2c
 8000f76:	af06      	add	r7, sp, #24
 8000f78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e0fd      	b.n	8001180 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d106      	bne.n	8000f9e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f006 fb0b 	bl	80075b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 f952 	bl	8003254 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	687e      	ldr	r6, [r7, #4]
 8000fb8:	466d      	mov	r5, sp
 8000fba:	f106 0410 	add.w	r4, r6, #16
 8000fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	602b      	str	r3, [r5, #0]
 8000fc6:	1d33      	adds	r3, r6, #4
 8000fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f002 f91c 	bl	8003208 <USB_CoreInit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d005      	beq.n	8000fe2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0ce      	b.n	8001180 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 f94d 	bl	8003288 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e04c      	b.n	800108e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	440b      	add	r3, r1
 8001004:	3301      	adds	r3, #1
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	b298      	uxth	r0, r3
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	3336      	adds	r3, #54	; 0x36
 8001032:	4602      	mov	r2, r0
 8001034:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	3303      	adds	r3, #3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	3338      	adds	r3, #56	; 0x38
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	333c      	adds	r3, #60	; 0x3c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	3340      	adds	r3, #64	; 0x40
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	3301      	adds	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3ad      	bcc.n	8000ff4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e044      	b.n	8001128 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	3301      	adds	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	d3b5      	bcc.n	800109e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	687e      	ldr	r6, [r7, #4]
 800113a:	466d      	mov	r5, sp
 800113c:	f106 0410 	add.w	r4, r6, #16
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	602b      	str	r3, [r5, #0]
 8001148:	1d33      	adds	r3, r6, #4
 800114a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114c:	6838      	ldr	r0, [r7, #0]
 800114e:	f002 f8a7 	bl	80032a0 <USB_DevInit>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2202      	movs	r2, #2
 800115c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e00d      	b.n	8001180 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fd59 	bl	8005c30 <USB_DevDisconnect>

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001188 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_PCD_Start+0x16>
 800119a:	2302      	movs	r3, #2
 800119c:	e016      	b.n	80011cc <HAL_PCD_Start+0x44>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 f83c 	bl	8003228 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011b0:	2101      	movs	r1, #1
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f006 fc55 	bl	8007a62 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f004 fd2d 	bl	8005c1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fd2f 	bl	8005c44 <USB_ReadInterrupts>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011f0:	d102      	bne.n	80011f8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fb48 	bl	8001888 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 fd21 	bl	8005c44 <USB_ReadInterrupts>
 8001202:	4603      	mov	r3, r0
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120c:	d112      	bne.n	8001234 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001220:	b292      	uxth	r2, r2
 8001222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f006 fa3f 	bl	80076aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800122c:	2100      	movs	r1, #0
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f923 	bl	800147a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fd03 	bl	8005c44 <USB_ReadInterrupts>
 800123e:	4603      	mov	r3, r0
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001248:	d10b      	bne.n	8001262 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800125c:	b292      	uxth	r2, r2
 800125e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fcec 	bl	8005c44 <USB_ReadInterrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001276:	d10b      	bne.n	8001290 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800128a:	b292      	uxth	r2, r2
 800128c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fcd5 	bl	8005c44 <USB_ReadInterrupts>
 800129a:	4603      	mov	r3, r0
 800129c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a4:	d126      	bne.n	80012f4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0204 	bic.w	r2, r2, #4
 80012b8:	b292      	uxth	r2, r2
 80012ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0208 	bic.w	r2, r2, #8
 80012d0:	b292      	uxth	r2, r2
 80012d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f006 fa20 	bl	800771c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012ee:	b292      	uxth	r2, r2
 80012f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fca3 	bl	8005c44 <USB_ReadInterrupts>
 80012fe:	4603      	mov	r3, r0
 8001300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001308:	f040 8082 	bne.w	8001410 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
 8001310:	e010      	b.n	8001334 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	441a      	add	r2, r3
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	8812      	ldrh	r2, [r2, #0]
 8001322:	b292      	uxth	r2, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	3320      	adds	r3, #32
 8001328:	443b      	add	r3, r7
 800132a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	3301      	adds	r3, #1
 8001332:	77fb      	strb	r3, [r7, #31]
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	2b07      	cmp	r3, #7
 8001338:	d9eb      	bls.n	8001312 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	b292      	uxth	r2, r2
 800134e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800135a:	b29a      	uxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0201 	bic.w	r2, r2, #1
 8001364:	b292      	uxth	r2, r2
 8001366:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800136a:	bf00      	nop
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001374:	b29b      	uxth	r3, r3
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f6      	beq.n	800136c <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001390:	b292      	uxth	r2, r2
 8001392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	77fb      	strb	r3, [r7, #31]
 800139a:	e00f      	b.n	80013bc <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	4611      	mov	r1, r2
 80013a4:	7ffa      	ldrb	r2, [r7, #31]
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	440a      	add	r2, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	3320      	adds	r3, #32
 80013ae:	443b      	add	r3, r7
 80013b0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80013b4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	3301      	adds	r3, #1
 80013ba:	77fb      	strb	r3, [r7, #31]
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	2b07      	cmp	r3, #7
 80013c0:	d9ec      	bls.n	800139c <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0208 	orr.w	r2, r2, #8
 80013d4:	b292      	uxth	r2, r2
 80013d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0204 	orr.w	r2, r2, #4
 8001404:	b292      	uxth	r2, r2
 8001406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f006 f96c 	bl	80076e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fc15 	bl	8005c44 <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001424:	d10e      	bne.n	8001444 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f006 f925 	bl	800768e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f004 fbfb 	bl	8005c44 <USB_ReadInterrupts>
 800144e:	4603      	mov	r3, r0
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001458:	d10b      	bne.n	8001472 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800146c:	b292      	uxth	r2, r2
 800146e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_PCD_SetAddress+0x1a>
 8001490:	2302      	movs	r3, #2
 8001492:	e013      	b.n	80014bc <HAL_PCD_SetAddress+0x42>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	78fa      	ldrb	r2, [r7, #3]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fba2 	bl	8005bf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	70fb      	strb	r3, [r7, #3]
 80014d6:	460b      	mov	r3, r1
 80014d8:	803b      	strh	r3, [r7, #0]
 80014da:	4613      	mov	r3, r2
 80014dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da0e      	bge.n	8001508 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	705a      	strb	r2, [r3, #1]
 8001506:	e00e      	b.n	8001526 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 0207 	and.w	r2, r3, #7
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001532:	883a      	ldrh	r2, [r7, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	78ba      	ldrb	r2, [r7, #2]
 800153c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001550:	78bb      	ldrb	r3, [r7, #2]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d102      	bne.n	800155c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_PCD_EP_Open+0xa6>
 8001566:	2302      	movs	r3, #2
 8001568:	e00e      	b.n	8001588 <HAL_PCD_EP_Open+0xc4>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68f9      	ldr	r1, [r7, #12]
 8001578:	4618      	mov	r0, r3
 800157a:	f001 feb1 	bl	80032e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001586:	7afb      	ldrb	r3, [r7, #11]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800159c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da0e      	bge.n	80015c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	705a      	strb	r2, [r3, #1]
 80015c0:	e00e      	b.n	80015e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	f003 0207 	and.w	r2, r3, #7
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_PCD_EP_Close+0x6a>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e00e      	b.n	8001618 <HAL_PCD_EP_Close+0x88>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68f9      	ldr	r1, [r7, #12]
 8001608:	4618      	mov	r0, r3
 800160a:	f002 f9d3 	bl	80039b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	460b      	mov	r3, r1
 800162e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	f003 0207 	and.w	r2, r3, #7
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2200      	movs	r2, #0
 800165e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	b2da      	uxtb	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fb85 	bl	8003d8c <USB_EPStartXfer>
 8001682:	e005      	b.n	8001690 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6979      	ldr	r1, [r7, #20]
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fb7e 	bl	8003d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	460b      	mov	r3, r1
 80016a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016aa:	7afb      	ldrb	r3, [r7, #11]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2201      	movs	r2, #1
 80016e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016f2:	7afb      	ldrb	r3, [r7, #11]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d106      	bne.n	800170a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6979      	ldr	r1, [r7, #20]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fb42 	bl	8003d8c <USB_EPStartXfer>
 8001708:	e005      	b.n	8001716 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6979      	ldr	r1, [r7, #20]
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fb3b 	bl	8003d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0207 	and.w	r2, r3, #7
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	d901      	bls.n	800173e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e04c      	b.n	80017d8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800173e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	da0e      	bge.n	8001764 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	705a      	strb	r2, [r3, #1]
 8001762:	e00c      	b.n	800177e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	b2da      	uxtb	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_PCD_EP_SetStall+0x7e>
 800179a:	2302      	movs	r3, #2
 800179c:	e01c      	b.n	80017d8 <HAL_PCD_EP_SetStall+0xb8>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68f9      	ldr	r1, [r7, #12]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 f925 	bl	80059fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d108      	bne.n	80017ce <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f004 fa4a 	bl	8005c62 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	f003 020f 	and.w	r2, r3, #15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d901      	bls.n	80017fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e040      	b.n	8001880 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da0e      	bge.n	8001824 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2201      	movs	r2, #1
 8001820:	705a      	strb	r2, [r3, #1]
 8001822:	e00e      	b.n	8001842 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	f003 0207 	and.w	r2, r3, #7
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	b2da      	uxtb	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_PCD_EP_ClrStall+0x82>
 800185e:	2302      	movs	r3, #2
 8001860:	e00e      	b.n	8001880 <HAL_PCD_EP_ClrStall+0xa0>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68f9      	ldr	r1, [r7, #12]
 8001870:	4618      	mov	r0, r3
 8001872:	f004 f913 	bl	8005a9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001890:	e2ec      	b.n	8001e6c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800189a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800189c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80018a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 8161 	bne.w	8001b74 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d152      	bne.n	8001962 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018cc:	81fb      	strh	r3, [r7, #14]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018dc:	b29b      	uxth	r3, r3
 80018de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3328      	adds	r3, #40	; 0x28
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	3302      	adds	r3, #2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4413      	add	r3, r2
 8001904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	441a      	add	r2, r3
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001920:	2100      	movs	r1, #0
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f005 fe99 	bl	800765a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 829b 	beq.w	8001e6c <PCD_EP_ISR_Handler+0x5e4>
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 8296 	bne.w	8001e6c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800194c:	b2da      	uxtb	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b292      	uxth	r2, r2
 8001954:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001960:	e284      	b.n	8001e6c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001978:	2b00      	cmp	r3, #0
 800197a:	d034      	beq.n	80019e6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001984:	b29b      	uxth	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	3306      	adds	r3, #6
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	4413      	add	r3, r2
 800199a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f004 f9a1 	bl	8005d02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019cc:	4013      	ands	r3, r2
 80019ce:	823b      	strh	r3, [r7, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	8a3a      	ldrh	r2, [r7, #16]
 80019d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019da:	b292      	uxth	r2, r2
 80019dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f005 fe0e 	bl	8007600 <HAL_PCD_SetupStageCallback>
 80019e4:	e242      	b.n	8001e6c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f280 823e 	bge.w	8001e6c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019fc:	4013      	ands	r3, r2
 80019fe:	83bb      	strh	r3, [r7, #28]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	8bba      	ldrh	r2, [r7, #28]
 8001a06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a0a:	b292      	uxth	r2, r2
 8001a0c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	3306      	adds	r3, #6
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d019      	beq.n	8001a76 <PCD_EP_ISR_Handler+0x1ee>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	6959      	ldr	r1, [r3, #20]
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f004 f951 	bl	8005d02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	441a      	add	r2, r3
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f005 fdd7 	bl	8007624 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 81f2 	bne.w	8001e6c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d112      	bne.n	8001ad6 <PCD_EP_ISR_Handler+0x24e>
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	801a      	strh	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	801a      	strh	r2, [r3, #0]
 8001ad4:	e02f      	b.n	8001b36 <PCD_EP_ISR_Handler+0x2ae>
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b3e      	cmp	r3, #62	; 0x3e
 8001adc:	d813      	bhi.n	8001b06 <PCD_EP_ISR_Handler+0x27e>
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <PCD_EP_ISR_Handler+0x270>
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	3301      	adds	r3, #1
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
 8001af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	029b      	lsls	r3, r3, #10
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	e017      	b.n	8001b36 <PCD_EP_ISR_Handler+0x2ae>
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <PCD_EP_ISR_Handler+0x298>
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	029b      	lsls	r3, r3, #10
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b46:	827b      	strh	r3, [r7, #18]
 8001b48:	8a7b      	ldrh	r3, [r7, #18]
 8001b4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b4e:	827b      	strh	r3, [r7, #18]
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b56:	827b      	strh	r3, [r7, #18]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	8a7b      	ldrh	r3, [r7, #18]
 8001b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	8013      	strh	r3, [r2, #0]
 8001b72:	e17b      	b.n	8001e6c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b86:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f280 80ea 	bge.w	8001d64 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	853b      	strh	r3, [r7, #40]	; 0x28
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bbe:	b292      	uxth	r2, r2
 8001bc0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bc2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	7b1b      	ldrb	r3, [r3, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d122      	bne.n	8001c26 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3306      	adds	r3, #6
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c08:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8087 	beq.w	8001d20 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	6959      	ldr	r1, [r3, #20]
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	88da      	ldrh	r2, [r3, #6]
 8001c1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c20:	f004 f86f 	bl	8005d02 <USB_ReadPMA>
 8001c24:	e07c      	b.n	8001d20 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	78db      	ldrb	r3, [r3, #3]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d108      	bne.n	8001c40 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c30:	461a      	mov	r2, r3
 8001c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f927 	bl	8001e88 <HAL_PCD_EP_DB_Receive>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c3e:	e06f      	b.n	8001d20 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d021      	beq.n	8001cde <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cc2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001cc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d02a      	beq.n	8001d20 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	6959      	ldr	r1, [r3, #20]
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	891a      	ldrh	r2, [r3, #8]
 8001cd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cd8:	f004 f813 	bl	8005d02 <USB_ReadPMA>
 8001cdc:	e020      	b.n	8001d20 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3306      	adds	r3, #6
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d06:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	6959      	ldr	r1, [r3, #20]
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	895a      	ldrh	r2, [r3, #10]
 8001d1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d1c:	f003 fff1 	bl	8005d02 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d26:	441a      	add	r2, r3
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d32:	441a      	add	r2, r3
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <PCD_EP_ISR_Handler+0x4c2>
 8001d40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d206      	bcs.n	8001d58 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f005 fc67 	bl	8007624 <HAL_PCD_DataOutStageCallback>
 8001d56:	e005      	b.n	8001d64 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 f814 	bl	8003d8c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d07e      	beq.n	8001e6c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9c:	843b      	strh	r3, [r7, #32]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	441a      	add	r2, r3
 8001dac:	8c3b      	ldrh	r3, [r7, #32]
 8001dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	78db      	ldrb	r3, [r3, #3]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d00c      	beq.n	8001ddc <PCD_EP_ISR_Handler+0x554>
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	78db      	ldrb	r3, [r3, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d146      	bne.n	8001e60 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d141      	bne.n	8001e60 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	3302      	adds	r3, #2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e04:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	8bfb      	ldrh	r3, [r7, #30]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d906      	bls.n	8001e1e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	8bfb      	ldrh	r3, [r7, #30]
 8001e16:	1ad2      	subs	r2, r2, r3
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	619a      	str	r2, [r3, #24]
 8001e1c:	e002      	b.n	8001e24 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f005 fc11 	bl	800765a <HAL_PCD_DataInStageCallback>
 8001e38:	e018      	b.n	8001e6c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	8bfb      	ldrh	r3, [r7, #30]
 8001e40:	441a      	add	r2, r3
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	8bfb      	ldrh	r3, [r7, #30]
 8001e4c:	441a      	add	r2, r3
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 ff97 	bl	8003d8c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e5e:	e005      	b.n	8001e6c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e62:	461a      	mov	r2, r3
 8001e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f91b 	bl	80020a2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f6ff ad0a 	blt.w	8001892 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3738      	adds	r7, #56	; 0x38
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d07e      	beq.n	8001f9e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	8b7b      	ldrh	r3, [r7, #26]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d306      	bcc.n	8001ee2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	8b7b      	ldrh	r3, [r7, #26]
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	e002      	b.n	8001ee8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d123      	bne.n	8001f38 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	833b      	strh	r3, [r7, #24]
 8001f0c:	8b3b      	ldrh	r3, [r7, #24]
 8001f0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f12:	833b      	strh	r3, [r7, #24]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	8b3b      	ldrh	r3, [r7, #24]
 8001f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01f      	beq.n	8001f82 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5c:	82fb      	strh	r3, [r7, #22]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	8afb      	ldrh	r3, [r7, #22]
 8001f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f82:	8b7b      	ldrh	r3, [r7, #26]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8087 	beq.w	8002098 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	6959      	ldr	r1, [r3, #20]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	891a      	ldrh	r2, [r3, #8]
 8001f96:	8b7b      	ldrh	r3, [r7, #26]
 8001f98:	f003 feb3 	bl	8005d02 <USB_ReadPMA>
 8001f9c:	e07c      	b.n	8002098 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	8b7b      	ldrh	r3, [r7, #26]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d306      	bcc.n	8001fe0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	8b7b      	ldrh	r3, [r7, #26]
 8001fd8:	1ad2      	subs	r2, r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	619a      	str	r2, [r3, #24]
 8001fde:	e002      	b.n	8001fe6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d123      	bne.n	8002036 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002008:	83fb      	strh	r3, [r7, #30]
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002010:	83fb      	strh	r3, [r7, #30]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	441a      	add	r2, r3
 8002020:	8bfb      	ldrh	r3, [r7, #30]
 8002022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800202a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002032:	b29b      	uxth	r3, r3
 8002034:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11f      	bne.n	8002080 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	83bb      	strh	r3, [r7, #28]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	441a      	add	r2, r3
 800206a:	8bbb      	ldrh	r3, [r7, #28]
 800206c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800207c:	b29b      	uxth	r3, r3
 800207e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002080:	8b7b      	ldrh	r3, [r7, #26]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6959      	ldr	r1, [r3, #20]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	895a      	ldrh	r2, [r3, #10]
 8002092:	8b7b      	ldrh	r3, [r7, #26]
 8002094:	f003 fe35 	bl	8005d02 <USB_ReadPMA>
    }
  }

  return count;
 8002098:	8b7b      	ldrh	r3, [r7, #26]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b0a2      	sub	sp, #136	; 0x88
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	4613      	mov	r3, r2
 80020ae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 81c7 	beq.w	800244a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	3302      	adds	r3, #2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d907      	bls.n	8002104 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020fc:	1ad2      	subs	r2, r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	619a      	str	r2, [r3, #24]
 8002102:	e002      	b.n	800210a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 80b9 	bne.w	8002286 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d126      	bne.n	800216a <HAL_PCD_EP_DB_Transmit+0xc8>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	4413      	add	r3, r2
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	011a      	lsls	r2, r3, #4
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	4413      	add	r3, r2
 800213e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800214e:	b29a      	uxth	r2, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	801a      	strh	r2, [r3, #0]
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002162:	b29a      	uxth	r2, r3
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	e01a      	b.n	80021a0 <HAL_PCD_EP_DB_Transmit+0xfe>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	785b      	ldrb	r3, [r3, #1]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d116      	bne.n	80021a0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002180:	b29b      	uxth	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	4413      	add	r3, r2
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	011a      	lsls	r2, r3, #4
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	4413      	add	r3, r2
 8002194:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	2200      	movs	r2, #0
 800219e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	623b      	str	r3, [r7, #32]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d126      	bne.n	80021fc <HAL_PCD_EP_DB_Transmit+0x15a>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	4413      	add	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	011a      	lsls	r2, r3, #4
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	4413      	add	r3, r2
 80021d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	e017      	b.n	800222c <HAL_PCD_EP_DB_Transmit+0x18a>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d113      	bne.n	800222c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	4413      	add	r3, r2
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	011a      	lsls	r2, r3, #4
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	4413      	add	r3, r2
 8002220:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2200      	movs	r2, #0
 800222a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f005 fa11 	bl	800765a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 82d4 	beq.w	80027ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225e:	827b      	strh	r3, [r7, #18]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	8a7b      	ldrh	r3, [r7, #18]
 8002270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800227c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002280:	b29b      	uxth	r3, r3
 8002282:	8013      	strh	r3, [r2, #0]
 8002284:	e2b2      	b.n	80027ec <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d021      	beq.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	441a      	add	r2, r3
 80022bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80022c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 8286 	bne.w	80027ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022e8:	441a      	add	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022f6:	441a      	add	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	429a      	cmp	r2, r3
 8002306:	d309      	bcc.n	800231c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6a1a      	ldr	r2, [r3, #32]
 8002312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002314:	1ad2      	subs	r2, r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	621a      	str	r2, [r3, #32]
 800231a:	e015      	b.n	8002348 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002328:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002332:	e009      	b.n	8002348 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d155      	bne.n	80023fc <HAL_PCD_EP_DB_Transmit+0x35a>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	4413      	add	r3, r2
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	011a      	lsls	r2, r3, #4
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	4413      	add	r3, r2
 8002372:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
 8002378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237a:	2b00      	cmp	r3, #0
 800237c:	d112      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x302>
 800237e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002388:	b29a      	uxth	r2, r3
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	801a      	strh	r2, [r3, #0]
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800239c:	b29a      	uxth	r2, r3
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	e047      	b.n	8002434 <HAL_PCD_EP_DB_Transmit+0x392>
 80023a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a6:	2b3e      	cmp	r3, #62	; 0x3e
 80023a8:	d811      	bhi.n	80023ce <HAL_PCD_EP_DB_Transmit+0x32c>
 80023aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80023b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_PCD_EP_DB_Transmit+0x31e>
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023bc:	3301      	adds	r3, #1
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
 80023c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	029b      	lsls	r3, r3, #10
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	e032      	b.n	8002434 <HAL_PCD_EP_DB_Transmit+0x392>
 80023ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80023d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x342>
 80023de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e0:	3b01      	subs	r3, #1
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	029b      	lsls	r3, r3, #10
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	801a      	strh	r2, [r3, #0]
 80023fa:	e01b      	b.n	8002434 <HAL_PCD_EP_DB_Transmit+0x392>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d117      	bne.n	8002434 <HAL_PCD_EP_DB_Transmit+0x392>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	643b      	str	r3, [r7, #64]	; 0x40
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002418:	4413      	add	r3, r2
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	011a      	lsls	r2, r3, #4
 8002422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002424:	4413      	add	r3, r2
 8002426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800242c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242e:	b29a      	uxth	r2, r3
 8002430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002432:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	6959      	ldr	r1, [r3, #20]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	891a      	ldrh	r2, [r3, #8]
 8002440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	f003 fc18 	bl	8005c78 <USB_WritePMA>
 8002448:	e1d0      	b.n	80027ec <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	3306      	adds	r3, #6
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002472:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247e:	429a      	cmp	r2, r3
 8002480:	d307      	bcc.n	8002492 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800248a:	1ad2      	subs	r2, r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	619a      	str	r2, [r3, #24]
 8002490:	e002      	b.n	8002498 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 80c4 	bne.w	800262a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d126      	bne.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x456>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024be:	4413      	add	r3, r2
 80024c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	011a      	lsls	r2, r3, #4
 80024c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ca:	4413      	add	r3, r2
 80024cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80024d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e01a      	b.n	800252e <HAL_PCD_EP_DB_Transmit+0x48c>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d116      	bne.n	800252e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	677b      	str	r3, [r7, #116]	; 0x74
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002514:	4413      	add	r3, r2
 8002516:	677b      	str	r3, [r7, #116]	; 0x74
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002520:	4413      	add	r3, r2
 8002522:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002526:	673b      	str	r3, [r7, #112]	; 0x70
 8002528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	67bb      	str	r3, [r7, #120]	; 0x78
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	785b      	ldrb	r3, [r3, #1]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d12f      	bne.n	800259c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002554:	4413      	add	r3, r2
 8002556:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	011a      	lsls	r2, r3, #4
 8002560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002564:	4413      	add	r3, r2
 8002566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800256a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800256e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800257a:	b29a      	uxth	r2, r3
 800257c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800258e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002592:	b29a      	uxth	r2, r3
 8002594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	e017      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x52a>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d113      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x52a>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b2:	4413      	add	r3, r2
 80025b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	011a      	lsls	r2, r3, #4
 80025bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025be:	4413      	add	r3, r2
 80025c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025c8:	2200      	movs	r2, #0
 80025ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f005 f841 	bl	800765a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 8104 	bne.w	80027ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	441a      	add	r2, r3
 8002610:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800261c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	b29b      	uxth	r3, r3
 8002626:	8013      	strh	r3, [r2, #0]
 8002628:	e0e0      	b.n	80027ec <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d121      	bne.n	8002678 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	441a      	add	r2, r3
 8002660:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	b29b      	uxth	r3, r3
 8002676:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800267e:	2b01      	cmp	r3, #1
 8002680:	f040 80b4 	bne.w	80027ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800268c:	441a      	add	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800269a:	441a      	add	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d309      	bcc.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b8:	1ad2      	subs	r2, r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	621a      	str	r2, [r3, #32]
 80026be:	e015      	b.n	80026ec <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80026c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026d6:	e009      	b.n	80026ec <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	667b      	str	r3, [r7, #100]	; 0x64
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d155      	bne.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x704>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270e:	4413      	add	r3, r2
 8002710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	011a      	lsls	r2, r3, #4
 8002718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271a:	4413      	add	r3, r2
 800271c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002720:	65bb      	str	r3, [r7, #88]	; 0x58
 8002722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002724:	2b00      	cmp	r3, #0
 8002726:	d112      	bne.n	800274e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002732:	b29a      	uxth	r2, r3
 8002734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002746:	b29a      	uxth	r2, r3
 8002748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	e044      	b.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x736>
 800274e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002750:	2b3e      	cmp	r3, #62	; 0x3e
 8002752:	d811      	bhi.n	8002778 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	657b      	str	r3, [r7, #84]	; 0x54
 800275a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002766:	3301      	adds	r3, #1
 8002768:	657b      	str	r3, [r7, #84]	; 0x54
 800276a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276c:	b29b      	uxth	r3, r3
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	b29a      	uxth	r2, r3
 8002772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002774:	801a      	strh	r2, [r3, #0]
 8002776:	e02f      	b.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x736>
 8002778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	657b      	str	r3, [r7, #84]	; 0x54
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278a:	3b01      	subs	r3, #1
 800278c:	657b      	str	r3, [r7, #84]	; 0x54
 800278e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002790:	b29b      	uxth	r3, r3
 8002792:	029b      	lsls	r3, r3, #10
 8002794:	b29b      	uxth	r3, r3
 8002796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279e:	b29a      	uxth	r2, r3
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	e018      	b.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x736>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d114      	bne.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x736>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027bc:	4413      	add	r3, r2
 80027be:	667b      	str	r3, [r7, #100]	; 0x64
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	011a      	lsls	r2, r3, #4
 80027c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c8:	4413      	add	r3, r2
 80027ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027ce:	663b      	str	r3, [r7, #96]	; 0x60
 80027d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	6959      	ldr	r1, [r3, #20]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	895a      	ldrh	r2, [r3, #10]
 80027e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f003 fa46 	bl	8005c78 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002806:	823b      	strh	r3, [r7, #16]
 8002808:	8a3b      	ldrh	r3, [r7, #16]
 800280a:	f083 0310 	eor.w	r3, r3, #16
 800280e:	823b      	strh	r3, [r7, #16]
 8002810:	8a3b      	ldrh	r3, [r7, #16]
 8002812:	f083 0320 	eor.w	r3, r3, #32
 8002816:	823b      	strh	r3, [r7, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	8a3b      	ldrh	r3, [r7, #16]
 8002828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002838:	b29b      	uxth	r3, r3
 800283a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3788      	adds	r7, #136	; 0x88
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002846:	b480      	push	{r7}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	817b      	strh	r3, [r7, #10]
 8002854:	4613      	mov	r3, r2
 8002856:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002858:	897b      	ldrh	r3, [r7, #10]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002864:	897b      	ldrh	r3, [r7, #10]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e009      	b.n	8002890 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800287c:	897a      	ldrh	r2, [r7, #10]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4413      	add	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002890:	893b      	ldrh	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	80da      	strh	r2, [r3, #6]
 80028a4:	e00b      	b.n	80028be <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2201      	movs	r2, #1
 80028aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e272      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8087 	beq.w	80029fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ec:	4b92      	ldr	r3, [pc, #584]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d00c      	beq.n	8002912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f8:	4b8f      	ldr	r3, [pc, #572]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d112      	bne.n	800292a <HAL_RCC_OscConfig+0x5e>
 8002904:	4b8c      	ldr	r3, [pc, #560]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	d10b      	bne.n	800292a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002912:	4b89      	ldr	r3, [pc, #548]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d06c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x12c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d168      	bne.n	80029f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e24c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x76>
 8002934:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a7f      	ldr	r2, [pc, #508]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e02e      	b.n	80029a0 <HAL_RCC_OscConfig+0xd4>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x98>
 800294a:	4b7b      	ldr	r3, [pc, #492]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7a      	ldr	r2, [pc, #488]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b78      	ldr	r3, [pc, #480]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a77      	ldr	r2, [pc, #476]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800295c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e01d      	b.n	80029a0 <HAL_RCC_OscConfig+0xd4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0xbc>
 800296e:	4b72      	ldr	r3, [pc, #456]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a71      	ldr	r2, [pc, #452]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6e      	ldr	r2, [pc, #440]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0xd4>
 8002988:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fd fde0 	bl	800056c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fd fddc 	bl	800056c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e200      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b5d      	ldr	r3, [pc, #372]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0xe4>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fd fdcc 	bl	800056c <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fd fdc8 	bl	800056c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1ec      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x10c>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d063      	beq.n	8002ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a06:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d11c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x18c>
 8002a1e:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d116      	bne.n	8002a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x176>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e1c0      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4939      	ldr	r1, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	e03a      	b.n	8002ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fd fd81 	bl	800056c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fd fd7d 	bl	800056c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1a1      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4927      	ldr	r1, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e015      	b.n	8002ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fd fd60 	bl	800056c <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fd fd5c 	bl	800056c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e180      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d03a      	beq.n	8002b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d019      	beq.n	8002b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae8:	f7fd fd40 	bl	800056c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fd fd3c 	bl	800056c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e160      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f000 faa6 	bl	8003060 <RCC_Delay>
 8002b14:	e01c      	b.n	8002b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1c:	f7fd fd26 	bl	800056c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b22:	e00f      	b.n	8002b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fd fd22 	bl	800056c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d908      	bls.n	8002b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e146      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	42420000 	.word	0x42420000
 8002b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	4b92      	ldr	r3, [pc, #584]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e9      	bne.n	8002b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a6 	beq.w	8002caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	4b88      	ldr	r3, [pc, #544]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4a87      	ldr	r2, [pc, #540]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	61d3      	str	r3, [r2, #28]
 8002b7a:	4b85      	ldr	r3, [pc, #532]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b82      	ldr	r3, [pc, #520]	; (8002d94 <HAL_RCC_OscConfig+0x4c8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d118      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b7f      	ldr	r3, [pc, #508]	; (8002d94 <HAL_RCC_OscConfig+0x4c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7e      	ldr	r2, [pc, #504]	; (8002d94 <HAL_RCC_OscConfig+0x4c8>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fd fce3 	bl	800056c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fd fcdf 	bl	800056c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e103      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b75      	ldr	r3, [pc, #468]	; (8002d94 <HAL_RCC_OscConfig+0x4c8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x312>
 8002bd0:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	e02d      	b.n	8002c3a <HAL_RCC_OscConfig+0x36e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x334>
 8002be6:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a66      	ldr	r2, [pc, #408]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	6213      	str	r3, [r2, #32]
 8002bfe:	e01c      	b.n	8002c3a <HAL_RCC_OscConfig+0x36e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCC_OscConfig+0x356>
 8002c08:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4a60      	ldr	r2, [pc, #384]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	6213      	str	r3, [r2, #32]
 8002c14:	4b5e      	ldr	r3, [pc, #376]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a5d      	ldr	r2, [pc, #372]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	e00b      	b.n	8002c3a <HAL_RCC_OscConfig+0x36e>
 8002c22:	4b5b      	ldr	r3, [pc, #364]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a5a      	ldr	r2, [pc, #360]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6213      	str	r3, [r2, #32]
 8002c2e:	4b58      	ldr	r3, [pc, #352]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a57      	ldr	r2, [pc, #348]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d015      	beq.n	8002c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fd fc93 	bl	800056c <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fd fc8f 	bl	800056c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0b1      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ee      	beq.n	8002c4a <HAL_RCC_OscConfig+0x37e>
 8002c6c:	e014      	b.n	8002c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7fd fc7d 	bl	800056c <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fd fc79 	bl	800056c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e09b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8c:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ee      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9e:	4b3c      	ldr	r3, [pc, #240]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	4a3b      	ldr	r2, [pc, #236]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8087 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d061      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d146      	bne.n	8002d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <HAL_RCC_OscConfig+0x4cc>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7fd fc4d 	bl	800056c <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fd fc49 	bl	800056c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e06d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce8:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f0      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d108      	bne.n	8002d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4921      	ldr	r1, [pc, #132]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a19      	ldr	r1, [r3, #32]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	430b      	orrs	r3, r1
 8002d22:	491b      	ldr	r1, [pc, #108]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fd fc1d 	bl	800056c <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fd fc19 	bl	800056c <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e03d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x46a>
 8002d54:	e035      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fd fc06 	bl	800056c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fd fc02 	bl	800056c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e026      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x498>
 8002d82:	e01e      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e019      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40007000 	.word	0x40007000
 8002d98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_OscConfig+0x500>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0d0      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4965      	ldr	r1, [pc, #404]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b8      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a58      	ldr	r2, [pc, #352]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	494d      	ldr	r1, [pc, #308]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d040      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d115      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e07f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e073      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e06b      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4936      	ldr	r1, [pc, #216]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec0:	f7fd fb54 	bl	800056c <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fd fb50 	bl	800056c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e053      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 020c 	and.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1eb      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d210      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 0207 	bic.w	r2, r3, #7
 8002f06:	4922      	ldr	r1, [pc, #136]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e032      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4916      	ldr	r1, [pc, #88]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f5e:	f000 f821 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	490a      	ldr	r1, [pc, #40]	; (8002f98 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1cc>)
 8002f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fab2 	bl	80004e8 <HAL_InitTick>

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40022000 	.word	0x40022000
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08007b94 	.word	0x08007b94
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b490      	push	{r4, r7}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002faa:	4b29      	ldr	r3, [pc, #164]	; (8003050 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fac:	1d3c      	adds	r4, r7, #4
 8002fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fb4:	f240 2301 	movw	r3, #513	; 0x201
 8002fb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fce:	4b21      	ldr	r3, [pc, #132]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d002      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x46>
 8002fe2:	e02b      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fe6:	623b      	str	r3, [r7, #32]
      break;
 8002fe8:	e02b      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	0c9b      	lsrs	r3, r3, #18
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	3328      	adds	r3, #40	; 0x28
 8002ff4:	443b      	add	r3, r7
 8002ff6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ffa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d012      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	0c5b      	lsrs	r3, r3, #17
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	3328      	adds	r3, #40	; 0x28
 8003012:	443b      	add	r3, r7
 8003014:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003018:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <HAL_RCC_GetSysClockFreq+0xb4>)
 800301e:	fb03 f202 	mul.w	r2, r3, r2
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	e004      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	623b      	str	r3, [r7, #32]
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_GetSysClockFreq+0xb4>)
 800303e:	623b      	str	r3, [r7, #32]
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6a3b      	ldr	r3, [r7, #32]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3728      	adds	r7, #40	; 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bc90      	pop	{r4, r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	08007b40 	.word	0x08007b40
 8003054:	40021000 	.word	0x40021000
 8003058:	007a1200 	.word	0x007a1200
 800305c:	003d0900 	.word	0x003d0900

08003060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <RCC_Delay+0x34>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <RCC_Delay+0x38>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0a5b      	lsrs	r3, r3, #9
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800307c:	bf00      	nop
  }
  while (Delay --);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1e5a      	subs	r2, r3, #1
 8003082:	60fa      	str	r2, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <RCC_Delay+0x1c>
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	20000000 	.word	0x20000000
 8003098:	10624dd3 	.word	0x10624dd3

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d07d      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030bc:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4a4b      	ldr	r2, [pc, #300]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	61d3      	str	r3, [r2, #28]
 80030d4:	4b49      	ldr	r3, [pc, #292]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b46      	ldr	r3, [pc, #280]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d118      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a42      	ldr	r2, [pc, #264]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fc:	f7fd fa36 	bl	800056c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	e008      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fd fa32 	bl	800056c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e06d      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d02e      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	429a      	cmp	r2, r3
 800313e:	d027      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003140:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003148:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800314a:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003150:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003156:	4a29      	ldr	r2, [pc, #164]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d014      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fd fa01 	bl	800056c <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fd f9fd 	bl	800056c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e036      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ee      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4917      	ldr	r1, [pc, #92]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4a13      	ldr	r2, [pc, #76]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	490b      	ldr	r1, [pc, #44]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4904      	ldr	r1, [pc, #16]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	40007000 	.word	0x40007000
 8003204:	42420440 	.word	0x42420440

08003208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003208:	b084      	sub	sp, #16
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	f107 0014 	add.w	r0, r7, #20
 8003216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	b004      	add	sp, #16
 8003226:	4770      	bx	lr

08003228 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003238:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800323c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800325c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003260:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	b29b      	uxth	r3, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	b29b      	uxth	r3, r3
 8003272:	4013      	ands	r3, r2
 8003274:	b29a      	uxth	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032a0:	b084      	sub	sp, #16
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	f107 0014 	add.w	r0, r7, #20
 80032ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	b004      	add	sp, #16
 80032de:	4770      	bx	lr

080032e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b09b      	sub	sp, #108	; 0x6c
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d81f      	bhi.n	8003352 <USB_ActivateEndpoint+0x72>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <USB_ActivateEndpoint+0x38>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003329 	.word	0x08003329
 800331c:	08003345 	.word	0x08003345
 8003320:	0800335b 	.word	0x0800335b
 8003324:	08003337 	.word	0x08003337
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003328:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800332c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003330:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003334:	e012      	b.n	800335c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003336:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800333a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800333e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003342:	e00b      	b.n	800335c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003344:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003350:	e004      	b.n	800335c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003358:	e000      	b.n	800335c <USB_ActivateEndpoint+0x7c>
      break;
 800335a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	441a      	add	r2, r3
 8003366:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800336a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337a:	b29b      	uxth	r3, r3
 800337c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003394:	b29a      	uxth	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	4313      	orrs	r3, r2
 800339e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80033b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	7b1b      	ldrb	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 8149 	bne.w	8003660 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8084 	beq.w	80034e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	4413      	add	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	011a      	lsls	r2, r3, #4
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	88db      	ldrh	r3, [r3, #6]
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	b29b      	uxth	r3, r3
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	81fb      	strh	r3, [r7, #14]
 800341a:	89fb      	ldrh	r3, [r7, #14]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <USB_ActivateEndpoint+0x17c>
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	81bb      	strh	r3, [r7, #12]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	89bb      	ldrh	r3, [r7, #12]
 8003448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003458:	b29b      	uxth	r3, r3
 800345a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	78db      	ldrb	r3, [r3, #3]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d020      	beq.n	80034a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347a:	813b      	strh	r3, [r7, #8]
 800347c:	893b      	ldrh	r3, [r7, #8]
 800347e:	f083 0320 	eor.w	r3, r3, #32
 8003482:	813b      	strh	r3, [r7, #8]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	893b      	ldrh	r3, [r7, #8]
 8003490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	8013      	strh	r3, [r2, #0]
 80034a4:	e27f      	b.n	80039a6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034bc:	817b      	strh	r3, [r7, #10]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	897b      	ldrh	r3, [r7, #10]
 80034ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8013      	strh	r3, [r2, #0]
 80034de:	e262      	b.n	80039a6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	4413      	add	r3, r2
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	011a      	lsls	r2, r3, #4
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	88db      	ldrh	r3, [r3, #6]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	4413      	add	r3, r2
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	011a      	lsls	r2, r3, #4
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	4413      	add	r3, r2
 8003532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d112      	bne.n	8003566 <USB_ActivateEndpoint+0x286>
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800354a:	b29a      	uxth	r2, r3
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	801a      	strh	r2, [r3, #0]
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29b      	uxth	r3, r3
 8003556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800355a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800355e:	b29a      	uxth	r2, r3
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	801a      	strh	r2, [r3, #0]
 8003564:	e02f      	b.n	80035c6 <USB_ActivateEndpoint+0x2e6>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b3e      	cmp	r3, #62	; 0x3e
 800356c:	d813      	bhi.n	8003596 <USB_ActivateEndpoint+0x2b6>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	663b      	str	r3, [r7, #96]	; 0x60
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <USB_ActivateEndpoint+0x2a8>
 8003582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003584:	3301      	adds	r3, #1
 8003586:	663b      	str	r3, [r7, #96]	; 0x60
 8003588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800358a:	b29b      	uxth	r3, r3
 800358c:	029b      	lsls	r3, r3, #10
 800358e:	b29a      	uxth	r2, r3
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	801a      	strh	r2, [r3, #0]
 8003594:	e017      	b.n	80035c6 <USB_ActivateEndpoint+0x2e6>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	663b      	str	r3, [r7, #96]	; 0x60
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <USB_ActivateEndpoint+0x2d0>
 80035aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ac:	3b01      	subs	r3, #1
 80035ae:	663b      	str	r3, [r7, #96]	; 0x60
 80035b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	029b      	lsls	r3, r3, #10
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	83fb      	strh	r3, [r7, #30]
 80035d4:	8bfb      	ldrh	r3, [r7, #30]
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01b      	beq.n	8003616 <USB_ActivateEndpoint+0x336>
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	83bb      	strh	r3, [r7, #28]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	441a      	add	r2, r3
 8003600:	8bbb      	ldrh	r3, [r7, #28]
 8003602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003612:	b29b      	uxth	r3, r3
 8003614:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362c:	837b      	strh	r3, [r7, #26]
 800362e:	8b7b      	ldrh	r3, [r7, #26]
 8003630:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003634:	837b      	strh	r3, [r7, #26]
 8003636:	8b7b      	ldrh	r3, [r7, #26]
 8003638:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800363c:	837b      	strh	r3, [r7, #26]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	441a      	add	r2, r3
 8003648:	8b7b      	ldrh	r3, [r7, #26]
 800364a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365a:	b29b      	uxth	r3, r3
 800365c:	8013      	strh	r3, [r2, #0]
 800365e:	e1a2      	b.n	80039a6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	441a      	add	r2, r3
 8003684:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003690:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003698:	b29b      	uxth	r3, r3
 800369a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65bb      	str	r3, [r7, #88]	; 0x58
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ac:	4413      	add	r3, r2
 80036ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	011a      	lsls	r2, r3, #4
 80036b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036be:	657b      	str	r3, [r7, #84]	; 0x54
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	891b      	ldrh	r3, [r3, #8]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	653b      	str	r3, [r7, #80]	; 0x50
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036da:	b29b      	uxth	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e0:	4413      	add	r3, r2
 80036e2:	653b      	str	r3, [r7, #80]	; 0x50
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	011a      	lsls	r2, r3, #4
 80036ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	895b      	ldrh	r3, [r3, #10]
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003702:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 8091 	bne.w	8003830 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800371c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01b      	beq.n	800375e <USB_ActivateEndpoint+0x47e>
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	441a      	add	r2, r3
 8003748:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800374a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800374e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	b29b      	uxth	r3, r3
 800375c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	873b      	strh	r3, [r7, #56]	; 0x38
 800376c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01b      	beq.n	80037ae <USB_ActivateEndpoint+0x4ce>
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800379a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80037c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80037c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80037cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80037ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80037d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	441a      	add	r2, r3
 80037e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80037e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380c:	867b      	strh	r3, [r7, #50]	; 0x32
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	441a      	add	r2, r3
 8003818:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800381a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800381e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]
 800382e:	e0ba      	b.n	80039a6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003840:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01d      	beq.n	8003888 <USB_ActivateEndpoint+0x5a8>
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	441a      	add	r2, r3
 8003870:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800387c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	b29b      	uxth	r3, r3
 8003886:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003898:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01d      	beq.n	80038e0 <USB_ActivateEndpoint+0x600>
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	441a      	add	r2, r3
 80038c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80038cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038dc:	b29b      	uxth	r3, r3
 80038de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d024      	beq.n	8003932 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003902:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003906:	f083 0320 	eor.w	r3, r3, #32
 800390a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	441a      	add	r2, r3
 8003918:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800391c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392c:	b29b      	uxth	r3, r3
 800392e:	8013      	strh	r3, [r2, #0]
 8003930:	e01d      	b.n	800396e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003948:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	441a      	add	r2, r3
 8003956:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800395a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800395e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396a:	b29b      	uxth	r3, r3
 800396c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003984:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	441a      	add	r2, r3
 8003990:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800399a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800399e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80039a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	376c      	adds	r7, #108	; 0x6c
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b08d      	sub	sp, #52	; 0x34
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	7b1b      	ldrb	r3, [r3, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 808e 	bne.w	8003ae4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d044      	beq.n	8003a5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	81bb      	strh	r3, [r7, #12]
 80039de:	89bb      	ldrh	r3, [r7, #12]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01b      	beq.n	8003a20 <USB_DeactivateEndpoint+0x6c>
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	817b      	strh	r3, [r7, #10]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	441a      	add	r2, r3
 8003a0a:	897b      	ldrh	r3, [r7, #10]
 8003a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a36:	813b      	strh	r3, [r7, #8]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	893b      	ldrh	r3, [r7, #8]
 8003a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	8013      	strh	r3, [r2, #0]
 8003a58:	e192      	b.n	8003d80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	827b      	strh	r3, [r7, #18]
 8003a68:	8a7b      	ldrh	r3, [r7, #18]
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01b      	beq.n	8003aaa <USB_DeactivateEndpoint+0xf6>
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a88:	823b      	strh	r3, [r7, #16]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	441a      	add	r2, r3
 8003a94:	8a3b      	ldrh	r3, [r7, #16]
 8003a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	81fb      	strh	r3, [r7, #14]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	89fb      	ldrh	r3, [r7, #14]
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
 8003ae2:	e14d      	b.n	8003d80 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f040 80a5 	bne.w	8003c38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	843b      	strh	r3, [r7, #32]
 8003afc:	8c3b      	ldrh	r3, [r7, #32]
 8003afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01b      	beq.n	8003b3e <USB_DeactivateEndpoint+0x18a>
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1c:	83fb      	strh	r3, [r7, #30]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	441a      	add	r2, r3
 8003b28:	8bfb      	ldrh	r3, [r7, #30]
 8003b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	83bb      	strh	r3, [r7, #28]
 8003b4c:	8bbb      	ldrh	r3, [r7, #28]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01b      	beq.n	8003b8e <USB_DeactivateEndpoint+0x1da>
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	837b      	strh	r3, [r7, #26]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	441a      	add	r2, r3
 8003b78:	8b7b      	ldrh	r3, [r7, #26]
 8003b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba4:	833b      	strh	r3, [r7, #24]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	441a      	add	r2, r3
 8003bb0:	8b3b      	ldrh	r3, [r7, #24]
 8003bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bdc:	82fb      	strh	r3, [r7, #22]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	441a      	add	r2, r3
 8003be8:	8afb      	ldrh	r3, [r7, #22]
 8003bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c14:	82bb      	strh	r3, [r7, #20]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	8abb      	ldrh	r3, [r7, #20]
 8003c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8013      	strh	r3, [r2, #0]
 8003c36:	e0a3      	b.n	8003d80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003c46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01b      	beq.n	8003c88 <USB_DeactivateEndpoint+0x2d4>
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003c96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01b      	beq.n	8003cd8 <USB_DeactivateEndpoint+0x324>
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	441a      	add	r2, r3
 8003cc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	441a      	add	r2, r3
 8003d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	441a      	add	r2, r3
 8003d6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3734      	adds	r7, #52	; 0x34
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b0cc      	sub	sp, #304	; 0x130
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d9a:	6018      	str	r0, [r3, #0]
 8003d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003da4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	f041 817d 	bne.w	80050b2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d908      	bls.n	8003de6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003de4:	e007      	b.n	8003df6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	7b1b      	ldrb	r3, [r3, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d152      	bne.n	8003eac <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6959      	ldr	r1, [r3, #20]
 8003e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	88da      	ldrh	r2, [r3, #6]
 8003e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003e28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003e2c:	6800      	ldr	r0, [r0, #0]
 8003e2e:	f001 ff23 	bl	8005c78 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003e3e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003e64:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	011a      	lsls	r2, r3, #4
 8003e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ea0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	801a      	strh	r2, [r3, #0]
 8003ea8:	f001 b8b5 	b.w	8005016 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	f040 84c6 	bne.w	800484a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
 8003eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	f240 8443 	bls.w	8004762 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f48:	1ad2      	subs	r2, r2, r3
 8003f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 823e 	beq.w	80043fa <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003f8a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	785b      	ldrb	r3, [r3, #1]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f040 809a 	bne.w	80040d8 <USB_EPStartXfer+0x34c>
 8003fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003fb0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003fd6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	440a      	add	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	011a      	lsls	r2, r3, #4
 8003fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004002:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d122      	bne.n	8004056 <USB_EPStartXfer+0x2ca>
 8004010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004014:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004022:	b29a      	uxth	r2, r3
 8004024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004028:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004046:	b29a      	uxth	r2, r3
 8004048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800404c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e079      	b.n	800414a <USB_EPStartXfer+0x3be>
 8004056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800405a:	2b3e      	cmp	r3, #62	; 0x3e
 800405c:	d81b      	bhi.n	8004096 <USB_EPStartXfer+0x30a>
 800405e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <USB_EPStartXfer+0x2f2>
 8004074:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004078:	3301      	adds	r3, #1
 800407a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800407e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004082:	b29b      	uxth	r3, r3
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	b29a      	uxth	r2, r3
 8004088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800408c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	801a      	strh	r2, [r3, #0]
 8004094:	e059      	b.n	800414a <USB_EPStartXfer+0x3be>
 8004096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80040a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <USB_EPStartXfer+0x32a>
 80040ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040b0:	3b01      	subs	r3, #1
 80040b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80040b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	029b      	lsls	r3, r3, #10
 80040be:	b29b      	uxth	r3, r3
 80040c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	e038      	b.n	800414a <USB_EPStartXfer+0x3be>
 80040d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d130      	bne.n	800414a <USB_EPStartXfer+0x3be>
 80040e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004106:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	440a      	add	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004122:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4413      	add	r3, r2
 800412a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800412e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800413c:	b29a      	uxth	r2, r3
 800413e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800414a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800414e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	895b      	ldrh	r3, [r3, #10]
 8004156:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800415a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800415e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6959      	ldr	r1, [r3, #20]
 8004166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800416a:	b29b      	uxth	r3, r3
 800416c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004170:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004174:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004178:	6800      	ldr	r0, [r0, #0]
 800417a:	f001 fd7d 	bl	8005c78 <USB_WritePMA>
            ep->xfer_buff += len;
 800417e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800418e:	441a      	add	r2, r3
 8004190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800419c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d90f      	bls.n	80041d8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80041b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041c8:	1ad2      	subs	r2, r2, r3
 80041ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	621a      	str	r2, [r3, #32]
 80041d6:	e00e      	b.n	80041f6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80041d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80041e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 809a 	bne.w	800433c <USB_EPStartXfer+0x5b0>
 8004208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004210:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004214:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422a:	b29b      	uxth	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004232:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004236:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800423a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	440a      	add	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004256:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4413      	add	r3, r2
 800425e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004266:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d122      	bne.n	80042ba <USB_EPStartXfer+0x52e>
 8004274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004278:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004286:	b29a      	uxth	r2, r3
 8004288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800428c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004298:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	e083      	b.n	80043c2 <USB_EPStartXfer+0x636>
 80042ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042be:	2b3e      	cmp	r3, #62	; 0x3e
 80042c0:	d81b      	bhi.n	80042fa <USB_EPStartXfer+0x56e>
 80042c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80042cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <USB_EPStartXfer+0x556>
 80042d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80042dc:	3301      	adds	r3, #1
 80042de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80042e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	029b      	lsls	r3, r3, #10
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	e063      	b.n	80043c2 <USB_EPStartXfer+0x636>
 80042fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <USB_EPStartXfer+0x58e>
 8004310:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004314:	3b01      	subs	r3, #1
 8004316:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800431a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800431e:	b29b      	uxth	r3, r3
 8004320:	029b      	lsls	r3, r3, #10
 8004322:	b29b      	uxth	r3, r3
 8004324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432c:	b29a      	uxth	r2, r3
 800432e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004332:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	e042      	b.n	80043c2 <USB_EPStartXfer+0x636>
 800433c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d13a      	bne.n	80043c2 <USB_EPStartXfer+0x636>
 800434c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004350:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004354:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004358:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004376:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800437a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800437e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	440a      	add	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800438c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	011a      	lsls	r2, r3, #4
 8004396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4413      	add	r3, r2
 80043a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80043a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	891b      	ldrh	r3, [r3, #8]
 80043ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6959      	ldr	r1, [r3, #20]
 80043de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80043e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80043ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80043f0:	6800      	ldr	r0, [r0, #0]
 80043f2:	f001 fc41 	bl	8005c78 <USB_WritePMA>
 80043f6:	f000 be0e 	b.w	8005016 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d16d      	bne.n	80044e6 <USB_EPStartXfer+0x75a>
 800440a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800440e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
 8004416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442a:	4413      	add	r3, r2
 800442c:	64bb      	str	r3, [r7, #72]	; 0x48
 800442e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	011a      	lsls	r2, r3, #4
 800443c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443e:	4413      	add	r3, r2
 8004440:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004444:	647b      	str	r3, [r7, #68]	; 0x44
 8004446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d112      	bne.n	8004474 <USB_EPStartXfer+0x6e8>
 800444e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004458:	b29a      	uxth	r2, r3
 800445a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446c:	b29a      	uxth	r2, r3
 800446e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	e063      	b.n	800453c <USB_EPStartXfer+0x7b0>
 8004474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004478:	2b3e      	cmp	r3, #62	; 0x3e
 800447a:	d817      	bhi.n	80044ac <USB_EPStartXfer+0x720>
 800447c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <USB_EPStartXfer+0x710>
 8004492:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004496:	3301      	adds	r3, #1
 8004498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800449c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	029b      	lsls	r3, r3, #10
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	e047      	b.n	800453c <USB_EPStartXfer+0x7b0>
 80044ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <USB_EPStartXfer+0x740>
 80044c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044c6:	3b01      	subs	r3, #1
 80044c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	029b      	lsls	r3, r3, #10
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e02a      	b.n	800453c <USB_EPStartXfer+0x7b0>
 80044e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d122      	bne.n	800453c <USB_EPStartXfer+0x7b0>
 80044f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	653b      	str	r3, [r7, #80]	; 0x50
 8004502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004510:	b29b      	uxth	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004516:	4413      	add	r3, r2
 8004518:	653b      	str	r3, [r7, #80]	; 0x50
 800451a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800451e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	011a      	lsls	r2, r3, #4
 8004528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452a:	4413      	add	r3, r2
 800452c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004536:	b29a      	uxth	r2, r3
 8004538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800453c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	891b      	ldrh	r3, [r3, #8]
 8004548:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800454c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6959      	ldr	r1, [r3, #20]
 8004558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800455c:	b29b      	uxth	r3, r3
 800455e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004562:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004566:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	f001 fb84 	bl	8005c78 <USB_WritePMA>
            ep->xfer_buff += len;
 8004570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004580:	441a      	add	r2, r3
 8004582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800458e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6a1a      	ldr	r2, [r3, #32]
 800459a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800459e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d90f      	bls.n	80045ca <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80045aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ba:	1ad2      	subs	r2, r2, r3
 80045bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	621a      	str	r2, [r3, #32]
 80045c8:	e00e      	b.n	80045e8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80045ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80045da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2200      	movs	r2, #0
 80045e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	643b      	str	r3, [r7, #64]	; 0x40
 80045f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d16d      	bne.n	80046e0 <USB_EPStartXfer+0x954>
 8004604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	4413      	add	r3, r2
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
 8004628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800462c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	011a      	lsls	r2, r3, #4
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	4413      	add	r3, r2
 800463a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
 8004640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d112      	bne.n	800466e <USB_EPStartXfer+0x8e2>
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004652:	b29a      	uxth	r2, r3
 8004654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004666:	b29a      	uxth	r2, r3
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	e05d      	b.n	800472a <USB_EPStartXfer+0x99e>
 800466e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004672:	2b3e      	cmp	r3, #62	; 0x3e
 8004674:	d817      	bhi.n	80046a6 <USB_EPStartXfer+0x91a>
 8004676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <USB_EPStartXfer+0x90a>
 800468c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004690:	3301      	adds	r3, #1
 8004692:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004696:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800469a:	b29b      	uxth	r3, r3
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	b29a      	uxth	r2, r3
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	801a      	strh	r2, [r3, #0]
 80046a4:	e041      	b.n	800472a <USB_EPStartXfer+0x99e>
 80046a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <USB_EPStartXfer+0x93a>
 80046bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046c0:	3b01      	subs	r3, #1
 80046c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	029b      	lsls	r3, r3, #10
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046dc:	801a      	strh	r2, [r3, #0]
 80046de:	e024      	b.n	800472a <USB_EPStartXfer+0x99e>
 80046e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d11c      	bne.n	800472a <USB_EPStartXfer+0x99e>
 80046f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004704:	4413      	add	r3, r2
 8004706:	643b      	str	r3, [r7, #64]	; 0x40
 8004708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	011a      	lsls	r2, r3, #4
 8004716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004718:	4413      	add	r3, r2
 800471a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004724:	b29a      	uxth	r2, r3
 8004726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004728:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800472a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	895b      	ldrh	r3, [r3, #10]
 8004736:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800473a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6959      	ldr	r1, [r3, #20]
 8004746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800474a:	b29b      	uxth	r3, r3
 800474c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004750:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004754:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	f001 fa8d 	bl	8005c78 <USB_WritePMA>
 800475e:	f000 bc5a 	b.w	8005016 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800479c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ee:	4413      	add	r3, r2
 80047f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	011a      	lsls	r2, r3, #4
 8004800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004802:	4413      	add	r3, r2
 8004804:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004808:	65bb      	str	r3, [r7, #88]	; 0x58
 800480a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800480e:	b29a      	uxth	r2, r3
 8004810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004812:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	891b      	ldrh	r3, [r3, #8]
 8004820:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6959      	ldr	r1, [r3, #20]
 8004830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004834:	b29b      	uxth	r3, r3
 8004836:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800483a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800483e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	f001 fa18 	bl	8005c78 <USB_WritePMA>
 8004848:	e3e5      	b.n	8005016 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800484a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80048a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b6:	1ad2      	subs	r2, r2, r3
 80048b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 81bc 	beq.w	8004c64 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d16d      	bne.n	80049e6 <USB_EPStartXfer+0xc5a>
 800490a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800490e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	67bb      	str	r3, [r7, #120]	; 0x78
 8004916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004924:	b29b      	uxth	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800492a:	4413      	add	r3, r2
 800492c:	67bb      	str	r3, [r7, #120]	; 0x78
 800492e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	011a      	lsls	r2, r3, #4
 800493c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493e:	4413      	add	r3, r2
 8004940:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004944:	677b      	str	r3, [r7, #116]	; 0x74
 8004946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d112      	bne.n	8004974 <USB_EPStartXfer+0xbe8>
 800494e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004958:	b29a      	uxth	r2, r3
 800495a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496c:	b29a      	uxth	r2, r3
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e060      	b.n	8004a36 <USB_EPStartXfer+0xcaa>
 8004974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004978:	2b3e      	cmp	r3, #62	; 0x3e
 800497a:	d817      	bhi.n	80049ac <USB_EPStartXfer+0xc20>
 800497c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <USB_EPStartXfer+0xc10>
 8004992:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004996:	3301      	adds	r3, #1
 8004998:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800499c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	e044      	b.n	8004a36 <USB_EPStartXfer+0xcaa>
 80049ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80049b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <USB_EPStartXfer+0xc40>
 80049c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80049c6:	3b01      	subs	r3, #1
 80049c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80049cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	029b      	lsls	r3, r3, #10
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049de:	b29a      	uxth	r2, r3
 80049e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e2:	801a      	strh	r2, [r3, #0]
 80049e4:	e027      	b.n	8004a36 <USB_EPStartXfer+0xcaa>
 80049e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d11f      	bne.n	8004a36 <USB_EPStartXfer+0xcaa>
 80049f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	011a      	lsls	r2, r3, #4
 8004a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	895b      	ldrh	r3, [r3, #10]
 8004a42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6959      	ldr	r1, [r3, #20]
 8004a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a64:	6800      	ldr	r0, [r0, #0]
 8004a66:	f001 f907 	bl	8005c78 <USB_WritePMA>
          ep->xfer_buff += len;
 8004a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a7a:	441a      	add	r2, r3
 8004a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1a      	ldr	r2, [r3, #32]
 8004a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d90f      	bls.n	8004ac4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab4:	1ad2      	subs	r2, r2, r3
 8004ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	621a      	str	r2, [r3, #32]
 8004ac2:	e00e      	b.n	8004ae2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8295 	beq.w	8005016 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d16d      	bne.n	8004bd8 <USB_EPStartXfer+0xe4c>
 8004afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b1c:	4413      	add	r3, r2
 8004b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	011a      	lsls	r2, r3, #4
 8004b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b30:	4413      	add	r3, r2
 8004b32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b36:	667b      	str	r3, [r7, #100]	; 0x64
 8004b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d112      	bne.n	8004b66 <USB_EPStartXfer+0xdda>
 8004b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	e063      	b.n	8004c2e <USB_EPStartXfer+0xea2>
 8004b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b6c:	d817      	bhi.n	8004b9e <USB_EPStartXfer+0xe12>
 8004b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <USB_EPStartXfer+0xe02>
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	029b      	lsls	r3, r3, #10
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b9a:	801a      	strh	r2, [r3, #0]
 8004b9c:	e047      	b.n	8004c2e <USB_EPStartXfer+0xea2>
 8004b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d104      	bne.n	8004bbe <USB_EPStartXfer+0xe32>
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	029b      	lsls	r3, r3, #10
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd4:	801a      	strh	r2, [r3, #0]
 8004bd6:	e02a      	b.n	8004c2e <USB_EPStartXfer+0xea2>
 8004bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d122      	bne.n	8004c2e <USB_EPStartXfer+0xea2>
 8004be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	673b      	str	r3, [r7, #112]	; 0x70
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c08:	4413      	add	r3, r2
 8004c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	011a      	lsls	r2, r3, #4
 8004c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	891b      	ldrh	r3, [r3, #8]
 8004c3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6959      	ldr	r1, [r3, #20]
 8004c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c5c:	6800      	ldr	r0, [r0, #0]
 8004c5e:	f001 f80b 	bl	8005c78 <USB_WritePMA>
 8004c62:	e1d8      	b.n	8005016 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d178      	bne.n	8004d66 <USB_EPStartXfer+0xfda>
 8004c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c98:	4413      	add	r3, r2
 8004c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	011a      	lsls	r2, r3, #4
 8004cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <USB_EPStartXfer+0xf64>
 8004cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cd4:	801a      	strh	r2, [r3, #0]
 8004cd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	e06b      	b.n	8004dc8 <USB_EPStartXfer+0x103c>
 8004cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf4:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf6:	d818      	bhi.n	8004d2a <USB_EPStartXfer+0xf9e>
 8004cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <USB_EPStartXfer+0xf8c>
 8004d0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d12:	3301      	adds	r3, #1
 8004d14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004d18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	e04e      	b.n	8004dc8 <USB_EPStartXfer+0x103c>
 8004d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d38:	f003 031f 	and.w	r3, r3, #31
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d104      	bne.n	8004d4a <USB_EPStartXfer+0xfbe>
 8004d40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d44:	3b01      	subs	r3, #1
 8004d46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004d4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	029b      	lsls	r3, r3, #10
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d62:	801a      	strh	r2, [r3, #0]
 8004d64:	e030      	b.n	8004dc8 <USB_EPStartXfer+0x103c>
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d128      	bne.n	8004dc8 <USB_EPStartXfer+0x103c>
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	011a      	lsls	r2, r3, #4
 8004dae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004db2:	4413      	add	r3, r2
 8004db4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	891b      	ldrh	r3, [r3, #8]
 8004dd4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6959      	ldr	r1, [r3, #20]
 8004de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dee:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004df2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004df6:	6800      	ldr	r0, [r0, #0]
 8004df8:	f000 ff3e 	bl	8005c78 <USB_WritePMA>
          ep->xfer_buff += len;
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d90f      	bls.n	8004e56 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8004e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e46:	1ad2      	subs	r2, r2, r3
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	621a      	str	r2, [r3, #32]
 8004e54:	e00e      	b.n	8004e74 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8004e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80cc 	beq.w	8005016 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d178      	bne.n	8004f8e <USB_EPStartXfer+0x1202>
 8004e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	011a      	lsls	r2, r3, #4
 8004ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ed8:	4413      	add	r3, r2
 8004eda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d116      	bne.n	8004f18 <USB_EPStartXfer+0x118c>
 8004eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004efc:	801a      	strh	r2, [r3, #0]
 8004efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e064      	b.n	8004fe2 <USB_EPStartXfer+0x1256>
 8004f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f1e:	d818      	bhi.n	8004f52 <USB_EPStartXfer+0x11c6>
 8004f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <USB_EPStartXfer+0x11b4>
 8004f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	e047      	b.n	8004fe2 <USB_EPStartXfer+0x1256>
 8004f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <USB_EPStartXfer+0x11e6>
 8004f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	e029      	b.n	8004fe2 <USB_EPStartXfer+0x1256>
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d121      	bne.n	8004fe2 <USB_EPStartXfer+0x1256>
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	895b      	ldrh	r3, [r3, #10]
 8004fee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6959      	ldr	r1, [r3, #20]
 8004ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005002:	b29b      	uxth	r3, r3
 8005004:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005008:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800500c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005010:	6800      	ldr	r0, [r0, #0]
 8005012:	f000 fe31 	bl	8005c78 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005038:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800503c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005044:	8013      	strh	r3, [r2, #0]
 8005046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800504e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005052:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005056:	8812      	ldrh	r2, [r2, #0]
 8005058:	f082 0210 	eor.w	r2, r2, #16
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005066:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800506a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800506e:	8812      	ldrh	r2, [r2, #0]
 8005070:	f082 0220 	eor.w	r2, r2, #32
 8005074:	801a      	strh	r2, [r3, #0]
 8005076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	441a      	add	r2, r3
 8005090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005094:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
 80050ae:	f000 bc9f 	b.w	80059f0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80050b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	7b1b      	ldrb	r3, [r3, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 80ae 	bne.w	8005220 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80050c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d917      	bls.n	8005110 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80050e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80050f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005100:	1ad2      	subs	r2, r2, r3
 8005102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	619a      	str	r2, [r3, #24]
 800510e:	e00e      	b.n	800512e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2200      	movs	r2, #0
 800512c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800512e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005132:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005152:	4413      	add	r3, r2
 8005154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	011a      	lsls	r2, r3, #4
 8005166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800516a:	4413      	add	r3, r2
 800516c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d116      	bne.n	80051aa <USB_EPStartXfer+0x141e>
 800517c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005188:	b29a      	uxth	r2, r3
 800518a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800518e:	801a      	strh	r2, [r3, #0]
 8005190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	e3e8      	b.n	800597c <USB_EPStartXfer+0x1bf0>
 80051aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ae:	2b3e      	cmp	r3, #62	; 0x3e
 80051b0:	d818      	bhi.n	80051e4 <USB_EPStartXfer+0x1458>
 80051b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <USB_EPStartXfer+0x1446>
 80051c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051cc:	3301      	adds	r3, #1
 80051ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	029b      	lsls	r3, r3, #10
 80051da:	b29a      	uxth	r2, r3
 80051dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e3cb      	b.n	800597c <USB_EPStartXfer+0x1bf0>
 80051e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <USB_EPStartXfer+0x1478>
 80051fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051fe:	3b01      	subs	r3, #1
 8005200:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005204:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005208:	b29b      	uxth	r3, r3
 800520a:	029b      	lsls	r3, r3, #10
 800520c:	b29b      	uxth	r3, r3
 800520e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005216:	b29a      	uxth	r2, r3
 8005218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	e3ad      	b.n	800597c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	78db      	ldrb	r3, [r3, #3]
 800522c:	2b02      	cmp	r3, #2
 800522e:	f040 8200 	bne.w	8005632 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8091 	bne.w	8005366 <USB_EPStartXfer+0x15da>
 8005244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005260:	b29b      	uxth	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005268:	4413      	add	r3, r2
 800526a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800526e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	011a      	lsls	r2, r3, #4
 800527c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005280:	4413      	add	r3, r2
 8005282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800528a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d116      	bne.n	80052c8 <USB_EPStartXfer+0x153c>
 800529a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052be:	b29a      	uxth	r2, r3
 80052c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e083      	b.n	80053d0 <USB_EPStartXfer+0x1644>
 80052c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b3e      	cmp	r3, #62	; 0x3e
 80052d6:	d820      	bhi.n	800531a <USB_EPStartXfer+0x158e>
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <USB_EPStartXfer+0x157c>
 80052fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005302:	3301      	adds	r3, #1
 8005304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530c:	b29b      	uxth	r3, r3
 800530e:	029b      	lsls	r3, r3, #10
 8005310:	b29a      	uxth	r2, r3
 8005312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e05a      	b.n	80053d0 <USB_EPStartXfer+0x1644>
 800531a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800532c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <USB_EPStartXfer+0x15be>
 8005340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005344:	3b01      	subs	r3, #1
 8005346:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534e:	b29b      	uxth	r3, r3
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	b29b      	uxth	r3, r3
 8005354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535c:	b29a      	uxth	r2, r3
 800535e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	e034      	b.n	80053d0 <USB_EPStartXfer+0x1644>
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d12c      	bne.n	80053d0 <USB_EPStartXfer+0x1644>
 8005376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800539a:	4413      	add	r3, r2
 800539c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80053a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	011a      	lsls	r2, r3, #4
 80053ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053b2:	4413      	add	r3, r2
 80053b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 8091 	bne.w	8005512 <USB_EPStartXfer+0x1786>
 80053f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80053fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005414:	4413      	add	r3, r2
 8005416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800541a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	011a      	lsls	r2, r3, #4
 8005428:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800542c:	4413      	add	r3, r2
 800542e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005432:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d116      	bne.n	8005474 <USB_EPStartXfer+0x16e8>
 8005446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005452:	b29a      	uxth	r2, r3
 8005454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546a:	b29a      	uxth	r2, r3
 800546c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e07c      	b.n	800556e <USB_EPStartXfer+0x17e2>
 8005474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b3e      	cmp	r3, #62	; 0x3e
 8005482:	d820      	bhi.n	80054c6 <USB_EPStartXfer+0x173a>
 8005484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d004      	beq.n	80054b4 <USB_EPStartXfer+0x1728>
 80054aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054ae:	3301      	adds	r3, #1
 80054b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	029b      	lsls	r3, r3, #10
 80054bc:	b29a      	uxth	r2, r3
 80054be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e053      	b.n	800556e <USB_EPStartXfer+0x17e2>
 80054c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <USB_EPStartXfer+0x176a>
 80054ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054f0:	3b01      	subs	r3, #1
 80054f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800550e:	801a      	strh	r2, [r3, #0]
 8005510:	e02d      	b.n	800556e <USB_EPStartXfer+0x17e2>
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d125      	bne.n	800556e <USB_EPStartXfer+0x17e2>
 8005522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005530:	b29b      	uxth	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005538:	4413      	add	r3, r2
 800553a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800553e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	011a      	lsls	r2, r3, #4
 800554c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005550:	4413      	add	r3, r2
 8005552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	b29a      	uxth	r2, r3
 8005568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800556c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 81fe 	beq.w	800597c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80055a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <USB_EPStartXfer+0x182c>
 80055ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80055b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80055bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 81db 	bne.w	800597c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80055c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 81d4 	bne.w	800597c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80055d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005628:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]
 8005630:	e1a4      	b.n	800597c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	78db      	ldrb	r3, [r3, #3]
 800563e:	2b01      	cmp	r3, #1
 8005640:	f040 819a 	bne.w	8005978 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d917      	bls.n	8005690 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005680:	1ad2      	subs	r2, r2, r3
 8005682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	619a      	str	r2, [r3, #24]
 800568e:	e00e      	b.n	80056ae <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d178      	bne.n	80057b0 <USB_EPStartXfer+0x1a24>
 80056be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056da:	b29b      	uxth	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056e2:	4413      	add	r3, r2
 80056e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056fa:	4413      	add	r3, r2
 80056fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005700:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d116      	bne.n	800573a <USB_EPStartXfer+0x19ae>
 800570c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005718:	b29a      	uxth	r2, r3
 800571a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29a      	uxth	r2, r3
 8005732:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	e06b      	b.n	8005812 <USB_EPStartXfer+0x1a86>
 800573a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573e:	2b3e      	cmp	r3, #62	; 0x3e
 8005740:	d818      	bhi.n	8005774 <USB_EPStartXfer+0x19e8>
 8005742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800574c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <USB_EPStartXfer+0x19d6>
 8005758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800575c:	3301      	adds	r3, #1
 800575e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005766:	b29b      	uxth	r3, r3
 8005768:	029b      	lsls	r3, r3, #10
 800576a:	b29a      	uxth	r2, r3
 800576c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e04e      	b.n	8005812 <USB_EPStartXfer+0x1a86>
 8005774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800577e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2b00      	cmp	r3, #0
 8005788:	d104      	bne.n	8005794 <USB_EPStartXfer+0x1a08>
 800578a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800578e:	3b01      	subs	r3, #1
 8005790:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005798:	b29b      	uxth	r3, r3
 800579a:	029b      	lsls	r3, r3, #10
 800579c:	b29b      	uxth	r3, r3
 800579e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e030      	b.n	8005812 <USB_EPStartXfer+0x1a86>
 80057b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d128      	bne.n	8005812 <USB_EPStartXfer+0x1a86>
 80057c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057dc:	b29b      	uxth	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	4413      	add	r3, r2
 80057e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	011a      	lsls	r2, r3, #4
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	4413      	add	r3, r2
 80057fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005802:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580a:	b29a      	uxth	r2, r3
 800580c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d178      	bne.n	8005922 <USB_EPStartXfer+0x1b96>
 8005830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800583e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584c:	b29b      	uxth	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005854:	4413      	add	r3, r2
 8005856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800585a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	011a      	lsls	r2, r3, #4
 8005868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800586c:	4413      	add	r3, r2
 800586e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d116      	bne.n	80058ac <USB_EPStartXfer+0x1b20>
 800587e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800588a:	b29a      	uxth	r2, r3
 800588c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29b      	uxth	r3, r3
 800589a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	e067      	b.n	800597c <USB_EPStartXfer+0x1bf0>
 80058ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b0:	2b3e      	cmp	r3, #62	; 0x3e
 80058b2:	d818      	bhi.n	80058e6 <USB_EPStartXfer+0x1b5a>
 80058b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <USB_EPStartXfer+0x1b48>
 80058ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058ce:	3301      	adds	r3, #1
 80058d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058d8:	b29b      	uxth	r3, r3
 80058da:	029b      	lsls	r3, r3, #10
 80058dc:	b29a      	uxth	r2, r3
 80058de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e04a      	b.n	800597c <USB_EPStartXfer+0x1bf0>
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <USB_EPStartXfer+0x1b7a>
 80058fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005900:	3b01      	subs	r3, #1
 8005902:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800590a:	b29b      	uxth	r3, r3
 800590c:	029b      	lsls	r3, r3, #10
 800590e:	b29b      	uxth	r3, r3
 8005910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005918:	b29a      	uxth	r2, r3
 800591a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e02c      	b.n	800597c <USB_EPStartXfer+0x1bf0>
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d124      	bne.n	800597c <USB_EPStartXfer+0x1bf0>
 8005932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005948:	4413      	add	r3, r2
 800594a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	011a      	lsls	r2, r3, #4
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005960:	4413      	add	r3, r2
 8005962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005966:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800596a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596e:	b29a      	uxth	r2, r3
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	e001      	b.n	800597c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e03a      	b.n	80059f2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80059a6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80059aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80059b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80059b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80059be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80059dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d020      	beq.n	8005a50 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a24:	81bb      	strh	r3, [r7, #12]
 8005a26:	89bb      	ldrh	r3, [r7, #12]
 8005a28:	f083 0310 	eor.w	r3, r3, #16
 8005a2c:	81bb      	strh	r3, [r7, #12]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	89bb      	ldrh	r3, [r7, #12]
 8005a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]
 8005a4e:	e01f      	b.n	8005a90 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	81fb      	strh	r3, [r7, #14]
 8005a68:	89fb      	ldrh	r3, [r7, #14]
 8005a6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a6e:	81fb      	strh	r3, [r7, #14]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	89fb      	ldrh	r3, [r7, #14]
 8005a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	7b1b      	ldrb	r3, [r3, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f040 809d 	bne.w	8005bea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d04c      	beq.n	8005b52 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	823b      	strh	r3, [r7, #16]
 8005ac6:	8a3b      	ldrh	r3, [r7, #16]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01b      	beq.n	8005b08 <USB_EPClearStall+0x6c>
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	81fb      	strh	r3, [r7, #14]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	441a      	add	r2, r3
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	78db      	ldrb	r3, [r3, #3]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d06c      	beq.n	8005bea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b26:	81bb      	strh	r3, [r7, #12]
 8005b28:	89bb      	ldrh	r3, [r7, #12]
 8005b2a:	f083 0320 	eor.w	r3, r3, #32
 8005b2e:	81bb      	strh	r3, [r7, #12]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	89bb      	ldrh	r3, [r7, #12]
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]
 8005b50:	e04b      	b.n	8005bea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	82fb      	strh	r3, [r7, #22]
 8005b60:	8afb      	ldrh	r3, [r7, #22]
 8005b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <USB_EPClearStall+0x106>
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	82bb      	strh	r3, [r7, #20]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8abb      	ldrh	r3, [r7, #20]
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	827b      	strh	r3, [r7, #18]
 8005bba:	8a7b      	ldrh	r3, [r7, #18]
 8005bbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bc0:	827b      	strh	r3, [r7, #18]
 8005bc2:	8a7b      	ldrh	r3, [r7, #18]
 8005bc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bc8:	827b      	strh	r3, [r7, #18]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	441a      	add	r2, r3
 8005bd4:	8a7b      	ldrh	r3, [r7, #18]
 8005bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr

08005c30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005c56:	68fb      	ldr	r3, [r7, #12]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b08d      	sub	sp, #52	; 0x34
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4611      	mov	r1, r2
 8005c84:	461a      	mov	r2, r3
 8005c86:	460b      	mov	r3, r1
 8005c88:	80fb      	strh	r3, [r7, #6]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005c8e:	88bb      	ldrh	r3, [r7, #4]
 8005c90:	3301      	adds	r3, #1
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	005a      	lsls	r2, r3, #1
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cb0:	e01e      	b.n	8005cf0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	3301      	adds	r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	3302      	adds	r3, #2
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	3b01      	subs	r3, #1
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1dd      	bne.n	8005cb2 <USB_WritePMA+0x3a>
  }
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	3734      	adds	r7, #52	; 0x34
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b08b      	sub	sp, #44	; 0x2c
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	461a      	mov	r2, r3
 8005d10:	460b      	mov	r3, r1
 8005d12:	80fb      	strh	r3, [r7, #6]
 8005d14:	4613      	mov	r3, r2
 8005d16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d18:	88bb      	ldrh	r3, [r7, #4]
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	005a      	lsls	r2, r3, #1
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d34:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	e01b      	b.n	8005d74 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	3302      	adds	r3, #2
 8005d48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3301      	adds	r3, #1
 8005d66:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	3b01      	subs	r3, #1
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e0      	bne.n	8005d3c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d7a:	88bb      	ldrh	r3, [r7, #4]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	701a      	strb	r2, [r3, #0]
  }
}
 8005d96:	bf00      	nop
 8005d98:	372c      	adds	r7, #44	; 0x2c
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	2203      	movs	r2, #3
 8005db4:	2181      	movs	r1, #129	; 0x81
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 fd29 	bl	800780e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005dc2:	2340      	movs	r3, #64	; 0x40
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 fd20 	bl	800780e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005dd6:	2054      	movs	r0, #84	; 0x54
 8005dd8:	f001 fe2e 	bl	8007a38 <USBD_static_malloc>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	e012      	b.n	8005e1a <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfa:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	2340      	movs	r3, #64	; 0x40
 8005e12:	2101      	movs	r1, #1
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 fdeb 	bl	80079f0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005e30:	2181      	movs	r1, #129	; 0x81
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 fd11 	bl	800785a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005e3e:	2101      	movs	r1, #1
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 fd0a 	bl	800785a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00e      	beq.n	8005e76 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 fdf1 	bl	8007a50 <USBD_static_free>
    pdev->pClassData = NULL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e90:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d051      	beq.n	8005f52 <USBD_CUSTOM_HID_Setup+0xd2>
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	f040 80d8 	bne.w	8006064 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	3b02      	subs	r3, #2
 8005eba:	2b09      	cmp	r3, #9
 8005ebc:	d841      	bhi.n	8005f42 <USBD_CUSTOM_HID_Setup+0xc2>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <USBD_CUSTOM_HID_Setup+0x44>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f1d 	.word	0x08005f1d
 8005ec8:	08005efb 	.word	0x08005efb
 8005ecc:	08005f43 	.word	0x08005f43
 8005ed0:	08005f43 	.word	0x08005f43
 8005ed4:	08005f43 	.word	0x08005f43
 8005ed8:	08005f43 	.word	0x08005f43
 8005edc:	08005f43 	.word	0x08005f43
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005f0b 	.word	0x08005f0b
 8005ee8:	08005eed 	.word	0x08005eed
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	885b      	ldrh	r3, [r3, #2]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8005ef8:	e02a      	b.n	8005f50 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	3340      	adds	r3, #64	; 0x40
 8005efe:	2201      	movs	r2, #1
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 f971 	bl	80071ea <USBD_CtlSendData>
          break;
 8005f08:	e022      	b.n	8005f50 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	885b      	ldrh	r3, [r3, #2]
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8005f1a:	e019      	b.n	8005f50 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3344      	adds	r3, #68	; 0x44
 8005f20:	2201      	movs	r2, #1
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 f960 	bl	80071ea <USBD_CtlSendData>
          break;
 8005f2a:	e011      	b.n	8005f50 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005f32:	6939      	ldr	r1, [r7, #16]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	88db      	ldrh	r3, [r3, #6]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 f983 	bl	8007246 <USBD_CtlPrepareRx>
          break;
 8005f40:	e006      	b.n	8005f50 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f8e6 	bl	8007116 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f4e:	bf00      	nop
      }
      break;
 8005f50:	e08f      	b.n	8006072 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b0b      	cmp	r3, #11
 8005f58:	d87c      	bhi.n	8006054 <USBD_CUSTOM_HID_Setup+0x1d4>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <USBD_CUSTOM_HID_Setup+0xe0>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f91 	.word	0x08005f91
 8005f64:	08006055 	.word	0x08006055
 8005f68:	08006055 	.word	0x08006055
 8005f6c:	08006055 	.word	0x08006055
 8005f70:	08006055 	.word	0x08006055
 8005f74:	08006055 	.word	0x08006055
 8005f78:	08005fb9 	.word	0x08005fb9
 8005f7c:	08006055 	.word	0x08006055
 8005f80:	08006055 	.word	0x08006055
 8005f84:	08006055 	.word	0x08006055
 8005f88:	08006007 	.word	0x08006007
 8005f8c:	0800602f 	.word	0x0800602f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d107      	bne.n	8005faa <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005f9a:	f107 030e 	add.w	r3, r7, #14
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 f921 	bl	80071ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fa8:	e05b      	b.n	8006062 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 f8b2 	bl	8007116 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fb6:	e054      	b.n	8006062 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	885b      	ldrh	r3, [r3, #2]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b22      	cmp	r3, #34	; 0x22
 8005fc2:	d10b      	bne.n	8005fdc <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	88db      	ldrh	r3, [r3, #6]
 8005fc8:	2b21      	cmp	r3, #33	; 0x21
 8005fca:	bf28      	it	cs
 8005fcc:	2321      	movcs	r3, #33	; 0x21
 8005fce:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e00d      	b.n	8005ff8 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	0a1b      	lsrs	r3, r3, #8
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b21      	cmp	r3, #33	; 0x21
 8005fe6:	d107      	bne.n	8005ff8 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005fe8:	4b24      	ldr	r3, [pc, #144]	; (800607c <USBD_CUSTOM_HID_Setup+0x1fc>)
 8005fea:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	88db      	ldrh	r3, [r3, #6]
 8005ff0:	2b09      	cmp	r3, #9
 8005ff2:	bf28      	it	cs
 8005ff4:	2309      	movcs	r3, #9
 8005ff6:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8005ff8:	8bfb      	ldrh	r3, [r7, #30]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	69b9      	ldr	r1, [r7, #24]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 f8f3 	bl	80071ea <USBD_CtlSendData>
          break;
 8006004:	e02d      	b.n	8006062 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600c:	2b03      	cmp	r3, #3
 800600e:	d107      	bne.n	8006020 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3348      	adds	r3, #72	; 0x48
 8006014:	2201      	movs	r2, #1
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 f8e6 	bl	80071ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800601e:	e020      	b.n	8006062 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 f877 	bl	8007116 <USBD_CtlError>
            ret = USBD_FAIL;
 8006028:	2302      	movs	r3, #2
 800602a:	75fb      	strb	r3, [r7, #23]
          break;
 800602c:	e019      	b.n	8006062 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006034:	2b03      	cmp	r3, #3
 8006036:	d106      	bne.n	8006046 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	885b      	ldrh	r3, [r3, #2]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006044:	e00d      	b.n	8006062 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f864 	bl	8007116 <USBD_CtlError>
            ret = USBD_FAIL;
 800604e:	2302      	movs	r3, #2
 8006050:	75fb      	strb	r3, [r7, #23]
          break;
 8006052:	e006      	b.n	8006062 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 f85d 	bl	8007116 <USBD_CtlError>
          ret = USBD_FAIL;
 800605c:	2302      	movs	r3, #2
 800605e:	75fb      	strb	r3, [r7, #23]
          break;
 8006060:	bf00      	nop
      }
      break;
 8006062:	e006      	b.n	8006072 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 f855 	bl	8007116 <USBD_CtlError>
      ret = USBD_FAIL;
 800606c:	2302      	movs	r3, #2
 800606e:	75fb      	strb	r3, [r7, #23]
      break;
 8006070:	bf00      	nop
  }
  return ret;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200000c8 	.word	0x200000c8

08006080 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2229      	movs	r2, #41	; 0x29
 800608c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000044 	.word	0x20000044

080060a0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2229      	movs	r2, #41	; 0x29
 80060ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80060ae:	4b03      	ldr	r3, [pc, #12]	; (80060bc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000070 	.word	0x20000070

080060c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2229      	movs	r2, #41	; 0x29
 80060cc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80060ce:	4b03      	ldr	r3, [pc, #12]	; (80060dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000009c 	.word	0x2000009c

080060e0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006116:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4610      	mov	r0, r2
 8006124:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	2340      	movs	r3, #64	; 0x40
 800612a:	2101      	movs	r1, #1
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 fc5f 	bl	80079f0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d109      	bne.n	8006168 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4610      	mov	r0, r2
 8006160:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	220a      	movs	r2, #10
 8006180:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006182:	4b03      	ldr	r3, [pc, #12]	; (8006190 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	200000d4 	.word	0x200000d4

08006194 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800619e:	2302      	movs	r3, #2
 80061a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80061d4:	2302      	movs	r3, #2
 80061d6:	e01a      	b.n	800620e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	79fa      	ldrb	r2, [r7, #7]
 8006204:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f001 fa96 	bl	8007738 <USBD_LL_Init>

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d006      	beq.n	8006238 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
 8006236:	e001      	b.n	800623c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006238:	2302      	movs	r3, #2
 800623a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fac1 	bl	80077d8 <USBD_LL_Start>

  return USBD_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006280:	2302      	movs	r3, #2
 8006282:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	4611      	mov	r1, r2
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	460b      	mov	r3, r1
 80062bc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	4611      	mov	r1, r2
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3

  return USBD_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fed7 	bl	800709e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80062fe:	461a      	mov	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	2b02      	cmp	r3, #2
 8006312:	d016      	beq.n	8006342 <USBD_LL_SetupStage+0x6a>
 8006314:	2b02      	cmp	r3, #2
 8006316:	d81c      	bhi.n	8006352 <USBD_LL_SetupStage+0x7a>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <USBD_LL_SetupStage+0x4a>
 800631c:	2b01      	cmp	r3, #1
 800631e:	d008      	beq.n	8006332 <USBD_LL_SetupStage+0x5a>
 8006320:	e017      	b.n	8006352 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f9ca 	bl	80066c4 <USBD_StdDevReq>
      break;
 8006330:	e01a      	b.n	8006368 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa2c 	bl	8006798 <USBD_StdItfReq>
      break;
 8006340:	e012      	b.n	8006368 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa6c 	bl	8006828 <USBD_StdEPReq>
      break;
 8006350:	e00a      	b.n	8006368 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 fa99 	bl	8007898 <USBD_LL_StallEP>
      break;
 8006366:	bf00      	nop
  }

  return USBD_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	460b      	mov	r3, r1
 800637c:	607a      	str	r2, [r7, #4]
 800637e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006380:	7afb      	ldrb	r3, [r7, #11]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d14b      	bne.n	800641e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800638c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006394:	2b03      	cmp	r3, #3
 8006396:	d134      	bne.n	8006402 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d919      	bls.n	80063d8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	1ad2      	subs	r2, r2, r3
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d203      	bcs.n	80063c6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	e002      	b.n	80063cc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 ff56 	bl	8007282 <USBD_CtlContinueRx>
 80063d6:	e038      	b.n	800644a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d105      	bne.n	80063fa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 ff53 	bl	80072a6 <USBD_CtlSendStatus>
 8006400:	e023      	b.n	800644a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006408:	2b05      	cmp	r3, #5
 800640a:	d11e      	bne.n	800644a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006414:	2100      	movs	r1, #0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f001 fa3e 	bl	8007898 <USBD_LL_StallEP>
 800641c:	e015      	b.n	800644a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00d      	beq.n	8006446 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006430:	2b03      	cmp	r3, #3
 8006432:	d108      	bne.n	8006446 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	7afa      	ldrb	r2, [r7, #11]
 800643e:	4611      	mov	r1, r2
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	4798      	blx	r3
 8006444:	e001      	b.n	800644a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006446:	2302      	movs	r3, #2
 8006448:	e000      	b.n	800644c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	460b      	mov	r3, r1
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006462:	7afb      	ldrb	r3, [r7, #11]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d17f      	bne.n	8006568 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3314      	adds	r3, #20
 800646c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006474:	2b02      	cmp	r3, #2
 8006476:	d15c      	bne.n	8006532 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	429a      	cmp	r2, r3
 8006482:	d915      	bls.n	80064b0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	b29b      	uxth	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fec0 	bl	8007222 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064a2:	2300      	movs	r3, #0
 80064a4:	2200      	movs	r2, #0
 80064a6:	2100      	movs	r1, #0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f001 faa1 	bl	80079f0 <USBD_LL_PrepareReceive>
 80064ae:	e04e      	b.n	800654e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	6912      	ldr	r2, [r2, #16]
 80064b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80064bc:	fb01 f202 	mul.w	r2, r1, r2
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d11c      	bne.n	8006500 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d316      	bcc.n	8006500 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80064dc:	429a      	cmp	r2, r3
 80064de:	d20f      	bcs.n	8006500 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064e0:	2200      	movs	r2, #0
 80064e2:	2100      	movs	r1, #0
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fe9c 	bl	8007222 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064f2:	2300      	movs	r3, #0
 80064f4:	2200      	movs	r2, #0
 80064f6:	2100      	movs	r1, #0
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 fa79 	bl	80079f0 <USBD_LL_PrepareReceive>
 80064fe:	e026      	b.n	800654e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006512:	2b03      	cmp	r3, #3
 8006514:	d105      	bne.n	8006522 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006522:	2180      	movs	r1, #128	; 0x80
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 f9b7 	bl	8007898 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fece 	bl	80072cc <USBD_CtlReceiveStatus>
 8006530:	e00d      	b.n	800654e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006538:	2b04      	cmp	r3, #4
 800653a:	d004      	beq.n	8006546 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006546:	2180      	movs	r1, #128	; 0x80
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 f9a5 	bl	8007898 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d11d      	bne.n	8006594 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff fe81 	bl	8006260 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006566:	e015      	b.n	8006594 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00d      	beq.n	8006590 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800657a:	2b03      	cmp	r3, #3
 800657c:	d108      	bne.n	8006590 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	7afa      	ldrb	r2, [r7, #11]
 8006588:	4611      	mov	r1, r2
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	4798      	blx	r3
 800658e:	e001      	b.n	8006594 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006590:	2302      	movs	r3, #2
 8006592:	e000      	b.n	8006596 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065a6:	2340      	movs	r3, #64	; 0x40
 80065a8:	2200      	movs	r2, #0
 80065aa:	2100      	movs	r1, #0
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 f92e 	bl	800780e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2240      	movs	r2, #64	; 0x40
 80065be:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	2200      	movs	r2, #0
 80065c6:	2180      	movs	r1, #128	; 0x80
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 f920 	bl	800780e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2240      	movs	r2, #64	; 0x40
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d009      	beq.n	8006616 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6852      	ldr	r2, [r2, #4]
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	4611      	mov	r1, r2
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
  }

  return USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	78fa      	ldrb	r2, [r7, #3]
 8006630:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr

0800663e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2204      	movs	r2, #4
 8006656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr

08006666 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006674:	2b04      	cmp	r3, #4
 8006676:	d105      	bne.n	8006684 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr

08006690 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d10b      	bne.n	80066ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d005      	beq.n	80066ea <USBD_StdDevReq+0x26>
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d84f      	bhi.n	8006782 <USBD_StdDevReq+0xbe>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <USBD_StdDevReq+0x36>
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d14b      	bne.n	8006782 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
      break;
 80066f8:	e048      	b.n	800678c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	2b09      	cmp	r3, #9
 8006700:	d839      	bhi.n	8006776 <USBD_StdDevReq+0xb2>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <USBD_StdDevReq+0x44>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	08006759 	.word	0x08006759
 800670c:	0800676d 	.word	0x0800676d
 8006710:	08006777 	.word	0x08006777
 8006714:	08006763 	.word	0x08006763
 8006718:	08006777 	.word	0x08006777
 800671c:	0800673b 	.word	0x0800673b
 8006720:	08006731 	.word	0x08006731
 8006724:	08006777 	.word	0x08006777
 8006728:	0800674f 	.word	0x0800674f
 800672c:	08006745 	.word	0x08006745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f9dc 	bl	8006af0 <USBD_GetDescriptor>
          break;
 8006738:	e022      	b.n	8006780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fb3f 	bl	8006dc0 <USBD_SetAddress>
          break;
 8006742:	e01d      	b.n	8006780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fb7e 	bl	8006e48 <USBD_SetConfig>
          break;
 800674c:	e018      	b.n	8006780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fc07 	bl	8006f64 <USBD_GetConfig>
          break;
 8006756:	e013      	b.n	8006780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fc37 	bl	8006fce <USBD_GetStatus>
          break;
 8006760:	e00e      	b.n	8006780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc65 	bl	8007034 <USBD_SetFeature>
          break;
 800676a:	e009      	b.n	8006780 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fc74 	bl	800705c <USBD_ClrFeature>
          break;
 8006774:	e004      	b.n	8006780 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fccc 	bl	8007116 <USBD_CtlError>
          break;
 800677e:	bf00      	nop
      }
      break;
 8006780:	e004      	b.n	800678c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fcc6 	bl	8007116 <USBD_CtlError>
      break;
 800678a:	bf00      	nop
  }

  return ret;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop

08006798 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d005      	beq.n	80067be <USBD_StdItfReq+0x26>
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d82e      	bhi.n	8006814 <USBD_StdItfReq+0x7c>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <USBD_StdItfReq+0x26>
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d12a      	bne.n	8006814 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c4:	3b01      	subs	r3, #1
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d81d      	bhi.n	8006806 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	889b      	ldrh	r3, [r3, #4]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d813      	bhi.n	80067fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	88db      	ldrh	r3, [r3, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d110      	bne.n	8006810 <USBD_StdItfReq+0x78>
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10d      	bne.n	8006810 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fd56 	bl	80072a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067fa:	e009      	b.n	8006810 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fc89 	bl	8007116 <USBD_CtlError>
          break;
 8006804:	e004      	b.n	8006810 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fc84 	bl	8007116 <USBD_CtlError>
          break;
 800680e:	e000      	b.n	8006812 <USBD_StdItfReq+0x7a>
          break;
 8006810:	bf00      	nop
      }
      break;
 8006812:	e004      	b.n	800681e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fc7d 	bl	8007116 <USBD_CtlError>
      break;
 800681c:	bf00      	nop
  }

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	889b      	ldrh	r3, [r3, #4]
 800683a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	d007      	beq.n	8006858 <USBD_StdEPReq+0x30>
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	f200 8146 	bhi.w	8006ada <USBD_StdEPReq+0x2b2>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <USBD_StdEPReq+0x40>
 8006852:	2b20      	cmp	r3, #32
 8006854:	f040 8141 	bne.w	8006ada <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
      break;
 8006866:	e13d      	b.n	8006ae4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006870:	2b20      	cmp	r3, #32
 8006872:	d10a      	bne.n	800688a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	4798      	blx	r3
 8006882:	4603      	mov	r3, r0
 8006884:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	e12d      	b.n	8006ae6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	785b      	ldrb	r3, [r3, #1]
 800688e:	2b03      	cmp	r3, #3
 8006890:	d007      	beq.n	80068a2 <USBD_StdEPReq+0x7a>
 8006892:	2b03      	cmp	r3, #3
 8006894:	f300 811b 	bgt.w	8006ace <USBD_StdEPReq+0x2a6>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d072      	beq.n	8006982 <USBD_StdEPReq+0x15a>
 800689c:	2b01      	cmp	r3, #1
 800689e:	d03a      	beq.n	8006916 <USBD_StdEPReq+0xee>
 80068a0:	e115      	b.n	8006ace <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d002      	beq.n	80068b2 <USBD_StdEPReq+0x8a>
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d015      	beq.n	80068dc <USBD_StdEPReq+0xb4>
 80068b0:	e02b      	b.n	800690a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00c      	beq.n	80068d2 <USBD_StdEPReq+0xaa>
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d009      	beq.n	80068d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 ffe8 	bl	8007898 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068c8:	2180      	movs	r1, #128	; 0x80
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 ffe4 	bl	8007898 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068d0:	e020      	b.n	8006914 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fc1e 	bl	8007116 <USBD_CtlError>
              break;
 80068da:	e01b      	b.n	8006914 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	885b      	ldrh	r3, [r3, #2]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10e      	bne.n	8006902 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <USBD_StdEPReq+0xda>
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	2b80      	cmp	r3, #128	; 0x80
 80068ee:	d008      	beq.n	8006902 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	88db      	ldrh	r3, [r3, #6]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 ffcb 	bl	8007898 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fccf 	bl	80072a6 <USBD_CtlSendStatus>

              break;
 8006908:	e004      	b.n	8006914 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fc02 	bl	8007116 <USBD_CtlError>
              break;
 8006912:	bf00      	nop
          }
          break;
 8006914:	e0e0      	b.n	8006ad8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691c:	2b02      	cmp	r3, #2
 800691e:	d002      	beq.n	8006926 <USBD_StdEPReq+0xfe>
 8006920:	2b03      	cmp	r3, #3
 8006922:	d015      	beq.n	8006950 <USBD_StdEPReq+0x128>
 8006924:	e026      	b.n	8006974 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00c      	beq.n	8006946 <USBD_StdEPReq+0x11e>
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	d009      	beq.n	8006946 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 ffae 	bl	8007898 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800693c:	2180      	movs	r1, #128	; 0x80
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 ffaa 	bl	8007898 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006944:	e01c      	b.n	8006980 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fbe4 	bl	8007116 <USBD_CtlError>
              break;
 800694e:	e017      	b.n	8006980 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	885b      	ldrh	r3, [r3, #2]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d112      	bne.n	800697e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 ffb5 	bl	80078d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fc9a 	bl	80072a6 <USBD_CtlSendStatus>
              }
              break;
 8006972:	e004      	b.n	800697e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fbcd 	bl	8007116 <USBD_CtlError>
              break;
 800697c:	e000      	b.n	8006980 <USBD_StdEPReq+0x158>
              break;
 800697e:	bf00      	nop
          }
          break;
 8006980:	e0aa      	b.n	8006ad8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006988:	2b02      	cmp	r3, #2
 800698a:	d002      	beq.n	8006992 <USBD_StdEPReq+0x16a>
 800698c:	2b03      	cmp	r3, #3
 800698e:	d032      	beq.n	80069f6 <USBD_StdEPReq+0x1ce>
 8006990:	e097      	b.n	8006ac2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <USBD_StdEPReq+0x180>
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	2b80      	cmp	r3, #128	; 0x80
 800699c:	d004      	beq.n	80069a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fbb8 	bl	8007116 <USBD_CtlError>
                break;
 80069a6:	e091      	b.n	8006acc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da0b      	bge.n	80069c8 <USBD_StdEPReq+0x1a0>
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	3310      	adds	r3, #16
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	4413      	add	r3, r2
 80069c4:	3304      	adds	r3, #4
 80069c6:	e00b      	b.n	80069e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	3304      	adds	r3, #4
 80069e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2202      	movs	r2, #2
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fbfb 	bl	80071ea <USBD_CtlSendData>
              break;
 80069f4:	e06a      	b.n	8006acc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da11      	bge.n	8006a22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	f003 020f 	and.w	r2, r3, #15
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	3318      	adds	r3, #24
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d117      	bne.n	8006a48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fb7b 	bl	8007116 <USBD_CtlError>
                  break;
 8006a20:	e054      	b.n	8006acc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	f003 020f 	and.w	r2, r3, #15
 8006a28:	6879      	ldr	r1, [r7, #4]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fb68 	bl	8007116 <USBD_CtlError>
                  break;
 8006a46:	e041      	b.n	8006acc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	da0b      	bge.n	8006a68 <USBD_StdEPReq+0x240>
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	3310      	adds	r3, #16
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	4413      	add	r3, r2
 8006a64:	3304      	adds	r3, #4
 8006a66:	e00b      	b.n	8006a80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	3304      	adds	r3, #4
 8006a80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <USBD_StdEPReq+0x266>
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	2b80      	cmp	r3, #128	; 0x80
 8006a8c:	d103      	bne.n	8006a96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e00e      	b.n	8006ab4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 ff3a 	bl	8007914 <USBD_LL_IsStallEP>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	e002      	b.n	8006ab4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fb95 	bl	80071ea <USBD_CtlSendData>
              break;
 8006ac0:	e004      	b.n	8006acc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fb26 	bl	8007116 <USBD_CtlError>
              break;
 8006aca:	bf00      	nop
          }
          break;
 8006acc:	e004      	b.n	8006ad8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fb20 	bl	8007116 <USBD_CtlError>
          break;
 8006ad6:	bf00      	nop
      }
      break;
 8006ad8:	e004      	b.n	8006ae4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fb1a 	bl	8007116 <USBD_CtlError>
      break;
 8006ae2:	bf00      	nop
  }

  return ret;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	885b      	ldrh	r3, [r3, #2]
 8006b0a:	0a1b      	lsrs	r3, r3, #8
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	2b06      	cmp	r3, #6
 8006b12:	f200 8128 	bhi.w	8006d66 <USBD_GetDescriptor+0x276>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <USBD_GetDescriptor+0x2c>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b39 	.word	0x08006b39
 8006b20:	08006b51 	.word	0x08006b51
 8006b24:	08006b91 	.word	0x08006b91
 8006b28:	08006d67 	.word	0x08006d67
 8006b2c:	08006d67 	.word	0x08006d67
 8006b30:	08006d07 	.word	0x08006d07
 8006b34:	08006d33 	.word	0x08006d33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	7c12      	ldrb	r2, [r2, #16]
 8006b44:	f107 0108 	add.w	r1, r7, #8
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
 8006b4c:	60f8      	str	r0, [r7, #12]
      break;
 8006b4e:	e112      	b.n	8006d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	7c1b      	ldrb	r3, [r3, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10d      	bne.n	8006b74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b60:	f107 0208 	add.w	r2, r7, #8
 8006b64:	4610      	mov	r0, r2
 8006b66:	4798      	blx	r3
 8006b68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	2202      	movs	r2, #2
 8006b70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b72:	e100      	b.n	8006d76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	f107 0208 	add.w	r2, r7, #8
 8006b80:	4610      	mov	r0, r2
 8006b82:	4798      	blx	r3
 8006b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	701a      	strb	r2, [r3, #0]
      break;
 8006b8e:	e0f2      	b.n	8006d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	885b      	ldrh	r3, [r3, #2]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b05      	cmp	r3, #5
 8006b98:	f200 80ac 	bhi.w	8006cf4 <USBD_GetDescriptor+0x204>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <USBD_GetDescriptor+0xb4>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bbd 	.word	0x08006bbd
 8006ba8:	08006bf1 	.word	0x08006bf1
 8006bac:	08006c25 	.word	0x08006c25
 8006bb0:	08006c59 	.word	0x08006c59
 8006bb4:	08006c8d 	.word	0x08006c8d
 8006bb8:	08006cc1 	.word	0x08006cc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	7c12      	ldrb	r2, [r2, #16]
 8006bd4:	f107 0108 	add.w	r1, r7, #8
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4798      	blx	r3
 8006bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bde:	e091      	b.n	8006d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa97 	bl	8007116 <USBD_CtlError>
            err++;
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	3301      	adds	r3, #1
 8006bec:	72fb      	strb	r3, [r7, #11]
          break;
 8006bee:	e089      	b.n	8006d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	7c12      	ldrb	r2, [r2, #16]
 8006c08:	f107 0108 	add.w	r1, r7, #8
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4798      	blx	r3
 8006c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c12:	e077      	b.n	8006d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa7d 	bl	8007116 <USBD_CtlError>
            err++;
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	72fb      	strb	r3, [r7, #11]
          break;
 8006c22:	e06f      	b.n	8006d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	7c12      	ldrb	r2, [r2, #16]
 8006c3c:	f107 0108 	add.w	r1, r7, #8
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c46:	e05d      	b.n	8006d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa63 	bl	8007116 <USBD_CtlError>
            err++;
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	3301      	adds	r3, #1
 8006c54:	72fb      	strb	r3, [r7, #11]
          break;
 8006c56:	e055      	b.n	8006d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	7c12      	ldrb	r2, [r2, #16]
 8006c70:	f107 0108 	add.w	r1, r7, #8
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
 8006c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c7a:	e043      	b.n	8006d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa49 	bl	8007116 <USBD_CtlError>
            err++;
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	3301      	adds	r3, #1
 8006c88:	72fb      	strb	r3, [r7, #11]
          break;
 8006c8a:	e03b      	b.n	8006d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7c12      	ldrb	r2, [r2, #16]
 8006ca4:	f107 0108 	add.w	r1, r7, #8
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cae:	e029      	b.n	8006d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa2f 	bl	8007116 <USBD_CtlError>
            err++;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cbe:	e021      	b.n	8006d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	7c12      	ldrb	r2, [r2, #16]
 8006cd8:	f107 0108 	add.w	r1, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce2:	e00f      	b.n	8006d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa15 	bl	8007116 <USBD_CtlError>
            err++;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf2:	e007      	b.n	8006d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa0d 	bl	8007116 <USBD_CtlError>
          err++;
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006d02:	e038      	b.n	8006d76 <USBD_GetDescriptor+0x286>
 8006d04:	e037      	b.n	8006d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7c1b      	ldrb	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	f107 0208 	add.w	r2, r7, #8
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4798      	blx	r3
 8006d1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d20:	e029      	b.n	8006d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f9f6 	bl	8007116 <USBD_CtlError>
        err++;
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d30:	e021      	b.n	8006d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	7c1b      	ldrb	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10d      	bne.n	8006d56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	f107 0208 	add.w	r2, r7, #8
 8006d46:	4610      	mov	r0, r2
 8006d48:	4798      	blx	r3
 8006d4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	2207      	movs	r2, #7
 8006d52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d54:	e00f      	b.n	8006d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f9dc 	bl	8007116 <USBD_CtlError>
        err++;
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	3301      	adds	r3, #1
 8006d62:	72fb      	strb	r3, [r7, #11]
      break;
 8006d64:	e007      	b.n	8006d76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f9d4 	bl	8007116 <USBD_CtlError>
      err++;
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	3301      	adds	r3, #1
 8006d72:	72fb      	strb	r3, [r7, #11]
      break;
 8006d74:	bf00      	nop
  }

  if (err != 0U)
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d11c      	bne.n	8006db6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006d7c:	893b      	ldrh	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <USBD_GetDescriptor+0x2b6>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88da      	ldrh	r2, [r3, #6]
 8006d8e:	893b      	ldrh	r3, [r7, #8]
 8006d90:	4293      	cmp	r3, r2
 8006d92:	bf28      	it	cs
 8006d94:	4613      	movcs	r3, r2
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d9a:	893b      	ldrh	r3, [r7, #8]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68f9      	ldr	r1, [r7, #12]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fa22 	bl	80071ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa79 	bl	80072a6 <USBD_CtlSendStatus>
 8006db4:	e000      	b.n	8006db8 <USBD_GetDescriptor+0x2c8>
    return;
 8006db6:	bf00      	nop
    }
  }
}
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	889b      	ldrh	r3, [r3, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d130      	bne.n	8006e34 <USBD_SetAddress+0x74>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d12c      	bne.n	8006e34 <USBD_SetAddress+0x74>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	885b      	ldrh	r3, [r3, #2]
 8006dde:	2b7f      	cmp	r3, #127	; 0x7f
 8006de0:	d828      	bhi.n	8006e34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	885b      	ldrh	r3, [r3, #2]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d104      	bne.n	8006e02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f98b 	bl	8007116 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e00:	e01d      	b.n	8006e3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	7bfa      	ldrb	r2, [r7, #15]
 8006e06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fdac 	bl	800796c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fa46 	bl	80072a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e28:	e009      	b.n	8006e3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e32:	e004      	b.n	8006e3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f96d 	bl	8007116 <USBD_CtlError>
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	885b      	ldrh	r3, [r3, #2]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	4b41      	ldr	r3, [pc, #260]	; (8006f60 <USBD_SetConfig+0x118>)
 8006e5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e5c:	4b40      	ldr	r3, [pc, #256]	; (8006f60 <USBD_SetConfig+0x118>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d904      	bls.n	8006e6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f955 	bl	8007116 <USBD_CtlError>
 8006e6c:	e075      	b.n	8006f5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d002      	beq.n	8006e7e <USBD_SetConfig+0x36>
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d023      	beq.n	8006ec4 <USBD_SetConfig+0x7c>
 8006e7c:	e062      	b.n	8006f44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006e7e:	4b38      	ldr	r3, [pc, #224]	; (8006f60 <USBD_SetConfig+0x118>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01a      	beq.n	8006ebc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006e86:	4b36      	ldr	r3, [pc, #216]	; (8006f60 <USBD_SetConfig+0x118>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2203      	movs	r2, #3
 8006e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e98:	4b31      	ldr	r3, [pc, #196]	; (8006f60 <USBD_SetConfig+0x118>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff f9e8 	bl	8006274 <USBD_SetClassConfig>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d104      	bne.n	8006eb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f932 	bl	8007116 <USBD_CtlError>
            return;
 8006eb2:	e052      	b.n	8006f5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f9f6 	bl	80072a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006eba:	e04e      	b.n	8006f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f9f2 	bl	80072a6 <USBD_CtlSendStatus>
        break;
 8006ec2:	e04a      	b.n	8006f5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006ec4:	4b26      	ldr	r3, [pc, #152]	; (8006f60 <USBD_SetConfig+0x118>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d112      	bne.n	8006ef2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006ed4:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <USBD_SetConfig+0x118>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006ede:	4b20      	ldr	r3, [pc, #128]	; (8006f60 <USBD_SetConfig+0x118>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff f9e4 	bl	80062b2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9db 	bl	80072a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ef0:	e033      	b.n	8006f5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <USBD_SetConfig+0x118>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d01d      	beq.n	8006f3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff f9d2 	bl	80062b2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006f0e:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <USBD_SetConfig+0x118>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f18:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <USBD_SetConfig+0x118>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff f9a8 	bl	8006274 <USBD_SetClassConfig>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d104      	bne.n	8006f34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f8f2 	bl	8007116 <USBD_CtlError>
            return;
 8006f32:	e012      	b.n	8006f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f9b6 	bl	80072a6 <USBD_CtlSendStatus>
        break;
 8006f3a:	e00e      	b.n	8006f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9b2 	bl	80072a6 <USBD_CtlSendStatus>
        break;
 8006f42:	e00a      	b.n	8006f5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f8e5 	bl	8007116 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <USBD_SetConfig+0x118>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff f9ad 	bl	80062b2 <USBD_ClrClassConfig>
        break;
 8006f58:	bf00      	nop
    }
  }
}
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	200001b4 	.word	0x200001b4

08006f64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88db      	ldrh	r3, [r3, #6]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d004      	beq.n	8006f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f8cc 	bl	8007116 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f7e:	e022      	b.n	8006fc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	dc02      	bgt.n	8006f90 <USBD_GetConfig+0x2c>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	dc03      	bgt.n	8006f96 <USBD_GetConfig+0x32>
 8006f8e:	e015      	b.n	8006fbc <USBD_GetConfig+0x58>
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d00b      	beq.n	8006fac <USBD_GetConfig+0x48>
 8006f94:	e012      	b.n	8006fbc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f920 	bl	80071ea <USBD_CtlSendData>
        break;
 8006faa:	e00c      	b.n	8006fc6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f918 	bl	80071ea <USBD_CtlSendData>
        break;
 8006fba:	e004      	b.n	8006fc6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f8a9 	bl	8007116 <USBD_CtlError>
        break;
 8006fc4:	bf00      	nop
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d81e      	bhi.n	8007022 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	88db      	ldrh	r3, [r3, #6]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d004      	beq.n	8006ff6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f891 	bl	8007116 <USBD_CtlError>
        break;
 8006ff4:	e01a      	b.n	800702c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f043 0202 	orr.w	r2, r3, #2
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	330c      	adds	r3, #12
 8007016:	2202      	movs	r2, #2
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f8e5 	bl	80071ea <USBD_CtlSendData>
      break;
 8007020:	e004      	b.n	800702c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f876 	bl	8007116 <USBD_CtlError>
      break;
 800702a:	bf00      	nop
  }
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	885b      	ldrh	r3, [r3, #2]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d106      	bne.n	8007054 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f929 	bl	80072a6 <USBD_CtlSendStatus>
  }
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706c:	3b01      	subs	r3, #1
 800706e:	2b02      	cmp	r3, #2
 8007070:	d80b      	bhi.n	800708a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	885b      	ldrh	r3, [r3, #2]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d10c      	bne.n	8007094 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f90f 	bl	80072a6 <USBD_CtlSendStatus>
      }
      break;
 8007088:	e004      	b.n	8007094 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f842 	bl	8007116 <USBD_CtlError>
      break;
 8007092:	e000      	b.n	8007096 <USBD_ClrFeature+0x3a>
      break;
 8007094:	bf00      	nop
  }
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781a      	ldrb	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	785a      	ldrb	r2, [r3, #1]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	3302      	adds	r3, #2
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	b29a      	uxth	r2, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	3303      	adds	r3, #3
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	4413      	add	r3, r2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	3304      	adds	r3, #4
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	3305      	adds	r3, #5
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	3306      	adds	r3, #6
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	3307      	adds	r3, #7
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	b29b      	uxth	r3, r3
 8007104:	4413      	add	r3, r2
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	80da      	strh	r2, [r3, #6]

}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr

08007116 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fbb8 	bl	8007898 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007128:	2100      	movs	r1, #0
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fbb4 	bl	8007898 <USBD_LL_StallEP>
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d032      	beq.n	80071b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f834 	bl	80071bc <USBD_GetLen>
 8007154:	4603      	mov	r3, r0
 8007156:	3301      	adds	r3, #1
 8007158:	b29b      	uxth	r3, r3
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	75fa      	strb	r2, [r7, #23]
 8007168:	461a      	mov	r2, r3
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4413      	add	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	75fa      	strb	r2, [r7, #23]
 800717a:	461a      	mov	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4413      	add	r3, r2
 8007180:	2203      	movs	r2, #3
 8007182:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007184:	e012      	b.n	80071ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	60fa      	str	r2, [r7, #12]
 800718c:	7dfa      	ldrb	r2, [r7, #23]
 800718e:	1c51      	adds	r1, r2, #1
 8007190:	75f9      	strb	r1, [r7, #23]
 8007192:	4611      	mov	r1, r2
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	440a      	add	r2, r1
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	75fa      	strb	r2, [r7, #23]
 80071a2:	461a      	mov	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4413      	add	r3, r2
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e8      	bne.n	8007186 <USBD_GetString+0x4e>
    }
  }
}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80071c8:	e005      	b.n	80071d6 <USBD_GetLen+0x1a>
  {
    len++;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	3301      	adds	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3301      	adds	r3, #1
 80071d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f5      	bne.n	80071ca <USBD_GetLen+0xe>
  }

  return len;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr

080071ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	4613      	mov	r3, r2
 80071f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007200:	88fa      	ldrh	r2, [r7, #6]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800720c:	88fb      	ldrh	r3, [r7, #6]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	2100      	movs	r1, #0
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fbc9 	bl	80079aa <USBD_LL_Transmit>

  return USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	4613      	mov	r3, r2
 800722e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	2100      	movs	r1, #0
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 fbb7 	bl	80079aa <USBD_LL_Transmit>

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	4613      	mov	r3, r2
 8007252:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2203      	movs	r2, #3
 8007258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800726c:	88fb      	ldrh	r3, [r7, #6]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	2100      	movs	r1, #0
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fbbc 	bl	80079f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	4613      	mov	r3, r2
 800728e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007290:	88fb      	ldrh	r3, [r7, #6]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	2100      	movs	r1, #0
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 fbaa 	bl	80079f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2204      	movs	r2, #4
 80072b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072b6:	2300      	movs	r3, #0
 80072b8:	2200      	movs	r2, #0
 80072ba:	2100      	movs	r1, #0
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fb74 	bl	80079aa <USBD_LL_Transmit>

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2205      	movs	r2, #5
 80072d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072dc:	2300      	movs	r3, #0
 80072de:	2200      	movs	r2, #0
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fb84 	bl	80079f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072f8:	2200      	movs	r2, #0
 80072fa:	4912      	ldr	r1, [pc, #72]	; (8007344 <MX_USB_DEVICE_Init+0x50>)
 80072fc:	4812      	ldr	r0, [pc, #72]	; (8007348 <MX_USB_DEVICE_Init+0x54>)
 80072fe:	f7fe ff5f 	bl	80061c0 <USBD_Init>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007308:	f7f9 f816 	bl	8000338 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800730c:	490f      	ldr	r1, [pc, #60]	; (800734c <MX_USB_DEVICE_Init+0x58>)
 800730e:	480e      	ldr	r0, [pc, #56]	; (8007348 <MX_USB_DEVICE_Init+0x54>)
 8007310:	f7fe ff81 	bl	8006216 <USBD_RegisterClass>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800731a:	f7f9 f80d 	bl	8000338 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800731e:	490c      	ldr	r1, [pc, #48]	; (8007350 <MX_USB_DEVICE_Init+0x5c>)
 8007320:	4809      	ldr	r0, [pc, #36]	; (8007348 <MX_USB_DEVICE_Init+0x54>)
 8007322:	f7fe ff37 	bl	8006194 <USBD_CUSTOM_HID_RegisterInterface>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800732c:	f7f9 f804 	bl	8000338 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007330:	4805      	ldr	r0, [pc, #20]	; (8007348 <MX_USB_DEVICE_Init+0x54>)
 8007332:	f7fe ff89 	bl	8006248 <USBD_Start>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800733c:	f7f8 fffc 	bl	8000338 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007340:	bf00      	nop
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20000114 	.word	0x20000114
 8007348:	200001b8 	.word	0x200001b8
 800734c:	2000000c 	.word	0x2000000c
 8007350:	20000104 	.word	0x20000104

08007354 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007358:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800735a:	4618      	mov	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr

08007362 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007362:	b480      	push	{r7}
 8007364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007366:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007368:	4618      	mov	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr

08007370 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8007378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800737c:	4805      	ldr	r0, [pc, #20]	; (8007394 <CUSTOM_HID_OutEvent_FS+0x24>)
 800737e:	f7f9 fddf 	bl	8000f40 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8007382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007386:	f7f9 f8fb 	bl	8000580 <HAL_Delay>
  return (USBD_OK);
 800738a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40011000 	.word	0x40011000

08007398 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2212      	movs	r2, #18
 80073a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073aa:	4b03      	ldr	r3, [pc, #12]	; (80073b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20000130 	.word	0x20000130

080073bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	6039      	str	r1, [r7, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2204      	movs	r2, #4
 80073cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	20000144 	.word	0x20000144

080073e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	6039      	str	r1, [r7, #0]
 80073ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	4907      	ldr	r1, [pc, #28]	; (8007414 <USBD_FS_ProductStrDescriptor+0x34>)
 80073f6:	4808      	ldr	r0, [pc, #32]	; (8007418 <USBD_FS_ProductStrDescriptor+0x38>)
 80073f8:	f7ff fe9e 	bl	8007138 <USBD_GetString>
 80073fc:	e004      	b.n	8007408 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	4904      	ldr	r1, [pc, #16]	; (8007414 <USBD_FS_ProductStrDescriptor+0x34>)
 8007402:	4805      	ldr	r0, [pc, #20]	; (8007418 <USBD_FS_ProductStrDescriptor+0x38>)
 8007404:	f7ff fe98 	bl	8007138 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007408:	4b02      	ldr	r3, [pc, #8]	; (8007414 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	2000047c 	.word	0x2000047c
 8007418:	08007b50 	.word	0x08007b50

0800741c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	4904      	ldr	r1, [pc, #16]	; (800743c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800742c:	4804      	ldr	r0, [pc, #16]	; (8007440 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800742e:	f7ff fe83 	bl	8007138 <USBD_GetString>
  return USBD_StrDesc;
 8007432:	4b02      	ldr	r3, [pc, #8]	; (800743c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	2000047c 	.word	0x2000047c
 8007440:	08007b64 	.word	0x08007b64

08007444 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	221a      	movs	r2, #26
 8007454:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007456:	f000 f843 	bl	80074e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800745a:	4b02      	ldr	r3, [pc, #8]	; (8007464 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000148 	.word	0x20000148

08007468 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	4907      	ldr	r1, [pc, #28]	; (800749c <USBD_FS_ConfigStrDescriptor+0x34>)
 800747e:	4808      	ldr	r0, [pc, #32]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007480:	f7ff fe5a 	bl	8007138 <USBD_GetString>
 8007484:	e004      	b.n	8007490 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	4904      	ldr	r1, [pc, #16]	; (800749c <USBD_FS_ConfigStrDescriptor+0x34>)
 800748a:	4805      	ldr	r0, [pc, #20]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800748c:	f7ff fe54 	bl	8007138 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007490:	4b02      	ldr	r3, [pc, #8]	; (800749c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	2000047c 	.word	0x2000047c
 80074a0:	08007b74 	.word	0x08007b74

080074a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4907      	ldr	r1, [pc, #28]	; (80074d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074ba:	4808      	ldr	r0, [pc, #32]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074bc:	f7ff fe3c 	bl	8007138 <USBD_GetString>
 80074c0:	e004      	b.n	80074cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4904      	ldr	r1, [pc, #16]	; (80074d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074c6:	4805      	ldr	r0, [pc, #20]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074c8:	f7ff fe36 	bl	8007138 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	2000047c 	.word	0x2000047c
 80074dc:	08007b80 	.word	0x08007b80

080074e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <Get_SerialNum+0x44>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074ec:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <Get_SerialNum+0x48>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074f2:	4b0e      	ldr	r3, [pc, #56]	; (800752c <Get_SerialNum+0x4c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d009      	beq.n	800751a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007506:	2208      	movs	r2, #8
 8007508:	4909      	ldr	r1, [pc, #36]	; (8007530 <Get_SerialNum+0x50>)
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f814 	bl	8007538 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007510:	2204      	movs	r2, #4
 8007512:	4908      	ldr	r1, [pc, #32]	; (8007534 <Get_SerialNum+0x54>)
 8007514:	68b8      	ldr	r0, [r7, #8]
 8007516:	f000 f80f 	bl	8007538 <IntToUnicode>
  }
}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	1ffff7e8 	.word	0x1ffff7e8
 8007528:	1ffff7ec 	.word	0x1ffff7ec
 800752c:	1ffff7f0 	.word	0x1ffff7f0
 8007530:	2000014a 	.word	0x2000014a
 8007534:	2000015a 	.word	0x2000015a

08007538 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
 800754e:	e027      	b.n	80075a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	0f1b      	lsrs	r3, r3, #28
 8007554:	2b09      	cmp	r3, #9
 8007556:	d80b      	bhi.n	8007570 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	0f1b      	lsrs	r3, r3, #28
 800755c:	b2da      	uxtb	r2, r3
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4619      	mov	r1, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	440b      	add	r3, r1
 8007568:	3230      	adds	r2, #48	; 0x30
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e00a      	b.n	8007586 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	0f1b      	lsrs	r3, r3, #28
 8007574:	b2da      	uxtb	r2, r3
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4619      	mov	r1, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	440b      	add	r3, r1
 8007580:	3237      	adds	r2, #55	; 0x37
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	3301      	adds	r3, #1
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	4413      	add	r3, r2
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	3301      	adds	r3, #1
 800759e:	75fb      	strb	r3, [r7, #23]
 80075a0:	7dfa      	ldrb	r2, [r7, #23]
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d3d3      	bcc.n	8007550 <IntToUnicode+0x18>
  }
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr

080075b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a0d      	ldr	r2, [pc, #52]	; (80075f8 <HAL_PCD_MspInit+0x44>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d113      	bne.n	80075ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <HAL_PCD_MspInit+0x48>)
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	4a0c      	ldr	r2, [pc, #48]	; (80075fc <HAL_PCD_MspInit+0x48>)
 80075cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075d0:	61d3      	str	r3, [r2, #28]
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <HAL_PCD_MspInit+0x48>)
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80075de:	2200      	movs	r2, #0
 80075e0:	2100      	movs	r1, #0
 80075e2:	2014      	movs	r0, #20
 80075e4:	f7f9 fad9 	bl	8000b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80075e8:	2014      	movs	r0, #20
 80075ea:	f7f9 faf2 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	40005c00 	.word	0x40005c00
 80075fc:	40021000 	.word	0x40021000

08007600 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007614:	4619      	mov	r1, r3
 8007616:	4610      	mov	r0, r2
 8007618:	f7fe fe5e 	bl	80062d8 <USBD_LL_SetupStage>
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	440b      	add	r3, r1
 8007644:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	4619      	mov	r1, r3
 800764e:	f7fe fe90 	bl	8006372 <USBD_LL_DataOutStage>
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	440b      	add	r3, r1
 800767a:	333c      	adds	r3, #60	; 0x3c
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	4619      	mov	r1, r3
 8007682:	f7fe fee7 	bl	8006454 <USBD_LL_DataInStage>
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe fff7 	bl	8006690 <USBD_LL_SOF>
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d001      	beq.n	80076c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80076be:	f7f8 fe3b 	bl	8000338 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076c8:	7bfa      	ldrb	r2, [r7, #15]
 80076ca:	4611      	mov	r1, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fe ffa7 	bl	8006620 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe ff60 	bl	800659e <USBD_LL_Reset>
}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe ffa1 	bl	800663e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <HAL_PCD_SuspendCallback+0x30>)
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	4a03      	ldr	r2, [pc, #12]	; (8007718 <HAL_PCD_SuspendCallback+0x30>)
 800770a:	f043 0306 	orr.w	r3, r3, #6
 800770e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	e000ed00 	.word	0xe000ed00

0800771c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe ff9b 	bl	8006666 <USBD_LL_Resume>
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007740:	4a23      	ldr	r2, [pc, #140]	; (80077d0 <USBD_LL_Init+0x98>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a21      	ldr	r2, [pc, #132]	; (80077d0 <USBD_LL_Init+0x98>)
 800774c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007750:	4b1f      	ldr	r3, [pc, #124]	; (80077d0 <USBD_LL_Init+0x98>)
 8007752:	4a20      	ldr	r2, [pc, #128]	; (80077d4 <USBD_LL_Init+0x9c>)
 8007754:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007756:	4b1e      	ldr	r3, [pc, #120]	; (80077d0 <USBD_LL_Init+0x98>)
 8007758:	2208      	movs	r2, #8
 800775a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800775c:	4b1c      	ldr	r3, [pc, #112]	; (80077d0 <USBD_LL_Init+0x98>)
 800775e:	2202      	movs	r2, #2
 8007760:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007762:	4b1b      	ldr	r3, [pc, #108]	; (80077d0 <USBD_LL_Init+0x98>)
 8007764:	2200      	movs	r2, #0
 8007766:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007768:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <USBD_LL_Init+0x98>)
 800776a:	2200      	movs	r2, #0
 800776c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800776e:	4b18      	ldr	r3, [pc, #96]	; (80077d0 <USBD_LL_Init+0x98>)
 8007770:	2200      	movs	r2, #0
 8007772:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007774:	4816      	ldr	r0, [pc, #88]	; (80077d0 <USBD_LL_Init+0x98>)
 8007776:	f7f9 fbfc 	bl	8000f72 <HAL_PCD_Init>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007780:	f7f8 fdda 	bl	8000338 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800778a:	2318      	movs	r3, #24
 800778c:	2200      	movs	r2, #0
 800778e:	2100      	movs	r1, #0
 8007790:	f7fb f859 	bl	8002846 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800779a:	2358      	movs	r3, #88	; 0x58
 800779c:	2200      	movs	r2, #0
 800779e:	2180      	movs	r1, #128	; 0x80
 80077a0:	f7fb f851 	bl	8002846 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077aa:	2398      	movs	r3, #152	; 0x98
 80077ac:	2200      	movs	r2, #0
 80077ae:	2181      	movs	r1, #129	; 0x81
 80077b0:	f7fb f849 	bl	8002846 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077ba:	23d8      	movs	r3, #216	; 0xd8
 80077bc:	2200      	movs	r2, #0
 80077be:	2101      	movs	r1, #1
 80077c0:	f7fb f841 	bl	8002846 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	2000067c 	.word	0x2000067c
 80077d4:	40005c00 	.word	0x40005c00

080077d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7f9 fcca 	bl	8001188 <HAL_PCD_Start>
 80077f4:	4603      	mov	r3, r0
 80077f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 f93c 	bl	8007a78 <USBD_Get_USB_Status>
 8007800:	4603      	mov	r3, r0
 8007802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007804:	7bbb      	ldrb	r3, [r7, #14]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	4608      	mov	r0, r1
 8007818:	4611      	mov	r1, r2
 800781a:	461a      	mov	r2, r3
 800781c:	4603      	mov	r3, r0
 800781e:	70fb      	strb	r3, [r7, #3]
 8007820:	460b      	mov	r3, r1
 8007822:	70bb      	strb	r3, [r7, #2]
 8007824:	4613      	mov	r3, r2
 8007826:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007836:	78bb      	ldrb	r3, [r7, #2]
 8007838:	883a      	ldrh	r2, [r7, #0]
 800783a:	78f9      	ldrb	r1, [r7, #3]
 800783c:	f7f9 fe42 	bl	80014c4 <HAL_PCD_EP_Open>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f916 	bl	8007a78 <USBD_Get_USB_Status>
 800784c:	4603      	mov	r3, r0
 800784e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007850:	7bbb      	ldrb	r3, [r7, #14]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007874:	78fa      	ldrb	r2, [r7, #3]
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f7f9 fe89 	bl	8001590 <HAL_PCD_EP_Close>
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f8f7 	bl	8007a78 <USBD_Get_USB_Status>
 800788a:	4603      	mov	r3, r0
 800788c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800788e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b2:	78fa      	ldrb	r2, [r7, #3]
 80078b4:	4611      	mov	r1, r2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7f9 ff32 	bl	8001720 <HAL_PCD_EP_SetStall>
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f8d8 	bl	8007a78 <USBD_Get_USB_Status>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7f9 ff73 	bl	80017e0 <HAL_PCD_EP_ClrStall>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 f8b9 	bl	8007a78 <USBD_Get_USB_Status>
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800790a:	7bbb      	ldrb	r3, [r7, #14]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007926:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800792c:	2b00      	cmp	r3, #0
 800792e:	da0c      	bge.n	800794a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007936:	68f9      	ldr	r1, [r7, #12]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	440b      	add	r3, r1
 8007944:	3302      	adds	r3, #2
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	e00b      	b.n	8007962 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007950:	68f9      	ldr	r1, [r7, #12]
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	440b      	add	r3, r1
 800795c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007960:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr

0800796c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007986:	78fa      	ldrb	r2, [r7, #3]
 8007988:	4611      	mov	r1, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f7f9 fd75 	bl	800147a <HAL_PCD_SetAddress>
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 f86e 	bl	8007a78 <USBD_Get_USB_Status>
 800799c:	4603      	mov	r3, r0
 800799e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b086      	sub	sp, #24
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	461a      	mov	r2, r3
 80079b6:	460b      	mov	r3, r1
 80079b8:	72fb      	strb	r3, [r7, #11]
 80079ba:	4613      	mov	r3, r2
 80079bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079cc:	893b      	ldrh	r3, [r7, #8]
 80079ce:	7af9      	ldrb	r1, [r7, #11]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	f7f9 fe62 	bl	800169a <HAL_PCD_EP_Transmit>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f84b 	bl	8007a78 <USBD_Get_USB_Status>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	607a      	str	r2, [r7, #4]
 80079fa:	461a      	mov	r2, r3
 80079fc:	460b      	mov	r3, r1
 80079fe:	72fb      	strb	r3, [r7, #11]
 8007a00:	4613      	mov	r3, r2
 8007a02:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a12:	893b      	ldrh	r3, [r7, #8]
 8007a14:	7af9      	ldrb	r1, [r7, #11]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	f7f9 fe02 	bl	8001620 <HAL_PCD_EP_Receive>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f828 	bl	8007a78 <USBD_Get_USB_Status>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007a40:	4b02      	ldr	r3, [pc, #8]	; (8007a4c <USBD_static_malloc+0x14>)
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr
 8007a4c:	20000968 	.word	0x20000968

08007a50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]

}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr

08007a78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d817      	bhi.n	8007abc <USBD_Get_USB_Status+0x44>
 8007a8c:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <USBD_Get_USB_Status+0x1c>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007aab 	.word	0x08007aab
 8007a9c:	08007ab1 	.word	0x08007ab1
 8007aa0:	08007ab7 	.word	0x08007ab7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa8:	e00b      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	73fb      	strb	r3, [r7, #15]
    break;
 8007aae:	e008      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab4:	e005      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aba:	e002      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007abc:	2302      	movs	r3, #2
 8007abe:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac0:	bf00      	nop
  }
  return usb_status;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	2600      	movs	r6, #0
 8007ad4:	4d0c      	ldr	r5, [pc, #48]	; (8007b08 <__libc_init_array+0x38>)
 8007ad6:	4c0d      	ldr	r4, [pc, #52]	; (8007b0c <__libc_init_array+0x3c>)
 8007ad8:	1b64      	subs	r4, r4, r5
 8007ada:	10a4      	asrs	r4, r4, #2
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	f000 f822 	bl	8007b28 <_init>
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	4d0a      	ldr	r5, [pc, #40]	; (8007b10 <__libc_init_array+0x40>)
 8007ae8:	4c0a      	ldr	r4, [pc, #40]	; (8007b14 <__libc_init_array+0x44>)
 8007aea:	1b64      	subs	r4, r4, r5
 8007aec:	10a4      	asrs	r4, r4, #2
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af8:	4798      	blx	r3
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b02:	4798      	blx	r3
 8007b04:	3601      	adds	r6, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	08007ba4 	.word	0x08007ba4
 8007b0c:	08007ba4 	.word	0x08007ba4
 8007b10:	08007ba4 	.word	0x08007ba4
 8007b14:	08007ba8 	.word	0x08007ba8

08007b18 <memset>:
 8007b18:	4603      	mov	r3, r0
 8007b1a:	4402      	add	r2, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d100      	bne.n	8007b22 <memset+0xa>
 8007b20:	4770      	bx	lr
 8007b22:	f803 1b01 	strb.w	r1, [r3], #1
 8007b26:	e7f9      	b.n	8007b1c <memset+0x4>

08007b28 <_init>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	bf00      	nop
 8007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2e:	bc08      	pop	{r3}
 8007b30:	469e      	mov	lr, r3
 8007b32:	4770      	bx	lr

08007b34 <_fini>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr

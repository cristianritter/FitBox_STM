
FitBoxPRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800b6f8  0800b6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b8  0800b9b8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b9b8  0800b9b8  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b9b8  0800b9b8  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b8  0800b9b8  0001b9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b9c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c38  20000210  0800bbcc  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  0800bbcc  00020e48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ac0  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037cc  00000000  00000000  00031cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000364d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b699  00000000  00000000  00037350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141be  00000000  00000000  000529e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd40  00000000  00000000  00066ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f48e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf4  00000000  00000000  000f4938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b6e0 	.word	0x0800b6e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800b6e0 	.word	0x0800b6e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fmul>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d06f      	beq.n	8000dc0 <__aeabi_fmul+0xf8>
 8000ce0:	441a      	add	r2, r3
 8000ce2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce6:	0240      	lsls	r0, r0, #9
 8000ce8:	bf18      	it	ne
 8000cea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cee:	d01e      	beq.n	8000d2e <__aeabi_fmul+0x66>
 8000cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d08:	bf3e      	ittt	cc
 8000d0a:	0049      	lslcc	r1, r1, #1
 8000d0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	ea40 0001 	orr.w	r0, r0, r1
 8000d16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d1a:	2afd      	cmp	r2, #253	; 0xfd
 8000d1c:	d81d      	bhi.n	8000d5a <__aeabi_fmul+0x92>
 8000d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	4770      	bx	lr
 8000d2e:	f090 0f00 	teq	r0, #0
 8000d32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d36:	bf08      	it	eq
 8000d38:	0249      	lsleq	r1, r1, #9
 8000d3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d42:	3a7f      	subs	r2, #127	; 0x7f
 8000d44:	bfc2      	ittt	gt
 8000d46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4e:	4770      	bxgt	lr
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	dc5d      	bgt.n	8000e18 <__aeabi_fmul+0x150>
 8000d5c:	f112 0f19 	cmn.w	r2, #25
 8000d60:	bfdc      	itt	le
 8000d62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d66:	4770      	bxle	lr
 8000d68:	f1c2 0200 	rsb	r2, r2, #0
 8000d6c:	0041      	lsls	r1, r0, #1
 8000d6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d72:	f1c2 0220 	rsb	r2, r2, #32
 8000d76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7e:	f140 0000 	adc.w	r0, r0, #0
 8000d82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d86:	bf08      	it	eq
 8000d88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8c:	4770      	bx	lr
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xce>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xe6>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e78f      	b.n	8000ce0 <__aeabi_fmul+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	bf18      	it	ne
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d00a      	beq.n	8000de6 <__aeabi_fmul+0x11e>
 8000dd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd4:	bf18      	it	ne
 8000dd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	d1d8      	bne.n	8000d8e <__aeabi_fmul+0xc6>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	bf17      	itett	ne
 8000dec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df0:	4608      	moveq	r0, r1
 8000df2:	f091 0f00 	teqne	r1, #0
 8000df6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dfa:	d014      	beq.n	8000e26 <__aeabi_fmul+0x15e>
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d101      	bne.n	8000e06 <__aeabi_fmul+0x13e>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	d10f      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e06:	ea93 0f0c 	teq	r3, ip
 8000e0a:	d103      	bne.n	8000e14 <__aeabi_fmul+0x14c>
 8000e0c:	024b      	lsls	r3, r1, #9
 8000e0e:	bf18      	it	ne
 8000e10:	4608      	movne	r0, r1
 8000e12:	d108      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e14:	ea80 0001 	eor.w	r0, r0, r1
 8000e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bx	lr
 8000e26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2e:	4770      	bx	lr

08000e30 <__aeabi_fdiv>:
 8000e30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e38:	bf1e      	ittt	ne
 8000e3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3e:	ea92 0f0c 	teqne	r2, ip
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d069      	beq.n	8000f1c <__aeabi_fdiv+0xec>
 8000e48:	eba2 0203 	sub.w	r2, r2, r3
 8000e4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e56:	d037      	beq.n	8000ec8 <__aeabi_fdiv+0x98>
 8000e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf38      	it	cc
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e76:	428b      	cmp	r3, r1
 8000e78:	bf24      	itt	cs
 8000e7a:	1a5b      	subcs	r3, r3, r1
 8000e7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e84:	bf24      	itt	cs
 8000e86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e92:	bf24      	itt	cs
 8000e94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	bf18      	it	ne
 8000eae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eb2:	d1e0      	bne.n	8000e76 <__aeabi_fdiv+0x46>
 8000eb4:	2afd      	cmp	r2, #253	; 0xfd
 8000eb6:	f63f af50 	bhi.w	8000d5a <__aeabi_fmul+0x92>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec0:	bf08      	it	eq
 8000ec2:	f020 0001 	biceq.w	r0, r0, #1
 8000ec6:	4770      	bx	lr
 8000ec8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ecc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed0:	327f      	adds	r2, #127	; 0x7f
 8000ed2:	bfc2      	ittt	gt
 8000ed4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000edc:	4770      	bxgt	lr
 8000ede:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	e737      	b.n	8000d5a <__aeabi_fmul+0x92>
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xc2>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xda>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e795      	b.n	8000e48 <__aeabi_fdiv+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	d108      	bne.n	8000f38 <__aeabi_fdiv+0x108>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	f47f af7d 	bne.w	8000e26 <__aeabi_fmul+0x15e>
 8000f2c:	ea93 0f0c 	teq	r3, ip
 8000f30:	f47f af70 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e776      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	d104      	bne.n	8000f48 <__aeabi_fdiv+0x118>
 8000f3e:	024b      	lsls	r3, r1, #9
 8000f40:	f43f af4c 	beq.w	8000ddc <__aeabi_fmul+0x114>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e76e      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f4c:	bf18      	it	ne
 8000f4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f52:	d1ca      	bne.n	8000eea <__aeabi_fdiv+0xba>
 8000f54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f58:	f47f af5c 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f60:	f47f af3c 	bne.w	8000ddc <__aeabi_fmul+0x114>
 8000f64:	e75f      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f66:	bf00      	nop

08000f68 <__aeabi_f2uiz>:
 8000f68:	0042      	lsls	r2, r0, #1
 8000f6a:	d20e      	bcs.n	8000f8a <__aeabi_f2uiz+0x22>
 8000f6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f70:	d30b      	bcc.n	8000f8a <__aeabi_f2uiz+0x22>
 8000f72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f7a:	d409      	bmi.n	8000f90 <__aeabi_f2uiz+0x28>
 8000f7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f84:	fa23 f002 	lsr.w	r0, r3, r2
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr
 8000f90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f94:	d101      	bne.n	8000f9a <__aeabi_f2uiz+0x32>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d102      	bne.n	8000fa0 <__aeabi_f2uiz+0x38>
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9e:	4770      	bx	lr
 8000fa0:	f04f 0000 	mov.w	r0, #0
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <read_flash>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000fba:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d020      	beq.n	800100c <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 8000fca:	68f9      	ldr	r1, [r7, #12]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	0a19      	lsrs	r1, r3, #8
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2ca      	uxtb	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	0c19      	lsrs	r1, r3, #16
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3302      	adds	r3, #2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	0e19      	lsrs	r1, r3, #24
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	b2ca      	uxtb	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3304      	adds	r3, #4
 800100a:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001012:	d1cf      	bne.n	8000fb4 <read_flash+0xc>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <update_data_from_flash>:
		{0, 20, 40, 60, 80, 100}
		};

uint8_t inverter_config[3] = {0, 0, 0};

void update_data_from_flash(uint8_t (*range_x_data)[6], uint8_t (*sliders_data)[6], uint8_t (*inverter_config)){
 8001020:	b580      	push	{r7, lr}
 8001022:	b0bc      	sub	sp, #240	; 0xf0
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	char data[0xC0];
	read_flash((uint8_t *)data);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ffb9 	bl	8000fa8 <read_flash>
    char * token = strtok(data,",");				//first strtok go to variable directly
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	497f      	ldr	r1, [pc, #508]	; (8001238 <update_data_from_flash+0x218>)
 800103c:	4618      	mov	r0, r3
 800103e:	f009 fa6d 	bl	800a51c <strtok>
 8001042:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    range_x_data[0][0] = atoi(token);
 8001046:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800104a:	f009 fa1b 	bl	800a484 <atoi>
 800104e:	4603      	mov	r3, r0
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	701a      	strb	r2, [r3, #0]

    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800105c:	e016      	b.n	800108c <update_data_from_flash+0x6c>
    	token = strtok(NULL,",");
 800105e:	4976      	ldr	r1, [pc, #472]	; (8001238 <update_data_from_flash+0x218>)
 8001060:	2000      	movs	r0, #0
 8001062:	f009 fa5b 	bl	800a51c <strtok>
 8001066:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    	range_x_data[0][i] = atoi(token);
 800106a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800106e:	f009 fa09 	bl	800a484 <atoi>
 8001072:	4603      	mov	r3, r0
 8001074:	b2d9      	uxtb	r1, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800107c:	4413      	add	r3, r2
 800107e:	460a      	mov	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
 8001082:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001086:	3301      	adds	r3, #1
 8001088:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800108c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001090:	2b05      	cmp	r3, #5
 8001092:	dde4      	ble.n	800105e <update_data_from_flash+0x3e>
    }

	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800109a:	e016      	b.n	80010ca <update_data_from_flash+0xaa>
		token = strtok(NULL,",");
 800109c:	4966      	ldr	r1, [pc, #408]	; (8001238 <update_data_from_flash+0x218>)
 800109e:	2000      	movs	r0, #0
 80010a0:	f009 fa3c 	bl	800a51c <strtok>
 80010a4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[0][i] = atoi(token);
 80010a8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80010ac:	f009 f9ea 	bl	800a484 <atoi>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b2d9      	uxtb	r1, r3
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010ba:	4413      	add	r3, r2
 80010bc:	460a      	mov	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
 80010c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010c4:	3301      	adds	r3, #1
 80010c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80010ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	dde4      	ble.n	800109c <update_data_from_flash+0x7c>
	}

	token = strtok(NULL,",");						// inverted for first pedal
 80010d2:	4959      	ldr	r1, [pc, #356]	; (8001238 <update_data_from_flash+0x218>)
 80010d4:	2000      	movs	r0, #0
 80010d6:	f009 fa21 	bl	800a51c <strtok>
 80010da:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[0] = atoi(token);
 80010de:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80010e2:	f009 f9cf 	bl	800a484 <atoi>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	701a      	strb	r2, [r3, #0]


	for (int i=0; i<6; i++){						// until all arrays be full filled
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80010f4:	e017      	b.n	8001126 <update_data_from_flash+0x106>
		token = strtok(NULL,",");
 80010f6:	4950      	ldr	r1, [pc, #320]	; (8001238 <update_data_from_flash+0x218>)
 80010f8:	2000      	movs	r0, #0
 80010fa:	f009 fa0f 	bl	800a51c <strtok>
 80010fe:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[1][i] = atoi(token);
 8001102:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001106:	f009 f9bd 	bl	800a484 <atoi>
 800110a:	4601      	mov	r1, r0
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	1d9a      	adds	r2, r3, #6
 8001110:	b2c9      	uxtb	r1, r1
 8001112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001116:	4413      	add	r3, r2
 8001118:	460a      	mov	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800111c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001120:	3301      	adds	r3, #1
 8001122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800112a:	2b05      	cmp	r3, #5
 800112c:	dde3      	ble.n	80010f6 <update_data_from_flash+0xd6>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001134:	e017      	b.n	8001166 <update_data_from_flash+0x146>
		token = strtok(NULL,",");
 8001136:	4940      	ldr	r1, [pc, #256]	; (8001238 <update_data_from_flash+0x218>)
 8001138:	2000      	movs	r0, #0
 800113a:	f009 f9ef 	bl	800a51c <strtok>
 800113e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[1][i] = atoi(token);
 8001142:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001146:	f009 f99d 	bl	800a484 <atoi>
 800114a:	4601      	mov	r1, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1d9a      	adds	r2, r3, #6
 8001150:	b2c9      	uxtb	r1, r1
 8001152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001156:	4413      	add	r3, r2
 8001158:	460a      	mov	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 800115c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800116a:	2b05      	cmp	r3, #5
 800116c:	dde3      	ble.n	8001136 <update_data_from_flash+0x116>
	}

	token = strtok(NULL,",");						// inverted for second pedal
 800116e:	4932      	ldr	r1, [pc, #200]	; (8001238 <update_data_from_flash+0x218>)
 8001170:	2000      	movs	r0, #0
 8001172:	f009 f9d3 	bl	800a51c <strtok>
 8001176:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[1] = atoi(token);
 800117a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800117e:	f009 f981 	bl	800a484 <atoi>
 8001182:	4602      	mov	r2, r0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3301      	adds	r3, #1
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<6; i++){						// until all arrays be full filled
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001192:	e018      	b.n	80011c6 <update_data_from_flash+0x1a6>
		token = strtok(NULL,",");
 8001194:	4928      	ldr	r1, [pc, #160]	; (8001238 <update_data_from_flash+0x218>)
 8001196:	2000      	movs	r0, #0
 8001198:	f009 f9c0 	bl	800a51c <strtok>
 800119c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		range_x_data[2][i] = atoi(token);
 80011a0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80011a4:	f009 f96e 	bl	800a484 <atoi>
 80011a8:	4601      	mov	r1, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f103 020c 	add.w	r2, r3, #12
 80011b0:	b2c9      	uxtb	r1, r1
 80011b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011b6:	4413      	add	r3, r2
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80011c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	dde2      	ble.n	8001194 <update_data_from_flash+0x174>
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80011d4:	e018      	b.n	8001208 <update_data_from_flash+0x1e8>
		token = strtok(NULL,",");
 80011d6:	4918      	ldr	r1, [pc, #96]	; (8001238 <update_data_from_flash+0x218>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f009 f99f 	bl	800a51c <strtok>
 80011de:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		sliders_data[2][i] = atoi(token);
 80011e2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80011e6:	f009 f94d 	bl	800a484 <atoi>
 80011ea:	4601      	mov	r1, r0
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f103 020c 	add.w	r2, r3, #12
 80011f2:	b2c9      	uxtb	r1, r1
 80011f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011f8:	4413      	add	r3, r2
 80011fa:	460a      	mov	r2, r1
 80011fc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++){						// until all arrays be full filled
 80011fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001202:	3301      	adds	r3, #1
 8001204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800120c:	2b05      	cmp	r3, #5
 800120e:	dde2      	ble.n	80011d6 <update_data_from_flash+0x1b6>
	}

	token = strtok(NULL,",");						// inverted for third pedal
 8001210:	4909      	ldr	r1, [pc, #36]	; (8001238 <update_data_from_flash+0x218>)
 8001212:	2000      	movs	r0, #0
 8001214:	f009 f982 	bl	800a51c <strtok>
 8001218:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	inverter_config[2] = atoi(token);
 800121c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001220:	f009 f930 	bl	800a484 <atoi>
 8001224:	4602      	mov	r2, r0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3302      	adds	r3, #2
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]
//		  HAL_UART_Transmit(&huart1, (uint8_t *)buffer2, sprintf(buffer2, "%u ", value), 100);
//		  //HAL_UART_Transmit(&huart1,(uint8_t *)token,strlen(token),10);// Sending in normal mode
//		  uint8_t Test[] = "\r\n"; //Data to send
//	  	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
//	  }
}
 800122e:	bf00      	nop
 8001230:	37f0      	adds	r7, #240	; 0xf0
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	0800b6f8 	.word	0x0800b6f8

0800123c <interpolacao_linear>:

float interpolacao_linear(float x, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	70fb      	strb	r3, [r7, #3]
 800124e:	460b      	mov	r3, r1
 8001250:	70bb      	strb	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	707b      	strb	r3, [r7, #1]
	//"""Realiza a interpolação de x sobre uma reta dada por [(x0,y0),(x1,y1)] e retorna o valor em y"""
	float y;
	y = (float)y0 + ((float)y1 - (float)y0) * (x-(float)x0)/((float)x1-(float)x0);
 8001256:	78bb      	ldrb	r3, [r7, #2]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fcdd 	bl	8000c18 <__aeabi_ui2f>
 800125e:	4604      	mov	r4, r0
 8001260:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fcd7 	bl	8000c18 <__aeabi_ui2f>
 800126a:	4605      	mov	r5, r0
 800126c:	78bb      	ldrb	r3, [r7, #2]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_ui2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	4628      	mov	r0, r5
 800127a:	f7ff fc1b 	bl	8000ab4 <__aeabi_fsub>
 800127e:	4603      	mov	r3, r0
 8001280:	461d      	mov	r5, r3
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fcc7 	bl	8000c18 <__aeabi_ui2f>
 800128a:	4603      	mov	r3, r0
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fc10 	bl	8000ab4 <__aeabi_fsub>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	4628      	mov	r0, r5
 800129a:	f7ff fd15 	bl	8000cc8 <__aeabi_fmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	461e      	mov	r6, r3
 80012a2:	787b      	ldrb	r3, [r7, #1]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fcb7 	bl	8000c18 <__aeabi_ui2f>
 80012aa:	4605      	mov	r5, r0
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcb2 	bl	8000c18 <__aeabi_ui2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4628      	mov	r0, r5
 80012ba:	f7ff fbfb 	bl	8000ab4 <__aeabi_fsub>
 80012be:	4603      	mov	r3, r0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4630      	mov	r0, r6
 80012c4:	f7ff fdb4 	bl	8000e30 <__aeabi_fdiv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4620      	mov	r0, r4
 80012ce:	f7ff fbf3 	bl	8000ab8 <__addsf3>
 80012d2:	4603      	mov	r3, r0
 80012d4:	60fb      	str	r3, [r7, #12]
	return y;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012e0 <ret_x0_y0_x1_y1>:

uint8_t * ret_x0_y0_x1_y1(double x, uint8_t * x_array, uint8_t * y_array){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
    //a funcao retorna o conjunto de pontos [(xa,ya),(xb,yb)] que formam uma reta
    //na qual o ponto x possa ser interpolado.\n
    //Os pontos precisam estar alistados em ordem crescente, e as listas de x e y precisam ter o mesmo tamanho."""
	static uint8_t x0y0x1y1array[4] = {0, 0, 0, 0};

	for (int i=0; i<6; i++){
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e02d      	b.n	8001350 <ret_x0_y0_x1_y1+0x70>
		if (x < (double)x_array[i]){
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f871 	bl	80003e4 <__aeabi_ui2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800130a:	f7ff fb57 	bl	80009bc <__aeabi_dcmplt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01a      	beq.n	800134a <ret_x0_y0_x1_y1+0x6a>
			x0y0x1y1array[0] = x_array[i-1];
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3b01      	subs	r3, #1
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
 8001320:	701a      	strb	r2, [r3, #0]
			x0y0x1y1array[1] = y_array[i-1];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3b01      	subs	r3, #1
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
 800132e:	705a      	strb	r2, [r3, #1]
			x0y0x1y1array[2] = x_array[i];
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
 800133a:	709a      	strb	r2, [r3, #2]
			x0y0x1y1array[3] = y_array[i];
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
 8001346:	70da      	strb	r2, [r3, #3]
			break;
 8001348:	e005      	b.n	8001356 <ret_x0_y0_x1_y1+0x76>
	for (int i=0; i<6; i++){
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b05      	cmp	r3, #5
 8001354:	ddce      	ble.n	80012f4 <ret_x0_y0_x1_y1+0x14>
		}
	}
	return x0y0x1y1array;
 8001356:	4b02      	ldr	r3, [pc, #8]	; (8001360 <ret_x0_y0_x1_y1+0x80>)
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200002f8 	.word	0x200002f8
 8001364:	00000000 	.word	0x00000000

08001368 <set_output>:

uint16_t* set_output(uint16_t * valor_entrada, uint8_t (*sliders_data)[6], uint8_t (*range_x_data)[6], uint8_t * inverter_config){
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
	//"""Método que calcula e atualiza o valor de saída de acordo com o valor da entrada"""

	static uint16_t valor_saida[3] = {10, 20, 30};
	double entrada_invertida[3] = {0, 0, 0};
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	e9c7 2308 	strd	r2, r3, [r7, #32]

	for (int i=0; i<3; i++){
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139e:	e0c7      	b.n	8001530 <set_output+0x1c8>
		entrada_invertida[i] = ((double)valor_entrada[i])*100/4095;		//converte o valor de entrada de 12bits para um range de 0,0 a 100,0
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f81a 	bl	80003e4 <__aeabi_ui2d>
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b66      	ldr	r3, [pc, #408]	; (8001550 <set_output+0x1e8>)
 80013b6:	f7ff f88f 	bl	80004d8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	a361      	add	r3, pc, #388	; (adr r3, 8001548 <set_output+0x1e0>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f9b0 	bl	800072c <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013d2:	00c9      	lsls	r1, r1, #3
 80013d4:	3130      	adds	r1, #48	; 0x30
 80013d6:	4439      	add	r1, r7
 80013d8:	3920      	subs	r1, #32
 80013da:	e9c1 2300 	strd	r2, r3, [r1]

		if (inverter_config[i] == 1){
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d114      	bne.n	8001414 <set_output+0xac>
			entrada_invertida[i] = 100 - entrada_invertida[i];		// inverte a entrada caso o bit de inversao esteja ligado
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	3330      	adds	r3, #48	; 0x30
 80013f0:	443b      	add	r3, r7
 80013f2:	3b20      	subs	r3, #32
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f04f 0000 	mov.w	r0, #0
 80013fc:	4954      	ldr	r1, [pc, #336]	; (8001550 <set_output+0x1e8>)
 80013fe:	f7fe feb3 	bl	8000168 <__aeabi_dsub>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001408:	00c9      	lsls	r1, r1, #3
 800140a:	3130      	adds	r1, #48	; 0x30
 800140c:	4439      	add	r1, r7
 800140e:	3920      	subs	r1, #32
 8001410:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (entrada_invertida[i] <= range_x_data[i][0]){			// caso entrada esteja abaixa da calibracao minima
 8001414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	461a      	mov	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe ffec 	bl	8000404 <__aeabi_i2d>
			//valor_saida[i] = sliders_data[i][0];
			//continue;
		}
		if (entrada_invertida[i] >= range_x_data[i][5]){			// caso a entrada esteja acima da calibracao maxima
 800142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	3330      	adds	r3, #48	; 0x30
 8001432:	443b      	add	r3, r7
 8001434:	3b20      	subs	r3, #32
 8001436:	e9d3 4500 	ldrd	r4, r5, [r3]
 800143a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	795b      	ldrb	r3, [r3, #5]
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe ffd9 	bl	8000404 <__aeabi_i2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7ff fac3 	bl	80009e4 <__aeabi_dcmpge>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <set_output+0x11a>
			valor_saida[i] = sliders_data[i][5];
 8001464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	461a      	mov	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4413      	add	r3, r2
 8001474:	795b      	ldrb	r3, [r3, #5]
 8001476:	b299      	uxth	r1, r3
 8001478:	4a36      	ldr	r2, [pc, #216]	; (8001554 <set_output+0x1ec>)
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			continue;
 8001480:	e053      	b.n	800152a <set_output+0x1c2>
		}
		uint8_t * x0y0x1y1_list = ret_x0_y0_x1_y1(entrada_invertida[i], range_x_data[i], sliders_data[i]);
 8001482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	3330      	adds	r3, #48	; 0x30
 8001488:	443b      	add	r3, r7
 800148a:	3b20      	subs	r3, #32
 800148c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	189c      	adds	r4, r3, r2
 80014a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	461a      	mov	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4413      	add	r3, r2
 80014b0:	4622      	mov	r2, r4
 80014b2:	f7ff ff15 	bl	80012e0 <ret_x0_y0_x1_y1>
 80014b6:	62b8      	str	r0, [r7, #40]	; 0x28

		valor_saida[i] = interpolacao_linear(entrada_invertida[i], x0y0x1y1_list[0], x0y0x1y1_list[1], x0y0x1y1_list[2], x0y0x1y1_list[3]);
 80014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	3330      	adds	r3, #48	; 0x30
 80014be:	443b      	add	r3, r7
 80014c0:	3b20      	subs	r3, #32
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fa9f 	bl	8000a0c <__aeabi_d2f>
 80014ce:	4604      	mov	r4, r0
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	7819      	ldrb	r1, [r3, #0]
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	3301      	adds	r3, #1
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	3302      	adds	r3, #2
 80014de:	7818      	ldrb	r0, [r3, #0]
 80014e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e2:	3303      	adds	r3, #3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4603      	mov	r3, r0
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fea6 	bl	800123c <interpolacao_linear>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fd38 	bl	8000f68 <__aeabi_f2uiz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b299      	uxth	r1, r3
 80014fc:	4a15      	ldr	r2, [pc, #84]	; (8001554 <set_output+0x1ec>)
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//valor_saida[i] = 100;
		valor_saida[i] = valor_saida[i]*4095/100;
 8001504:	4a13      	ldr	r2, [pc, #76]	; (8001554 <set_output+0x1ec>)
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800150c:	461a      	mov	r2, r3
 800150e:	4613      	mov	r3, r2
 8001510:	031b      	lsls	r3, r3, #12
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	4a10      	ldr	r2, [pc, #64]	; (8001558 <set_output+0x1f0>)
 8001516:	fb82 1203 	smull	r1, r2, r2, r3
 800151a:	1152      	asrs	r2, r2, #5
 800151c:	17db      	asrs	r3, r3, #31
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b299      	uxth	r1, r3
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <set_output+0x1ec>)
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<3; i++){
 800152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152c:	3301      	adds	r3, #1
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	2b02      	cmp	r3, #2
 8001534:	f77f af34 	ble.w	80013a0 <set_output+0x38>
	}
	return valor_saida;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <set_output+0x1ec>)
}
 800153a:	4618      	mov	r0, r3
 800153c:	3730      	adds	r7, #48	; 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bdb0      	pop	{r4, r5, r7, pc}
 8001542:	bf00      	nop
 8001544:	f3af 8000 	nop.w
 8001548:	00000000 	.word	0x00000000
 800154c:	40affe00 	.word	0x40affe00
 8001550:	40590000 	.word	0x40590000
 8001554:	20000028 	.word	0x20000028
 8001558:	51eb851f 	.word	0x51eb851f

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001562:	f000 fbc7 	bl	8001cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001566:	f000 f871 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156a:	f000 f971 	bl	8001850 <MX_GPIO_Init>
  MX_DMA_Init();
 800156e:	f000 f951 	bl	8001814 <MX_DMA_Init>
  MX_ADC1_Init();
 8001572:	f000 f8c9 	bl	8001708 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001576:	f008 faa5 	bl	8009ac4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800157a:	f000 f921 	bl	80017c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
 800157e:	2203      	movs	r2, #3
 8001580:	4929      	ldr	r1, [pc, #164]	; (8001628 <main+0xcc>)
 8001582:	482a      	ldr	r0, [pc, #168]	; (800162c <main+0xd0>)
 8001584:	f000 fd14 	bl	8001fb0 <HAL_ADC_Start_DMA>
update_data_from_flash(range_x_data, sliders_data, inverter_config);
 8001588:	4a29      	ldr	r2, [pc, #164]	; (8001630 <main+0xd4>)
 800158a:	492a      	ldr	r1, [pc, #168]	; (8001634 <main+0xd8>)
 800158c:	482a      	ldr	r0, [pc, #168]	; (8001638 <main+0xdc>)
 800158e:	f7ff fd47 	bl	8001020 <update_data_from_flash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t * OutputValue = set_output(ADCValue, sliders_data, range_x_data, inverter_config);
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <main+0xd4>)
 8001594:	4a28      	ldr	r2, [pc, #160]	; (8001638 <main+0xdc>)
 8001596:	4927      	ldr	r1, [pc, #156]	; (8001634 <main+0xd8>)
 8001598:	4823      	ldr	r0, [pc, #140]	; (8001628 <main+0xcc>)
 800159a:	f7ff fee5 	bl	8001368 <set_output>
 800159e:	60f8      	str	r0, [r7, #12]
	  joystickhid.rx_8lsb = (OutputValue[0]);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <main+0xe0>)
 80015a8:	701a      	strb	r2, [r3, #0]
	  joystickhid.ry_4lsb_rx_4msb = ((OutputValue[1] & 0xf) << 4 | OutputValue[0] >> 8);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3302      	adds	r3, #2
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	b25a      	sxtb	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <main+0xe0>)
 80015c6:	705a      	strb	r2, [r3, #1]
	  joystickhid.ry_8msb = OutputValue[1] >> 4;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3302      	adds	r3, #2
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <main+0xe0>)
 80015d6:	709a      	strb	r2, [r3, #2]
	  joystickhid.rz_8lsb = OutputValue[2];
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3304      	adds	r3, #4
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <main+0xe0>)
 80015e2:	70da      	strb	r2, [r3, #3]
	  joystickhid.rz_4msb = OutputValue[2] >> 8;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3304      	adds	r3, #4
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <main+0xe0>)
 80015f2:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(1);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 fbdf 	bl	8001db8 <HAL_Delay>


//	  uint8_t Test2[] = "\r\n Valores fim !!!\r\n"; //Data to send
//	  HAL_UART_Transmit(&huart1,Test2,sizeof(Test),10);// Sending in normal mode

  	  uint8_t Test[] = "Fim\r\n"; //Data to send
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <main+0xe4>)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001602:	6018      	str	r0, [r3, #0]
 8001604:	3304      	adds	r3, #4
 8001606:	8019      	strh	r1, [r3, #0]
  	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 8001608:	1d39      	adds	r1, r7, #4
 800160a:	230a      	movs	r3, #10
 800160c:	2206      	movs	r2, #6
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <main+0xe8>)
 8001610:	f004 f84f 	bl	80056b2 <HAL_UART_Transmit>
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
 8001614:	2208      	movs	r2, #8
 8001616:	4909      	ldr	r1, [pc, #36]	; (800163c <main+0xe0>)
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <main+0xec>)
 800161a:	f007 f8f1 	bl	8008800 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(2000);
 800161e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001622:	f000 fbc9 	bl	8001db8 <HAL_Delay>
  {
 8001626:	e7b4      	b.n	8001592 <main+0x36>
 8001628:	200002ec 	.word	0x200002ec
 800162c:	2000022c 	.word	0x2000022c
 8001630:	200002f4 	.word	0x200002f4
 8001634:	20000014 	.word	0x20000014
 8001638:	20000000 	.word	0x20000000
 800163c:	200002e4 	.word	0x200002e4
 8001640:	0800b6fc 	.word	0x0800b6fc
 8001644:	200002a0 	.word	0x200002a0
 8001648:	2000032c 	.word	0x2000032c

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	; 0x50
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001656:	2228      	movs	r2, #40	; 0x28
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f008 ff4e 	bl	800a4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800167c:	2301      	movs	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168a:	2301      	movs	r3, #1
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	2302      	movs	r3, #2
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001698:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fae8 	bl	8004c78 <HAL_RCC_OscConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016ae:	f000 f91b 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b2:	230f      	movs	r3, #15
 80016b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fd54 	bl	800517c <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016da:	f000 f905 	bl	80018e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80016de:	2312      	movs	r3, #18
 80016e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80016e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80016e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fedb 	bl	80054ac <HAL_RCCEx_PeriphCLKConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016fc:	f000 f8f4 	bl	80018e8 <Error_Handler>
  }
}
 8001700:	bf00      	nop
 8001702:	3750      	adds	r7, #80	; 0x50
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <MX_ADC1_Init+0xb0>)
 800171a:	4a28      	ldr	r2, [pc, #160]	; (80017bc <MX_ADC1_Init+0xb4>)
 800171c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <MX_ADC1_Init+0xb0>)
 8001720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001724:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <MX_ADC1_Init+0xb0>)
 8001728:	2201      	movs	r2, #1
 800172a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MX_ADC1_Init+0xb0>)
 800172e:	2200      	movs	r2, #0
 8001730:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <MX_ADC1_Init+0xb0>)
 8001734:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001738:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <MX_ADC1_Init+0xb0>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MX_ADC1_Init+0xb0>)
 8001742:	2203      	movs	r2, #3
 8001744:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001746:	481c      	ldr	r0, [pc, #112]	; (80017b8 <MX_ADC1_Init+0xb0>)
 8001748:	f000 fb5a 	bl	8001e00 <HAL_ADC_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001752:	f000 f8c9 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800175a:	2301      	movs	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800175e:	2306      	movs	r3, #6
 8001760:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4814      	ldr	r0, [pc, #80]	; (80017b8 <MX_ADC1_Init+0xb0>)
 8001768:	f000 fd1c 	bl	80021a4 <HAL_ADC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001772:	f000 f8b9 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001776:	2301      	movs	r3, #1
 8001778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800177a:	2302      	movs	r3, #2
 800177c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_ADC1_Init+0xb0>)
 8001784:	f000 fd0e 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800178e:	f000 f8ab 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001792:	2302      	movs	r3, #2
 8001794:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001796:	2303      	movs	r3, #3
 8001798:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <MX_ADC1_Init+0xb0>)
 80017a0:	f000 fd00 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80017aa:	f000 f89d 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000022c 	.word	0x2000022c
 80017bc:	40012400 	.word	0x40012400

080017c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_USART1_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017f8:	f003 ff0e 	bl	8005618 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f000 f871 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002a0 	.word	0x200002a0
 8001810:	40013800 	.word	0x40013800

08001814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_DMA_Init+0x38>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <MX_DMA_Init+0x38>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_DMA_Init+0x38>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	200b      	movs	r0, #11
 8001838:	f000 ff85 	bl	8002746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800183c:	200b      	movs	r0, #11
 800183e:	f000 ff9e 	bl	800277e <HAL_NVIC_EnableIRQ>

}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_GPIO_Init+0x90>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <MX_GPIO_Init+0x90>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_GPIO_Init+0x90>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_GPIO_Init+0x90>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <MX_GPIO_Init+0x90>)
 8001882:	f043 0320 	orr.w	r3, r3, #32
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_GPIO_Init+0x90>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_GPIO_Init+0x90>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <MX_GPIO_Init+0x90>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_GPIO_Init+0x90>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b2:	480c      	ldr	r0, [pc, #48]	; (80018e4 <MX_GPIO_Init+0x94>)
 80018b4:	f001 fd1c 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	4619      	mov	r1, r3
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_GPIO_Init+0x94>)
 80018d2:	f001 fb89 	bl	8002fe8 <HAL_GPIO_Init>

}
 80018d6:	bf00      	nop
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40011000 	.word	0x40011000

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <Error_Handler+0x8>
	...

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_MspInit+0x40>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_MspInit+0x40>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6193      	str	r3, [r2, #24]
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_MspInit+0x40>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_MspInit+0x40>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_MspInit+0x40>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_MspInit+0x40>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <HAL_ADC_MspInit+0xc0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d14a      	bne.n	80019ee <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_ADC_MspInit+0xc4>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a27      	ldr	r2, [pc, #156]	; (80019fc <HAL_ADC_MspInit+0xc4>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_ADC_MspInit+0xc4>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_ADC_MspInit+0xc4>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_ADC_MspInit+0xc4>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_ADC_MspInit+0xc4>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001988:	2307      	movs	r3, #7
 800198a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	2303      	movs	r3, #3
 800198e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	481a      	ldr	r0, [pc, #104]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 8001998:	f001 fb26 	bl	8002fe8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 800199e:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <HAL_ADC_MspInit+0xd0>)
 80019a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019c6:	2220      	movs	r2, #32
 80019c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019d2:	480c      	ldr	r0, [pc, #48]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019d4:	f000 feee 	bl	80027b4 <HAL_DMA_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80019de:	f7ff ff83 	bl	80018e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019e6:	621a      	str	r2, [r3, #32]
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012400 	.word	0x40012400
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	2000025c 	.word	0x2000025c
 8001a08:	40020008 	.word	0x40020008

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_UART_MspInit+0x8c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d131      	bne.n	8001a90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_UART_MspInit+0x90>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_UART_MspInit+0x90>)
 8001a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_UART_MspInit+0x90>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_MspInit+0x90>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_UART_MspInit+0x90>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_UART_MspInit+0x90>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <HAL_UART_MspInit+0x94>)
 8001a72:	f001 fab9 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_UART_MspInit+0x94>)
 8001a8c:	f001 faac 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010800 	.word	0x40010800

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aea:	f000 f949 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <DMA1_Channel1_IRQHandler+0x10>)
 8001afa:	f000 ff15 	bl	8002928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000025c 	.word	0x2000025c

08001b08 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b0e:	f001 fd38 	bl	8003582 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000af4 	.word	0x20000af4

08001b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_kill>:

int _kill(int pid, int sig)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b34:	f008 fcaa 	bl	800a48c <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2216      	movs	r2, #22
 8001b3c:	601a      	str	r2, [r3, #0]
	return -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_exit>:

void _exit (int status)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b52:	f04f 31ff 	mov.w	r1, #4294967295
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffe7 	bl	8001b2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b5c:	e7fe      	b.n	8001b5c <_exit+0x12>

08001b5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e00a      	b.n	8001b86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b70:	f3af 8000 	nop.w
 8001b74:	4601      	mov	r1, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	60ba      	str	r2, [r7, #8]
 8001b7c:	b2ca      	uxtb	r2, r1
 8001b7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbf0      	blt.n	8001b70 <_read+0x12>
	}

return len;
 8001b8e:	687b      	ldr	r3, [r7, #4]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e009      	b.n	8001bbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	60ba      	str	r2, [r7, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbf1      	blt.n	8001baa <_write+0x12>
	}
	return len;
 8001bc6:	687b      	ldr	r3, [r7, #4]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_close>:

int _close(int file)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_isatty>:

int _isatty(int file)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <_sbrk+0x5c>)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <_sbrk+0x60>)
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <_sbrk+0x64>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <_sbrk+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d207      	bcs.n	8001c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c60:	f008 fc14 	bl	800a48c <__errno>
 8001c64:	4603      	mov	r3, r0
 8001c66:	220c      	movs	r2, #12
 8001c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20005000 	.word	0x20005000
 8001c90:	00000400 	.word	0x00000400
 8001c94:	200002fc 	.word	0x200002fc
 8001c98:	20000e48 	.word	0x20000e48

08001c9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	; (8001ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	; (8001cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cce:	f7ff ffe5 	bl	8001c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f008 fbe1 	bl	800a498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd6:	f7ff fc41 	bl	800155c <main>
  bx lr
 8001cda:	4770      	bx	lr
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001ce4:	0800b9c0 	.word	0x0800b9c0
  ldr r2, =_sbss
 8001ce8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001cec:	20000e48 	.word	0x20000e48

08001cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC1_2_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_Init+0x28>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_Init+0x28>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f000 fd13 	bl	8002730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0a:	200f      	movs	r0, #15
 8001d0c:	f000 f808 	bl	8001d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d10:	f7ff fdf0 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x54>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x58>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fd2b 	bl	800279a <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00e      	b.n	8001d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d80a      	bhi.n	8001d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d54:	2200      	movs	r2, #0
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f000 fcf3 	bl	8002746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <HAL_InitTick+0x5c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000030 	.word	0x20000030
 8001d78:	20000038 	.word	0x20000038
 8001d7c:	20000034 	.word	0x20000034

08001d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x1c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_IncTick+0x20>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <HAL_IncTick+0x20>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20000038 	.word	0x20000038
 8001da0:	20000300 	.word	0x20000300

08001da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <HAL_GetTick+0x10>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	20000300 	.word	0x20000300

08001db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_GetTick>
 8001dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd0:	d005      	beq.n	8001dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_Delay+0x44>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dde:	bf00      	nop
 8001de0:	f7ff ffe0 	bl	8001da4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d8f7      	bhi.n	8001de0 <HAL_Delay+0x28>
  {
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000038 	.word	0x20000038

08001e00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0be      	b.n	8001fa0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fd7a 	bl	8001938 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 faff 	bl	8002448 <ADC_ConversionStop_Disable>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 8099 	bne.w	8001f8e <HAL_ADC_Init+0x18e>
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8095 	bne.w	8001f8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e6c:	f023 0302 	bic.w	r3, r3, #2
 8001e70:	f043 0202 	orr.w	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7b1b      	ldrb	r3, [r3, #12]
 8001e86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e98:	d003      	beq.n	8001ea2 <HAL_ADC_Init+0xa2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <HAL_ADC_Init+0xa8>
 8001ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea6:	e000      	b.n	8001eaa <HAL_ADC_Init+0xaa>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7d1b      	ldrb	r3, [r3, #20]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d119      	bne.n	8001eec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7b1b      	ldrb	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	035a      	lsls	r2, r3, #13
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e00b      	b.n	8001eec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <HAL_ADC_Init+0x1a8>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	430b      	orrs	r3, r1
 8001f12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1c:	d003      	beq.n	8001f26 <HAL_ADC_Init+0x126>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d104      	bne.n	8001f30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	051b      	lsls	r3, r3, #20
 8001f2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_ADC_Init+0x1ac>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d10b      	bne.n	8001f6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f6a:	e018      	b.n	8001f9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f023 0312 	bic.w	r3, r3, #18
 8001f74:	f043 0210 	orr.w	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f8c:	e007      	b.n	8001f9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	f043 0210 	orr.w	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	ffe1f7fd 	.word	0xffe1f7fd
 8001fac:	ff1f0efe 	.word	0xff1f0efe

08001fb0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a64      	ldr	r2, [pc, #400]	; (8002158 <HAL_ADC_Start_DMA+0x1a8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <HAL_ADC_Start_DMA+0x24>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a63      	ldr	r2, [pc, #396]	; (800215c <HAL_ADC_Start_DMA+0x1ac>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d106      	bne.n	8001fe2 <HAL_ADC_Start_DMA+0x32>
 8001fd4:	4b60      	ldr	r3, [pc, #384]	; (8002158 <HAL_ADC_Start_DMA+0x1a8>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f040 80b3 	bne.w	8002148 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x40>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0ae      	b.n	800214e <HAL_ADC_Start_DMA+0x19e>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f9cb 	bl	8002394 <ADC_Enable>
 8001ffe:	4603      	mov	r3, r0
 8002000:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f040 809a 	bne.w	800213e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_ADC_Start_DMA+0x1ac>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d105      	bne.n	8002034 <HAL_ADC_Start_DMA+0x84>
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_ADC_Start_DMA+0x1a8>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d115      	bne.n	8002060 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d026      	beq.n	800209c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800205e:	e01d      	b.n	800209c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a39      	ldr	r2, [pc, #228]	; (8002158 <HAL_ADC_Start_DMA+0x1a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_ADC_Start_DMA+0xd0>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a38      	ldr	r2, [pc, #224]	; (800215c <HAL_ADC_Start_DMA+0x1ac>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10d      	bne.n	800209c <HAL_ADC_Start_DMA+0xec>
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <HAL_ADC_Start_DMA+0x1a8>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002094:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f023 0206 	bic.w	r2, r3, #6
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80020b4:	e002      	b.n	80020bc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a25      	ldr	r2, [pc, #148]	; (8002160 <HAL_ADC_Start_DMA+0x1b0>)
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a24      	ldr	r2, [pc, #144]	; (8002164 <HAL_ADC_Start_DMA+0x1b4>)
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_ADC_Start_DMA+0x1b8>)
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0202 	mvn.w	r2, #2
 80020e4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a18      	ldr	r0, [r3, #32]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	334c      	adds	r3, #76	; 0x4c
 8002100:	4619      	mov	r1, r3
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f000 fbaf 	bl	8002868 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002114:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002118:	d108      	bne.n	800212c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002128:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800212a:	e00f      	b.n	800214c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800213a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800213c:	e006      	b.n	800214c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002146:	e001      	b.n	800214c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800214c:	7dfb      	ldrb	r3, [r7, #23]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40012400 	.word	0x40012400
 800215c:	40012800 	.word	0x40012800
 8002160:	080024cb 	.word	0x080024cb
 8002164:	08002547 	.word	0x08002547
 8002168:	08002563 	.word	0x08002563

0800216c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x20>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0dc      	b.n	800237e <HAL_ADC_ConfigChannel+0x1da>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	d81c      	bhi.n	800220e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	3b05      	subs	r3, #5
 80021e6:	221f      	movs	r2, #31
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4019      	ands	r1, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b05      	subs	r3, #5
 8002200:	fa00 f203 	lsl.w	r2, r0, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	635a      	str	r2, [r3, #52]	; 0x34
 800220c:	e03c      	b.n	8002288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d81c      	bhi.n	8002250 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b23      	subs	r3, #35	; 0x23
 8002228:	221f      	movs	r2, #31
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	4019      	ands	r1, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	3b23      	subs	r3, #35	; 0x23
 8002242:	fa00 f203 	lsl.w	r2, r0, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
 800224e:	e01b      	b.n	8002288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b41      	subs	r3, #65	; 0x41
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b41      	subs	r3, #65	; 0x41
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d91c      	bls.n	80022ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68d9      	ldr	r1, [r3, #12]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4019      	ands	r1, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6898      	ldr	r0, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	3b1e      	subs	r3, #30
 80022bc:	fa00 f203 	lsl.w	r2, r0, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	e019      	b.n	80022fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6919      	ldr	r1, [r3, #16]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	2207      	movs	r2, #7
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4019      	ands	r1, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6898      	ldr	r0, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d003      	beq.n	800230e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800230a:	2b11      	cmp	r3, #17
 800230c:	d132      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_ADC_ConfigChannel+0x1e4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d125      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d126      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002334:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b10      	cmp	r3, #16
 800233c:	d11a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_ADC_ConfigChannel+0x1e8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a13      	ldr	r2, [pc, #76]	; (8002390 <HAL_ADC_ConfigChannel+0x1ec>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	0c9a      	lsrs	r2, r3, #18
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002354:	e002      	b.n	800235c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3b01      	subs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f9      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x1b2>
 8002362:	e007      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40012400 	.word	0x40012400
 800238c:	20000030 	.word	0x20000030
 8002390:	431bde83 	.word	0x431bde83

08002394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d040      	beq.n	8002434 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023c2:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <ADC_Enable+0xac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <ADC_Enable+0xb0>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023d0:	e002      	b.n	80023d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023de:	f7ff fce1 	bl	8001da4 <HAL_GetTick>
 80023e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023e4:	e01f      	b.n	8002426 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023e6:	f7ff fcdd 	bl	8001da4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d918      	bls.n	8002426 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d011      	beq.n	8002426 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	f043 0210 	orr.w	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e007      	b.n	8002436 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d1d8      	bne.n	80023e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000030 	.word	0x20000030
 8002444:	431bde83 	.word	0x431bde83

08002448 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d12e      	bne.n	80024c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002472:	f7ff fc97 	bl	8001da4 <HAL_GetTick>
 8002476:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002478:	e01b      	b.n	80024b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800247a:	f7ff fc93 	bl	8001da4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d914      	bls.n	80024b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10d      	bne.n	80024b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e007      	b.n	80024c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d0dc      	beq.n	800247a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d127      	bne.n	8002534 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024fe:	d115      	bne.n	800252c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002504:	2b00      	cmp	r3, #0
 8002506:	d111      	bne.n	800252c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7ff fe1d 	bl	800216c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002532:	e004      	b.n	800253e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff fe12 	bl	800217e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff fe01 	bl	8002190 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <__NVIC_GetPriorityGrouping+0x18>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	f003 0307 	and.w	r3, r3, #7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db0b      	blt.n	8002626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4906      	ldr	r1, [pc, #24]	; (8002630 <__NVIC_EnableIRQ+0x34>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2001      	movs	r0, #1
 800261e:	fa00 f202 	lsl.w	r2, r0, r2
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026fc:	d301      	bcc.n	8002702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <SysTick_Config+0x40>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270a:	210f      	movs	r1, #15
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f7ff ff90 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <SysTick_Config+0x40>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <SysTick_Config+0x40>)
 800271c:	2207      	movs	r2, #7
 800271e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	e000e010 	.word	0xe000e010

08002730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff2d 	bl	8002598 <__NVIC_SetPriorityGrouping>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002758:	f7ff ff42 	bl	80025e0 <__NVIC_GetPriorityGrouping>
 800275c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	6978      	ldr	r0, [r7, #20]
 8002764:	f7ff ff90 	bl	8002688 <NVIC_EncodePriority>
 8002768:	4602      	mov	r2, r0
 800276a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff5f 	bl	8002634 <__NVIC_SetPriority>
}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff35 	bl	80025fc <__NVIC_EnableIRQ>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ffa2 	bl	80026ec <SysTick_Config>
 80027a8:	4603      	mov	r3, r0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e043      	b.n	8002852 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_DMA_Init+0xa8>)
 80027d2:	4413      	add	r3, r2
 80027d4:	4a22      	ldr	r2, [pc, #136]	; (8002860 <HAL_DMA_Init+0xac>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	009a      	lsls	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_DMA_Init+0xb0>)
 80027e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002802:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800280c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	bffdfff8 	.word	0xbffdfff8
 8002860:	cccccccd 	.word	0xcccccccd
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_DMA_Start_IT+0x20>
 8002884:	2302      	movs	r3, #2
 8002886:	e04a      	b.n	800291e <HAL_DMA_Start_IT+0xb6>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002896:	2b01      	cmp	r3, #1
 8002898:	d13a      	bne.n	8002910 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2202      	movs	r2, #2
 800289e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f938 	bl	8002b34 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 020e 	orr.w	r2, r2, #14
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e00f      	b.n	80028fe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0204 	bic.w	r2, r2, #4
 80028ec:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 020a 	orr.w	r2, r2, #10
 80028fc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e005      	b.n	800291c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002918:	2302      	movs	r3, #2
 800291a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800291c:	7dfb      	ldrb	r3, [r7, #23]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2204      	movs	r2, #4
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d04f      	beq.n	80029f0 <HAL_DMA_IRQHandler+0xc8>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d04a      	beq.n	80029f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0204 	bic.w	r2, r2, #4
 8002976:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <HAL_DMA_IRQHandler+0x1f0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d029      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xae>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_DMA_IRQHandler+0x1f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <HAL_DMA_IRQHandler+0xaa>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a63      	ldr	r2, [pc, #396]	; (8002b20 <HAL_DMA_IRQHandler+0x1f8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01a      	beq.n	80029cc <HAL_DMA_IRQHandler+0xa4>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a62      	ldr	r2, [pc, #392]	; (8002b24 <HAL_DMA_IRQHandler+0x1fc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d012      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x9e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a60      	ldr	r2, [pc, #384]	; (8002b28 <HAL_DMA_IRQHandler+0x200>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00a      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x98>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5f      	ldr	r2, [pc, #380]	; (8002b2c <HAL_DMA_IRQHandler+0x204>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d102      	bne.n	80029ba <HAL_DMA_IRQHandler+0x92>
 80029b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029b8:	e00e      	b.n	80029d8 <HAL_DMA_IRQHandler+0xb0>
 80029ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029be:	e00b      	b.n	80029d8 <HAL_DMA_IRQHandler+0xb0>
 80029c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029c4:	e008      	b.n	80029d8 <HAL_DMA_IRQHandler+0xb0>
 80029c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029ca:	e005      	b.n	80029d8 <HAL_DMA_IRQHandler+0xb0>
 80029cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d0:	e002      	b.n	80029d8 <HAL_DMA_IRQHandler+0xb0>
 80029d2:	2340      	movs	r3, #64	; 0x40
 80029d4:	e000      	b.n	80029d8 <HAL_DMA_IRQHandler+0xb0>
 80029d6:	2304      	movs	r3, #4
 80029d8:	4a55      	ldr	r2, [pc, #340]	; (8002b30 <HAL_DMA_IRQHandler+0x208>)
 80029da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8094 	beq.w	8002b0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029ee:	e08e      	b.n	8002b0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	2202      	movs	r2, #2
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d056      	beq.n	8002aae <HAL_DMA_IRQHandler+0x186>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d051      	beq.n	8002aae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 020a 	bic.w	r2, r2, #10
 8002a26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a38      	ldr	r2, [pc, #224]	; (8002b18 <HAL_DMA_IRQHandler+0x1f0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d029      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x166>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a37      	ldr	r2, [pc, #220]	; (8002b1c <HAL_DMA_IRQHandler+0x1f4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x162>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a35      	ldr	r2, [pc, #212]	; (8002b20 <HAL_DMA_IRQHandler+0x1f8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01a      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x15c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <HAL_DMA_IRQHandler+0x1fc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d012      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x156>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <HAL_DMA_IRQHandler+0x200>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00a      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x150>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <HAL_DMA_IRQHandler+0x204>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d102      	bne.n	8002a72 <HAL_DMA_IRQHandler+0x14a>
 8002a6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a70:	e00e      	b.n	8002a90 <HAL_DMA_IRQHandler+0x168>
 8002a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a76:	e00b      	b.n	8002a90 <HAL_DMA_IRQHandler+0x168>
 8002a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a7c:	e008      	b.n	8002a90 <HAL_DMA_IRQHandler+0x168>
 8002a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a82:	e005      	b.n	8002a90 <HAL_DMA_IRQHandler+0x168>
 8002a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a88:	e002      	b.n	8002a90 <HAL_DMA_IRQHandler+0x168>
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e000      	b.n	8002a90 <HAL_DMA_IRQHandler+0x168>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_DMA_IRQHandler+0x208>)
 8002a92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d034      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002aac:	e02f      	b.n	8002b0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d028      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x1e8>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d023      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020e 	bic.w	r2, r2, #14
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
    }
  }
  return;
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
}
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40020008 	.word	0x40020008
 8002b1c:	4002001c 	.word	0x4002001c
 8002b20:	40020030 	.word	0x40020030
 8002b24:	40020044 	.word	0x40020044
 8002b28:	40020058 	.word	0x40020058
 8002b2c:	4002006c 	.word	0x4002006c
 8002b30:	40020000 	.word	0x40020000

08002b34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d108      	bne.n	8002b74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b72:	e007      	b.n	8002b84 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_FLASH_Program+0xd8>)
 8002bac:	7e1b      	ldrb	r3, [r3, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_FLASH_Program+0x26>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e054      	b.n	8002c60 <HAL_FLASH_Program+0xd0>
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_FLASH_Program+0xd8>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002bbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bc0:	f000 f8d4 	bl	8002d6c <FLASH_WaitForLastOperation>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d144      	bne.n	8002c58 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	757b      	strb	r3, [r7, #21]
 8002bd8:	e007      	b.n	8002bea <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d102      	bne.n	8002be6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002be0:	2302      	movs	r3, #2
 8002be2:	757b      	strb	r3, [r7, #21]
 8002be4:	e001      	b.n	8002bea <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002be6:	2304      	movs	r3, #4
 8002be8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	75bb      	strb	r3, [r7, #22]
 8002bee:	e02d      	b.n	8002c4c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002bf0:	7dbb      	ldrb	r3, [r7, #22]
 8002bf2:	005a      	lsls	r2, r3, #1
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	eb02 0c03 	add.w	ip, r2, r3
 8002bfa:	7dbb      	ldrb	r3, [r7, #22]
 8002bfc:	0119      	lsls	r1, r3, #4
 8002bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c02:	f1c1 0620 	rsb	r6, r1, #32
 8002c06:	f1a1 0020 	sub.w	r0, r1, #32
 8002c0a:	fa22 f401 	lsr.w	r4, r2, r1
 8002c0e:	fa03 f606 	lsl.w	r6, r3, r6
 8002c12:	4334      	orrs	r4, r6
 8002c14:	fa23 f000 	lsr.w	r0, r3, r0
 8002c18:	4304      	orrs	r4, r0
 8002c1a:	fa23 f501 	lsr.w	r5, r3, r1
 8002c1e:	b2a3      	uxth	r3, r4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4660      	mov	r0, ip
 8002c24:	f000 f886 	bl	8002d34 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c2c:	f000 f89e 	bl	8002d6c <FLASH_WaitForLastOperation>
 8002c30:	4603      	mov	r3, r0
 8002c32:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_FLASH_Program+0xdc>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_FLASH_Program+0xdc>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002c46:	7dbb      	ldrb	r3, [r7, #22]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	75bb      	strb	r3, [r7, #22]
 8002c4c:	7dba      	ldrb	r2, [r7, #22]
 8002c4e:	7d7b      	ldrb	r3, [r7, #21]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3cd      	bcc.n	8002bf0 <HAL_FLASH_Program+0x60>
 8002c54:	e000      	b.n	8002c58 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002c56:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_FLASH_Program+0xd8>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	761a      	strb	r2, [r3, #24]

  return status;
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c68:	20000308 	.word	0x20000308
 8002c6c:	40022000 	.word	0x40022000

08002c70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_FLASH_Unlock+0x40>)
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_FLASH_Unlock+0x40>)
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_FLASH_Unlock+0x44>)
 8002c8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_FLASH_Unlock+0x40>)
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_FLASH_Unlock+0x48>)
 8002c90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_FLASH_Unlock+0x40>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	45670123 	.word	0x45670123
 8002cb8:	cdef89ab 	.word	0xcdef89ab

08002cbc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_FLASH_Lock+0x1c>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_FLASH_Lock+0x1c>)
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_FLASH_OB_Unlock+0x2c>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <HAL_FLASH_OB_Unlock+0x30>)
 8002cf0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_FLASH_OB_Unlock+0x2c>)
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <HAL_FLASH_OB_Unlock+0x34>)
 8002cf6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e000      	b.n	8002cfe <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	45670123 	.word	0x45670123
 8002d10:	cdef89ab 	.word	0xcdef89ab

08002d14 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_FLASH_OB_Lock+0x1c>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <HAL_FLASH_OB_Lock+0x1c>)
 8002d1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d22:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40022000 	.word	0x40022000

08002d34 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <FLASH_Program_HalfWord+0x30>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <FLASH_Program_HalfWord+0x34>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <FLASH_Program_HalfWord+0x34>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	887a      	ldrh	r2, [r7, #2]
 8002d56:	801a      	strh	r2, [r3, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000308 	.word	0x20000308
 8002d68:	40022000 	.word	0x40022000

08002d6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff f816 	bl	8001da4 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d7a:	e010      	b.n	8002d9e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d00c      	beq.n	8002d9e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <FLASH_WaitForLastOperation+0x2e>
 8002d8a:	f7ff f80b 	bl	8001da4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d201      	bcs.n	8002d9e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e025      	b.n	8002dea <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <FLASH_WaitForLastOperation+0x88>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e8      	bne.n	8002d7c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <FLASH_WaitForLastOperation+0x88>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <FLASH_WaitForLastOperation+0x88>)
 8002db8:	2220      	movs	r2, #32
 8002dba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <FLASH_WaitForLastOperation+0x88>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <FLASH_WaitForLastOperation+0x88>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <FLASH_WaitForLastOperation+0x88>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002de0:	f000 f80a 	bl	8002df8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40022000 	.word	0x40022000

08002df8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <FLASH_SetErrorCode+0x98>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e0e:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <FLASH_SetErrorCode+0x9c>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f043 0302 	orr.w	r3, r3, #2
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <FLASH_SetErrorCode+0x9c>)
 8002e18:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <FLASH_SetErrorCode+0x98>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <FLASH_SetErrorCode+0x9c>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <FLASH_SetErrorCode+0x9c>)
 8002e38:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <FLASH_SetErrorCode+0x98>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <FLASH_SetErrorCode+0x9c>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <FLASH_SetErrorCode+0x9c>)
 8002e58:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <FLASH_SetErrorCode+0x98>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	; (8002e90 <FLASH_SetErrorCode+0x98>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f240 1201 	movw	r2, #257	; 0x101
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d106      	bne.n	8002e7e <FLASH_SetErrorCode+0x86>
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <FLASH_SetErrorCode+0x98>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <FLASH_SetErrorCode+0x98>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	61d3      	str	r3, [r2, #28]
}  
 8002e7c:	e002      	b.n	8002e84 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <FLASH_SetErrorCode+0x98>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60d3      	str	r3, [r2, #12]
}  
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40022000 	.word	0x40022000
 8002e94:	20000308 	.word	0x20000308

08002e98 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <HAL_FLASHEx_Erase+0xd0>)
 8002eac:	7e1b      	ldrb	r3, [r3, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_FLASHEx_Erase+0x1e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e053      	b.n	8002f5e <HAL_FLASHEx_Erase+0xc6>
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_FLASHEx_Erase+0xd0>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d116      	bne.n	8002ef2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002ec4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ec8:	f7ff ff50 	bl	8002d6c <FLASH_WaitForLastOperation>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d141      	bne.n	8002f56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f000 f84c 	bl	8002f70 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ed8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002edc:	f7ff ff46 	bl	8002d6c <FLASH_WaitForLastOperation>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ee4:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_FLASHEx_Erase+0xd4>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_FLASHEx_Erase+0xd4>)
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	6113      	str	r3, [r2, #16]
 8002ef0:	e031      	b.n	8002f56 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002ef2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ef6:	f7ff ff39 	bl	8002d6c <FLASH_WaitForLastOperation>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d12a      	bne.n	8002f56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f04f 32ff 	mov.w	r2, #4294967295
 8002f06:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	e019      	b.n	8002f44 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002f10:	68b8      	ldr	r0, [r7, #8]
 8002f12:	f000 f849 	bl	8002fa8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f1a:	f7ff ff27 	bl	8002d6c <FLASH_WaitForLastOperation>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_FLASHEx_Erase+0xd4>)
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <HAL_FLASHEx_Erase+0xd4>)
 8002f28:	f023 0302 	bic.w	r3, r3, #2
 8002f2c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	601a      	str	r2, [r3, #0]
            break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f42:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	029a      	lsls	r2, r3, #10
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d3dc      	bcc.n	8002f10 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <HAL_FLASHEx_Erase+0xd0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	761a      	strb	r2, [r3, #24]

  return status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000308 	.word	0x20000308
 8002f6c:	40022000 	.word	0x40022000

08002f70 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <FLASH_MassErase+0x30>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <FLASH_MassErase+0x34>)
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <FLASH_MassErase+0x34>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <FLASH_MassErase+0x34>)
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <FLASH_MassErase+0x34>)
 8002f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f94:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	20000308 	.word	0x20000308
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <FLASH_PageErase+0x38>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <FLASH_PageErase+0x3c>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <FLASH_PageErase+0x3c>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002fc2:	4a08      	ldr	r2, [pc, #32]	; (8002fe4 <FLASH_PageErase+0x3c>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <FLASH_PageErase+0x3c>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <FLASH_PageErase+0x3c>)
 8002fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000308 	.word	0x20000308
 8002fe4:	40022000 	.word	0x40022000

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b08b      	sub	sp, #44	; 0x2c
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffa:	e169      	b.n	80032d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	f040 8158 	bne.w	80032ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a9a      	ldr	r2, [pc, #616]	; (8003288 <HAL_GPIO_Init+0x2a0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d05e      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003024:	4a98      	ldr	r2, [pc, #608]	; (8003288 <HAL_GPIO_Init+0x2a0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d875      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800302a:	4a98      	ldr	r2, [pc, #608]	; (800328c <HAL_GPIO_Init+0x2a4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d058      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003030:	4a96      	ldr	r2, [pc, #600]	; (800328c <HAL_GPIO_Init+0x2a4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d86f      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003036:	4a96      	ldr	r2, [pc, #600]	; (8003290 <HAL_GPIO_Init+0x2a8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d052      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 800303c:	4a94      	ldr	r2, [pc, #592]	; (8003290 <HAL_GPIO_Init+0x2a8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d869      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003042:	4a94      	ldr	r2, [pc, #592]	; (8003294 <HAL_GPIO_Init+0x2ac>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d04c      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003048:	4a92      	ldr	r2, [pc, #584]	; (8003294 <HAL_GPIO_Init+0x2ac>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d863      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800304e:	4a92      	ldr	r2, [pc, #584]	; (8003298 <HAL_GPIO_Init+0x2b0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d046      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003054:	4a90      	ldr	r2, [pc, #576]	; (8003298 <HAL_GPIO_Init+0x2b0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d85d      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800305a:	2b12      	cmp	r3, #18
 800305c:	d82a      	bhi.n	80030b4 <HAL_GPIO_Init+0xcc>
 800305e:	2b12      	cmp	r3, #18
 8003060:	d859      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <HAL_GPIO_Init+0x80>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	080030e3 	.word	0x080030e3
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080030cf 	.word	0x080030cf
 8003074:	08003111 	.word	0x08003111
 8003078:	08003117 	.word	0x08003117
 800307c:	08003117 	.word	0x08003117
 8003080:	08003117 	.word	0x08003117
 8003084:	08003117 	.word	0x08003117
 8003088:	08003117 	.word	0x08003117
 800308c:	08003117 	.word	0x08003117
 8003090:	08003117 	.word	0x08003117
 8003094:	08003117 	.word	0x08003117
 8003098:	08003117 	.word	0x08003117
 800309c:	08003117 	.word	0x08003117
 80030a0:	08003117 	.word	0x08003117
 80030a4:	08003117 	.word	0x08003117
 80030a8:	08003117 	.word	0x08003117
 80030ac:	080030c5 	.word	0x080030c5
 80030b0:	080030d9 	.word	0x080030d9
 80030b4:	4a79      	ldr	r2, [pc, #484]	; (800329c <HAL_GPIO_Init+0x2b4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ba:	e02c      	b.n	8003116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	623b      	str	r3, [r7, #32]
          break;
 80030c2:	e029      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	3304      	adds	r3, #4
 80030ca:	623b      	str	r3, [r7, #32]
          break;
 80030cc:	e024      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	3308      	adds	r3, #8
 80030d4:	623b      	str	r3, [r7, #32]
          break;
 80030d6:	e01f      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	330c      	adds	r3, #12
 80030de:	623b      	str	r3, [r7, #32]
          break;
 80030e0:	e01a      	b.n	8003118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ea:	2304      	movs	r3, #4
 80030ec:	623b      	str	r3, [r7, #32]
          break;
 80030ee:	e013      	b.n	8003118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	611a      	str	r2, [r3, #16]
          break;
 8003102:	e009      	b.n	8003118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003104:	2308      	movs	r3, #8
 8003106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	615a      	str	r2, [r3, #20]
          break;
 800310e:	e003      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
          break;
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x130>
          break;
 8003116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	d801      	bhi.n	8003122 <HAL_GPIO_Init+0x13a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	e001      	b.n	8003126 <HAL_GPIO_Init+0x13e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	d802      	bhi.n	8003134 <HAL_GPIO_Init+0x14c>
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	e002      	b.n	800313a <HAL_GPIO_Init+0x152>
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	3b08      	subs	r3, #8
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	210f      	movs	r1, #15
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	431a      	orrs	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80b1 	beq.w	80032ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_GPIO_Init+0x2b8>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4a4c      	ldr	r2, [pc, #304]	; (80032a0 <HAL_GPIO_Init+0x2b8>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6193      	str	r3, [r2, #24]
 8003174:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_GPIO_Init+0x2b8>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003180:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_GPIO_Init+0x2bc>)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	3302      	adds	r3, #2
 8003188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	220f      	movs	r2, #15
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <HAL_GPIO_Init+0x2c0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_GPIO_Init+0x1ec>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3f      	ldr	r2, [pc, #252]	; (80032ac <HAL_GPIO_Init+0x2c4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00d      	beq.n	80031d0 <HAL_GPIO_Init+0x1e8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3e      	ldr	r2, [pc, #248]	; (80032b0 <HAL_GPIO_Init+0x2c8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <HAL_GPIO_Init+0x1e4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a3d      	ldr	r2, [pc, #244]	; (80032b4 <HAL_GPIO_Init+0x2cc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_GPIO_Init+0x1e0>
 80031c4:	2303      	movs	r3, #3
 80031c6:	e006      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e004      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e002      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031d4:	2300      	movs	r3, #0
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	f002 0203 	and.w	r2, r2, #3
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	4093      	lsls	r3, r2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031e6:	492f      	ldr	r1, [pc, #188]	; (80032a4 <HAL_GPIO_Init+0x2bc>)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	492c      	ldr	r1, [pc, #176]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	43db      	mvns	r3, r3
 8003216:	4928      	ldr	r1, [pc, #160]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003218:	4013      	ands	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4922      	ldr	r1, [pc, #136]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	43db      	mvns	r3, r3
 800323e:	491e      	ldr	r1, [pc, #120]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003240:	4013      	ands	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	4918      	ldr	r1, [pc, #96]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	43db      	mvns	r3, r3
 8003266:	4914      	ldr	r1, [pc, #80]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003268:	4013      	ands	r3, r2
 800326a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d021      	beq.n	80032bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	490e      	ldr	r1, [pc, #56]	; (80032b8 <HAL_GPIO_Init+0x2d0>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	60cb      	str	r3, [r1, #12]
 8003284:	e021      	b.n	80032ca <HAL_GPIO_Init+0x2e2>
 8003286:	bf00      	nop
 8003288:	10320000 	.word	0x10320000
 800328c:	10310000 	.word	0x10310000
 8003290:	10220000 	.word	0x10220000
 8003294:	10210000 	.word	0x10210000
 8003298:	10120000 	.word	0x10120000
 800329c:	10110000 	.word	0x10110000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40010800 	.word	0x40010800
 80032ac:	40010c00 	.word	0x40010c00
 80032b0:	40011000 	.word	0x40011000
 80032b4:	40011400 	.word	0x40011400
 80032b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_GPIO_Init+0x304>)
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	4909      	ldr	r1, [pc, #36]	; (80032ec <HAL_GPIO_Init+0x304>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	3301      	adds	r3, #1
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f47f ae8e 	bne.w	8002ffc <HAL_GPIO_Init+0x14>
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	372c      	adds	r7, #44	; 0x2c
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40010400 	.word	0x40010400

080032f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 80032fc:	4613      	mov	r3, r2
 80032fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003300:	787b      	ldrb	r3, [r7, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800330c:	e003      	b.n	8003316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003322:	b08b      	sub	sp, #44	; 0x2c
 8003324:	af06      	add	r7, sp, #24
 8003326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0fd      	b.n	800352e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f006 fe0e 	bl	8009f68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2203      	movs	r2, #3
 8003350:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fb3b 	bl	80059d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	687e      	ldr	r6, [r7, #4]
 8003366:	466d      	mov	r5, sp
 8003368:	f106 0410 	add.w	r4, r6, #16
 800336c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	602b      	str	r3, [r5, #0]
 8003374:	1d33      	adds	r3, r6, #4
 8003376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	f002 fb05 	bl	8005988 <USB_CoreInit>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0ce      	b.n	800352e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fb36 	bl	8005a08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e04c      	b.n	800343c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	3301      	adds	r3, #1
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	b298      	uxth	r0, r3
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	440b      	add	r3, r1
 80033de:	3336      	adds	r3, #54	; 0x36
 80033e0:	4602      	mov	r2, r0
 80033e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	440b      	add	r3, r1
 80033f4:	3303      	adds	r3, #3
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	3338      	adds	r3, #56	; 0x38
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	440b      	add	r3, r1
 800341c:	333c      	adds	r3, #60	; 0x3c
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	440b      	add	r3, r1
 8003430:	3340      	adds	r3, #64	; 0x40
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	3301      	adds	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d3ad      	bcc.n	80033a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	e044      	b.n	80034d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	440b      	add	r3, r1
 8003470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	3301      	adds	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d3b5      	bcc.n	800344c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	687e      	ldr	r6, [r7, #4]
 80034e8:	466d      	mov	r5, sp
 80034ea:	f106 0410 	add.w	r4, r6, #16
 80034ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	602b      	str	r3, [r5, #0]
 80034f6:	1d33      	adds	r3, r6, #4
 80034f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f002 fa90 	bl	8005a20 <USB_DevInit>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e00d      	b.n	800352e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f004 ff42 	bl	80083b0 <USB_DevDisconnect>

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003536 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_PCD_Start+0x16>
 8003548:	2302      	movs	r3, #2
 800354a:	e016      	b.n	800357a <HAL_PCD_Start+0x44>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f002 fa25 	bl	80059a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800355e:	2101      	movs	r1, #1
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f006 ff58 	bl	800a416 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f004 ff16 	bl	800839c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b088      	sub	sp, #32
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f004 ff18 	bl	80083c4 <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359e:	d102      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fb48 	bl	8003c36 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 ff0a 	bl	80083c4 <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	d112      	bne.n	80035e2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ce:	b292      	uxth	r2, r2
 80035d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f006 fd42 	bl	800a05e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035da:	2100      	movs	r1, #0
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f923 	bl	8003828 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 feec 	bl	80083c4 <USB_ReadInterrupts>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f6:	d10b      	bne.n	8003610 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800360a:	b292      	uxth	r2, r2
 800360c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f004 fed5 	bl	80083c4 <USB_ReadInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003624:	d10b      	bne.n	800363e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003638:	b292      	uxth	r2, r2
 800363a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f004 febe 	bl	80083c4 <USB_ReadInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003652:	d126      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	b292      	uxth	r2, r2
 8003668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0208 	bic.w	r2, r2, #8
 800367e:	b292      	uxth	r2, r2
 8003680:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f006 fd23 	bl	800a0d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800369c:	b292      	uxth	r2, r2
 800369e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fe8c 	bl	80083c4 <USB_ReadInterrupts>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b6:	f040 8082 	bne.w	80037be <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80036ba:	2300      	movs	r3, #0
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e010      	b.n	80036e2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	441a      	add	r2, r3
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	b292      	uxth	r2, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	3320      	adds	r3, #32
 80036d6:	443b      	add	r3, r7
 80036d8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80036dc:	7ffb      	ldrb	r3, [r7, #31]
 80036de:	3301      	adds	r3, #1
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	2b07      	cmp	r3, #7
 80036e6:	d9eb      	bls.n	80036c0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	b292      	uxth	r2, r2
 80036fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	b292      	uxth	r2, r2
 8003714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003718:	bf00      	nop
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003722:	b29b      	uxth	r3, r3
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f6      	beq.n	800371a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373e:	b292      	uxth	r2, r2
 8003740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003744:	2300      	movs	r3, #0
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e00f      	b.n	800376a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4611      	mov	r1, r2
 8003752:	7ffa      	ldrb	r2, [r7, #31]
 8003754:	0092      	lsls	r2, r2, #2
 8003756:	440a      	add	r2, r1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	3320      	adds	r3, #32
 800375c:	443b      	add	r3, r7
 800375e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003762:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003764:	7ffb      	ldrb	r3, [r7, #31]
 8003766:	3301      	adds	r3, #1
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	7ffb      	ldrb	r3, [r7, #31]
 800376c:	2b07      	cmp	r3, #7
 800376e:	d9ec      	bls.n	800374a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	b292      	uxth	r2, r2
 8003784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379a:	b292      	uxth	r2, r2
 800379c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0204 	orr.w	r2, r2, #4
 80037b2:	b292      	uxth	r2, r2
 80037b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f006 fc6f 	bl	800a09c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 fdfe 	bl	80083c4 <USB_ReadInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d2:	d10e      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037dc:	b29a      	uxth	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037e6:	b292      	uxth	r2, r2
 80037e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f006 fc28 	bl	800a042 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 fde4 	bl	80083c4 <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	d10b      	bne.n	8003820 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800381a:	b292      	uxth	r2, r2
 800381c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003820:	bf00      	nop
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_PCD_SetAddress+0x1a>
 800383e:	2302      	movs	r3, #2
 8003840:	e013      	b.n	800386a <HAL_PCD_SetAddress+0x42>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f004 fd8b 	bl	8008376 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	4608      	mov	r0, r1
 800387c:	4611      	mov	r1, r2
 800387e:	461a      	mov	r2, r3
 8003880:	4603      	mov	r3, r0
 8003882:	70fb      	strb	r3, [r7, #3]
 8003884:	460b      	mov	r3, r1
 8003886:	803b      	strh	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da0e      	bge.n	80038b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	705a      	strb	r2, [r3, #1]
 80038b4:	e00e      	b.n	80038d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	f003 0207 	and.w	r2, r3, #7
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038e0:	883a      	ldrh	r2, [r7, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	78ba      	ldrb	r2, [r7, #2]
 80038ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038fe:	78bb      	ldrb	r3, [r7, #2]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d102      	bne.n	800390a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_PCD_EP_Open+0xa6>
 8003914:	2302      	movs	r3, #2
 8003916:	e00e      	b.n	8003936 <HAL_PCD_EP_Open+0xc4>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	4618      	mov	r0, r3
 8003928:	f002 f89a 	bl	8005a60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003934:	7afb      	ldrb	r3, [r7, #11]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800394a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800394e:	2b00      	cmp	r3, #0
 8003950:	da0e      	bge.n	8003970 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	705a      	strb	r2, [r3, #1]
 800396e:	e00e      	b.n	800398e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 0207 	and.w	r2, r3, #7
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_PCD_EP_Close+0x6a>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e00e      	b.n	80039c6 <HAL_PCD_EP_Close+0x88>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 fbbc 	bl	8006134 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	460b      	mov	r3, r1
 80039dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039de:	7afb      	ldrb	r3, [r7, #11]
 80039e0:	f003 0207 	and.w	r2, r3, #7
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a1a:	7afb      	ldrb	r3, [r7, #11]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6979      	ldr	r1, [r7, #20]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 fd6e 	bl	800650c <USB_EPStartXfer>
 8003a30:	e005      	b.n	8003a3e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6979      	ldr	r1, [r7, #20]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f002 fd67 	bl	800650c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2201      	movs	r2, #1
 8003a92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a94:	7afb      	ldrb	r3, [r7, #11]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aa0:	7afb      	ldrb	r3, [r7, #11]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6979      	ldr	r1, [r7, #20]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 fd2b 	bl	800650c <USB_EPStartXfer>
 8003ab6:	e005      	b.n	8003ac4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6979      	ldr	r1, [r7, #20]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f002 fd24 	bl	800650c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 0207 	and.w	r2, r3, #7
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d901      	bls.n	8003aec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e04c      	b.n	8003b86 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	da0e      	bge.n	8003b12 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	705a      	strb	r2, [r3, #1]
 8003b10:	e00c      	b.n	8003b2c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_PCD_EP_SetStall+0x7e>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e01c      	b.n	8003b86 <HAL_PCD_EP_SetStall+0xb8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 fb0e 	bl	800817c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d108      	bne.n	8003b7c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f004 fc33 	bl	80083e2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d901      	bls.n	8003bac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e040      	b.n	8003c2e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	da0e      	bge.n	8003bd2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	705a      	strb	r2, [r3, #1]
 8003bd0:	e00e      	b.n	8003bf0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 0207 	and.w	r2, r3, #7
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_PCD_EP_ClrStall+0x82>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e00e      	b.n	8003c2e <HAL_PCD_EP_ClrStall+0xa0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 fafc 	bl	800821c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b08e      	sub	sp, #56	; 0x38
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c3e:	e2ec      	b.n	800421a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c48:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003c56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 8161 	bne.w	8003f22 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d152      	bne.n	8003d10 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	81fb      	strh	r3, [r7, #14]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3328      	adds	r3, #40	; 0x28
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3302      	adds	r3, #2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	441a      	add	r2, r3
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f006 f99c 	bl	800a00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 829b 	beq.w	800421a <PCD_EP_ISR_Handler+0x5e4>
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 8296 	bne.w	800421a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	b292      	uxth	r2, r2
 8003d02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d0e:	e284      	b.n	800421a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d034      	beq.n	8003d94 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3306      	adds	r3, #6
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f004 fb8a 	bl	8008482 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	823b      	strh	r3, [r7, #16]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	8a3a      	ldrh	r2, [r7, #16]
 8003d84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f006 f911 	bl	8009fb4 <HAL_PCD_SetupStageCallback>
 8003d92:	e242      	b.n	800421a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d94:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f280 823e 	bge.w	800421a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003daa:	4013      	ands	r3, r2
 8003dac:	83bb      	strh	r3, [r7, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	8bba      	ldrh	r2, [r7, #28]
 8003db4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003db8:	b292      	uxth	r2, r2
 8003dba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3306      	adds	r3, #6
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d019      	beq.n	8003e24 <PCD_EP_ISR_Handler+0x1ee>
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d015      	beq.n	8003e24 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	6959      	ldr	r1, [r3, #20]
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f004 fb3a 	bl	8008482 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	441a      	add	r2, r3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f006 f8da 	bl	8009fd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f040 81f2 	bne.w	800421a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d112      	bne.n	8003e84 <PCD_EP_ISR_Handler+0x24e>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	801a      	strh	r2, [r3, #0]
 8003e82:	e02f      	b.n	8003ee4 <PCD_EP_ISR_Handler+0x2ae>
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b3e      	cmp	r3, #62	; 0x3e
 8003e8a:	d813      	bhi.n	8003eb4 <PCD_EP_ISR_Handler+0x27e>
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <PCD_EP_ISR_Handler+0x270>
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	029b      	lsls	r3, r3, #10
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	e017      	b.n	8003ee4 <PCD_EP_ISR_Handler+0x2ae>
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	633b      	str	r3, [r7, #48]	; 0x30
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <PCD_EP_ISR_Handler+0x298>
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	029b      	lsls	r3, r3, #10
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef4:	827b      	strh	r3, [r7, #18]
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003efc:	827b      	strh	r3, [r7, #18]
 8003efe:	8a7b      	ldrh	r3, [r7, #18]
 8003f00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f04:	827b      	strh	r3, [r7, #18]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	8a7b      	ldrh	r3, [r7, #18]
 8003f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	8013      	strh	r3, [r2, #0]
 8003f20:	e17b      	b.n	800421a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f34:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f280 80ea 	bge.w	8004112 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f54:	4013      	ands	r3, r2
 8003f56:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f70:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	7b1b      	ldrb	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d122      	bne.n	8003fd4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3306      	adds	r3, #6
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003fb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8087 	beq.w	80040ce <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	6959      	ldr	r1, [r3, #20]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	88da      	ldrh	r2, [r3, #6]
 8003fcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fce:	f004 fa58 	bl	8008482 <USB_ReadPMA>
 8003fd2:	e07c      	b.n	80040ce <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	78db      	ldrb	r3, [r3, #3]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d108      	bne.n	8003fee <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003fdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f927 	bl	8004236 <HAL_PCD_EP_DB_Receive>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003fec:	e06f      	b.n	80040ce <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004008:	847b      	strh	r3, [r7, #34]	; 0x22
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	441a      	add	r2, r3
 8004018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800401a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800401e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800402a:	b29b      	uxth	r3, r3
 800402c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d021      	beq.n	800408c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004050:	b29b      	uxth	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	3302      	adds	r3, #2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004070:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004072:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004074:	2b00      	cmp	r3, #0
 8004076:	d02a      	beq.n	80040ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	6959      	ldr	r1, [r3, #20]
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	891a      	ldrh	r2, [r3, #8]
 8004084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004086:	f004 f9fc 	bl	8008482 <USB_ReadPMA>
 800408a:	e020      	b.n	80040ce <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004094:	b29b      	uxth	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	3306      	adds	r3, #6
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80040b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	6959      	ldr	r1, [r3, #20]
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	895a      	ldrh	r2, [r3, #10]
 80040c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040ca:	f004 f9da 	bl	8008482 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040d4:	441a      	add	r2, r3
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040e0:	441a      	add	r2, r3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <PCD_EP_ISR_Handler+0x4c2>
 80040ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d206      	bcs.n	8004106 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f005 ff6a 	bl	8009fd8 <HAL_PCD_DataOutStageCallback>
 8004104:	e005      	b.n	8004112 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800410c:	4618      	mov	r0, r3
 800410e:	f002 f9fd 	bl	800650c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004112:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004118:	2b00      	cmp	r3, #0
 800411a:	d07e      	beq.n	800421a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800411c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	843b      	strh	r3, [r7, #32]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	8c3b      	ldrh	r3, [r7, #32]
 800415c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004164:	b29b      	uxth	r3, r3
 8004166:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	78db      	ldrb	r3, [r3, #3]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d00c      	beq.n	800418a <PCD_EP_ISR_Handler+0x554>
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	78db      	ldrb	r3, [r3, #3]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800417c:	2b02      	cmp	r3, #2
 800417e:	d146      	bne.n	800420e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004180:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d141      	bne.n	800420e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	3302      	adds	r3, #2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	8bfb      	ldrh	r3, [r7, #30]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d906      	bls.n	80041cc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	8bfb      	ldrh	r3, [r7, #30]
 80041c4:	1ad2      	subs	r2, r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	619a      	str	r2, [r3, #24]
 80041ca:	e002      	b.n	80041d2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f005 ff14 	bl	800a00e <HAL_PCD_DataInStageCallback>
 80041e6:	e018      	b.n	800421a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	8bfb      	ldrh	r3, [r7, #30]
 80041ee:	441a      	add	r2, r3
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	8bfb      	ldrh	r3, [r7, #30]
 80041fa:	441a      	add	r2, r3
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004206:	4618      	mov	r0, r3
 8004208:	f002 f980 	bl	800650c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800420c:	e005      	b.n	800421a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800420e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004210:	461a      	mov	r2, r3
 8004212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f91b 	bl	8004450 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004222:	b29b      	uxth	r3, r3
 8004224:	b21b      	sxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	f6ff ad0a 	blt.w	8003c40 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3738      	adds	r7, #56	; 0x38
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b088      	sub	sp, #32
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	4613      	mov	r3, r2
 8004242:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d07e      	beq.n	800434c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004256:	b29b      	uxth	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	3302      	adds	r3, #2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004276:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	8b7b      	ldrh	r3, [r7, #26]
 800427e:	429a      	cmp	r2, r3
 8004280:	d306      	bcc.n	8004290 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	8b7b      	ldrh	r3, [r7, #26]
 8004288:	1ad2      	subs	r2, r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	619a      	str	r2, [r3, #24]
 800428e:	e002      	b.n	8004296 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d123      	bne.n	80042e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b8:	833b      	strh	r3, [r7, #24]
 80042ba:	8b3b      	ldrh	r3, [r7, #24]
 80042bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042c0:	833b      	strh	r3, [r7, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	8b3b      	ldrh	r3, [r7, #24]
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01f      	beq.n	8004330 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	82fb      	strh	r3, [r7, #22]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	8afb      	ldrh	r3, [r7, #22]
 800431c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004330:	8b7b      	ldrh	r3, [r7, #26]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8087 	beq.w	8004446 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6959      	ldr	r1, [r3, #20]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	891a      	ldrh	r2, [r3, #8]
 8004344:	8b7b      	ldrh	r3, [r7, #26]
 8004346:	f004 f89c 	bl	8008482 <USB_ReadPMA>
 800434a:	e07c      	b.n	8004446 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004354:	b29b      	uxth	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4413      	add	r3, r2
 8004360:	3306      	adds	r3, #6
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004374:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	8b7b      	ldrh	r3, [r7, #26]
 800437c:	429a      	cmp	r2, r3
 800437e:	d306      	bcc.n	800438e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	8b7b      	ldrh	r3, [r7, #26]
 8004386:	1ad2      	subs	r2, r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	619a      	str	r2, [r3, #24]
 800438c:	e002      	b.n	8004394 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d123      	bne.n	80043e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	83fb      	strh	r3, [r7, #30]
 80043b8:	8bfb      	ldrh	r3, [r7, #30]
 80043ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043be:	83fb      	strh	r3, [r7, #30]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	8bfb      	ldrh	r3, [r7, #30]
 80043d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11f      	bne.n	800442e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004408:	83bb      	strh	r3, [r7, #28]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	8bbb      	ldrh	r3, [r7, #28]
 800441a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800442a:	b29b      	uxth	r3, r3
 800442c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800442e:	8b7b      	ldrh	r3, [r7, #26]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6959      	ldr	r1, [r3, #20]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	895a      	ldrh	r2, [r3, #10]
 8004440:	8b7b      	ldrh	r3, [r7, #26]
 8004442:	f004 f81e 	bl	8008482 <USB_ReadPMA>
    }
  }

  return count;
 8004446:	8b7b      	ldrh	r3, [r7, #26]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b0a2      	sub	sp, #136	; 0x88
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 81c7 	beq.w	80047f8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	3302      	adds	r3, #2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004492:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800449e:	429a      	cmp	r2, r3
 80044a0:	d907      	bls.n	80044b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044aa:	1ad2      	subs	r2, r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	619a      	str	r2, [r3, #24]
 80044b0:	e002      	b.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2200      	movs	r2, #0
 80044b6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 80b9 	bne.w	8004634 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d126      	bne.n	8004518 <HAL_PCD_EP_DB_Transmit+0xc8>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d8:	b29b      	uxth	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	4413      	add	r3, r2
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	011a      	lsls	r2, r3, #4
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	4413      	add	r3, r2
 80044ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004510:	b29a      	uxth	r2, r3
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	e01a      	b.n	800454e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d116      	bne.n	800454e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	633b      	str	r3, [r7, #48]	; 0x30
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	4413      	add	r3, r2
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	011a      	lsls	r2, r3, #4
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	4413      	add	r3, r2
 8004542:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	2200      	movs	r2, #0
 800454c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d126      	bne.n	80045aa <HAL_PCD_EP_DB_Transmit+0x15a>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456a:	b29b      	uxth	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	4413      	add	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	011a      	lsls	r2, r3, #4
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4413      	add	r3, r2
 800457e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800458e:	b29a      	uxth	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	801a      	strh	r2, [r3, #0]
 80045a8:	e017      	b.n	80045da <HAL_PCD_EP_DB_Transmit+0x18a>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d113      	bne.n	80045da <HAL_PCD_EP_DB_Transmit+0x18a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	4413      	add	r3, r2
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	011a      	lsls	r2, r3, #4
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	4413      	add	r3, r2
 80045ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2200      	movs	r2, #0
 80045d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	4619      	mov	r1, r3
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f005 fd14 	bl	800a00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 82d4 	beq.w	8004b9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	827b      	strh	r3, [r7, #18]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	8a7b      	ldrh	r3, [r7, #18]
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800462a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]
 8004632:	e2b2      	b.n	8004b9a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d021      	beq.n	8004682 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004658:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800466e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800467a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467e:	b29b      	uxth	r3, r3
 8004680:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 8286 	bne.w	8004b9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004696:	441a      	add	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046a4:	441a      	add	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d309      	bcc.n	80046ca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	621a      	str	r2, [r3, #32]
 80046c8:	e015      	b.n	80046f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d107      	bne.n	80046e2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80046d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046e0:	e009      	b.n	80046f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2200      	movs	r2, #0
 80046f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d155      	bne.n	80047aa <HAL_PCD_EP_DB_Transmit+0x35a>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	63bb      	str	r3, [r7, #56]	; 0x38
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	4413      	add	r3, r2
 8004714:	63bb      	str	r3, [r7, #56]	; 0x38
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	011a      	lsls	r2, r3, #4
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	4413      	add	r3, r2
 8004720:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
 8004726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004728:	2b00      	cmp	r3, #0
 800472a:	d112      	bne.n	8004752 <HAL_PCD_EP_DB_Transmit+0x302>
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004736:	b29a      	uxth	r2, r3
 8004738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474a:	b29a      	uxth	r2, r3
 800474c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	e047      	b.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004754:	2b3e      	cmp	r3, #62	; 0x3e
 8004756:	d811      	bhi.n	800477c <HAL_PCD_EP_DB_Transmit+0x32c>
 8004758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	64bb      	str	r3, [r7, #72]	; 0x48
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_PCD_EP_DB_Transmit+0x31e>
 8004768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476a:	3301      	adds	r3, #1
 800476c:	64bb      	str	r3, [r7, #72]	; 0x48
 800476e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004770:	b29b      	uxth	r3, r3
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	b29a      	uxth	r2, r3
 8004776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	e032      	b.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x392>
 800477c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	64bb      	str	r3, [r7, #72]	; 0x48
 8004782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <HAL_PCD_EP_DB_Transmit+0x342>
 800478c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478e:	3b01      	subs	r3, #1
 8004790:	64bb      	str	r3, [r7, #72]	; 0x48
 8004792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004794:	b29b      	uxth	r3, r3
 8004796:	029b      	lsls	r3, r3, #10
 8004798:	b29b      	uxth	r3, r3
 800479a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800479e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	e01b      	b.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x392>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d117      	bne.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x392>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	643b      	str	r3, [r7, #64]	; 0x40
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c6:	4413      	add	r3, r2
 80047c8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	011a      	lsls	r2, r3, #4
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	4413      	add	r3, r2
 80047d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047dc:	b29a      	uxth	r2, r3
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6959      	ldr	r1, [r3, #20]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	891a      	ldrh	r2, [r3, #8]
 80047ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f003 fe01 	bl	80083f8 <USB_WritePMA>
 80047f6:	e1d0      	b.n	8004b9a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004800:	b29b      	uxth	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	3306      	adds	r3, #6
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004820:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800482c:	429a      	cmp	r2, r3
 800482e:	d307      	bcc.n	8004840 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004838:	1ad2      	subs	r2, r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	619a      	str	r2, [r3, #24]
 800483e:	e002      	b.n	8004846 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 80c4 	bne.w	80049d8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d126      	bne.n	80048a6 <HAL_PCD_EP_DB_Transmit+0x456>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004866:	b29b      	uxth	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486c:	4413      	add	r3, r2
 800486e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	011a      	lsls	r2, r3, #4
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	4413      	add	r3, r2
 800487a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800487e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800488a:	b29a      	uxth	r2, r3
 800488c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489e:	b29a      	uxth	r2, r3
 80048a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e01a      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x48c>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	785b      	ldrb	r3, [r3, #1]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d116      	bne.n	80048dc <HAL_PCD_EP_DB_Transmit+0x48c>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	677b      	str	r3, [r7, #116]	; 0x74
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048bc:	b29b      	uxth	r3, r3
 80048be:	461a      	mov	r2, r3
 80048c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c2:	4413      	add	r3, r2
 80048c4:	677b      	str	r3, [r7, #116]	; 0x74
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	011a      	lsls	r2, r3, #4
 80048cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ce:	4413      	add	r3, r2
 80048d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d4:	673b      	str	r3, [r7, #112]	; 0x70
 80048d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048d8:	2200      	movs	r2, #0
 80048da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	785b      	ldrb	r3, [r3, #1]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12f      	bne.n	800494a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004902:	4413      	add	r3, r2
 8004904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	011a      	lsls	r2, r3, #4
 800490e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004912:	4413      	add	r3, r2
 8004914:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800491c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004928:	b29a      	uxth	r2, r3
 800492a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004940:	b29a      	uxth	r2, r3
 8004942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e017      	b.n	800497a <HAL_PCD_EP_DB_Transmit+0x52a>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d113      	bne.n	800497a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004960:	4413      	add	r3, r2
 8004962:	67bb      	str	r3, [r7, #120]	; 0x78
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	011a      	lsls	r2, r3, #4
 800496a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496c:	4413      	add	r3, r2
 800496e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004972:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004976:	2200      	movs	r2, #0
 8004978:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	4619      	mov	r1, r3
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f005 fb44 	bl	800a00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 8104 	bne.w	8004b9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]
 80049d6:	e0e0      	b.n	8004b9a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d121      	bne.n	8004a26 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	f040 80b4 	bne.w	8004b9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a48:	441a      	add	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6a1a      	ldr	r2, [r3, #32]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d309      	bcc.n	8004a6e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6a1a      	ldr	r2, [r3, #32]
 8004a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	621a      	str	r2, [r3, #32]
 8004a6c:	e015      	b.n	8004a9a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a84:	e009      	b.n	8004a9a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	667b      	str	r3, [r7, #100]	; 0x64
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d155      	bne.n	8004b54 <HAL_PCD_EP_DB_Transmit+0x704>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abc:	4413      	add	r3, r2
 8004abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac8:	4413      	add	r3, r2
 8004aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ace:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d112      	bne.n	8004afc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af8:	801a      	strh	r2, [r3, #0]
 8004afa:	e044      	b.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x736>
 8004afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afe:	2b3e      	cmp	r3, #62	; 0x3e
 8004b00:	d811      	bhi.n	8004b26 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	657b      	str	r3, [r7, #84]	; 0x54
 8004b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b14:	3301      	adds	r3, #1
 8004b16:	657b      	str	r3, [r7, #84]	; 0x54
 8004b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	029b      	lsls	r3, r3, #10
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	e02f      	b.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	029b      	lsls	r3, r3, #10
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b50:	801a      	strh	r2, [r3, #0]
 8004b52:	e018      	b.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d114      	bne.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x736>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b6a:	4413      	add	r3, r2
 8004b6c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	011a      	lsls	r2, r3, #4
 8004b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b76:	4413      	add	r3, r2
 8004b78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b84:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6959      	ldr	r1, [r3, #20]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	895a      	ldrh	r2, [r3, #10]
 8004b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f003 fc2f 	bl	80083f8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb4:	823b      	strh	r3, [r7, #16]
 8004bb6:	8a3b      	ldrh	r3, [r7, #16]
 8004bb8:	f083 0310 	eor.w	r3, r3, #16
 8004bbc:	823b      	strh	r3, [r7, #16]
 8004bbe:	8a3b      	ldrh	r3, [r7, #16]
 8004bc0:	f083 0320 	eor.w	r3, r3, #32
 8004bc4:	823b      	strh	r3, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	441a      	add	r2, r3
 8004bd4:	8a3b      	ldrh	r3, [r7, #16]
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3788      	adds	r7, #136	; 0x88
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	817b      	strh	r3, [r7, #10]
 8004c02:	4613      	mov	r3, r2
 8004c04:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c06:	897b      	ldrh	r3, [r7, #10]
 8004c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e009      	b.n	8004c3e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c2a:	897a      	ldrh	r2, [r7, #10]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c3e:	893b      	ldrh	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2200      	movs	r2, #0
 8004c48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	80da      	strh	r2, [r3, #6]
 8004c52:	e00b      	b.n	8004c6c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2201      	movs	r2, #1
 8004c58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr

08004c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e272      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8087 	beq.w	8004da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c98:	4b92      	ldr	r3, [pc, #584]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d00c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ca4:	4b8f      	ldr	r3, [pc, #572]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d112      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5e>
 8004cb0:	4b8c      	ldr	r3, [pc, #560]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbe:	4b89      	ldr	r3, [pc, #548]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d06c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x12c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d168      	bne.n	8004da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e24c      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x76>
 8004ce0:	4b80      	ldr	r3, [pc, #512]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a7f      	ldr	r2, [pc, #508]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e02e      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x98>
 8004cf6:	4b7b      	ldr	r3, [pc, #492]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a7a      	ldr	r2, [pc, #488]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b78      	ldr	r3, [pc, #480]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a77      	ldr	r2, [pc, #476]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e01d      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0xbc>
 8004d1a:	4b72      	ldr	r3, [pc, #456]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a71      	ldr	r2, [pc, #452]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b6f      	ldr	r3, [pc, #444]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a6e      	ldr	r2, [pc, #440]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d34:	4b6b      	ldr	r3, [pc, #428]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a6a      	ldr	r2, [pc, #424]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b68      	ldr	r3, [pc, #416]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a67      	ldr	r2, [pc, #412]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fd f826 	bl	8001da4 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fd f822 	bl	8001da4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	; 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e200      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6e:	4b5d      	ldr	r3, [pc, #372]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0xe4>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fd f812 	bl	8001da4 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fd f80e 	bl	8001da4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e1ec      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d96:	4b53      	ldr	r3, [pc, #332]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x10c>
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d063      	beq.n	8004e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004db2:	4b4c      	ldr	r3, [pc, #304]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dbe:	4b49      	ldr	r3, [pc, #292]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d11c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x18c>
 8004dca:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d116      	bne.n	8004e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd6:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_RCC_OscConfig+0x176>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d001      	beq.n	8004dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e1c0      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dee:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4939      	ldr	r1, [pc, #228]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e02:	e03a      	b.n	8004e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fc ffc7 	bl	8001da4 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1a:	f7fc ffc3 	bl	8001da4 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e1a1      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4927      	ldr	r1, [pc, #156]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4e:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fc ffa6 	bl	8001da4 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5c:	f7fc ffa2 	bl	8001da4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e180      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d03a      	beq.n	8004efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d019      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8e:	4b17      	ldr	r3, [pc, #92]	; (8004eec <HAL_RCC_OscConfig+0x274>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e94:	f7fc ff86 	bl	8001da4 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fc ff82 	bl	8001da4 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e160      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eba:	2001      	movs	r0, #1
 8004ebc:	f000 fad8 	bl	8005470 <RCC_Delay>
 8004ec0:	e01c      	b.n	8004efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_RCC_OscConfig+0x274>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec8:	f7fc ff6c 	bl	8001da4 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ece:	e00f      	b.n	8004ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed0:	f7fc ff68 	bl	8001da4 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d908      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e146      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	42420000 	.word	0x42420000
 8004eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef0:	4b92      	ldr	r3, [pc, #584]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e9      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80a6 	beq.w	8005056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0e:	4b8b      	ldr	r3, [pc, #556]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10d      	bne.n	8004f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	4b88      	ldr	r3, [pc, #544]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4a87      	ldr	r2, [pc, #540]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	61d3      	str	r3, [r2, #28]
 8004f26:	4b85      	ldr	r3, [pc, #532]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f36:	4b82      	ldr	r3, [pc, #520]	; (8005140 <HAL_RCC_OscConfig+0x4c8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d118      	bne.n	8004f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f42:	4b7f      	ldr	r3, [pc, #508]	; (8005140 <HAL_RCC_OscConfig+0x4c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a7e      	ldr	r2, [pc, #504]	; (8005140 <HAL_RCC_OscConfig+0x4c8>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4e:	f7fc ff29 	bl	8001da4 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fc ff25 	bl	8001da4 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b64      	cmp	r3, #100	; 0x64
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e103      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f68:	4b75      	ldr	r3, [pc, #468]	; (8005140 <HAL_RCC_OscConfig+0x4c8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCC_OscConfig+0x312>
 8004f7c:	4b6f      	ldr	r3, [pc, #444]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4a6e      	ldr	r2, [pc, #440]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6213      	str	r3, [r2, #32]
 8004f88:	e02d      	b.n	8004fe6 <HAL_RCC_OscConfig+0x36e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10c      	bne.n	8004fac <HAL_RCC_OscConfig+0x334>
 8004f92:	4b6a      	ldr	r3, [pc, #424]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4a69      	ldr	r2, [pc, #420]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	6213      	str	r3, [r2, #32]
 8004f9e:	4b67      	ldr	r3, [pc, #412]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4a66      	ldr	r2, [pc, #408]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	6213      	str	r3, [r2, #32]
 8004faa:	e01c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x36e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b05      	cmp	r3, #5
 8004fb2:	d10c      	bne.n	8004fce <HAL_RCC_OscConfig+0x356>
 8004fb4:	4b61      	ldr	r3, [pc, #388]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	4a60      	ldr	r2, [pc, #384]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fba:	f043 0304 	orr.w	r3, r3, #4
 8004fbe:	6213      	str	r3, [r2, #32]
 8004fc0:	4b5e      	ldr	r3, [pc, #376]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4a5d      	ldr	r2, [pc, #372]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	6213      	str	r3, [r2, #32]
 8004fcc:	e00b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x36e>
 8004fce:	4b5b      	ldr	r3, [pc, #364]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4a5a      	ldr	r2, [pc, #360]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	6213      	str	r3, [r2, #32]
 8004fda:	4b58      	ldr	r3, [pc, #352]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4a57      	ldr	r2, [pc, #348]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d015      	beq.n	800501a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fee:	f7fc fed9 	bl	8001da4 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	e00a      	b.n	800500c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fc fed5 	bl	8001da4 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	; 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e0b1      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500c:	4b4b      	ldr	r3, [pc, #300]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0ee      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x37e>
 8005018:	e014      	b.n	8005044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501a:	f7fc fec3 	bl	8001da4 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005020:	e00a      	b.n	8005038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005022:	f7fc febf 	bl	8001da4 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e09b      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ee      	bne.n	8005022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d105      	bne.n	8005056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800504a:	4b3c      	ldr	r3, [pc, #240]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4a3b      	ldr	r2, [pc, #236]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8005050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8087 	beq.w	800516e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 030c 	and.w	r3, r3, #12
 8005068:	2b08      	cmp	r3, #8
 800506a:	d061      	beq.n	8005130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d146      	bne.n	8005102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005074:	4b33      	ldr	r3, [pc, #204]	; (8005144 <HAL_RCC_OscConfig+0x4cc>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507a:	f7fc fe93 	bl	8001da4 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005082:	f7fc fe8f 	bl	8001da4 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e06d      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005094:	4b29      	ldr	r3, [pc, #164]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	d108      	bne.n	80050bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	4921      	ldr	r1, [pc, #132]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050bc:	4b1f      	ldr	r3, [pc, #124]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a19      	ldr	r1, [r3, #32]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	430b      	orrs	r3, r1
 80050ce:	491b      	ldr	r1, [pc, #108]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050d4:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <HAL_RCC_OscConfig+0x4cc>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050da:	f7fc fe63 	bl	8001da4 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e2:	f7fc fe5f 	bl	8001da4 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e03d      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050f4:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x46a>
 8005100:	e035      	b.n	800516e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005102:	4b10      	ldr	r3, [pc, #64]	; (8005144 <HAL_RCC_OscConfig+0x4cc>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fc fe4c 	bl	8001da4 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7fc fe48 	bl	8001da4 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e026      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x498>
 800512e:	e01e      	b.n	800516e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d107      	bne.n	8005148 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e019      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
 800513c:	40021000 	.word	0x40021000
 8005140:	40007000 	.word	0x40007000
 8005144:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_RCC_OscConfig+0x500>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	429a      	cmp	r2, r3
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000

0800517c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0d0      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b6a      	ldr	r3, [pc, #424]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d910      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b67      	ldr	r3, [pc, #412]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 0207 	bic.w	r2, r3, #7
 80051a6:	4965      	ldr	r1, [pc, #404]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b8      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a58      	ldr	r2, [pc, #352]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f0:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b50      	ldr	r3, [pc, #320]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	494d      	ldr	r1, [pc, #308]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d040      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d115      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e07f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b41      	ldr	r3, [pc, #260]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e073      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3d      	ldr	r3, [pc, #244]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e06b      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4936      	ldr	r1, [pc, #216]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fc fd9a 	bl	8001da4 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fc fd96 	bl	8001da4 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e053      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b27      	ldr	r3, [pc, #156]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d210      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 0207 	bic.w	r2, r3, #7
 80052b2:	4922      	ldr	r1, [pc, #136]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e032      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4916      	ldr	r1, [pc, #88]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	490e      	ldr	r1, [pc, #56]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800530a:	f000 f821 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800530e:	4602      	mov	r2, r0
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	490a      	ldr	r1, [pc, #40]	; (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 800531c:	5ccb      	ldrb	r3, [r1, r3]
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <HAL_RCC_ClockConfig+0x1cc>)
 8005324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCC_ClockConfig+0x1d0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fcf8 	bl	8001d20 <HAL_InitTick>

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40022000 	.word	0x40022000
 8005340:	40021000 	.word	0x40021000
 8005344:	0800b758 	.word	0x0800b758
 8005348:	20000030 	.word	0x20000030
 800534c:	20000034 	.word	0x20000034

08005350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	b490      	push	{r4, r7}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005356:	4b29      	ldr	r3, [pc, #164]	; (80053fc <HAL_RCC_GetSysClockFreq+0xac>)
 8005358:	1d3c      	adds	r4, r7, #4
 800535a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800535c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005360:	f240 2301 	movw	r3, #513	; 0x201
 8005364:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	2300      	movs	r3, #0
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800537a:	4b21      	ldr	r3, [pc, #132]	; (8005400 <HAL_RCC_GetSysClockFreq+0xb0>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b04      	cmp	r3, #4
 8005388:	d002      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x40>
 800538a:	2b08      	cmp	r3, #8
 800538c:	d003      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x46>
 800538e:	e02b      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005390:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005392:	623b      	str	r3, [r7, #32]
      break;
 8005394:	e02b      	b.n	80053ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	0c9b      	lsrs	r3, r3, #18
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	3328      	adds	r3, #40	; 0x28
 80053a0:	443b      	add	r3, r7
 80053a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d012      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053b2:	4b13      	ldr	r3, [pc, #76]	; (8005400 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	0c5b      	lsrs	r3, r3, #17
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	3328      	adds	r3, #40	; 0x28
 80053be:	443b      	add	r3, r7
 80053c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4a0e      	ldr	r2, [pc, #56]	; (8005404 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053ca:	fb03 f202 	mul.w	r2, r3, r2
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
 80053d6:	e004      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053dc:	fb02 f303 	mul.w	r3, r2, r3
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	623b      	str	r3, [r7, #32]
      break;
 80053e6:	e002      	b.n	80053ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053ea:	623b      	str	r3, [r7, #32]
      break;
 80053ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ee:	6a3b      	ldr	r3, [r7, #32]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3728      	adds	r7, #40	; 0x28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc90      	pop	{r4, r7}
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	0800b704 	.word	0x0800b704
 8005400:	40021000 	.word	0x40021000
 8005404:	007a1200 	.word	0x007a1200
 8005408:	003d0900 	.word	0x003d0900

0800540c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005410:	4b02      	ldr	r3, [pc, #8]	; (800541c <HAL_RCC_GetHCLKFreq+0x10>)
 8005412:	681b      	ldr	r3, [r3, #0]
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr
 800541c:	20000030 	.word	0x20000030

08005420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005424:	f7ff fff2 	bl	800540c <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4903      	ldr	r1, [pc, #12]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40021000 	.word	0x40021000
 8005444:	0800b768 	.word	0x0800b768

08005448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800544c:	f7ff ffde 	bl	800540c <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	0adb      	lsrs	r3, r3, #11
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4903      	ldr	r1, [pc, #12]	; (800546c <HAL_RCC_GetPCLK2Freq+0x24>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005464:	4618      	mov	r0, r3
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40021000 	.word	0x40021000
 800546c:	0800b768 	.word	0x0800b768

08005470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <RCC_Delay+0x34>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <RCC_Delay+0x38>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	0a5b      	lsrs	r3, r3, #9
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800548c:	bf00      	nop
  }
  while (Delay --);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1e5a      	subs	r2, r3, #1
 8005492:	60fa      	str	r2, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f9      	bne.n	800548c <RCC_Delay+0x1c>
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr
 80054a4:	20000030 	.word	0x20000030
 80054a8:	10624dd3 	.word	0x10624dd3

080054ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d07d      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054c8:	2300      	movs	r3, #0
 80054ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054cc:	4b4f      	ldr	r3, [pc, #316]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10d      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d8:	4b4c      	ldr	r3, [pc, #304]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4a4b      	ldr	r2, [pc, #300]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e2:	61d3      	str	r3, [r2, #28]
 80054e4:	4b49      	ldr	r3, [pc, #292]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f0:	2301      	movs	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f4:	4b46      	ldr	r3, [pc, #280]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d118      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005500:	4b43      	ldr	r3, [pc, #268]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a42      	ldr	r2, [pc, #264]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550c:	f7fc fc4a 	bl	8001da4 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005512:	e008      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005514:	f7fc fc46 	bl	8001da4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e06d      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005526:	4b3a      	ldr	r3, [pc, #232]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005532:	4b36      	ldr	r3, [pc, #216]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d02e      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	429a      	cmp	r2, r3
 800554e:	d027      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005550:	4b2e      	ldr	r3, [pc, #184]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005558:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800555a:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005560:	4b2c      	ldr	r3, [pc, #176]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005566:	4a29      	ldr	r2, [pc, #164]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d014      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005576:	f7fc fc15 	bl	8001da4 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557c:	e00a      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557e:	f7fc fc11 	bl	8001da4 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f241 3288 	movw	r2, #5000	; 0x1388
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e036      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0ee      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4917      	ldr	r1, [pc, #92]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b8:	4b14      	ldr	r3, [pc, #80]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055d0:	4b0e      	ldr	r3, [pc, #56]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	490b      	ldr	r1, [pc, #44]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ee:	4b07      	ldr	r3, [pc, #28]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	4904      	ldr	r1, [pc, #16]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	40007000 	.word	0x40007000
 8005614:	42420440 	.word	0x42420440

08005618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e03f      	b.n	80056aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fc f9e4 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	; 0x24
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800565a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f905 	bl	800586c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b08a      	sub	sp, #40	; 0x28
 80056b6:	af02      	add	r7, sp, #8
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	603b      	str	r3, [r7, #0]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d17c      	bne.n	80057cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_UART_Transmit+0x2c>
 80056d8:	88fb      	ldrh	r3, [r7, #6]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e075      	b.n	80057ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_UART_Transmit+0x3e>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e06e      	b.n	80057ce <HAL_UART_Transmit+0x11c>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2221      	movs	r2, #33	; 0x21
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005706:	f7fc fb4d 	bl	8001da4 <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005720:	d108      	bne.n	8005734 <HAL_UART_Transmit+0x82>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d104      	bne.n	8005734 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e003      	b.n	800573c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005744:	e02a      	b.n	800579c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	2180      	movs	r1, #128	; 0x80
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f840 	bl	80057d6 <UART_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e036      	b.n	80057ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005774:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	3302      	adds	r3, #2
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	e007      	b.n	800578e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	3301      	adds	r3, #1
 800578c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1cf      	bne.n	8005746 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2200      	movs	r2, #0
 80057ae:	2140      	movs	r1, #64	; 0x40
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f810 	bl	80057d6 <UART_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e006      	b.n	80057ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	e000      	b.n	80057ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057cc:	2302      	movs	r3, #2
  }
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	603b      	str	r3, [r7, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e6:	e02c      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d028      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <UART_WaitOnFlagUntilTimeout+0x30>
 80057f6:	f7fc fad5 	bl	8001da4 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	429a      	cmp	r2, r3
 8005804:	d21d      	bcs.n	8005842 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005814:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e00f      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4013      	ands	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	429a      	cmp	r2, r3
 800585e:	d0c3      	beq.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058a6:	f023 030c 	bic.w	r3, r3, #12
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	430b      	orrs	r3, r1
 80058b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <UART_SetConfig+0x114>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d103      	bne.n	80058dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7ff fdb8 	bl	8005448 <HAL_RCC_GetPCLK2Freq>
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	e002      	b.n	80058e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7ff fda0 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 80058e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009a      	lsls	r2, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <UART_SetConfig+0x118>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	0119      	lsls	r1, r3, #4
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009a      	lsls	r2, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	fbb2 f2f3 	udiv	r2, r2, r3
 8005918:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <UART_SetConfig+0x118>)
 800591a:	fba3 0302 	umull	r0, r3, r3, r2
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	2064      	movs	r0, #100	; 0x64
 8005922:	fb00 f303 	mul.w	r3, r0, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	3332      	adds	r3, #50	; 0x32
 800592c:	4a15      	ldr	r2, [pc, #84]	; (8005984 <UART_SetConfig+0x118>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005938:	4419      	add	r1, r3
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009a      	lsls	r2, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005950:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <UART_SetConfig+0x118>)
 8005952:	fba3 0302 	umull	r0, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	2064      	movs	r0, #100	; 0x64
 800595a:	fb00 f303 	mul.w	r3, r0, r3
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	3332      	adds	r3, #50	; 0x32
 8005964:	4a07      	ldr	r2, [pc, #28]	; (8005984 <UART_SetConfig+0x118>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	440a      	add	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40013800 	.word	0x40013800
 8005984:	51eb851f 	.word	0x51eb851f

08005988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005988:	b084      	sub	sp, #16
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	f107 0014 	add.w	r0, r7, #20
 8005996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	b004      	add	sp, #16
 80059a6:	4770      	bx	lr

080059a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80059bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80059e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	4013      	ands	r3, r2
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a20:	b084      	sub	sp, #16
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	f107 0014 	add.w	r0, r7, #20
 8005a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	b004      	add	sp, #16
 8005a5e:	4770      	bx	lr

08005a60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b09b      	sub	sp, #108	; 0x6c
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	78db      	ldrb	r3, [r3, #3]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d81f      	bhi.n	8005ad2 <USB_ActivateEndpoint+0x72>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <USB_ActivateEndpoint+0x38>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005adb 	.word	0x08005adb
 8005aa4:	08005ab7 	.word	0x08005ab7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005aa8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ab0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ab4:	e012      	b.n	8005adc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ab6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005aba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005abe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ac2:	e00b      	b.n	8005adc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ac4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ac8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005acc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ad0:	e004      	b.n	8005adc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005ad8:	e000      	b.n	8005adc <USB_ActivateEndpoint+0x7c>
      break;
 8005ada:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	441a      	add	r2, r3
 8005b2c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	7b1b      	ldrb	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f040 8149 	bne.w	8005de0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8084 	beq.w	8005c60 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	011a      	lsls	r2, r3, #4
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	88db      	ldrh	r3, [r3, #6]
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	81fb      	strh	r3, [r7, #14]
 8005b9a:	89fb      	ldrh	r3, [r7, #14]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01b      	beq.n	8005bdc <USB_ActivateEndpoint+0x17c>
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	81bb      	strh	r3, [r7, #12]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	89bb      	ldrh	r3, [r7, #12]
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	78db      	ldrb	r3, [r3, #3]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d020      	beq.n	8005c26 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfa:	813b      	strh	r3, [r7, #8]
 8005bfc:	893b      	ldrh	r3, [r7, #8]
 8005bfe:	f083 0320 	eor.w	r3, r3, #32
 8005c02:	813b      	strh	r3, [r7, #8]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	441a      	add	r2, r3
 8005c0e:	893b      	ldrh	r3, [r7, #8]
 8005c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	8013      	strh	r3, [r2, #0]
 8005c24:	e27f      	b.n	8006126 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3c:	817b      	strh	r3, [r7, #10]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	897b      	ldrh	r3, [r7, #10]
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
 8005c5e:	e262      	b.n	8006126 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	4413      	add	r3, r2
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	011a      	lsls	r2, r3, #4
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	88db      	ldrh	r3, [r3, #6]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	4413      	add	r3, r2
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cb6:	623b      	str	r3, [r7, #32]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d112      	bne.n	8005ce6 <USB_ActivateEndpoint+0x286>
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e02f      	b.n	8005d46 <USB_ActivateEndpoint+0x2e6>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b3e      	cmp	r3, #62	; 0x3e
 8005cec:	d813      	bhi.n	8005d16 <USB_ActivateEndpoint+0x2b6>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <USB_ActivateEndpoint+0x2a8>
 8005d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d04:	3301      	adds	r3, #1
 8005d06:	663b      	str	r3, [r7, #96]	; 0x60
 8005d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	029b      	lsls	r3, r3, #10
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	e017      	b.n	8005d46 <USB_ActivateEndpoint+0x2e6>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d102      	bne.n	8005d30 <USB_ActivateEndpoint+0x2d0>
 8005d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	029b      	lsls	r3, r3, #10
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	83fb      	strh	r3, [r7, #30]
 8005d54:	8bfb      	ldrh	r3, [r7, #30]
 8005d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d01b      	beq.n	8005d96 <USB_ActivateEndpoint+0x336>
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	83bb      	strh	r3, [r7, #28]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	8bbb      	ldrh	r3, [r7, #28]
 8005d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dac:	837b      	strh	r3, [r7, #26]
 8005dae:	8b7b      	ldrh	r3, [r7, #26]
 8005db0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005db4:	837b      	strh	r3, [r7, #26]
 8005db6:	8b7b      	ldrh	r3, [r7, #26]
 8005db8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dbc:	837b      	strh	r3, [r7, #26]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	8b7b      	ldrh	r3, [r7, #26]
 8005dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	8013      	strh	r3, [r2, #0]
 8005dde:	e1a2      	b.n	8006126 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	441a      	add	r2, r3
 8005e04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e10:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e2c:	4413      	add	r3, r2
 8005e2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	011a      	lsls	r2, r3, #4
 8005e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	891b      	ldrh	r3, [r3, #8]
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	653b      	str	r3, [r7, #80]	; 0x50
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e60:	4413      	add	r3, r2
 8005e62:	653b      	str	r3, [r7, #80]	; 0x50
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	011a      	lsls	r2, r3, #4
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	895b      	ldrh	r3, [r3, #10]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 8091 	bne.w	8005fb0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005e9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01b      	beq.n	8005ede <USB_ActivateEndpoint+0x47e>
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	873b      	strh	r3, [r7, #56]	; 0x38
 8005eec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01b      	beq.n	8005f2e <USB_ActivateEndpoint+0x4ce>
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
 8005fae:	e0ba      	b.n	8006126 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005fc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01d      	beq.n	8006008 <USB_ActivateEndpoint+0x5a8>
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006004:	b29b      	uxth	r3, r3
 8006006:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006018:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01d      	beq.n	8006060 <USB_ActivateEndpoint+0x600>
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800604c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	78db      	ldrb	r3, [r3, #3]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d024      	beq.n	80060b2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006082:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006086:	f083 0320 	eor.w	r3, r3, #32
 800608a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	441a      	add	r2, r3
 8006098:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]
 80060b0:	e01d      	b.n	80060ee <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006126:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800612a:	4618      	mov	r0, r3
 800612c:	376c      	adds	r7, #108	; 0x6c
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006134:	b480      	push	{r7}
 8006136:	b08d      	sub	sp, #52	; 0x34
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	7b1b      	ldrb	r3, [r3, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f040 808e 	bne.w	8006264 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d044      	beq.n	80061da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	81bb      	strh	r3, [r7, #12]
 800615e:	89bb      	ldrh	r3, [r7, #12]
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01b      	beq.n	80061a0 <USB_DeactivateEndpoint+0x6c>
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	817b      	strh	r3, [r7, #10]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	897b      	ldrh	r3, [r7, #10]
 800618c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006198:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800619c:	b29b      	uxth	r3, r3
 800619e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b6:	813b      	strh	r3, [r7, #8]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	893b      	ldrh	r3, [r7, #8]
 80061c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	8013      	strh	r3, [r2, #0]
 80061d8:	e192      	b.n	8006500 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	827b      	strh	r3, [r7, #18]
 80061e8:	8a7b      	ldrh	r3, [r7, #18]
 80061ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <USB_DeactivateEndpoint+0xf6>
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	823b      	strh	r3, [r7, #16]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	8a3b      	ldrh	r3, [r7, #16]
 8006216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006226:	b29b      	uxth	r3, r3
 8006228:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800623c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006240:	81fb      	strh	r3, [r7, #14]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	441a      	add	r2, r3
 800624c:	89fb      	ldrh	r3, [r7, #14]
 800624e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625e:	b29b      	uxth	r3, r3
 8006260:	8013      	strh	r3, [r2, #0]
 8006262:	e14d      	b.n	8006500 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f040 80a5 	bne.w	80063b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	843b      	strh	r3, [r7, #32]
 800627c:	8c3b      	ldrh	r3, [r7, #32]
 800627e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01b      	beq.n	80062be <USB_DeactivateEndpoint+0x18a>
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	83fb      	strh	r3, [r7, #30]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	441a      	add	r2, r3
 80062a8:	8bfb      	ldrh	r3, [r7, #30]
 80062aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	83bb      	strh	r3, [r7, #28]
 80062cc:	8bbb      	ldrh	r3, [r7, #28]
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01b      	beq.n	800630e <USB_DeactivateEndpoint+0x1da>
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ec:	837b      	strh	r3, [r7, #26]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	8b7b      	ldrh	r3, [r7, #26]
 80062fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800630a:	b29b      	uxth	r3, r3
 800630c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006324:	833b      	strh	r3, [r7, #24]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	441a      	add	r2, r3
 8006330:	8b3b      	ldrh	r3, [r7, #24]
 8006332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006342:	b29b      	uxth	r3, r3
 8006344:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29b      	uxth	r3, r3
 8006354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635c:	82fb      	strh	r3, [r7, #22]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	441a      	add	r2, r3
 8006368:	8afb      	ldrh	r3, [r7, #22]
 800636a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637a:	b29b      	uxth	r3, r3
 800637c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006394:	82bb      	strh	r3, [r7, #20]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	441a      	add	r2, r3
 80063a0:	8abb      	ldrh	r3, [r7, #20]
 80063a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	8013      	strh	r3, [r2, #0]
 80063b6:	e0a3      	b.n	8006500 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80063c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01b      	beq.n	8006408 <USB_DeactivateEndpoint+0x2d4>
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006404:	b29b      	uxth	r3, r3
 8006406:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006416:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01b      	beq.n	8006458 <USB_DeactivateEndpoint+0x324>
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	853b      	strh	r3, [r7, #40]	; 0x28
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	441a      	add	r2, r3
 8006442:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006450:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006454:	b29b      	uxth	r3, r3
 8006456:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800647c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648c:	b29b      	uxth	r3, r3
 800648e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	441a      	add	r2, r3
 80064b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	847b      	strh	r3, [r7, #34]	; 0x22
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	441a      	add	r2, r3
 80064ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3734      	adds	r7, #52	; 0x34
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b0cc      	sub	sp, #304	; 0x130
 8006510:	af00      	add	r7, sp, #0
 8006512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800651a:	6018      	str	r0, [r3, #0]
 800651c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006524:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b01      	cmp	r3, #1
 8006534:	f041 817d 	bne.w	8007832 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	429a      	cmp	r2, r3
 8006552:	d908      	bls.n	8006566 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006564:	e007      	b.n	8006576 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	7b1b      	ldrb	r3, [r3, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d152      	bne.n	800662c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6959      	ldr	r1, [r3, #20]
 8006592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	88da      	ldrh	r2, [r3, #6]
 800659e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80065a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f001 ff23 	bl	80083f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	4619      	mov	r1, r3
 80065d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065e4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	440a      	add	r2, r1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	011a      	lsls	r2, r3, #4
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4413      	add	r3, r2
 8006608:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800660c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006610:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661a:	b29a      	uxth	r2, r3
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	f001 b8b5 	b.w	8007796 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800662c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	78db      	ldrb	r3, [r3, #3]
 8006638:	2b02      	cmp	r3, #2
 800663a:	f040 84c6 	bne.w	8006fca <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	429a      	cmp	r2, r3
 8006658:	f240 8443 	bls.w	8006ee2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80066a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a1a      	ldr	r2, [r3, #32]
 80066c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c8:	1ad2      	subs	r2, r2, r3
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 823e 	beq.w	8006b7a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006702:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006706:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800670a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 809a 	bne.w	8006858 <USB_EPStartXfer+0x34c>
 8006724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006730:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006746:	b29b      	uxth	r3, r3
 8006748:	4619      	mov	r1, r3
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006752:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006756:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800675a:	6812      	ldr	r2, [r2, #0]
 800675c:	440a      	add	r2, r1
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	011a      	lsls	r2, r3, #4
 800676e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4413      	add	r3, r2
 800677a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d122      	bne.n	80067d6 <USB_EPStartXfer+0x2ca>
 8006790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006794:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	801a      	strh	r2, [r3, #0]
 80067d4:	e079      	b.n	80068ca <USB_EPStartXfer+0x3be>
 80067d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067da:	2b3e      	cmp	r3, #62	; 0x3e
 80067dc:	d81b      	bhi.n	8006816 <USB_EPStartXfer+0x30a>
 80067de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d004      	beq.n	80067fe <USB_EPStartXfer+0x2f2>
 80067f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067f8:	3301      	adds	r3, #1
 80067fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006802:	b29b      	uxth	r3, r3
 8006804:	029b      	lsls	r3, r3, #10
 8006806:	b29a      	uxth	r2, r3
 8006808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	e059      	b.n	80068ca <USB_EPStartXfer+0x3be>
 8006816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <USB_EPStartXfer+0x32a>
 800682c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006830:	3b01      	subs	r3, #1
 8006832:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006836:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800683a:	b29b      	uxth	r3, r3
 800683c:	029b      	lsls	r3, r3, #10
 800683e:	b29b      	uxth	r3, r3
 8006840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006848:	b29a      	uxth	r2, r3
 800684a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	e038      	b.n	80068ca <USB_EPStartXfer+0x3be>
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d130      	bne.n	80068ca <USB_EPStartXfer+0x3be>
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006876:	b29b      	uxth	r3, r3
 8006878:	4619      	mov	r1, r3
 800687a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006882:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006886:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	440a      	add	r2, r1
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	011a      	lsls	r2, r3, #4
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4413      	add	r3, r2
 80068aa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	895b      	ldrh	r3, [r3, #10]
 80068d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6959      	ldr	r1, [r3, #20]
 80068e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068f8:	6800      	ldr	r0, [r0, #0]
 80068fa:	f001 fd7d 	bl	80083f8 <USB_WritePMA>
            ep->xfer_buff += len;
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690e:	441a      	add	r2, r3
 8006910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800691c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a1a      	ldr	r2, [r3, #32]
 8006928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	429a      	cmp	r2, r3
 8006936:	d90f      	bls.n	8006958 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006948:	1ad2      	subs	r2, r2, r3
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	621a      	str	r2, [r3, #32]
 8006956:	e00e      	b.n	8006976 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f040 809a 	bne.w	8006abc <USB_EPStartXfer+0x5b0>
 8006988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006990:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006994:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4619      	mov	r1, r3
 80069ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80069b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069ba:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	440a      	add	r2, r1
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	011a      	lsls	r2, r3, #4
 80069d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4413      	add	r3, r2
 80069de:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80069e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d122      	bne.n	8006a3a <USB_EPStartXfer+0x52e>
 80069f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	e083      	b.n	8006b42 <USB_EPStartXfer+0x636>
 8006a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a40:	d81b      	bhi.n	8006a7a <USB_EPStartXfer+0x56e>
 8006a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <USB_EPStartXfer+0x556>
 8006a58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	029b      	lsls	r3, r3, #10
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	801a      	strh	r2, [r3, #0]
 8006a78:	e063      	b.n	8006b42 <USB_EPStartXfer+0x636>
 8006a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <USB_EPStartXfer+0x58e>
 8006a90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a94:	3b01      	subs	r3, #1
 8006a96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	029b      	lsls	r3, r3, #10
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	e042      	b.n	8006b42 <USB_EPStartXfer+0x636>
 8006abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d13a      	bne.n	8006b42 <USB_EPStartXfer+0x636>
 8006acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ad4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ad8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4619      	mov	r1, r3
 8006af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006afa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006afe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	440a      	add	r2, r1
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	011a      	lsls	r2, r3, #4
 8006b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4413      	add	r3, r2
 8006b22:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	891b      	ldrh	r3, [r3, #8]
 8006b4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6959      	ldr	r1, [r3, #20]
 8006b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b70:	6800      	ldr	r0, [r0, #0]
 8006b72:	f001 fc41 	bl	80083f8 <USB_WritePMA>
 8006b76:	f000 be0e 	b.w	8007796 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d16d      	bne.n	8006c66 <USB_EPStartXfer+0x75a>
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006baa:	4413      	add	r3, r2
 8006bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	011a      	lsls	r2, r3, #4
 8006bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d112      	bne.n	8006bf4 <USB_EPStartXfer+0x6e8>
 8006bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	e063      	b.n	8006cbc <USB_EPStartXfer+0x7b0>
 8006bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bfa:	d817      	bhi.n	8006c2c <USB_EPStartXfer+0x720>
 8006bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <USB_EPStartXfer+0x710>
 8006c12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c16:	3301      	adds	r3, #1
 8006c18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e047      	b.n	8006cbc <USB_EPStartXfer+0x7b0>
 8006c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c30:	095b      	lsrs	r3, r3, #5
 8006c32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <USB_EPStartXfer+0x740>
 8006c42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c46:	3b01      	subs	r3, #1
 8006c48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	029b      	lsls	r3, r3, #10
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e02a      	b.n	8006cbc <USB_EPStartXfer+0x7b0>
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d122      	bne.n	8006cbc <USB_EPStartXfer+0x7b0>
 8006c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	653b      	str	r3, [r7, #80]	; 0x50
 8006c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c96:	4413      	add	r3, r2
 8006c98:	653b      	str	r3, [r7, #80]	; 0x50
 8006c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	011a      	lsls	r2, r3, #4
 8006ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	891b      	ldrh	r3, [r3, #8]
 8006cc8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6959      	ldr	r1, [r3, #20]
 8006cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ce2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ce6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	f001 fb84 	bl	80083f8 <USB_WritePMA>
            ep->xfer_buff += len;
 8006cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d00:	441a      	add	r2, r3
 8006d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6a1a      	ldr	r2, [r3, #32]
 8006d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d90f      	bls.n	8006d4a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	621a      	str	r2, [r3, #32]
 8006d48:	e00e      	b.n	8006d68 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2200      	movs	r2, #0
 8006d66:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	643b      	str	r3, [r7, #64]	; 0x40
 8006d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d16d      	bne.n	8006e60 <USB_EPStartXfer+0x954>
 8006d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	4413      	add	r3, r2
 8006da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	011a      	lsls	r2, r3, #4
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d112      	bne.n	8006dee <USB_EPStartXfer+0x8e2>
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	801a      	strh	r2, [r3, #0]
 8006dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	801a      	strh	r2, [r3, #0]
 8006dec:	e05d      	b.n	8006eaa <USB_EPStartXfer+0x99e>
 8006dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df2:	2b3e      	cmp	r3, #62	; 0x3e
 8006df4:	d817      	bhi.n	8006e26 <USB_EPStartXfer+0x91a>
 8006df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <USB_EPStartXfer+0x90a>
 8006e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e10:	3301      	adds	r3, #1
 8006e12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e041      	b.n	8006eaa <USB_EPStartXfer+0x99e>
 8006e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <USB_EPStartXfer+0x93a>
 8006e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e40:	3b01      	subs	r3, #1
 8006e42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	029b      	lsls	r3, r3, #10
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	e024      	b.n	8006eaa <USB_EPStartXfer+0x99e>
 8006e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	785b      	ldrb	r3, [r3, #1]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d11c      	bne.n	8006eaa <USB_EPStartXfer+0x99e>
 8006e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	461a      	mov	r2, r3
 8006e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e84:	4413      	add	r3, r2
 8006e86:	643b      	str	r3, [r7, #64]	; 0x40
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	011a      	lsls	r2, r3, #4
 8006e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e98:	4413      	add	r3, r2
 8006e9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	895b      	ldrh	r3, [r3, #10]
 8006eb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6959      	ldr	r1, [r3, #20]
 8006ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ed0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ed4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ed8:	6800      	ldr	r0, [r0, #0]
 8006eda:	f001 fa8d 	bl	80083f8 <USB_WritePMA>
 8006ede:	f000 bc5a 	b.w	8007796 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f6e:	4413      	add	r3, r2
 8006f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	011a      	lsls	r2, r3, #4
 8006f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f82:	4413      	add	r3, r2
 8006f84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	891b      	ldrh	r3, [r3, #8]
 8006fa0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6959      	ldr	r1, [r3, #20]
 8006fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fbe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fc2:	6800      	ldr	r0, [r0, #0]
 8006fc4:	f001 fa18 	bl	80083f8 <USB_WritePMA>
 8006fc8:	e3e5      	b.n	8007796 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	441a      	add	r2, r3
 800700e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800701e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007022:	b29b      	uxth	r3, r3
 8007024:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6a1a      	ldr	r2, [r3, #32]
 8007032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007036:	1ad2      	subs	r2, r2, r3
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	b29b      	uxth	r3, r3
 8007062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 81bc 	beq.w	80073e4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800706c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800707a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d16d      	bne.n	8007166 <USB_EPStartXfer+0xc5a>
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	67bb      	str	r3, [r7, #120]	; 0x78
 8007096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070aa:	4413      	add	r3, r2
 80070ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80070ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	011a      	lsls	r2, r3, #4
 80070bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070be:	4413      	add	r3, r2
 80070c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070c4:	677b      	str	r3, [r7, #116]	; 0x74
 80070c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d112      	bne.n	80070f4 <USB_EPStartXfer+0xbe8>
 80070ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070d8:	b29a      	uxth	r2, r3
 80070da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070dc:	801a      	strh	r2, [r3, #0]
 80070de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	e060      	b.n	80071b6 <USB_EPStartXfer+0xcaa>
 80070f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f8:	2b3e      	cmp	r3, #62	; 0x3e
 80070fa:	d817      	bhi.n	800712c <USB_EPStartXfer+0xc20>
 80070fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <USB_EPStartXfer+0xc10>
 8007112:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007116:	3301      	adds	r3, #1
 8007118:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800711c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007120:	b29b      	uxth	r3, r3
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	b29a      	uxth	r2, r3
 8007126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007128:	801a      	strh	r2, [r3, #0]
 800712a:	e044      	b.n	80071b6 <USB_EPStartXfer+0xcaa>
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	2b00      	cmp	r3, #0
 8007140:	d104      	bne.n	800714c <USB_EPStartXfer+0xc40>
 8007142:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007146:	3b01      	subs	r3, #1
 8007148:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800714c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007150:	b29b      	uxth	r3, r3
 8007152:	029b      	lsls	r3, r3, #10
 8007154:	b29b      	uxth	r3, r3
 8007156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715e:	b29a      	uxth	r2, r3
 8007160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	e027      	b.n	80071b6 <USB_EPStartXfer+0xcaa>
 8007166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d11f      	bne.n	80071b6 <USB_EPStartXfer+0xcaa>
 8007176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800718c:	4413      	add	r3, r2
 800718e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	011a      	lsls	r2, r3, #4
 80071a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071a4:	4413      	add	r3, r2
 80071a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	895b      	ldrh	r3, [r3, #10]
 80071c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6959      	ldr	r1, [r3, #20]
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071e4:	6800      	ldr	r0, [r0, #0]
 80071e6:	f001 f907 	bl	80083f8 <USB_WritePMA>
          ep->xfer_buff += len;
 80071ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695a      	ldr	r2, [r3, #20]
 80071f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fa:	441a      	add	r2, r3
 80071fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6a1a      	ldr	r2, [r3, #32]
 8007214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	429a      	cmp	r2, r3
 8007222:	d90f      	bls.n	8007244 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6a1a      	ldr	r2, [r3, #32]
 8007230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	621a      	str	r2, [r3, #32]
 8007242:	e00e      	b.n	8007262 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8295 	beq.w	8007796 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d16d      	bne.n	8007358 <USB_EPStartXfer+0xe4c>
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	66bb      	str	r3, [r7, #104]	; 0x68
 8007288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007296:	b29b      	uxth	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800729c:	4413      	add	r3, r2
 800729e:	66bb      	str	r3, [r7, #104]	; 0x68
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	011a      	lsls	r2, r3, #4
 80072ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072b0:	4413      	add	r3, r2
 80072b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072b6:	667b      	str	r3, [r7, #100]	; 0x64
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d112      	bne.n	80072e6 <USB_EPStartXfer+0xdda>
 80072c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072de:	b29a      	uxth	r2, r3
 80072e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	e063      	b.n	80073ae <USB_EPStartXfer+0xea2>
 80072e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ea:	2b3e      	cmp	r3, #62	; 0x3e
 80072ec:	d817      	bhi.n	800731e <USB_EPStartXfer+0xe12>
 80072ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <USB_EPStartXfer+0xe02>
 8007304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007308:	3301      	adds	r3, #1
 800730a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007312:	b29b      	uxth	r3, r3
 8007314:	029b      	lsls	r3, r3, #10
 8007316:	b29a      	uxth	r2, r3
 8007318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e047      	b.n	80073ae <USB_EPStartXfer+0xea2>
 800731e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2b00      	cmp	r3, #0
 8007332:	d104      	bne.n	800733e <USB_EPStartXfer+0xe32>
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007338:	3b01      	subs	r3, #1
 800733a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007342:	b29b      	uxth	r3, r3
 8007344:	029b      	lsls	r3, r3, #10
 8007346:	b29b      	uxth	r3, r3
 8007348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007350:	b29a      	uxth	r2, r3
 8007352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	e02a      	b.n	80073ae <USB_EPStartXfer+0xea2>
 8007358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d122      	bne.n	80073ae <USB_EPStartXfer+0xea2>
 8007368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	673b      	str	r3, [r7, #112]	; 0x70
 8007374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007382:	b29b      	uxth	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007388:	4413      	add	r3, r2
 800738a:	673b      	str	r3, [r7, #112]	; 0x70
 800738c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	011a      	lsls	r2, r3, #4
 800739a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800739c:	4413      	add	r3, r2
 800739e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	891b      	ldrh	r3, [r3, #8]
 80073ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6959      	ldr	r1, [r3, #20]
 80073ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f001 f80b 	bl	80083f8 <USB_WritePMA>
 80073e2:	e1d8      	b.n	8007796 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d178      	bne.n	80074e6 <USB_EPStartXfer+0xfda>
 80073f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007410:	b29b      	uxth	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007418:	4413      	add	r3, r2
 800741a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	011a      	lsls	r2, r3, #4
 800742c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007430:	4413      	add	r3, r2
 8007432:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007436:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800743a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d116      	bne.n	8007470 <USB_EPStartXfer+0xf64>
 8007442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800744e:	b29a      	uxth	r2, r3
 8007450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007466:	b29a      	uxth	r2, r3
 8007468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e06b      	b.n	8007548 <USB_EPStartXfer+0x103c>
 8007470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007474:	2b3e      	cmp	r3, #62	; 0x3e
 8007476:	d818      	bhi.n	80074aa <USB_EPStartXfer+0xf9e>
 8007478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d004      	beq.n	8007498 <USB_EPStartXfer+0xf8c>
 800748e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007492:	3301      	adds	r3, #1
 8007494:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007498:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800749c:	b29b      	uxth	r3, r3
 800749e:	029b      	lsls	r3, r3, #10
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074a6:	801a      	strh	r2, [r3, #0]
 80074a8:	e04e      	b.n	8007548 <USB_EPStartXfer+0x103c>
 80074aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80074b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <USB_EPStartXfer+0xfbe>
 80074c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80074c4:	3b01      	subs	r3, #1
 80074c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80074ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	029b      	lsls	r3, r3, #10
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074dc:	b29a      	uxth	r2, r3
 80074de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074e2:	801a      	strh	r2, [r3, #0]
 80074e4:	e030      	b.n	8007548 <USB_EPStartXfer+0x103c>
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	785b      	ldrb	r3, [r3, #1]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d128      	bne.n	8007548 <USB_EPStartXfer+0x103c>
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007512:	b29b      	uxth	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800751a:	4413      	add	r3, r2
 800751c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	011a      	lsls	r2, r3, #4
 800752e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007532:	4413      	add	r3, r2
 8007534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007538:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800753c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007540:	b29a      	uxth	r2, r3
 8007542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007546:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	891b      	ldrh	r3, [r3, #8]
 8007554:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6959      	ldr	r1, [r3, #20]
 8007564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007568:	b29b      	uxth	r3, r3
 800756a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800756e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007572:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	f000 ff3e 	bl	80083f8 <USB_WritePMA>
          ep->xfer_buff += len;
 800757c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695a      	ldr	r2, [r3, #20]
 8007588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758c:	441a      	add	r2, r3
 800758e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800759a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d90f      	bls.n	80075d6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80075b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	621a      	str	r2, [r3, #32]
 80075d4:	e00e      	b.n	80075f4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80075e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2200      	movs	r2, #0
 80075f2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80075f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 80cc 	beq.w	8007796 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800760c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d178      	bne.n	800770e <USB_EPStartXfer+0x1202>
 800761c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007638:	b29b      	uxth	r3, r3
 800763a:	461a      	mov	r2, r3
 800763c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007640:	4413      	add	r3, r2
 8007642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	011a      	lsls	r2, r3, #4
 8007654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007658:	4413      	add	r3, r2
 800765a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800765e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d116      	bne.n	8007698 <USB_EPStartXfer+0x118c>
 800766a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800768e:	b29a      	uxth	r2, r3
 8007690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	e064      	b.n	8007762 <USB_EPStartXfer+0x1256>
 8007698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769c:	2b3e      	cmp	r3, #62	; 0x3e
 800769e:	d818      	bhi.n	80076d2 <USB_EPStartXfer+0x11c6>
 80076a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a4:	085b      	lsrs	r3, r3, #1
 80076a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d004      	beq.n	80076c0 <USB_EPStartXfer+0x11b4>
 80076b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ba:	3301      	adds	r3, #1
 80076bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	029b      	lsls	r3, r3, #10
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	e047      	b.n	8007762 <USB_EPStartXfer+0x1256>
 80076d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <USB_EPStartXfer+0x11e6>
 80076e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ec:	3b01      	subs	r3, #1
 80076ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007704:	b29a      	uxth	r2, r3
 8007706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	e029      	b.n	8007762 <USB_EPStartXfer+0x1256>
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d121      	bne.n	8007762 <USB_EPStartXfer+0x1256>
 800771e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007734:	4413      	add	r3, r2
 8007736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800773a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	011a      	lsls	r2, r3, #4
 8007748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800774c:	4413      	add	r3, r2
 800774e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775a:	b29a      	uxth	r2, r3
 800775c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007760:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	895b      	ldrh	r3, [r3, #10]
 800776e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6959      	ldr	r1, [r3, #20]
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	b29b      	uxth	r3, r3
 8007784:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007788:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800778c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007790:	6800      	ldr	r0, [r0, #0]
 8007792:	f000 fe31 	bl	80083f8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077b8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80077bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c4:	8013      	strh	r3, [r2, #0]
 80077c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ca:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80077ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077d2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80077d6:	8812      	ldrh	r2, [r2, #0]
 80077d8:	f082 0210 	eor.w	r2, r2, #16
 80077dc:	801a      	strh	r2, [r3, #0]
 80077de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80077e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077ea:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80077ee:	8812      	ldrh	r2, [r2, #0]
 80077f0:	f082 0220 	eor.w	r2, r2, #32
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	441a      	add	r2, r3
 8007810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007814:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782a:	b29b      	uxth	r3, r3
 800782c:	8013      	strh	r3, [r2, #0]
 800782e:	f000 bc9f 	b.w	8008170 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	7b1b      	ldrb	r3, [r3, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 80ae 	bne.w	80079a0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	429a      	cmp	r2, r3
 800785e:	d917      	bls.n	8007890 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007880:	1ad2      	subs	r2, r2, r3
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	619a      	str	r2, [r3, #24]
 800788e:	e00e      	b.n	80078ae <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80078a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2200      	movs	r2, #0
 80078ac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078d2:	4413      	add	r3, r2
 80078d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	011a      	lsls	r2, r3, #4
 80078e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078ea:	4413      	add	r3, r2
 80078ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d116      	bne.n	800792a <USB_EPStartXfer+0x141e>
 80078fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007908:	b29a      	uxth	r2, r3
 800790a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007920:	b29a      	uxth	r2, r3
 8007922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	e3e8      	b.n	80080fc <USB_EPStartXfer+0x1bf0>
 800792a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792e:	2b3e      	cmp	r3, #62	; 0x3e
 8007930:	d818      	bhi.n	8007964 <USB_EPStartXfer+0x1458>
 8007932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007936:	085b      	lsrs	r3, r3, #1
 8007938:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d004      	beq.n	8007952 <USB_EPStartXfer+0x1446>
 8007948:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800794c:	3301      	adds	r3, #1
 800794e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007952:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007956:	b29b      	uxth	r3, r3
 8007958:	029b      	lsls	r3, r3, #10
 800795a:	b29a      	uxth	r2, r3
 800795c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	e3cb      	b.n	80080fc <USB_EPStartXfer+0x1bf0>
 8007964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <USB_EPStartXfer+0x1478>
 800797a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800797e:	3b01      	subs	r3, #1
 8007980:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007984:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007988:	b29b      	uxth	r3, r3
 800798a:	029b      	lsls	r3, r3, #10
 800798c:	b29b      	uxth	r3, r3
 800798e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007996:	b29a      	uxth	r2, r3
 8007998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	e3ad      	b.n	80080fc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	78db      	ldrb	r3, [r3, #3]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	f040 8200 	bne.w	8007db2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f040 8091 	bne.w	8007ae6 <USB_EPStartXfer+0x15da>
 80079c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079e8:	4413      	add	r3, r2
 80079ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	011a      	lsls	r2, r3, #4
 80079fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a00:	4413      	add	r3, r2
 8007a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d116      	bne.n	8007a48 <USB_EPStartXfer+0x153c>
 8007a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a44:	801a      	strh	r2, [r3, #0]
 8007a46:	e083      	b.n	8007b50 <USB_EPStartXfer+0x1644>
 8007a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b3e      	cmp	r3, #62	; 0x3e
 8007a56:	d820      	bhi.n	8007a9a <USB_EPStartXfer+0x158e>
 8007a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <USB_EPStartXfer+0x157c>
 8007a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a82:	3301      	adds	r3, #1
 8007a84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	029b      	lsls	r3, r3, #10
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a96:	801a      	strh	r2, [r3, #0]
 8007a98:	e05a      	b.n	8007b50 <USB_EPStartXfer+0x1644>
 8007a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <USB_EPStartXfer+0x15be>
 8007ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	029b      	lsls	r3, r3, #10
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ae2:	801a      	strh	r2, [r3, #0]
 8007ae4:	e034      	b.n	8007b50 <USB_EPStartXfer+0x1644>
 8007ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d12c      	bne.n	8007b50 <USB_EPStartXfer+0x1644>
 8007af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	011a      	lsls	r2, r3, #4
 8007b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b32:	4413      	add	r3, r2
 8007b34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 8091 	bne.w	8007c92 <USB_EPStartXfer+0x1786>
 8007b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b94:	4413      	add	r3, r2
 8007b96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	011a      	lsls	r2, r3, #4
 8007ba8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007bac:	4413      	add	r3, r2
 8007bae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d116      	bne.n	8007bf4 <USB_EPStartXfer+0x16e8>
 8007bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e07c      	b.n	8007cee <USB_EPStartXfer+0x17e2>
 8007bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b3e      	cmp	r3, #62	; 0x3e
 8007c02:	d820      	bhi.n	8007c46 <USB_EPStartXfer+0x173a>
 8007c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	085b      	lsrs	r3, r3, #1
 8007c12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <USB_EPStartXfer+0x1728>
 8007c2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	029b      	lsls	r3, r3, #10
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e053      	b.n	8007cee <USB_EPStartXfer+0x17e2>
 8007c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f003 031f 	and.w	r3, r3, #31
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <USB_EPStartXfer+0x176a>
 8007c6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c70:	3b01      	subs	r3, #1
 8007c72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	029b      	lsls	r3, r3, #10
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	e02d      	b.n	8007cee <USB_EPStartXfer+0x17e2>
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d125      	bne.n	8007cee <USB_EPStartXfer+0x17e2>
 8007ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007cb8:	4413      	add	r3, r2
 8007cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	011a      	lsls	r2, r3, #4
 8007ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 81fe 	beq.w	80080fc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d20:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <USB_EPStartXfer+0x182c>
 8007d2c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10d      	bne.n	8007d54 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d38:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f040 81db 	bne.w	80080fc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d46:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f040 81d4 	bne.w	80080fc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	441a      	add	r2, r3
 8007d98:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	8013      	strh	r3, [r2, #0]
 8007db0:	e1a4      	b.n	80080fc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	78db      	ldrb	r3, [r3, #3]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	f040 819a 	bne.w	80080f8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	699a      	ldr	r2, [r3, #24]
 8007dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d917      	bls.n	8007e10 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	619a      	str	r2, [r3, #24]
 8007e0e:	e00e      	b.n	8007e2e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d178      	bne.n	8007f30 <USB_EPStartXfer+0x1a24>
 8007e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e62:	4413      	add	r3, r2
 8007e64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	011a      	lsls	r2, r3, #4
 8007e76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d116      	bne.n	8007eba <USB_EPStartXfer+0x19ae>
 8007e8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e9e:	801a      	strh	r2, [r3, #0]
 8007ea0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	e06b      	b.n	8007f92 <USB_EPStartXfer+0x1a86>
 8007eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ebe:	2b3e      	cmp	r3, #62	; 0x3e
 8007ec0:	d818      	bhi.n	8007ef4 <USB_EPStartXfer+0x19e8>
 8007ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec6:	085b      	lsrs	r3, r3, #1
 8007ec8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <USB_EPStartXfer+0x19d6>
 8007ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007edc:	3301      	adds	r3, #1
 8007ede:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	029b      	lsls	r3, r3, #10
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	e04e      	b.n	8007f92 <USB_EPStartXfer+0x1a86>
 8007ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef8:	095b      	lsrs	r3, r3, #5
 8007efa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d104      	bne.n	8007f14 <USB_EPStartXfer+0x1a08>
 8007f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	029b      	lsls	r3, r3, #10
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f2c:	801a      	strh	r2, [r3, #0]
 8007f2e:	e030      	b.n	8007f92 <USB_EPStartXfer+0x1a86>
 8007f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	785b      	ldrb	r3, [r3, #1]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d128      	bne.n	8007f92 <USB_EPStartXfer+0x1a86>
 8007f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f64:	4413      	add	r3, r2
 8007f66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	011a      	lsls	r2, r3, #4
 8007f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d178      	bne.n	80080a2 <USB_EPStartXfer+0x1b96>
 8007fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	011a      	lsls	r2, r3, #4
 8007fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fec:	4413      	add	r3, r2
 8007fee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d116      	bne.n	800802c <USB_EPStartXfer+0x1b20>
 8007ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800800a:	b29a      	uxth	r2, r3
 800800c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b29b      	uxth	r3, r3
 800801a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008022:	b29a      	uxth	r2, r3
 8008024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	e067      	b.n	80080fc <USB_EPStartXfer+0x1bf0>
 800802c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008030:	2b3e      	cmp	r3, #62	; 0x3e
 8008032:	d818      	bhi.n	8008066 <USB_EPStartXfer+0x1b5a>
 8008034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800803e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <USB_EPStartXfer+0x1b48>
 800804a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800804e:	3301      	adds	r3, #1
 8008050:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008058:	b29b      	uxth	r3, r3
 800805a:	029b      	lsls	r3, r3, #10
 800805c:	b29a      	uxth	r2, r3
 800805e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008062:	801a      	strh	r2, [r3, #0]
 8008064:	e04a      	b.n	80080fc <USB_EPStartXfer+0x1bf0>
 8008066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <USB_EPStartXfer+0x1b7a>
 800807c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008080:	3b01      	subs	r3, #1
 8008082:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800808a:	b29b      	uxth	r3, r3
 800808c:	029b      	lsls	r3, r3, #10
 800808e:	b29b      	uxth	r3, r3
 8008090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008098:	b29a      	uxth	r2, r3
 800809a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800809e:	801a      	strh	r2, [r3, #0]
 80080a0:	e02c      	b.n	80080fc <USB_EPStartXfer+0x1bf0>
 80080a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d124      	bne.n	80080fc <USB_EPStartXfer+0x1bf0>
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c8:	4413      	add	r3, r2
 80080ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	011a      	lsls	r2, r3, #4
 80080dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e0:	4413      	add	r3, r2
 80080e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f4:	801a      	strh	r2, [r3, #0]
 80080f6:	e001      	b.n	80080fc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e03a      	b.n	8008172 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800811e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008122:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008126:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800812a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800812e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008132:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008136:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800813a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800813e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	441a      	add	r2, r3
 8008158:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800815c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816c:	b29b      	uxth	r3, r3
 800816e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d020      	beq.n	80081d0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a4:	81bb      	strh	r3, [r7, #12]
 80081a6:	89bb      	ldrh	r3, [r7, #12]
 80081a8:	f083 0310 	eor.w	r3, r3, #16
 80081ac:	81bb      	strh	r3, [r7, #12]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	441a      	add	r2, r3
 80081b8:	89bb      	ldrh	r3, [r7, #12]
 80081ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	8013      	strh	r3, [r2, #0]
 80081ce:	e01f      	b.n	8008210 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e6:	81fb      	strh	r3, [r7, #14]
 80081e8:	89fb      	ldrh	r3, [r7, #14]
 80081ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081ee:	81fb      	strh	r3, [r7, #14]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	441a      	add	r2, r3
 80081fa:	89fb      	ldrh	r3, [r7, #14]
 80081fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820c:	b29b      	uxth	r3, r3
 800820e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr

0800821c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	7b1b      	ldrb	r3, [r3, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	f040 809d 	bne.w	800836a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d04c      	beq.n	80082d2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	823b      	strh	r3, [r7, #16]
 8008246:	8a3b      	ldrh	r3, [r7, #16]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d01b      	beq.n	8008288 <USB_EPClearStall+0x6c>
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008266:	81fb      	strh	r3, [r7, #14]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	441a      	add	r2, r3
 8008272:	89fb      	ldrh	r3, [r7, #14]
 8008274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800827c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008284:	b29b      	uxth	r3, r3
 8008286:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	78db      	ldrb	r3, [r3, #3]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d06c      	beq.n	800836a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a6:	81bb      	strh	r3, [r7, #12]
 80082a8:	89bb      	ldrh	r3, [r7, #12]
 80082aa:	f083 0320 	eor.w	r3, r3, #32
 80082ae:	81bb      	strh	r3, [r7, #12]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	89bb      	ldrh	r3, [r7, #12]
 80082bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	8013      	strh	r3, [r2, #0]
 80082d0:	e04b      	b.n	800836a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	82fb      	strh	r3, [r7, #22]
 80082e0:	8afb      	ldrh	r3, [r7, #22]
 80082e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01b      	beq.n	8008322 <USB_EPClearStall+0x106>
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008300:	82bb      	strh	r3, [r7, #20]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	441a      	add	r2, r3
 800830c:	8abb      	ldrh	r3, [r7, #20]
 800830e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800831a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831e:	b29b      	uxth	r3, r3
 8008320:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008338:	827b      	strh	r3, [r7, #18]
 800833a:	8a7b      	ldrh	r3, [r7, #18]
 800833c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008340:	827b      	strh	r3, [r7, #18]
 8008342:	8a7b      	ldrh	r3, [r7, #18]
 8008344:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008348:	827b      	strh	r3, [r7, #18]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	441a      	add	r2, r3
 8008354:	8a7b      	ldrh	r3, [r7, #18]
 8008356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800835e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008366:	b29b      	uxth	r3, r3
 8008368:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	bc80      	pop	{r7}
 8008374:	4770      	bx	lr

08008376 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	460b      	mov	r3, r1
 8008380:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d103      	bne.n	8008390 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	bc80      	pop	{r7}
 800839a:	4770      	bx	lr

0800839c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr

080083c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr

080083f8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b08d      	sub	sp, #52	; 0x34
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4611      	mov	r1, r2
 8008404:	461a      	mov	r2, r3
 8008406:	460b      	mov	r3, r1
 8008408:	80fb      	strh	r3, [r7, #6]
 800840a:	4613      	mov	r3, r2
 800840c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800840e:	88bb      	ldrh	r3, [r7, #4]
 8008410:	3301      	adds	r3, #1
 8008412:	085b      	lsrs	r3, r3, #1
 8008414:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	005a      	lsls	r2, r3, #1
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008430:	e01e      	b.n	8008470 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	3301      	adds	r3, #1
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	021b      	lsls	r3, r3, #8
 8008446:	b29b      	uxth	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	b29a      	uxth	r2, r3
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	3302      	adds	r3, #2
 800845c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	3302      	adds	r3, #2
 8008462:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	3301      	adds	r3, #1
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	3b01      	subs	r3, #1
 800846e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1dd      	bne.n	8008432 <USB_WritePMA+0x3a>
  }
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	3734      	adds	r7, #52	; 0x34
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr

08008482 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008482:	b480      	push	{r7}
 8008484:	b08b      	sub	sp, #44	; 0x2c
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	4611      	mov	r1, r2
 800848e:	461a      	mov	r2, r3
 8008490:	460b      	mov	r3, r1
 8008492:	80fb      	strh	r3, [r7, #6]
 8008494:	4613      	mov	r3, r2
 8008496:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008498:	88bb      	ldrh	r3, [r7, #4]
 800849a:	085b      	lsrs	r3, r3, #1
 800849c:	b29b      	uxth	r3, r3
 800849e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	005a      	lsls	r2, r3, #1
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084b4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
 80084ba:	e01b      	b.n	80084f4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	3302      	adds	r3, #2
 80084c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	3301      	adds	r3, #1
 80084d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	0a1b      	lsrs	r3, r3, #8
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	3301      	adds	r3, #1
 80084e6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	3302      	adds	r3, #2
 80084ec:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	3b01      	subs	r3, #1
 80084f2:	627b      	str	r3, [r7, #36]	; 0x24
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e0      	bne.n	80084bc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80084fa:	88bb      	ldrh	r3, [r7, #4]
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d007      	beq.n	8008516 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	b29b      	uxth	r3, r3
 800850c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	b2da      	uxtb	r2, r3
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	701a      	strb	r2, [r3, #0]
  }
}
 8008516:	bf00      	nop
 8008518:	372c      	adds	r7, #44	; 0x2c
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008530:	2302      	movs	r3, #2
 8008532:	2203      	movs	r2, #3
 8008534:	2181      	movs	r1, #129	; 0x81
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 fe43 	bl	800a1c2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008542:	2302      	movs	r3, #2
 8008544:	2203      	movs	r2, #3
 8008546:	2101      	movs	r1, #1
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 fe3a 	bl	800a1c2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008556:	2054      	movs	r0, #84	; 0x54
 8008558:	f001 ff48 	bl	800a3ec <USBD_static_malloc>
 800855c:	4602      	mov	r2, r0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856a:	2b00      	cmp	r3, #0
 800856c:	d102      	bne.n	8008574 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800856e:	2301      	movs	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]
 8008572:	e012      	b.n	800859a <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	2340      	movs	r3, #64	; 0x40
 8008592:	2101      	movs	r1, #1
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 ff05 	bl	800a3a4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80085b0:	2181      	movs	r1, #129	; 0x81
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fe2b 	bl	800a20e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80085be:	2101      	movs	r1, #1
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fe24 	bl	800a20e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00e      	beq.n	80085f6 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 ff0b 	bl	800a404 <USBD_static_free>
    pdev->pClassData = NULL;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008610:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008616:	2300      	movs	r3, #0
 8008618:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800862a:	2b00      	cmp	r3, #0
 800862c:	d051      	beq.n	80086d2 <USBD_CUSTOM_HID_Setup+0xd2>
 800862e:	2b20      	cmp	r3, #32
 8008630:	f040 80d8 	bne.w	80087e4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	3b02      	subs	r3, #2
 800863a:	2b09      	cmp	r3, #9
 800863c:	d841      	bhi.n	80086c2 <USBD_CUSTOM_HID_Setup+0xc2>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <USBD_CUSTOM_HID_Setup+0x44>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	0800869d 	.word	0x0800869d
 8008648:	0800867b 	.word	0x0800867b
 800864c:	080086c3 	.word	0x080086c3
 8008650:	080086c3 	.word	0x080086c3
 8008654:	080086c3 	.word	0x080086c3
 8008658:	080086c3 	.word	0x080086c3
 800865c:	080086c3 	.word	0x080086c3
 8008660:	080086ad 	.word	0x080086ad
 8008664:	0800868b 	.word	0x0800868b
 8008668:	0800866d 	.word	0x0800866d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	885b      	ldrh	r3, [r3, #2]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	461a      	mov	r2, r3
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8008678:	e02a      	b.n	80086d0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	3340      	adds	r3, #64	; 0x40
 800867e:	2201      	movs	r2, #1
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 f999 	bl	80099ba <USBD_CtlSendData>
          break;
 8008688:	e022      	b.n	80086d0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	b2db      	uxtb	r3, r3
 8008694:	461a      	mov	r2, r3
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800869a:	e019      	b.n	80086d0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	3344      	adds	r3, #68	; 0x44
 80086a0:	2201      	movs	r2, #1
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 f988 	bl	80099ba <USBD_CtlSendData>
          break;
 80086aa:	e011      	b.n	80086d0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2201      	movs	r2, #1
 80086b0:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80086b2:	6939      	ldr	r1, [r7, #16]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	88db      	ldrh	r3, [r3, #6]
 80086b8:	461a      	mov	r2, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 f9ab 	bl	8009a16 <USBD_CtlPrepareRx>
          break;
 80086c0:	e006      	b.n	80086d0 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f90e 	bl	80098e6 <USBD_CtlError>
          ret = USBD_FAIL;
 80086ca:	2302      	movs	r3, #2
 80086cc:	75fb      	strb	r3, [r7, #23]
          break;
 80086ce:	bf00      	nop
      }
      break;
 80086d0:	e08f      	b.n	80087f2 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b0b      	cmp	r3, #11
 80086d8:	d87c      	bhi.n	80087d4 <USBD_CUSTOM_HID_Setup+0x1d4>
 80086da:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <USBD_CUSTOM_HID_Setup+0xe0>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	08008711 	.word	0x08008711
 80086e4:	080087d5 	.word	0x080087d5
 80086e8:	080087d5 	.word	0x080087d5
 80086ec:	080087d5 	.word	0x080087d5
 80086f0:	080087d5 	.word	0x080087d5
 80086f4:	080087d5 	.word	0x080087d5
 80086f8:	08008739 	.word	0x08008739
 80086fc:	080087d5 	.word	0x080087d5
 8008700:	080087d5 	.word	0x080087d5
 8008704:	080087d5 	.word	0x080087d5
 8008708:	08008787 	.word	0x08008787
 800870c:	080087af 	.word	0x080087af
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008716:	2b03      	cmp	r3, #3
 8008718:	d107      	bne.n	800872a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800871a:	f107 030e 	add.w	r3, r7, #14
 800871e:	2202      	movs	r2, #2
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 f949 	bl	80099ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008728:	e05b      	b.n	80087e2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 f8da 	bl	80098e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008732:	2302      	movs	r3, #2
 8008734:	75fb      	strb	r3, [r7, #23]
          break;
 8008736:	e054      	b.n	80087e2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	885b      	ldrh	r3, [r3, #2]
 800873c:	0a1b      	lsrs	r3, r3, #8
 800873e:	b29b      	uxth	r3, r3
 8008740:	2b22      	cmp	r3, #34	; 0x22
 8008742:	d10b      	bne.n	800875c <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	88db      	ldrh	r3, [r3, #6]
 8008748:	2b36      	cmp	r3, #54	; 0x36
 800874a:	bf28      	it	cs
 800874c:	2336      	movcs	r3, #54	; 0x36
 800874e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	e00d      	b.n	8008778 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	885b      	ldrh	r3, [r3, #2]
 8008760:	0a1b      	lsrs	r3, r3, #8
 8008762:	b29b      	uxth	r3, r3
 8008764:	2b21      	cmp	r3, #33	; 0x21
 8008766:	d107      	bne.n	8008778 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008768:	4b24      	ldr	r3, [pc, #144]	; (80087fc <USBD_CUSTOM_HID_Setup+0x1fc>)
 800876a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	88db      	ldrh	r3, [r3, #6]
 8008770:	2b09      	cmp	r3, #9
 8008772:	bf28      	it	cs
 8008774:	2309      	movcs	r3, #9
 8008776:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008778:	8bfb      	ldrh	r3, [r7, #30]
 800877a:	461a      	mov	r2, r3
 800877c:	69b9      	ldr	r1, [r7, #24]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 f91b 	bl	80099ba <USBD_CtlSendData>
          break;
 8008784:	e02d      	b.n	80087e2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878c:	2b03      	cmp	r3, #3
 800878e:	d107      	bne.n	80087a0 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	3348      	adds	r3, #72	; 0x48
 8008794:	2201      	movs	r2, #1
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 f90e 	bl	80099ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800879e:	e020      	b.n	80087e2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 f89f 	bl	80098e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80087a8:	2302      	movs	r3, #2
 80087aa:	75fb      	strb	r3, [r7, #23]
          break;
 80087ac:	e019      	b.n	80087e2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d106      	bne.n	80087c6 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	885b      	ldrh	r3, [r3, #2]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087c4:	e00d      	b.n	80087e2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 f88c 	bl	80098e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80087ce:	2302      	movs	r3, #2
 80087d0:	75fb      	strb	r3, [r7, #23]
          break;
 80087d2:	e006      	b.n	80087e2 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f001 f885 	bl	80098e6 <USBD_CtlError>
          ret = USBD_FAIL;
 80087dc:	2302      	movs	r3, #2
 80087de:	75fb      	strb	r3, [r7, #23]
          break;
 80087e0:	bf00      	nop
      }
      break;
 80087e2:	e006      	b.n	80087f2 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 f87d 	bl	80098e6 <USBD_CtlError>
      ret = USBD_FAIL;
 80087ec:	2302      	movs	r3, #2
 80087ee:	75fb      	strb	r3, [r7, #23]
      break;
 80087f0:	bf00      	nop
  }
  return ret;
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200000f8 	.word	0x200000f8

08008800 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008814:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881c:	2b03      	cmp	r3, #3
 800881e:	d111      	bne.n	8008844 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008832:	88fb      	ldrh	r3, [r7, #6]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	2181      	movs	r1, #129	; 0x81
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f001 fd90 	bl	800a35e <USBD_LL_Transmit>
 800883e:	e001      	b.n	8008844 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2229      	movs	r2, #41	; 0x29
 800885c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800885e:	4b03      	ldr	r3, [pc, #12]	; (800886c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	bc80      	pop	{r7}
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20000074 	.word	0x20000074

08008870 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2229      	movs	r2, #41	; 0x29
 800887c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800887e:	4b03      	ldr	r3, [pc, #12]	; (800888c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	200000a0 	.word	0x200000a0

08008890 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2229      	movs	r2, #41	; 0x29
 800889c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800889e:	4b03      	ldr	r3, [pc, #12]	; (80088ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	200000cc 	.word	0x200000cc

080088b0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bc80      	pop	{r7}
 80088d2:	4770      	bx	lr

080088d4 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e6:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4610      	mov	r0, r2
 80088f4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	2340      	movs	r3, #64	; 0x40
 80088fa:	2101      	movs	r1, #1
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fd51 	bl	800a3a4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008920:	2b01      	cmp	r3, #1
 8008922:	d109      	bne.n	8008938 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4610      	mov	r0, r2
 8008930:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	220a      	movs	r2, #10
 8008950:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008952:	4b03      	ldr	r3, [pc, #12]	; (8008960 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20000104 	.word	0x20000104

08008964 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800896e:	2302      	movs	r3, #2
 8008970:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	4613      	mov	r3, r2
 800899c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80089a4:	2302      	movs	r3, #2
 80089a6:	e01a      	b.n	80089de <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	79fa      	ldrb	r2, [r7, #7]
 80089d4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 fb88 	bl	800a0ec <USBD_LL_Init>

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d006      	beq.n	8008a08 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
 8008a06:	e001      	b.n	8008a0c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008a08:	2302      	movs	r3, #2
 8008a0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fbb3 	bl	800a18c <USBD_LL_Start>

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr

08008a44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a50:	2302      	movs	r3, #2
 8008a52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00c      	beq.n	8008a78 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	78fa      	ldrb	r2, [r7, #3]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	4798      	blx	r3

  return USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fed7 	bl	800986e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ace:	461a      	mov	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d016      	beq.n	8008b12 <USBD_LL_SetupStage+0x6a>
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d81c      	bhi.n	8008b22 <USBD_LL_SetupStage+0x7a>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <USBD_LL_SetupStage+0x4a>
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d008      	beq.n	8008b02 <USBD_LL_SetupStage+0x5a>
 8008af0:	e017      	b.n	8008b22 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f9ca 	bl	8008e94 <USBD_StdDevReq>
      break;
 8008b00:	e01a      	b.n	8008b38 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa2c 	bl	8008f68 <USBD_StdItfReq>
      break;
 8008b10:	e012      	b.n	8008b38 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa6c 	bl	8008ff8 <USBD_StdEPReq>
      break;
 8008b20:	e00a      	b.n	8008b38 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fb8b 	bl	800a24c <USBD_LL_StallEP>
      break;
 8008b36:	bf00      	nop
  }

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b086      	sub	sp, #24
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b50:	7afb      	ldrb	r3, [r7, #11]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d14b      	bne.n	8008bee <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b5c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d134      	bne.n	8008bd2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d919      	bls.n	8008ba8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	1ad2      	subs	r2, r2, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d203      	bcs.n	8008b96 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	e002      	b.n	8008b9c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 ff56 	bl	8009a52 <USBD_CtlContinueRx>
 8008ba6:	e038      	b.n	8008c1a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d105      	bne.n	8008bca <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 ff53 	bl	8009a76 <USBD_CtlSendStatus>
 8008bd0:	e023      	b.n	8008c1a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bd8:	2b05      	cmp	r3, #5
 8008bda:	d11e      	bne.n	8008c1a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008be4:	2100      	movs	r1, #0
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f001 fb30 	bl	800a24c <USBD_LL_StallEP>
 8008bec:	e015      	b.n	8008c1a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00d      	beq.n	8008c16 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d108      	bne.n	8008c16 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	7afa      	ldrb	r2, [r7, #11]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	4798      	blx	r3
 8008c14:	e001      	b.n	8008c1a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c16:	2302      	movs	r3, #2
 8008c18:	e000      	b.n	8008c1c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c32:	7afb      	ldrb	r3, [r7, #11]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d17f      	bne.n	8008d38 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3314      	adds	r3, #20
 8008c3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d15c      	bne.n	8008d02 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d915      	bls.n	8008c80 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	68da      	ldr	r2, [r3, #12]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	1ad2      	subs	r2, r2, r3
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 fec0 	bl	80099f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c72:	2300      	movs	r3, #0
 8008c74:	2200      	movs	r2, #0
 8008c76:	2100      	movs	r1, #0
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f001 fb93 	bl	800a3a4 <USBD_LL_PrepareReceive>
 8008c7e:	e04e      	b.n	8008d1e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	6912      	ldr	r2, [r2, #16]
 8008c88:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c8c:	fb01 f202 	mul.w	r2, r1, r2
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d11c      	bne.n	8008cd0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	689a      	ldr	r2, [r3, #8]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d316      	bcc.n	8008cd0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	689a      	ldr	r2, [r3, #8]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d20f      	bcs.n	8008cd0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fe9c 	bl	80099f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f001 fb6b 	bl	800a3a4 <USBD_LL_PrepareReceive>
 8008cce:	e026      	b.n	8008d1e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d105      	bne.n	8008cf2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008cf2:	2180      	movs	r1, #128	; 0x80
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f001 faa9 	bl	800a24c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 fece 	bl	8009a9c <USBD_CtlReceiveStatus>
 8008d00:	e00d      	b.n	8008d1e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d004      	beq.n	8008d16 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d103      	bne.n	8008d1e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008d16:	2180      	movs	r1, #128	; 0x80
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f001 fa97 	bl	800a24c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d11d      	bne.n	8008d64 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff fe81 	bl	8008a30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d36:	e015      	b.n	8008d64 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00d      	beq.n	8008d60 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d108      	bne.n	8008d60 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	7afa      	ldrb	r2, [r7, #11]
 8008d58:	4611      	mov	r1, r2
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	4798      	blx	r3
 8008d5e:	e001      	b.n	8008d64 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d60:	2302      	movs	r3, #2
 8008d62:	e000      	b.n	8008d66 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d76:	2340      	movs	r3, #64	; 0x40
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fa20 	bl	800a1c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2240      	movs	r2, #64	; 0x40
 8008d8e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d92:	2340      	movs	r3, #64	; 0x40
 8008d94:	2200      	movs	r2, #0
 8008d96:	2180      	movs	r1, #128	; 0x80
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 fa12 	bl	800a1c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2240      	movs	r2, #64	; 0x40
 8008da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d009      	beq.n	8008de6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6852      	ldr	r2, [r2, #4]
 8008dde:	b2d2      	uxtb	r2, r2
 8008de0:	4611      	mov	r1, r2
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
  }

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr

08008e0e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2204      	movs	r2, #4
 8008e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr

08008e36 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b083      	sub	sp, #12
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d105      	bne.n	8008e54 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr

08008e60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d10b      	bne.n	8008e8a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d005      	beq.n	8008eba <USBD_StdDevReq+0x26>
 8008eae:	2b40      	cmp	r3, #64	; 0x40
 8008eb0:	d84f      	bhi.n	8008f52 <USBD_StdDevReq+0xbe>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d009      	beq.n	8008eca <USBD_StdDevReq+0x36>
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	d14b      	bne.n	8008f52 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	4798      	blx	r3
      break;
 8008ec8:	e048      	b.n	8008f5c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	2b09      	cmp	r3, #9
 8008ed0:	d839      	bhi.n	8008f46 <USBD_StdDevReq+0xb2>
 8008ed2:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <USBD_StdDevReq+0x44>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008f29 	.word	0x08008f29
 8008edc:	08008f3d 	.word	0x08008f3d
 8008ee0:	08008f47 	.word	0x08008f47
 8008ee4:	08008f33 	.word	0x08008f33
 8008ee8:	08008f47 	.word	0x08008f47
 8008eec:	08008f0b 	.word	0x08008f0b
 8008ef0:	08008f01 	.word	0x08008f01
 8008ef4:	08008f47 	.word	0x08008f47
 8008ef8:	08008f1f 	.word	0x08008f1f
 8008efc:	08008f15 	.word	0x08008f15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9dc 	bl	80092c0 <USBD_GetDescriptor>
          break;
 8008f08:	e022      	b.n	8008f50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fb3f 	bl	8009590 <USBD_SetAddress>
          break;
 8008f12:	e01d      	b.n	8008f50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fb7e 	bl	8009618 <USBD_SetConfig>
          break;
 8008f1c:	e018      	b.n	8008f50 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fc07 	bl	8009734 <USBD_GetConfig>
          break;
 8008f26:	e013      	b.n	8008f50 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fc37 	bl	800979e <USBD_GetStatus>
          break;
 8008f30:	e00e      	b.n	8008f50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fc65 	bl	8009804 <USBD_SetFeature>
          break;
 8008f3a:	e009      	b.n	8008f50 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fc74 	bl	800982c <USBD_ClrFeature>
          break;
 8008f44:	e004      	b.n	8008f50 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fccc 	bl	80098e6 <USBD_CtlError>
          break;
 8008f4e:	bf00      	nop
      }
      break;
 8008f50:	e004      	b.n	8008f5c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fcc6 	bl	80098e6 <USBD_CtlError>
      break;
 8008f5a:	bf00      	nop
  }

  return ret;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop

08008f68 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	d005      	beq.n	8008f8e <USBD_StdItfReq+0x26>
 8008f82:	2b40      	cmp	r3, #64	; 0x40
 8008f84:	d82e      	bhi.n	8008fe4 <USBD_StdItfReq+0x7c>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <USBD_StdItfReq+0x26>
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	d12a      	bne.n	8008fe4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f94:	3b01      	subs	r3, #1
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d81d      	bhi.n	8008fd6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	889b      	ldrh	r3, [r3, #4]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d813      	bhi.n	8008fcc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	88db      	ldrh	r3, [r3, #6]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d110      	bne.n	8008fe0 <USBD_StdItfReq+0x78>
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10d      	bne.n	8008fe0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fd56 	bl	8009a76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fca:	e009      	b.n	8008fe0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fc89 	bl	80098e6 <USBD_CtlError>
          break;
 8008fd4:	e004      	b.n	8008fe0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fc84 	bl	80098e6 <USBD_CtlError>
          break;
 8008fde:	e000      	b.n	8008fe2 <USBD_StdItfReq+0x7a>
          break;
 8008fe0:	bf00      	nop
      }
      break;
 8008fe2:	e004      	b.n	8008fee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fc7d 	bl	80098e6 <USBD_CtlError>
      break;
 8008fec:	bf00      	nop
  }

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	889b      	ldrh	r3, [r3, #4]
 800900a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009014:	2b40      	cmp	r3, #64	; 0x40
 8009016:	d007      	beq.n	8009028 <USBD_StdEPReq+0x30>
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	f200 8146 	bhi.w	80092aa <USBD_StdEPReq+0x2b2>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <USBD_StdEPReq+0x40>
 8009022:	2b20      	cmp	r3, #32
 8009024:	f040 8141 	bne.w	80092aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	4798      	blx	r3
      break;
 8009036:	e13d      	b.n	80092b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009040:	2b20      	cmp	r3, #32
 8009042:	d10a      	bne.n	800905a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	4798      	blx	r3
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	e12d      	b.n	80092b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2b03      	cmp	r3, #3
 8009060:	d007      	beq.n	8009072 <USBD_StdEPReq+0x7a>
 8009062:	2b03      	cmp	r3, #3
 8009064:	f300 811b 	bgt.w	800929e <USBD_StdEPReq+0x2a6>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d072      	beq.n	8009152 <USBD_StdEPReq+0x15a>
 800906c:	2b01      	cmp	r3, #1
 800906e:	d03a      	beq.n	80090e6 <USBD_StdEPReq+0xee>
 8009070:	e115      	b.n	800929e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009078:	2b02      	cmp	r3, #2
 800907a:	d002      	beq.n	8009082 <USBD_StdEPReq+0x8a>
 800907c:	2b03      	cmp	r3, #3
 800907e:	d015      	beq.n	80090ac <USBD_StdEPReq+0xb4>
 8009080:	e02b      	b.n	80090da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00c      	beq.n	80090a2 <USBD_StdEPReq+0xaa>
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	2b80      	cmp	r3, #128	; 0x80
 800908c:	d009      	beq.n	80090a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 f8da 	bl	800a24c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009098:	2180      	movs	r1, #128	; 0x80
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 f8d6 	bl	800a24c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090a0:	e020      	b.n	80090e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fc1e 	bl	80098e6 <USBD_CtlError>
              break;
 80090aa:	e01b      	b.n	80090e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	885b      	ldrh	r3, [r3, #2]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10e      	bne.n	80090d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <USBD_StdEPReq+0xda>
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b80      	cmp	r3, #128	; 0x80
 80090be:	d008      	beq.n	80090d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	88db      	ldrh	r3, [r3, #6]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d104      	bne.n	80090d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 f8bd 	bl	800a24c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fccf 	bl	8009a76 <USBD_CtlSendStatus>

              break;
 80090d8:	e004      	b.n	80090e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fc02 	bl	80098e6 <USBD_CtlError>
              break;
 80090e2:	bf00      	nop
          }
          break;
 80090e4:	e0e0      	b.n	80092a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d002      	beq.n	80090f6 <USBD_StdEPReq+0xfe>
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d015      	beq.n	8009120 <USBD_StdEPReq+0x128>
 80090f4:	e026      	b.n	8009144 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00c      	beq.n	8009116 <USBD_StdEPReq+0x11e>
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	2b80      	cmp	r3, #128	; 0x80
 8009100:	d009      	beq.n	8009116 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f001 f8a0 	bl	800a24c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800910c:	2180      	movs	r1, #128	; 0x80
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f001 f89c 	bl	800a24c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009114:	e01c      	b.n	8009150 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fbe4 	bl	80098e6 <USBD_CtlError>
              break;
 800911e:	e017      	b.n	8009150 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	885b      	ldrh	r3, [r3, #2]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d112      	bne.n	800914e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 f8a7 	bl	800a28a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fc9a 	bl	8009a76 <USBD_CtlSendStatus>
              }
              break;
 8009142:	e004      	b.n	800914e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fbcd 	bl	80098e6 <USBD_CtlError>
              break;
 800914c:	e000      	b.n	8009150 <USBD_StdEPReq+0x158>
              break;
 800914e:	bf00      	nop
          }
          break;
 8009150:	e0aa      	b.n	80092a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009158:	2b02      	cmp	r3, #2
 800915a:	d002      	beq.n	8009162 <USBD_StdEPReq+0x16a>
 800915c:	2b03      	cmp	r3, #3
 800915e:	d032      	beq.n	80091c6 <USBD_StdEPReq+0x1ce>
 8009160:	e097      	b.n	8009292 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d007      	beq.n	8009178 <USBD_StdEPReq+0x180>
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b80      	cmp	r3, #128	; 0x80
 800916c:	d004      	beq.n	8009178 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fbb8 	bl	80098e6 <USBD_CtlError>
                break;
 8009176:	e091      	b.n	800929c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800917c:	2b00      	cmp	r3, #0
 800917e:	da0b      	bge.n	8009198 <USBD_StdEPReq+0x1a0>
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	3310      	adds	r3, #16
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	4413      	add	r3, r2
 8009194:	3304      	adds	r3, #4
 8009196:	e00b      	b.n	80091b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	3304      	adds	r3, #4
 80091b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2202      	movs	r2, #2
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fbfb 	bl	80099ba <USBD_CtlSendData>
              break;
 80091c4:	e06a      	b.n	800929c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da11      	bge.n	80091f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	f003 020f 	and.w	r2, r3, #15
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	3318      	adds	r3, #24
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d117      	bne.n	8009218 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fb7b 	bl	80098e6 <USBD_CtlError>
                  break;
 80091f0:	e054      	b.n	800929c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	f003 020f 	and.w	r2, r3, #15
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	440b      	add	r3, r1
 8009204:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d104      	bne.n	8009218 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fb68 	bl	80098e6 <USBD_CtlError>
                  break;
 8009216:	e041      	b.n	800929c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800921c:	2b00      	cmp	r3, #0
 800921e:	da0b      	bge.n	8009238 <USBD_StdEPReq+0x240>
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	3310      	adds	r3, #16
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
 8009234:	3304      	adds	r3, #4
 8009236:	e00b      	b.n	8009250 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	3304      	adds	r3, #4
 8009250:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <USBD_StdEPReq+0x266>
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b80      	cmp	r3, #128	; 0x80
 800925c:	d103      	bne.n	8009266 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	e00e      	b.n	8009284 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f001 f82c 	bl	800a2c8 <USBD_LL_IsStallEP>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2201      	movs	r2, #1
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	e002      	b.n	8009284 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2202      	movs	r2, #2
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fb95 	bl	80099ba <USBD_CtlSendData>
              break;
 8009290:	e004      	b.n	800929c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fb26 	bl	80098e6 <USBD_CtlError>
              break;
 800929a:	bf00      	nop
          }
          break;
 800929c:	e004      	b.n	80092a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fb20 	bl	80098e6 <USBD_CtlError>
          break;
 80092a6:	bf00      	nop
      }
      break;
 80092a8:	e004      	b.n	80092b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fb1a 	bl	80098e6 <USBD_CtlError>
      break;
 80092b2:	bf00      	nop
  }

  return ret;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	885b      	ldrh	r3, [r3, #2]
 80092da:	0a1b      	lsrs	r3, r3, #8
 80092dc:	b29b      	uxth	r3, r3
 80092de:	3b01      	subs	r3, #1
 80092e0:	2b06      	cmp	r3, #6
 80092e2:	f200 8128 	bhi.w	8009536 <USBD_GetDescriptor+0x276>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <USBD_GetDescriptor+0x2c>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	08009309 	.word	0x08009309
 80092f0:	08009321 	.word	0x08009321
 80092f4:	08009361 	.word	0x08009361
 80092f8:	08009537 	.word	0x08009537
 80092fc:	08009537 	.word	0x08009537
 8009300:	080094d7 	.word	0x080094d7
 8009304:	08009503 	.word	0x08009503
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7c12      	ldrb	r2, [r2, #16]
 8009314:	f107 0108 	add.w	r1, r7, #8
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
 800931c:	60f8      	str	r0, [r7, #12]
      break;
 800931e:	e112      	b.n	8009546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7c1b      	ldrb	r3, [r3, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10d      	bne.n	8009344 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f107 0208 	add.w	r2, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3301      	adds	r3, #1
 800933e:	2202      	movs	r2, #2
 8009340:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009342:	e100      	b.n	8009546 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	f107 0208 	add.w	r2, r7, #8
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3301      	adds	r3, #1
 800935a:	2202      	movs	r2, #2
 800935c:	701a      	strb	r2, [r3, #0]
      break;
 800935e:	e0f2      	b.n	8009546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	885b      	ldrh	r3, [r3, #2]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b05      	cmp	r3, #5
 8009368:	f200 80ac 	bhi.w	80094c4 <USBD_GetDescriptor+0x204>
 800936c:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <USBD_GetDescriptor+0xb4>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	0800938d 	.word	0x0800938d
 8009378:	080093c1 	.word	0x080093c1
 800937c:	080093f5 	.word	0x080093f5
 8009380:	08009429 	.word	0x08009429
 8009384:	0800945d 	.word	0x0800945d
 8009388:	08009491 	.word	0x08009491
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ae:	e091      	b.n	80094d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fa97 	bl	80098e6 <USBD_CtlError>
            err++;
 80093b8:	7afb      	ldrb	r3, [r7, #11]
 80093ba:	3301      	adds	r3, #1
 80093bc:	72fb      	strb	r3, [r7, #11]
          break;
 80093be:	e089      	b.n	80094d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	7c12      	ldrb	r2, [r2, #16]
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e2:	e077      	b.n	80094d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa7d 	bl	80098e6 <USBD_CtlError>
            err++;
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	3301      	adds	r3, #1
 80093f0:	72fb      	strb	r3, [r7, #11]
          break;
 80093f2:	e06f      	b.n	80094d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009416:	e05d      	b.n	80094d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa63 	bl	80098e6 <USBD_CtlError>
            err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
          break;
 8009426:	e055      	b.n	80094d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	7c12      	ldrb	r2, [r2, #16]
 8009440:	f107 0108 	add.w	r1, r7, #8
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
 8009448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944a:	e043      	b.n	80094d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa49 	bl	80098e6 <USBD_CtlError>
            err++;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	3301      	adds	r3, #1
 8009458:	72fb      	strb	r3, [r7, #11]
          break;
 800945a:	e03b      	b.n	80094d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7c12      	ldrb	r2, [r2, #16]
 8009474:	f107 0108 	add.w	r1, r7, #8
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800947e:	e029      	b.n	80094d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa2f 	bl	80098e6 <USBD_CtlError>
            err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
          break;
 800948e:	e021      	b.n	80094d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	f107 0108 	add.w	r1, r7, #8
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094b2:	e00f      	b.n	80094d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa15 	bl	80098e6 <USBD_CtlError>
            err++;
 80094bc:	7afb      	ldrb	r3, [r7, #11]
 80094be:	3301      	adds	r3, #1
 80094c0:	72fb      	strb	r3, [r7, #11]
          break;
 80094c2:	e007      	b.n	80094d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fa0d 	bl	80098e6 <USBD_CtlError>
          err++;
 80094cc:	7afb      	ldrb	r3, [r7, #11]
 80094ce:	3301      	adds	r3, #1
 80094d0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80094d2:	e038      	b.n	8009546 <USBD_GetDescriptor+0x286>
 80094d4:	e037      	b.n	8009546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	7c1b      	ldrb	r3, [r3, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d109      	bne.n	80094f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e6:	f107 0208 	add.w	r2, r7, #8
 80094ea:	4610      	mov	r0, r2
 80094ec:	4798      	blx	r3
 80094ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f0:	e029      	b.n	8009546 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f9f6 	bl	80098e6 <USBD_CtlError>
        err++;
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	3301      	adds	r3, #1
 80094fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009500:	e021      	b.n	8009546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7c1b      	ldrb	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10d      	bne.n	8009526 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009512:	f107 0208 	add.w	r2, r7, #8
 8009516:	4610      	mov	r0, r2
 8009518:	4798      	blx	r3
 800951a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	2207      	movs	r2, #7
 8009522:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009524:	e00f      	b.n	8009546 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f9dc 	bl	80098e6 <USBD_CtlError>
        err++;
 800952e:	7afb      	ldrb	r3, [r7, #11]
 8009530:	3301      	adds	r3, #1
 8009532:	72fb      	strb	r3, [r7, #11]
      break;
 8009534:	e007      	b.n	8009546 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9d4 	bl	80098e6 <USBD_CtlError>
      err++;
 800953e:	7afb      	ldrb	r3, [r7, #11]
 8009540:	3301      	adds	r3, #1
 8009542:	72fb      	strb	r3, [r7, #11]
      break;
 8009544:	bf00      	nop
  }

  if (err != 0U)
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11c      	bne.n	8009586 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800954c:	893b      	ldrh	r3, [r7, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d011      	beq.n	8009576 <USBD_GetDescriptor+0x2b6>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	88db      	ldrh	r3, [r3, #6]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00d      	beq.n	8009576 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	88da      	ldrh	r2, [r3, #6]
 800955e:	893b      	ldrh	r3, [r7, #8]
 8009560:	4293      	cmp	r3, r2
 8009562:	bf28      	it	cs
 8009564:	4613      	movcs	r3, r2
 8009566:	b29b      	uxth	r3, r3
 8009568:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800956a:	893b      	ldrh	r3, [r7, #8]
 800956c:	461a      	mov	r2, r3
 800956e:	68f9      	ldr	r1, [r7, #12]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fa22 	bl	80099ba <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	88db      	ldrh	r3, [r3, #6]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fa79 	bl	8009a76 <USBD_CtlSendStatus>
 8009584:	e000      	b.n	8009588 <USBD_GetDescriptor+0x2c8>
    return;
 8009586:	bf00      	nop
    }
  }
}
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop

08009590 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	889b      	ldrh	r3, [r3, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d130      	bne.n	8009604 <USBD_SetAddress+0x74>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	88db      	ldrh	r3, [r3, #6]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d12c      	bne.n	8009604 <USBD_SetAddress+0x74>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	885b      	ldrh	r3, [r3, #2]
 80095ae:	2b7f      	cmp	r3, #127	; 0x7f
 80095b0:	d828      	bhi.n	8009604 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	885b      	ldrh	r3, [r3, #2]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d104      	bne.n	80095d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f98b 	bl	80098e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d0:	e01d      	b.n	800960e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fe9e 	bl	800a320 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fa46 	bl	8009a76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f8:	e009      	b.n	800960e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009602:	e004      	b.n	800960e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f96d 	bl	80098e6 <USBD_CtlError>
  }
}
 800960c:	bf00      	nop
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	885b      	ldrh	r3, [r3, #2]
 8009626:	b2da      	uxtb	r2, r3
 8009628:	4b41      	ldr	r3, [pc, #260]	; (8009730 <USBD_SetConfig+0x118>)
 800962a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800962c:	4b40      	ldr	r3, [pc, #256]	; (8009730 <USBD_SetConfig+0x118>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d904      	bls.n	800963e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f955 	bl	80098e6 <USBD_CtlError>
 800963c:	e075      	b.n	800972a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009644:	2b02      	cmp	r3, #2
 8009646:	d002      	beq.n	800964e <USBD_SetConfig+0x36>
 8009648:	2b03      	cmp	r3, #3
 800964a:	d023      	beq.n	8009694 <USBD_SetConfig+0x7c>
 800964c:	e062      	b.n	8009714 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800964e:	4b38      	ldr	r3, [pc, #224]	; (8009730 <USBD_SetConfig+0x118>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d01a      	beq.n	800968c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009656:	4b36      	ldr	r3, [pc, #216]	; (8009730 <USBD_SetConfig+0x118>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2203      	movs	r2, #3
 8009664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009668:	4b31      	ldr	r3, [pc, #196]	; (8009730 <USBD_SetConfig+0x118>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff f9e8 	bl	8008a44 <USBD_SetClassConfig>
 8009674:	4603      	mov	r3, r0
 8009676:	2b02      	cmp	r3, #2
 8009678:	d104      	bne.n	8009684 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f932 	bl	80098e6 <USBD_CtlError>
            return;
 8009682:	e052      	b.n	800972a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f9f6 	bl	8009a76 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800968a:	e04e      	b.n	800972a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f9f2 	bl	8009a76 <USBD_CtlSendStatus>
        break;
 8009692:	e04a      	b.n	800972a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009694:	4b26      	ldr	r3, [pc, #152]	; (8009730 <USBD_SetConfig+0x118>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d112      	bne.n	80096c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80096a4:	4b22      	ldr	r3, [pc, #136]	; (8009730 <USBD_SetConfig+0x118>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80096ae:	4b20      	ldr	r3, [pc, #128]	; (8009730 <USBD_SetConfig+0x118>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff f9e4 	bl	8008a82 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f9db 	bl	8009a76 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80096c0:	e033      	b.n	800972a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80096c2:	4b1b      	ldr	r3, [pc, #108]	; (8009730 <USBD_SetConfig+0x118>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d01d      	beq.n	800970c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff f9d2 	bl	8008a82 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80096de:	4b14      	ldr	r3, [pc, #80]	; (8009730 <USBD_SetConfig+0x118>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096e8:	4b11      	ldr	r3, [pc, #68]	; (8009730 <USBD_SetConfig+0x118>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff f9a8 	bl	8008a44 <USBD_SetClassConfig>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d104      	bne.n	8009704 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f8f2 	bl	80098e6 <USBD_CtlError>
            return;
 8009702:	e012      	b.n	800972a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f9b6 	bl	8009a76 <USBD_CtlSendStatus>
        break;
 800970a:	e00e      	b.n	800972a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f9b2 	bl	8009a76 <USBD_CtlSendStatus>
        break;
 8009712:	e00a      	b.n	800972a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f8e5 	bl	80098e6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800971c:	4b04      	ldr	r3, [pc, #16]	; (8009730 <USBD_SetConfig+0x118>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff f9ad 	bl	8008a82 <USBD_ClrClassConfig>
        break;
 8009728:	bf00      	nop
    }
  }
}
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	20000328 	.word	0x20000328

08009734 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	88db      	ldrh	r3, [r3, #6]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d004      	beq.n	8009750 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f8cc 	bl	80098e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800974e:	e022      	b.n	8009796 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009756:	2b02      	cmp	r3, #2
 8009758:	dc02      	bgt.n	8009760 <USBD_GetConfig+0x2c>
 800975a:	2b00      	cmp	r3, #0
 800975c:	dc03      	bgt.n	8009766 <USBD_GetConfig+0x32>
 800975e:	e015      	b.n	800978c <USBD_GetConfig+0x58>
 8009760:	2b03      	cmp	r3, #3
 8009762:	d00b      	beq.n	800977c <USBD_GetConfig+0x48>
 8009764:	e012      	b.n	800978c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3308      	adds	r3, #8
 8009770:	2201      	movs	r2, #1
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f920 	bl	80099ba <USBD_CtlSendData>
        break;
 800977a:	e00c      	b.n	8009796 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3304      	adds	r3, #4
 8009780:	2201      	movs	r2, #1
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f918 	bl	80099ba <USBD_CtlSendData>
        break;
 800978a:	e004      	b.n	8009796 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f8a9 	bl	80098e6 <USBD_CtlError>
        break;
 8009794:	bf00      	nop
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b082      	sub	sp, #8
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ae:	3b01      	subs	r3, #1
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d81e      	bhi.n	80097f2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	88db      	ldrh	r3, [r3, #6]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d004      	beq.n	80097c6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f891 	bl	80098e6 <USBD_CtlError>
        break;
 80097c4:	e01a      	b.n	80097fc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d005      	beq.n	80097e2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	f043 0202 	orr.w	r2, r3, #2
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	330c      	adds	r3, #12
 80097e6:	2202      	movs	r2, #2
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f8e5 	bl	80099ba <USBD_CtlSendData>
      break;
 80097f0:	e004      	b.n	80097fc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f876 	bl	80098e6 <USBD_CtlError>
      break;
 80097fa:	bf00      	nop
  }
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	885b      	ldrh	r3, [r3, #2]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d106      	bne.n	8009824 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f929 	bl	8009a76 <USBD_CtlSendStatus>
  }
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800983c:	3b01      	subs	r3, #1
 800983e:	2b02      	cmp	r3, #2
 8009840:	d80b      	bhi.n	800985a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	885b      	ldrh	r3, [r3, #2]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d10c      	bne.n	8009864 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f90f 	bl	8009a76 <USBD_CtlSendStatus>
      }
      break;
 8009858:	e004      	b.n	8009864 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f842 	bl	80098e6 <USBD_CtlError>
      break;
 8009862:	e000      	b.n	8009866 <USBD_ClrFeature+0x3a>
      break;
 8009864:	bf00      	nop
  }
}
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781a      	ldrb	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	785a      	ldrb	r2, [r3, #1]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	3302      	adds	r3, #2
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	b29a      	uxth	r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	3303      	adds	r3, #3
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	021b      	lsls	r3, r3, #8
 800989a:	b29b      	uxth	r3, r3
 800989c:	4413      	add	r3, r2
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	3304      	adds	r3, #4
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	3305      	adds	r3, #5
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	021b      	lsls	r3, r3, #8
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	4413      	add	r3, r2
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	3306      	adds	r3, #6
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	3307      	adds	r3, #7
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	4413      	add	r3, r2
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	80da      	strh	r2, [r3, #6]

}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bc80      	pop	{r7}
 80098e4:	4770      	bx	lr

080098e6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80098f0:	2180      	movs	r1, #128	; 0x80
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fcaa 	bl	800a24c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80098f8:	2100      	movs	r1, #0
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fca6 	bl	800a24c <USBD_LL_StallEP>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d032      	beq.n	8009984 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 f834 	bl	800998c <USBD_GetLen>
 8009924:	4603      	mov	r3, r0
 8009926:	3301      	adds	r3, #1
 8009928:	b29b      	uxth	r3, r3
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	75fa      	strb	r2, [r7, #23]
 8009938:	461a      	mov	r2, r3
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4413      	add	r3, r2
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	7812      	ldrb	r2, [r2, #0]
 8009942:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009944:	7dfb      	ldrb	r3, [r7, #23]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	75fa      	strb	r2, [r7, #23]
 800994a:	461a      	mov	r2, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4413      	add	r3, r2
 8009950:	2203      	movs	r2, #3
 8009952:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009954:	e012      	b.n	800997c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	60fa      	str	r2, [r7, #12]
 800995c:	7dfa      	ldrb	r2, [r7, #23]
 800995e:	1c51      	adds	r1, r2, #1
 8009960:	75f9      	strb	r1, [r7, #23]
 8009962:	4611      	mov	r1, r2
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	440a      	add	r2, r1
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	75fa      	strb	r2, [r7, #23]
 8009972:	461a      	mov	r2, r3
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4413      	add	r3, r2
 8009978:	2200      	movs	r2, #0
 800997a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e8      	bne.n	8009956 <USBD_GetString+0x4e>
    }
  }
}
 8009984:	bf00      	nop
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009998:	e005      	b.n	80099a6 <USBD_GetLen+0x1a>
  {
    len++;
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	3301      	adds	r3, #1
 800999e:	73fb      	strb	r3, [r7, #15]
    buf++;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3301      	adds	r3, #1
 80099a4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1f5      	bne.n	800999a <USBD_GetLen+0xe>
  }

  return len;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bc80      	pop	{r7}
 80099b8:	4770      	bx	lr

080099ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	4613      	mov	r3, r2
 80099c6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80099d0:	88fa      	ldrh	r2, [r7, #6]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80099d6:	88fa      	ldrh	r2, [r7, #6]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099dc:	88fb      	ldrh	r3, [r7, #6]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	2100      	movs	r1, #0
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 fcbb 	bl	800a35e <USBD_LL_Transmit>

  return USBD_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	4613      	mov	r3, r2
 80099fe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a00:	88fb      	ldrh	r3, [r7, #6]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	2100      	movs	r1, #0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 fca9 	bl	800a35e <USBD_LL_Transmit>

  return USBD_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	4613      	mov	r3, r2
 8009a22:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2203      	movs	r2, #3
 8009a28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a2c:	88fa      	ldrh	r2, [r7, #6]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009a34:	88fa      	ldrh	r2, [r7, #6]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a3c:	88fb      	ldrh	r3, [r7, #6]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	2100      	movs	r1, #0
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 fcae 	bl	800a3a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	2100      	movs	r1, #0
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fc9c 	bl	800a3a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2204      	movs	r2, #4
 8009a82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a86:	2300      	movs	r3, #0
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc66 	bl	800a35e <USBD_LL_Transmit>

  return USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2205      	movs	r2, #5
 8009aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009aac:	2300      	movs	r3, #0
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fc76 	bl	800a3a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	4912      	ldr	r1, [pc, #72]	; (8009b14 <MX_USB_DEVICE_Init+0x50>)
 8009acc:	4812      	ldr	r0, [pc, #72]	; (8009b18 <MX_USB_DEVICE_Init+0x54>)
 8009ace:	f7fe ff5f 	bl	8008990 <USBD_Init>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ad8:	f7f7 ff06 	bl	80018e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009adc:	490f      	ldr	r1, [pc, #60]	; (8009b1c <MX_USB_DEVICE_Init+0x58>)
 8009ade:	480e      	ldr	r0, [pc, #56]	; (8009b18 <MX_USB_DEVICE_Init+0x54>)
 8009ae0:	f7fe ff81 	bl	80089e6 <USBD_RegisterClass>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009aea:	f7f7 fefd 	bl	80018e8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009aee:	490c      	ldr	r1, [pc, #48]	; (8009b20 <MX_USB_DEVICE_Init+0x5c>)
 8009af0:	4809      	ldr	r0, [pc, #36]	; (8009b18 <MX_USB_DEVICE_Init+0x54>)
 8009af2:	f7fe ff37 	bl	8008964 <USBD_CUSTOM_HID_RegisterInterface>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009afc:	f7f7 fef4 	bl	80018e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b00:	4805      	ldr	r0, [pc, #20]	; (8009b18 <MX_USB_DEVICE_Init+0x54>)
 8009b02:	f7fe ff89 	bl	8008a18 <USBD_Start>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b0c:	f7f7 feec 	bl	80018e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b10:	bf00      	nop
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20000158 	.word	0x20000158
 8009b18:	2000032c 	.word	0x2000032c
 8009b1c:	2000003c 	.word	0x2000003c
 8009b20:	20000148 	.word	0x20000148

08009b24 <__NVIC_SystemReset>:
{
 8009b24:	b480      	push	{r7}
 8009b26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009b28:	f3bf 8f4f 	dsb	sy
}
 8009b2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009b2e:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <__NVIC_SystemReset+0x24>)
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009b36:	4904      	ldr	r1, [pc, #16]	; (8009b48 <__NVIC_SystemReset+0x24>)
 8009b38:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <__NVIC_SystemReset+0x28>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009b3e:	f3bf 8f4f 	dsb	sy
}
 8009b42:	bf00      	nop
    __NOP();
 8009b44:	bf00      	nop
 8009b46:	e7fd      	b.n	8009b44 <__NVIC_SystemReset+0x20>
 8009b48:	e000ed00 	.word	0xe000ed00
 8009b4c:	05fa0004 	.word	0x05fa0004

08009b50 <save_to_flash>:
  */

/* USER CODE BEGIN PRIVATE_MACRO */

void save_to_flash(uint8_t *data)
{
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	b08f      	sub	sp, #60	; 0x3c
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	466b      	mov	r3, sp
 8009b5c:	603b      	str	r3, [r7, #0]
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7f6 faf6 	bl	8000150 <strlen>
 8009b64:	4603      	mov	r3, r0
 8009b66:	089e      	lsrs	r6, r3, #2
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7f6 faf1 	bl	8000150 <strlen>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f003 0303 	and.w	r3, r3, #3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bf14      	ite	ne
 8009b78:	2301      	movne	r3, #1
 8009b7a:	2300      	moveq	r3, #0
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	18f1      	adds	r1, r6, r3
 8009b80:	460b      	mov	r3, r1
 8009b82:	3b01      	subs	r3, #1
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
 8009b86:	2300      	movs	r3, #0
 8009b88:	4688      	mov	r8, r1
 8009b8a:	4699      	mov	r9, r3
 8009b8c:	f04f 0200 	mov.w	r2, #0
 8009b90:	f04f 0300 	mov.w	r3, #0
 8009b94:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009b98:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009b9c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	461d      	mov	r5, r3
 8009ba6:	f04f 0200 	mov.w	r2, #0
 8009baa:	f04f 0300 	mov.w	r3, #0
 8009bae:	016b      	lsls	r3, r5, #5
 8009bb0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009bb4:	0162      	lsls	r2, r4, #5
 8009bb6:	008b      	lsls	r3, r1, #2
 8009bb8:	3307      	adds	r3, #7
 8009bba:	08db      	lsrs	r3, r3, #3
 8009bbc:	00db      	lsls	r3, r3, #3
 8009bbe:	ebad 0d03 	sub.w	sp, sp, r3
 8009bc2:	466b      	mov	r3, sp
 8009bc4:	3303      	adds	r3, #3
 8009bc6:	089b      	lsrs	r3, r3, #2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8009bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bce:	f7f6 fabf 	bl	8000150 <strlen>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bda:	f000 fc8f 	bl	800a4fc <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be2:	f000 fc93 	bl	800a50c <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8009be6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be8:	f7f6 fab2 	bl	8000150 <strlen>
 8009bec:	4603      	mov	r3, r0
 8009bee:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8009bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bf2:	f7f6 faad 	bl	8000150 <strlen>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f003 0303 	and.w	r3, r3, #3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	bf14      	ite	ne
 8009c00:	2301      	movne	r3, #1
 8009c02:	2300      	moveq	r3, #0
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8009c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7f6 faa0 	bl	8000150 <strlen>
 8009c10:	4603      	mov	r3, r0
 8009c12:	0a9b      	lsrs	r3, r3, #10
									+ (int)((strlen((char*)data)%page_size) != 0);
 8009c14:	b29c      	uxth	r4, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7f6 fa9a 	bl	8000150 <strlen>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	bf14      	ite	ne
 8009c26:	2301      	movne	r3, #1
 8009c28:	2300      	moveq	r3, #0
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	4423      	add	r3, r4
 8009c30:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8009c32:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8009c34:	f7f9 f81c 	bl	8002c70 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 8009c38:	f7f9 f850 	bl	8002cdc <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 8009c40:	4b21      	ldr	r3, [pc, #132]	; (8009cc8 <save_to_flash+0x178>)
 8009c42:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 8009c44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8009c52:	f107 0214 	add.w	r2, r7, #20
 8009c56:	f107 0318 	add.w	r3, r7, #24
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7f9 f91b 	bl	8002e98 <HAL_FLASHEx_Erase>
 8009c62:	4603      	mov	r3, r0
 8009c64:	72fb      	strb	r3, [r7, #11]
	  while(index < data_length)
 8009c66:	e020      	b.n	8009caa <save_to_flash+0x15a>
	  {
		  if (status == HAL_OK)
 8009c68:	7afb      	ldrb	r3, [r7, #11]
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d11c      	bne.n	8009caa <save_to_flash+0x15a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8009c76:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c82:	2200      	movs	r2, #0
 8009c84:	469a      	mov	sl, r3
 8009c86:	4693      	mov	fp, r2
 8009c88:	4652      	mov	r2, sl
 8009c8a:	465b      	mov	r3, fp
 8009c8c:	2002      	movs	r0, #2
 8009c8e:	f7f8 ff7f 	bl	8002b90 <HAL_FLASH_Program>
 8009c92:	4603      	mov	r3, r0
 8009c94:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 8009c96:	7afb      	ldrb	r3, [r7, #11]
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d105      	bne.n	8009caa <save_to_flash+0x15a>
			  {
				  write_cnt += 4;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	613b      	str	r3, [r7, #16]
				  index++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60fb      	str	r3, [r7, #12]
	  while(index < data_length)
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d3da      	bcc.n	8009c68 <save_to_flash+0x118>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8009cb2:	f7f9 f82f 	bl	8002d14 <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 8009cb6:	f7f9 f801 	bl	8002cbc <HAL_FLASH_Lock>
 8009cba:	f8d7 d000 	ldr.w	sp, [r7]
}
 8009cbe:	bf00      	nop
 8009cc0:	373c      	adds	r7, #60	; 0x3c
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc8:	08019000 	.word	0x08019000

08009ccc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009cd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bc80      	pop	{r7}
 8009cd8:	4770      	bx	lr

08009cda <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009cde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bc80      	pop	{r7}
 8009ce6:	4770      	bx	lr

08009ce8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t * state)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

    static uint8_t position;
	static char * data_to_send[0xC0]; //0x40 * 3

    if (state[0] == 'I'){
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b49      	cmp	r3, #73	; 0x49
 8009cf6:	d104      	bne.n	8009d02 <CUSTOM_HID_OutEvent_FS+0x1a>
		position = 0;
 8009cf8:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <CUSTOM_HID_OutEvent_FS+0x5c>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
		return 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e01c      	b.n	8009d3c <CUSTOM_HID_OutEvent_FS+0x54>
	}

    //char * buffer[0x40];
    //memcpy(buffer, state, 0x40);

    memcpy(&data_to_send[position], state, 0x40);
 8009d02:	4b10      	ldr	r3, [pc, #64]	; (8009d44 <CUSTOM_HID_OutEvent_FS+0x5c>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4a0f      	ldr	r2, [pc, #60]	; (8009d48 <CUSTOM_HID_OutEvent_FS+0x60>)
 8009d0a:	4413      	add	r3, r2
 8009d0c:	2240      	movs	r2, #64	; 0x40
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fbe5 	bl	800a4e0 <memcpy>
    position = position+16;
 8009d16:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <CUSTOM_HID_OutEvent_FS+0x5c>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	3310      	adds	r3, #16
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <CUSTOM_HID_OutEvent_FS+0x5c>)
 8009d20:	701a      	strb	r2, [r3, #0]

	if (position >= 48){  //informa que a terceira linha foi recebida
 8009d22:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <CUSTOM_HID_OutEvent_FS+0x5c>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b2f      	cmp	r3, #47	; 0x2f
 8009d28:	d907      	bls.n	8009d3a <CUSTOM_HID_OutEvent_FS+0x52>
	    //HAL_UART_Transmit(&huart1, (uint8_t*) data_to_send, 0xC0, 100);
	    position = 0;
 8009d2a:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <CUSTOM_HID_OutEvent_FS+0x5c>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	701a      	strb	r2, [r3, #0]
		save_to_flash((uint8_t *)data_to_send);
 8009d30:	4805      	ldr	r0, [pc, #20]	; (8009d48 <CUSTOM_HID_OutEvent_FS+0x60>)
 8009d32:	f7ff ff0d 	bl	8009b50 <save_to_flash>
		NVIC_SystemReset();
 8009d36:	f7ff fef5 	bl	8009b24 <__NVIC_SystemReset>
//		#endif
//		  for(;;) {
//			/* wait until reset */
//		  }
	}
	return (USBD_OK);
 8009d3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	200005f0 	.word	0x200005f0
 8009d48:	200005f4 	.word	0x200005f4

08009d4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4603      	mov	r3, r0
 8009d54:	6039      	str	r1, [r7, #0]
 8009d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2212      	movs	r2, #18
 8009d5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d5e:	4b03      	ldr	r3, [pc, #12]	; (8009d6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bc80      	pop	{r7}
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	20000174 	.word	0x20000174

08009d70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	6039      	str	r1, [r7, #0]
 8009d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2204      	movs	r2, #4
 8009d80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d82:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	20000188 	.word	0x20000188

08009d94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d105      	bne.n	8009db2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	4907      	ldr	r1, [pc, #28]	; (8009dc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009daa:	4808      	ldr	r0, [pc, #32]	; (8009dcc <USBD_FS_ProductStrDescriptor+0x38>)
 8009dac:	f7ff fdac 	bl	8009908 <USBD_GetString>
 8009db0:	e004      	b.n	8009dbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	4904      	ldr	r1, [pc, #16]	; (8009dc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009db6:	4805      	ldr	r0, [pc, #20]	; (8009dcc <USBD_FS_ProductStrDescriptor+0x38>)
 8009db8:	f7ff fda6 	bl	8009908 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dbc:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200008f4 	.word	0x200008f4
 8009dcc:	0800b714 	.word	0x0800b714

08009dd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	6039      	str	r1, [r7, #0]
 8009dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	4904      	ldr	r1, [pc, #16]	; (8009df0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009de0:	4804      	ldr	r0, [pc, #16]	; (8009df4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009de2:	f7ff fd91 	bl	8009908 <USBD_GetString>
  return USBD_StrDesc;
 8009de6:	4b02      	ldr	r3, [pc, #8]	; (8009df0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	200008f4 	.word	0x200008f4
 8009df4:	0800b728 	.word	0x0800b728

08009df8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	221a      	movs	r2, #26
 8009e08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e0a:	f000 f843 	bl	8009e94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e0e:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	2000018c 	.word	0x2000018c

08009e1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4907      	ldr	r1, [pc, #28]	; (8009e50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e32:	4808      	ldr	r0, [pc, #32]	; (8009e54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e34:	f7ff fd68 	bl	8009908 <USBD_GetString>
 8009e38:	e004      	b.n	8009e44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	4904      	ldr	r1, [pc, #16]	; (8009e50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e3e:	4805      	ldr	r0, [pc, #20]	; (8009e54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e40:	f7ff fd62 	bl	8009908 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e44:	4b02      	ldr	r3, [pc, #8]	; (8009e50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	200008f4 	.word	0x200008f4
 8009e54:	0800b738 	.word	0x0800b738

08009e58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	4907      	ldr	r1, [pc, #28]	; (8009e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e6e:	4808      	ldr	r0, [pc, #32]	; (8009e90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e70:	f7ff fd4a 	bl	8009908 <USBD_GetString>
 8009e74:	e004      	b.n	8009e80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	4904      	ldr	r1, [pc, #16]	; (8009e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e7a:	4805      	ldr	r0, [pc, #20]	; (8009e90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e7c:	f7ff fd44 	bl	8009908 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e80:	4b02      	ldr	r3, [pc, #8]	; (8009e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	200008f4 	.word	0x200008f4
 8009e90:	0800b744 	.word	0x0800b744

08009e94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ed8 <Get_SerialNum+0x44>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ea0:	4b0e      	ldr	r3, [pc, #56]	; (8009edc <Get_SerialNum+0x48>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ea6:	4b0e      	ldr	r3, [pc, #56]	; (8009ee0 <Get_SerialNum+0x4c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d009      	beq.n	8009ece <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009eba:	2208      	movs	r2, #8
 8009ebc:	4909      	ldr	r1, [pc, #36]	; (8009ee4 <Get_SerialNum+0x50>)
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 f814 	bl	8009eec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ec4:	2204      	movs	r2, #4
 8009ec6:	4908      	ldr	r1, [pc, #32]	; (8009ee8 <Get_SerialNum+0x54>)
 8009ec8:	68b8      	ldr	r0, [r7, #8]
 8009eca:	f000 f80f 	bl	8009eec <IntToUnicode>
  }
}
 8009ece:	bf00      	nop
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	1ffff7e8 	.word	0x1ffff7e8
 8009edc:	1ffff7ec 	.word	0x1ffff7ec
 8009ee0:	1ffff7f0 	.word	0x1ffff7f0
 8009ee4:	2000018e 	.word	0x2000018e
 8009ee8:	2000019e 	.word	0x2000019e

08009eec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]
 8009f02:	e027      	b.n	8009f54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	0f1b      	lsrs	r3, r3, #28
 8009f08:	2b09      	cmp	r3, #9
 8009f0a:	d80b      	bhi.n	8009f24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	0f1b      	lsrs	r3, r3, #28
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	4619      	mov	r1, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	440b      	add	r3, r1
 8009f1c:	3230      	adds	r2, #48	; 0x30
 8009f1e:	b2d2      	uxtb	r2, r2
 8009f20:	701a      	strb	r2, [r3, #0]
 8009f22:	e00a      	b.n	8009f3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	0f1b      	lsrs	r3, r3, #28
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	005b      	lsls	r3, r3, #1
 8009f2e:	4619      	mov	r1, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	440b      	add	r3, r1
 8009f34:	3237      	adds	r2, #55	; 0x37
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
 8009f42:	005b      	lsls	r3, r3, #1
 8009f44:	3301      	adds	r3, #1
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	4413      	add	r3, r2
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
 8009f50:	3301      	adds	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
 8009f54:	7dfa      	ldrb	r2, [r7, #23]
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d3d3      	bcc.n	8009f04 <IntToUnicode+0x18>
  }
}
 8009f5c:	bf00      	nop
 8009f5e:	bf00      	nop
 8009f60:	371c      	adds	r7, #28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bc80      	pop	{r7}
 8009f66:	4770      	bx	lr

08009f68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a0d      	ldr	r2, [pc, #52]	; (8009fac <HAL_PCD_MspInit+0x44>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d113      	bne.n	8009fa2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f7a:	4b0d      	ldr	r3, [pc, #52]	; (8009fb0 <HAL_PCD_MspInit+0x48>)
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	4a0c      	ldr	r2, [pc, #48]	; (8009fb0 <HAL_PCD_MspInit+0x48>)
 8009f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f84:	61d3      	str	r3, [r2, #28]
 8009f86:	4b0a      	ldr	r3, [pc, #40]	; (8009fb0 <HAL_PCD_MspInit+0x48>)
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009f92:	2200      	movs	r2, #0
 8009f94:	2100      	movs	r1, #0
 8009f96:	2014      	movs	r0, #20
 8009f98:	f7f8 fbd5 	bl	8002746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009f9c:	2014      	movs	r0, #20
 8009f9e:	f7f8 fbee 	bl	800277e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fa2:	bf00      	nop
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	40005c00 	.word	0x40005c00
 8009fb0:	40021000 	.word	0x40021000

08009fb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4610      	mov	r0, r2
 8009fcc:	f7fe fd6c 	bl	8008aa8 <USBD_LL_SetupStage>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009fea:	78fa      	ldrb	r2, [r7, #3]
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	440b      	add	r3, r1
 8009ff8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	78fb      	ldrb	r3, [r7, #3]
 800a000:	4619      	mov	r1, r3
 800a002:	f7fe fd9e 	bl	8008b42 <USBD_LL_DataOutStage>
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	460b      	mov	r3, r1
 800a018:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	4613      	mov	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	440b      	add	r3, r1
 800a02e:	333c      	adds	r3, #60	; 0x3c
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	4619      	mov	r1, r3
 800a036:	f7fe fdf5 	bl	8008c24 <USBD_LL_DataInStage>
}
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe ff05 	bl	8008e60 <USBD_LL_SOF>
}
 800a056:	bf00      	nop
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a066:	2301      	movs	r3, #1
 800a068:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d001      	beq.n	800a076 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a072:	f7f7 fc39 	bl	80018e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a07c:	7bfa      	ldrb	r2, [r7, #15]
 800a07e:	4611      	mov	r1, r2
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe feb5 	bl	8008df0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fe6e 	bl	8008d6e <USBD_LL_Reset>
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe feaf 	bl	8008e0e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0b8:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <HAL_PCD_SuspendCallback+0x30>)
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	4a03      	ldr	r2, [pc, #12]	; (800a0cc <HAL_PCD_SuspendCallback+0x30>)
 800a0be:	f043 0306 	orr.w	r3, r3, #6
 800a0c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	e000ed00 	.word	0xe000ed00

0800a0d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fea9 	bl	8008e36 <USBD_LL_Resume>
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a0f4:	4a23      	ldr	r2, [pc, #140]	; (800a184 <USBD_LL_Init+0x98>)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a21      	ldr	r2, [pc, #132]	; (800a184 <USBD_LL_Init+0x98>)
 800a100:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a104:	4b1f      	ldr	r3, [pc, #124]	; (800a184 <USBD_LL_Init+0x98>)
 800a106:	4a20      	ldr	r2, [pc, #128]	; (800a188 <USBD_LL_Init+0x9c>)
 800a108:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a10a:	4b1e      	ldr	r3, [pc, #120]	; (800a184 <USBD_LL_Init+0x98>)
 800a10c:	2208      	movs	r2, #8
 800a10e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a110:	4b1c      	ldr	r3, [pc, #112]	; (800a184 <USBD_LL_Init+0x98>)
 800a112:	2202      	movs	r2, #2
 800a114:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a116:	4b1b      	ldr	r3, [pc, #108]	; (800a184 <USBD_LL_Init+0x98>)
 800a118:	2200      	movs	r2, #0
 800a11a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a11c:	4b19      	ldr	r3, [pc, #100]	; (800a184 <USBD_LL_Init+0x98>)
 800a11e:	2200      	movs	r2, #0
 800a120:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a122:	4b18      	ldr	r3, [pc, #96]	; (800a184 <USBD_LL_Init+0x98>)
 800a124:	2200      	movs	r2, #0
 800a126:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a128:	4816      	ldr	r0, [pc, #88]	; (800a184 <USBD_LL_Init+0x98>)
 800a12a:	f7f9 f8f9 	bl	8003320 <HAL_PCD_Init>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a134:	f7f7 fbd8 	bl	80018e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a13e:	2318      	movs	r3, #24
 800a140:	2200      	movs	r2, #0
 800a142:	2100      	movs	r1, #0
 800a144:	f7fa fd56 	bl	8004bf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a14e:	2358      	movs	r3, #88	; 0x58
 800a150:	2200      	movs	r2, #0
 800a152:	2180      	movs	r1, #128	; 0x80
 800a154:	f7fa fd4e 	bl	8004bf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a15e:	2398      	movs	r3, #152	; 0x98
 800a160:	2200      	movs	r2, #0
 800a162:	2181      	movs	r1, #129	; 0x81
 800a164:	f7fa fd46 	bl	8004bf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a16e:	23d8      	movs	r3, #216	; 0xd8
 800a170:	2200      	movs	r2, #0
 800a172:	2101      	movs	r1, #1
 800a174:	f7fa fd3e 	bl	8004bf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000af4 	.word	0x20000af4
 800a188:	40005c00 	.word	0x40005c00

0800a18c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7f9 f9c7 	bl	8003536 <HAL_PCD_Start>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f93c 	bl	800a42c <USBD_Get_USB_Status>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	4608      	mov	r0, r1
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	70fb      	strb	r3, [r7, #3]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70bb      	strb	r3, [r7, #2]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1ea:	78bb      	ldrb	r3, [r7, #2]
 800a1ec:	883a      	ldrh	r2, [r7, #0]
 800a1ee:	78f9      	ldrb	r1, [r7, #3]
 800a1f0:	f7f9 fb3f 	bl	8003872 <HAL_PCD_EP_Open>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 f916 	bl	800a42c <USBD_Get_USB_Status>
 800a200:	4603      	mov	r3, r0
 800a202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a204:	7bbb      	ldrb	r3, [r7, #14]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	460b      	mov	r3, r1
 800a218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a228:	78fa      	ldrb	r2, [r7, #3]
 800a22a:	4611      	mov	r1, r2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7f9 fb86 	bl	800393e <HAL_PCD_EP_Close>
 800a232:	4603      	mov	r3, r0
 800a234:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 f8f7 	bl	800a42c <USBD_Get_USB_Status>
 800a23e:	4603      	mov	r3, r0
 800a240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a242:	7bbb      	ldrb	r3, [r7, #14]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a266:	78fa      	ldrb	r2, [r7, #3]
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7f9 fc2f 	bl	8003ace <HAL_PCD_EP_SetStall>
 800a270:	4603      	mov	r3, r0
 800a272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	4618      	mov	r0, r3
 800a278:	f000 f8d8 	bl	800a42c <USBD_Get_USB_Status>
 800a27c:	4603      	mov	r3, r0
 800a27e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a280:	7bbb      	ldrb	r3, [r7, #14]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2a4:	78fa      	ldrb	r2, [r7, #3]
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7f9 fc70 	bl	8003b8e <HAL_PCD_EP_ClrStall>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 f8b9 	bl	800a42c <USBD_Get_USB_Status>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	da0c      	bge.n	800a2fe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2e4:	78fb      	ldrb	r3, [r7, #3]
 800a2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ea:	68f9      	ldr	r1, [r7, #12]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	440b      	add	r3, r1
 800a2f8:	3302      	adds	r3, #2
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	e00b      	b.n	800a316 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2fe:	78fb      	ldrb	r3, [r7, #3]
 800a300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a304:	68f9      	ldr	r1, [r7, #12]
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	00db      	lsls	r3, r3, #3
 800a30e:	440b      	add	r3, r1
 800a310:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a314:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bc80      	pop	{r7}
 800a31e:	4770      	bx	lr

0800a320 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a33a:	78fa      	ldrb	r2, [r7, #3]
 800a33c:	4611      	mov	r1, r2
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f9 fa72 	bl	8003828 <HAL_PCD_SetAddress>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f86e 	bl	800a42c <USBD_Get_USB_Status>
 800a350:	4603      	mov	r3, r0
 800a352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a354:	7bbb      	ldrb	r3, [r7, #14]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b086      	sub	sp, #24
 800a362:	af00      	add	r7, sp, #0
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	461a      	mov	r2, r3
 800a36a:	460b      	mov	r3, r1
 800a36c:	72fb      	strb	r3, [r7, #11]
 800a36e:	4613      	mov	r3, r2
 800a370:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a380:	893b      	ldrh	r3, [r7, #8]
 800a382:	7af9      	ldrb	r1, [r7, #11]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	f7f9 fb5f 	bl	8003a48 <HAL_PCD_EP_Transmit>
 800a38a:	4603      	mov	r3, r0
 800a38c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f84b 	bl	800a42c <USBD_Get_USB_Status>
 800a396:	4603      	mov	r3, r0
 800a398:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a39a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	607a      	str	r2, [r7, #4]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	72fb      	strb	r3, [r7, #11]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3c6:	893b      	ldrh	r3, [r7, #8]
 800a3c8:	7af9      	ldrb	r1, [r7, #11]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	f7f9 faff 	bl	80039ce <HAL_PCD_EP_Receive>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f828 	bl	800a42c <USBD_Get_USB_Status>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
	...

0800a3ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <USBD_static_malloc+0x14>)
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bc80      	pop	{r7}
 800a3fe:	4770      	bx	lr
 800a400:	20000de0 	.word	0x20000de0

0800a404 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]

}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr

0800a416 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	bc80      	pop	{r7}
 800a42a:	4770      	bx	lr

0800a42c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d817      	bhi.n	800a470 <USBD_Get_USB_Status+0x44>
 800a440:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <USBD_Get_USB_Status+0x1c>)
 800a442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a446:	bf00      	nop
 800a448:	0800a459 	.word	0x0800a459
 800a44c:	0800a45f 	.word	0x0800a45f
 800a450:	0800a465 	.word	0x0800a465
 800a454:	0800a46b 	.word	0x0800a46b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]
    break;
 800a45c:	e00b      	b.n	800a476 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a45e:	2302      	movs	r3, #2
 800a460:	73fb      	strb	r3, [r7, #15]
    break;
 800a462:	e008      	b.n	800a476 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a464:	2301      	movs	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
    break;
 800a468:	e005      	b.n	800a476 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a46a:	2302      	movs	r3, #2
 800a46c:	73fb      	strb	r3, [r7, #15]
    break;
 800a46e:	e002      	b.n	800a476 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a470:	2302      	movs	r3, #2
 800a472:	73fb      	strb	r3, [r7, #15]
    break;
 800a474:	bf00      	nop
  }
  return usb_status;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bc80      	pop	{r7}
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop

0800a484 <atoi>:
 800a484:	220a      	movs	r2, #10
 800a486:	2100      	movs	r1, #0
 800a488:	f000 b920 	b.w	800a6cc <strtol>

0800a48c <__errno>:
 800a48c:	4b01      	ldr	r3, [pc, #4]	; (800a494 <__errno+0x8>)
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	200001a8 	.word	0x200001a8

0800a498 <__libc_init_array>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	2600      	movs	r6, #0
 800a49c:	4d0c      	ldr	r5, [pc, #48]	; (800a4d0 <__libc_init_array+0x38>)
 800a49e:	4c0d      	ldr	r4, [pc, #52]	; (800a4d4 <__libc_init_array+0x3c>)
 800a4a0:	1b64      	subs	r4, r4, r5
 800a4a2:	10a4      	asrs	r4, r4, #2
 800a4a4:	42a6      	cmp	r6, r4
 800a4a6:	d109      	bne.n	800a4bc <__libc_init_array+0x24>
 800a4a8:	f001 f91a 	bl	800b6e0 <_init>
 800a4ac:	2600      	movs	r6, #0
 800a4ae:	4d0a      	ldr	r5, [pc, #40]	; (800a4d8 <__libc_init_array+0x40>)
 800a4b0:	4c0a      	ldr	r4, [pc, #40]	; (800a4dc <__libc_init_array+0x44>)
 800a4b2:	1b64      	subs	r4, r4, r5
 800a4b4:	10a4      	asrs	r4, r4, #2
 800a4b6:	42a6      	cmp	r6, r4
 800a4b8:	d105      	bne.n	800a4c6 <__libc_init_array+0x2e>
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c0:	4798      	blx	r3
 800a4c2:	3601      	adds	r6, #1
 800a4c4:	e7ee      	b.n	800a4a4 <__libc_init_array+0xc>
 800a4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ca:	4798      	blx	r3
 800a4cc:	3601      	adds	r6, #1
 800a4ce:	e7f2      	b.n	800a4b6 <__libc_init_array+0x1e>
 800a4d0:	0800b9b8 	.word	0x0800b9b8
 800a4d4:	0800b9b8 	.word	0x0800b9b8
 800a4d8:	0800b9b8 	.word	0x0800b9b8
 800a4dc:	0800b9bc 	.word	0x0800b9bc

0800a4e0 <memcpy>:
 800a4e0:	440a      	add	r2, r1
 800a4e2:	4291      	cmp	r1, r2
 800a4e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4e8:	d100      	bne.n	800a4ec <memcpy+0xc>
 800a4ea:	4770      	bx	lr
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4f2:	4291      	cmp	r1, r2
 800a4f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4f8:	d1f9      	bne.n	800a4ee <memcpy+0xe>
 800a4fa:	bd10      	pop	{r4, pc}

0800a4fc <memset>:
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	4402      	add	r2, r0
 800a500:	4293      	cmp	r3, r2
 800a502:	d100      	bne.n	800a506 <memset+0xa>
 800a504:	4770      	bx	lr
 800a506:	f803 1b01 	strb.w	r1, [r3], #1
 800a50a:	e7f9      	b.n	800a500 <memset+0x4>

0800a50c <strcpy>:
 800a50c:	4603      	mov	r3, r0
 800a50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a512:	f803 2b01 	strb.w	r2, [r3], #1
 800a516:	2a00      	cmp	r2, #0
 800a518:	d1f9      	bne.n	800a50e <strcpy+0x2>
 800a51a:	4770      	bx	lr

0800a51c <strtok>:
 800a51c:	4b16      	ldr	r3, [pc, #88]	; (800a578 <strtok+0x5c>)
 800a51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a522:	681f      	ldr	r7, [r3, #0]
 800a524:	4605      	mov	r5, r0
 800a526:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a528:	460e      	mov	r6, r1
 800a52a:	b9ec      	cbnz	r4, 800a568 <strtok+0x4c>
 800a52c:	2050      	movs	r0, #80	; 0x50
 800a52e:	f000 f907 	bl	800a740 <malloc>
 800a532:	4602      	mov	r2, r0
 800a534:	65b8      	str	r0, [r7, #88]	; 0x58
 800a536:	b920      	cbnz	r0, 800a542 <strtok+0x26>
 800a538:	2157      	movs	r1, #87	; 0x57
 800a53a:	4b10      	ldr	r3, [pc, #64]	; (800a57c <strtok+0x60>)
 800a53c:	4810      	ldr	r0, [pc, #64]	; (800a580 <strtok+0x64>)
 800a53e:	f000 f8cf 	bl	800a6e0 <__assert_func>
 800a542:	e9c0 4400 	strd	r4, r4, [r0]
 800a546:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a54a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a54e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a552:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a556:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a55a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a55e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a562:	6184      	str	r4, [r0, #24]
 800a564:	7704      	strb	r4, [r0, #28]
 800a566:	6244      	str	r4, [r0, #36]	; 0x24
 800a568:	4631      	mov	r1, r6
 800a56a:	4628      	mov	r0, r5
 800a56c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a56e:	2301      	movs	r3, #1
 800a570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a574:	f000 b806 	b.w	800a584 <__strtok_r>
 800a578:	200001a8 	.word	0x200001a8
 800a57c:	0800b774 	.word	0x0800b774
 800a580:	0800b78b 	.word	0x0800b78b

0800a584 <__strtok_r>:
 800a584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a586:	b908      	cbnz	r0, 800a58c <__strtok_r+0x8>
 800a588:	6810      	ldr	r0, [r2, #0]
 800a58a:	b188      	cbz	r0, 800a5b0 <__strtok_r+0x2c>
 800a58c:	4604      	mov	r4, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	4620      	mov	r0, r4
 800a592:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a596:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a59a:	b91e      	cbnz	r6, 800a5a4 <__strtok_r+0x20>
 800a59c:	b965      	cbnz	r5, 800a5b8 <__strtok_r+0x34>
 800a59e:	4628      	mov	r0, r5
 800a5a0:	6015      	str	r5, [r2, #0]
 800a5a2:	e005      	b.n	800a5b0 <__strtok_r+0x2c>
 800a5a4:	42b5      	cmp	r5, r6
 800a5a6:	d1f6      	bne.n	800a596 <__strtok_r+0x12>
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1f0      	bne.n	800a58e <__strtok_r+0xa>
 800a5ac:	6014      	str	r4, [r2, #0]
 800a5ae:	7003      	strb	r3, [r0, #0]
 800a5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b2:	461c      	mov	r4, r3
 800a5b4:	e00c      	b.n	800a5d0 <__strtok_r+0x4c>
 800a5b6:	b915      	cbnz	r5, 800a5be <__strtok_r+0x3a>
 800a5b8:	460e      	mov	r6, r1
 800a5ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5be:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a5c2:	42ab      	cmp	r3, r5
 800a5c4:	d1f7      	bne.n	800a5b6 <__strtok_r+0x32>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0f3      	beq.n	800a5b2 <__strtok_r+0x2e>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a5d0:	6014      	str	r4, [r2, #0]
 800a5d2:	e7ed      	b.n	800a5b0 <__strtok_r+0x2c>

0800a5d4 <_strtol_l.constprop.0>:
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5da:	4680      	mov	r8, r0
 800a5dc:	d001      	beq.n	800a5e2 <_strtol_l.constprop.0+0xe>
 800a5de:	2b24      	cmp	r3, #36	; 0x24
 800a5e0:	d906      	bls.n	800a5f0 <_strtol_l.constprop.0+0x1c>
 800a5e2:	f7ff ff53 	bl	800a48c <__errno>
 800a5e6:	2316      	movs	r3, #22
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f0:	460d      	mov	r5, r1
 800a5f2:	4f35      	ldr	r7, [pc, #212]	; (800a6c8 <_strtol_l.constprop.0+0xf4>)
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5fa:	5de6      	ldrb	r6, [r4, r7]
 800a5fc:	f016 0608 	ands.w	r6, r6, #8
 800a600:	d1f8      	bne.n	800a5f4 <_strtol_l.constprop.0+0x20>
 800a602:	2c2d      	cmp	r4, #45	; 0x2d
 800a604:	d12f      	bne.n	800a666 <_strtol_l.constprop.0+0x92>
 800a606:	2601      	movs	r6, #1
 800a608:	782c      	ldrb	r4, [r5, #0]
 800a60a:	1c85      	adds	r5, r0, #2
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d057      	beq.n	800a6c0 <_strtol_l.constprop.0+0xec>
 800a610:	2b10      	cmp	r3, #16
 800a612:	d109      	bne.n	800a628 <_strtol_l.constprop.0+0x54>
 800a614:	2c30      	cmp	r4, #48	; 0x30
 800a616:	d107      	bne.n	800a628 <_strtol_l.constprop.0+0x54>
 800a618:	7828      	ldrb	r0, [r5, #0]
 800a61a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a61e:	2858      	cmp	r0, #88	; 0x58
 800a620:	d149      	bne.n	800a6b6 <_strtol_l.constprop.0+0xe2>
 800a622:	2310      	movs	r3, #16
 800a624:	786c      	ldrb	r4, [r5, #1]
 800a626:	3502      	adds	r5, #2
 800a628:	2700      	movs	r7, #0
 800a62a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a62e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a632:	fbbe f9f3 	udiv	r9, lr, r3
 800a636:	4638      	mov	r0, r7
 800a638:	fb03 ea19 	mls	sl, r3, r9, lr
 800a63c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a640:	f1bc 0f09 	cmp.w	ip, #9
 800a644:	d814      	bhi.n	800a670 <_strtol_l.constprop.0+0x9c>
 800a646:	4664      	mov	r4, ip
 800a648:	42a3      	cmp	r3, r4
 800a64a:	dd22      	ble.n	800a692 <_strtol_l.constprop.0+0xbe>
 800a64c:	2f00      	cmp	r7, #0
 800a64e:	db1d      	blt.n	800a68c <_strtol_l.constprop.0+0xb8>
 800a650:	4581      	cmp	r9, r0
 800a652:	d31b      	bcc.n	800a68c <_strtol_l.constprop.0+0xb8>
 800a654:	d101      	bne.n	800a65a <_strtol_l.constprop.0+0x86>
 800a656:	45a2      	cmp	sl, r4
 800a658:	db18      	blt.n	800a68c <_strtol_l.constprop.0+0xb8>
 800a65a:	2701      	movs	r7, #1
 800a65c:	fb00 4003 	mla	r0, r0, r3, r4
 800a660:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a664:	e7ea      	b.n	800a63c <_strtol_l.constprop.0+0x68>
 800a666:	2c2b      	cmp	r4, #43	; 0x2b
 800a668:	bf04      	itt	eq
 800a66a:	782c      	ldrbeq	r4, [r5, #0]
 800a66c:	1c85      	addeq	r5, r0, #2
 800a66e:	e7cd      	b.n	800a60c <_strtol_l.constprop.0+0x38>
 800a670:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a674:	f1bc 0f19 	cmp.w	ip, #25
 800a678:	d801      	bhi.n	800a67e <_strtol_l.constprop.0+0xaa>
 800a67a:	3c37      	subs	r4, #55	; 0x37
 800a67c:	e7e4      	b.n	800a648 <_strtol_l.constprop.0+0x74>
 800a67e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a682:	f1bc 0f19 	cmp.w	ip, #25
 800a686:	d804      	bhi.n	800a692 <_strtol_l.constprop.0+0xbe>
 800a688:	3c57      	subs	r4, #87	; 0x57
 800a68a:	e7dd      	b.n	800a648 <_strtol_l.constprop.0+0x74>
 800a68c:	f04f 37ff 	mov.w	r7, #4294967295
 800a690:	e7e6      	b.n	800a660 <_strtol_l.constprop.0+0x8c>
 800a692:	2f00      	cmp	r7, #0
 800a694:	da07      	bge.n	800a6a6 <_strtol_l.constprop.0+0xd2>
 800a696:	2322      	movs	r3, #34	; 0x22
 800a698:	4670      	mov	r0, lr
 800a69a:	f8c8 3000 	str.w	r3, [r8]
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	d0a4      	beq.n	800a5ec <_strtol_l.constprop.0+0x18>
 800a6a2:	1e69      	subs	r1, r5, #1
 800a6a4:	e005      	b.n	800a6b2 <_strtol_l.constprop.0+0xde>
 800a6a6:	b106      	cbz	r6, 800a6aa <_strtol_l.constprop.0+0xd6>
 800a6a8:	4240      	negs	r0, r0
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d09e      	beq.n	800a5ec <_strtol_l.constprop.0+0x18>
 800a6ae:	2f00      	cmp	r7, #0
 800a6b0:	d1f7      	bne.n	800a6a2 <_strtol_l.constprop.0+0xce>
 800a6b2:	6011      	str	r1, [r2, #0]
 800a6b4:	e79a      	b.n	800a5ec <_strtol_l.constprop.0+0x18>
 800a6b6:	2430      	movs	r4, #48	; 0x30
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1b5      	bne.n	800a628 <_strtol_l.constprop.0+0x54>
 800a6bc:	2308      	movs	r3, #8
 800a6be:	e7b3      	b.n	800a628 <_strtol_l.constprop.0+0x54>
 800a6c0:	2c30      	cmp	r4, #48	; 0x30
 800a6c2:	d0a9      	beq.n	800a618 <_strtol_l.constprop.0+0x44>
 800a6c4:	230a      	movs	r3, #10
 800a6c6:	e7af      	b.n	800a628 <_strtol_l.constprop.0+0x54>
 800a6c8:	0800b825 	.word	0x0800b825

0800a6cc <strtol>:
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	460a      	mov	r2, r1
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	4802      	ldr	r0, [pc, #8]	; (800a6dc <strtol+0x10>)
 800a6d4:	6800      	ldr	r0, [r0, #0]
 800a6d6:	f7ff bf7d 	b.w	800a5d4 <_strtol_l.constprop.0>
 800a6da:	bf00      	nop
 800a6dc:	200001a8 	.word	0x200001a8

0800a6e0 <__assert_func>:
 800a6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6e2:	4614      	mov	r4, r2
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b09      	ldr	r3, [pc, #36]	; (800a70c <__assert_func+0x2c>)
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68d8      	ldr	r0, [r3, #12]
 800a6ee:	b14c      	cbz	r4, 800a704 <__assert_func+0x24>
 800a6f0:	4b07      	ldr	r3, [pc, #28]	; (800a710 <__assert_func+0x30>)
 800a6f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6f6:	9100      	str	r1, [sp, #0]
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	4906      	ldr	r1, [pc, #24]	; (800a714 <__assert_func+0x34>)
 800a6fc:	f000 f80e 	bl	800a71c <fiprintf>
 800a700:	f000 fcc0 	bl	800b084 <abort>
 800a704:	4b04      	ldr	r3, [pc, #16]	; (800a718 <__assert_func+0x38>)
 800a706:	461c      	mov	r4, r3
 800a708:	e7f3      	b.n	800a6f2 <__assert_func+0x12>
 800a70a:	bf00      	nop
 800a70c:	200001a8 	.word	0x200001a8
 800a710:	0800b7e8 	.word	0x0800b7e8
 800a714:	0800b7f5 	.word	0x0800b7f5
 800a718:	0800b823 	.word	0x0800b823

0800a71c <fiprintf>:
 800a71c:	b40e      	push	{r1, r2, r3}
 800a71e:	b503      	push	{r0, r1, lr}
 800a720:	4601      	mov	r1, r0
 800a722:	ab03      	add	r3, sp, #12
 800a724:	4805      	ldr	r0, [pc, #20]	; (800a73c <fiprintf+0x20>)
 800a726:	f853 2b04 	ldr.w	r2, [r3], #4
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	f000 f913 	bl	800a958 <_vfiprintf_r>
 800a732:	b002      	add	sp, #8
 800a734:	f85d eb04 	ldr.w	lr, [sp], #4
 800a738:	b003      	add	sp, #12
 800a73a:	4770      	bx	lr
 800a73c:	200001a8 	.word	0x200001a8

0800a740 <malloc>:
 800a740:	4b02      	ldr	r3, [pc, #8]	; (800a74c <malloc+0xc>)
 800a742:	4601      	mov	r1, r0
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	f000 b86b 	b.w	800a820 <_malloc_r>
 800a74a:	bf00      	nop
 800a74c:	200001a8 	.word	0x200001a8

0800a750 <_free_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4605      	mov	r5, r0
 800a754:	2900      	cmp	r1, #0
 800a756:	d040      	beq.n	800a7da <_free_r+0x8a>
 800a758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a75c:	1f0c      	subs	r4, r1, #4
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bfb8      	it	lt
 800a762:	18e4      	addlt	r4, r4, r3
 800a764:	f000 fec0 	bl	800b4e8 <__malloc_lock>
 800a768:	4a1c      	ldr	r2, [pc, #112]	; (800a7dc <_free_r+0x8c>)
 800a76a:	6813      	ldr	r3, [r2, #0]
 800a76c:	b933      	cbnz	r3, 800a77c <_free_r+0x2c>
 800a76e:	6063      	str	r3, [r4, #4]
 800a770:	6014      	str	r4, [r2, #0]
 800a772:	4628      	mov	r0, r5
 800a774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a778:	f000 bebc 	b.w	800b4f4 <__malloc_unlock>
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	d908      	bls.n	800a792 <_free_r+0x42>
 800a780:	6820      	ldr	r0, [r4, #0]
 800a782:	1821      	adds	r1, r4, r0
 800a784:	428b      	cmp	r3, r1
 800a786:	bf01      	itttt	eq
 800a788:	6819      	ldreq	r1, [r3, #0]
 800a78a:	685b      	ldreq	r3, [r3, #4]
 800a78c:	1809      	addeq	r1, r1, r0
 800a78e:	6021      	streq	r1, [r4, #0]
 800a790:	e7ed      	b.n	800a76e <_free_r+0x1e>
 800a792:	461a      	mov	r2, r3
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	b10b      	cbz	r3, 800a79c <_free_r+0x4c>
 800a798:	42a3      	cmp	r3, r4
 800a79a:	d9fa      	bls.n	800a792 <_free_r+0x42>
 800a79c:	6811      	ldr	r1, [r2, #0]
 800a79e:	1850      	adds	r0, r2, r1
 800a7a0:	42a0      	cmp	r0, r4
 800a7a2:	d10b      	bne.n	800a7bc <_free_r+0x6c>
 800a7a4:	6820      	ldr	r0, [r4, #0]
 800a7a6:	4401      	add	r1, r0
 800a7a8:	1850      	adds	r0, r2, r1
 800a7aa:	4283      	cmp	r3, r0
 800a7ac:	6011      	str	r1, [r2, #0]
 800a7ae:	d1e0      	bne.n	800a772 <_free_r+0x22>
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	4401      	add	r1, r0
 800a7b6:	6011      	str	r1, [r2, #0]
 800a7b8:	6053      	str	r3, [r2, #4]
 800a7ba:	e7da      	b.n	800a772 <_free_r+0x22>
 800a7bc:	d902      	bls.n	800a7c4 <_free_r+0x74>
 800a7be:	230c      	movs	r3, #12
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	e7d6      	b.n	800a772 <_free_r+0x22>
 800a7c4:	6820      	ldr	r0, [r4, #0]
 800a7c6:	1821      	adds	r1, r4, r0
 800a7c8:	428b      	cmp	r3, r1
 800a7ca:	bf01      	itttt	eq
 800a7cc:	6819      	ldreq	r1, [r3, #0]
 800a7ce:	685b      	ldreq	r3, [r3, #4]
 800a7d0:	1809      	addeq	r1, r1, r0
 800a7d2:	6021      	streq	r1, [r4, #0]
 800a7d4:	6063      	str	r3, [r4, #4]
 800a7d6:	6054      	str	r4, [r2, #4]
 800a7d8:	e7cb      	b.n	800a772 <_free_r+0x22>
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	20000e38 	.word	0x20000e38

0800a7e0 <sbrk_aligned>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	4e0e      	ldr	r6, [pc, #56]	; (800a81c <sbrk_aligned+0x3c>)
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	6831      	ldr	r1, [r6, #0]
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	b911      	cbnz	r1, 800a7f2 <sbrk_aligned+0x12>
 800a7ec:	f000 fb7a 	bl	800aee4 <_sbrk_r>
 800a7f0:	6030      	str	r0, [r6, #0]
 800a7f2:	4621      	mov	r1, r4
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f000 fb75 	bl	800aee4 <_sbrk_r>
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	d00a      	beq.n	800a814 <sbrk_aligned+0x34>
 800a7fe:	1cc4      	adds	r4, r0, #3
 800a800:	f024 0403 	bic.w	r4, r4, #3
 800a804:	42a0      	cmp	r0, r4
 800a806:	d007      	beq.n	800a818 <sbrk_aligned+0x38>
 800a808:	1a21      	subs	r1, r4, r0
 800a80a:	4628      	mov	r0, r5
 800a80c:	f000 fb6a 	bl	800aee4 <_sbrk_r>
 800a810:	3001      	adds	r0, #1
 800a812:	d101      	bne.n	800a818 <sbrk_aligned+0x38>
 800a814:	f04f 34ff 	mov.w	r4, #4294967295
 800a818:	4620      	mov	r0, r4
 800a81a:	bd70      	pop	{r4, r5, r6, pc}
 800a81c:	20000e3c 	.word	0x20000e3c

0800a820 <_malloc_r>:
 800a820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a824:	1ccd      	adds	r5, r1, #3
 800a826:	f025 0503 	bic.w	r5, r5, #3
 800a82a:	3508      	adds	r5, #8
 800a82c:	2d0c      	cmp	r5, #12
 800a82e:	bf38      	it	cc
 800a830:	250c      	movcc	r5, #12
 800a832:	2d00      	cmp	r5, #0
 800a834:	4607      	mov	r7, r0
 800a836:	db01      	blt.n	800a83c <_malloc_r+0x1c>
 800a838:	42a9      	cmp	r1, r5
 800a83a:	d905      	bls.n	800a848 <_malloc_r+0x28>
 800a83c:	230c      	movs	r3, #12
 800a83e:	2600      	movs	r6, #0
 800a840:	603b      	str	r3, [r7, #0]
 800a842:	4630      	mov	r0, r6
 800a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a848:	4e2e      	ldr	r6, [pc, #184]	; (800a904 <_malloc_r+0xe4>)
 800a84a:	f000 fe4d 	bl	800b4e8 <__malloc_lock>
 800a84e:	6833      	ldr	r3, [r6, #0]
 800a850:	461c      	mov	r4, r3
 800a852:	bb34      	cbnz	r4, 800a8a2 <_malloc_r+0x82>
 800a854:	4629      	mov	r1, r5
 800a856:	4638      	mov	r0, r7
 800a858:	f7ff ffc2 	bl	800a7e0 <sbrk_aligned>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	4604      	mov	r4, r0
 800a860:	d14d      	bne.n	800a8fe <_malloc_r+0xde>
 800a862:	6834      	ldr	r4, [r6, #0]
 800a864:	4626      	mov	r6, r4
 800a866:	2e00      	cmp	r6, #0
 800a868:	d140      	bne.n	800a8ec <_malloc_r+0xcc>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	4631      	mov	r1, r6
 800a86e:	4638      	mov	r0, r7
 800a870:	eb04 0803 	add.w	r8, r4, r3
 800a874:	f000 fb36 	bl	800aee4 <_sbrk_r>
 800a878:	4580      	cmp	r8, r0
 800a87a:	d13a      	bne.n	800a8f2 <_malloc_r+0xd2>
 800a87c:	6821      	ldr	r1, [r4, #0]
 800a87e:	3503      	adds	r5, #3
 800a880:	1a6d      	subs	r5, r5, r1
 800a882:	f025 0503 	bic.w	r5, r5, #3
 800a886:	3508      	adds	r5, #8
 800a888:	2d0c      	cmp	r5, #12
 800a88a:	bf38      	it	cc
 800a88c:	250c      	movcc	r5, #12
 800a88e:	4638      	mov	r0, r7
 800a890:	4629      	mov	r1, r5
 800a892:	f7ff ffa5 	bl	800a7e0 <sbrk_aligned>
 800a896:	3001      	adds	r0, #1
 800a898:	d02b      	beq.n	800a8f2 <_malloc_r+0xd2>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	442b      	add	r3, r5
 800a89e:	6023      	str	r3, [r4, #0]
 800a8a0:	e00e      	b.n	800a8c0 <_malloc_r+0xa0>
 800a8a2:	6822      	ldr	r2, [r4, #0]
 800a8a4:	1b52      	subs	r2, r2, r5
 800a8a6:	d41e      	bmi.n	800a8e6 <_malloc_r+0xc6>
 800a8a8:	2a0b      	cmp	r2, #11
 800a8aa:	d916      	bls.n	800a8da <_malloc_r+0xba>
 800a8ac:	1961      	adds	r1, r4, r5
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	6025      	str	r5, [r4, #0]
 800a8b2:	bf18      	it	ne
 800a8b4:	6059      	strne	r1, [r3, #4]
 800a8b6:	6863      	ldr	r3, [r4, #4]
 800a8b8:	bf08      	it	eq
 800a8ba:	6031      	streq	r1, [r6, #0]
 800a8bc:	5162      	str	r2, [r4, r5]
 800a8be:	604b      	str	r3, [r1, #4]
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	f104 060b 	add.w	r6, r4, #11
 800a8c6:	f000 fe15 	bl	800b4f4 <__malloc_unlock>
 800a8ca:	f026 0607 	bic.w	r6, r6, #7
 800a8ce:	1d23      	adds	r3, r4, #4
 800a8d0:	1af2      	subs	r2, r6, r3
 800a8d2:	d0b6      	beq.n	800a842 <_malloc_r+0x22>
 800a8d4:	1b9b      	subs	r3, r3, r6
 800a8d6:	50a3      	str	r3, [r4, r2]
 800a8d8:	e7b3      	b.n	800a842 <_malloc_r+0x22>
 800a8da:	6862      	ldr	r2, [r4, #4]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	bf0c      	ite	eq
 800a8e0:	6032      	streq	r2, [r6, #0]
 800a8e2:	605a      	strne	r2, [r3, #4]
 800a8e4:	e7ec      	b.n	800a8c0 <_malloc_r+0xa0>
 800a8e6:	4623      	mov	r3, r4
 800a8e8:	6864      	ldr	r4, [r4, #4]
 800a8ea:	e7b2      	b.n	800a852 <_malloc_r+0x32>
 800a8ec:	4634      	mov	r4, r6
 800a8ee:	6876      	ldr	r6, [r6, #4]
 800a8f0:	e7b9      	b.n	800a866 <_malloc_r+0x46>
 800a8f2:	230c      	movs	r3, #12
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	f000 fdfc 	bl	800b4f4 <__malloc_unlock>
 800a8fc:	e7a1      	b.n	800a842 <_malloc_r+0x22>
 800a8fe:	6025      	str	r5, [r4, #0]
 800a900:	e7de      	b.n	800a8c0 <_malloc_r+0xa0>
 800a902:	bf00      	nop
 800a904:	20000e38 	.word	0x20000e38

0800a908 <__sfputc_r>:
 800a908:	6893      	ldr	r3, [r2, #8]
 800a90a:	b410      	push	{r4}
 800a90c:	3b01      	subs	r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	6093      	str	r3, [r2, #8]
 800a912:	da07      	bge.n	800a924 <__sfputc_r+0x1c>
 800a914:	6994      	ldr	r4, [r2, #24]
 800a916:	42a3      	cmp	r3, r4
 800a918:	db01      	blt.n	800a91e <__sfputc_r+0x16>
 800a91a:	290a      	cmp	r1, #10
 800a91c:	d102      	bne.n	800a924 <__sfputc_r+0x1c>
 800a91e:	bc10      	pop	{r4}
 800a920:	f000 baf0 	b.w	800af04 <__swbuf_r>
 800a924:	6813      	ldr	r3, [r2, #0]
 800a926:	1c58      	adds	r0, r3, #1
 800a928:	6010      	str	r0, [r2, #0]
 800a92a:	7019      	strb	r1, [r3, #0]
 800a92c:	4608      	mov	r0, r1
 800a92e:	bc10      	pop	{r4}
 800a930:	4770      	bx	lr

0800a932 <__sfputs_r>:
 800a932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a934:	4606      	mov	r6, r0
 800a936:	460f      	mov	r7, r1
 800a938:	4614      	mov	r4, r2
 800a93a:	18d5      	adds	r5, r2, r3
 800a93c:	42ac      	cmp	r4, r5
 800a93e:	d101      	bne.n	800a944 <__sfputs_r+0x12>
 800a940:	2000      	movs	r0, #0
 800a942:	e007      	b.n	800a954 <__sfputs_r+0x22>
 800a944:	463a      	mov	r2, r7
 800a946:	4630      	mov	r0, r6
 800a948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94c:	f7ff ffdc 	bl	800a908 <__sfputc_r>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d1f3      	bne.n	800a93c <__sfputs_r+0xa>
 800a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a958 <_vfiprintf_r>:
 800a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	460d      	mov	r5, r1
 800a95e:	4614      	mov	r4, r2
 800a960:	4698      	mov	r8, r3
 800a962:	4606      	mov	r6, r0
 800a964:	b09d      	sub	sp, #116	; 0x74
 800a966:	b118      	cbz	r0, 800a970 <_vfiprintf_r+0x18>
 800a968:	6983      	ldr	r3, [r0, #24]
 800a96a:	b90b      	cbnz	r3, 800a970 <_vfiprintf_r+0x18>
 800a96c:	f000 fca8 	bl	800b2c0 <__sinit>
 800a970:	4b89      	ldr	r3, [pc, #548]	; (800ab98 <_vfiprintf_r+0x240>)
 800a972:	429d      	cmp	r5, r3
 800a974:	d11b      	bne.n	800a9ae <_vfiprintf_r+0x56>
 800a976:	6875      	ldr	r5, [r6, #4]
 800a978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a97a:	07d9      	lsls	r1, r3, #31
 800a97c:	d405      	bmi.n	800a98a <_vfiprintf_r+0x32>
 800a97e:	89ab      	ldrh	r3, [r5, #12]
 800a980:	059a      	lsls	r2, r3, #22
 800a982:	d402      	bmi.n	800a98a <_vfiprintf_r+0x32>
 800a984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a986:	f000 fd39 	bl	800b3fc <__retarget_lock_acquire_recursive>
 800a98a:	89ab      	ldrh	r3, [r5, #12]
 800a98c:	071b      	lsls	r3, r3, #28
 800a98e:	d501      	bpl.n	800a994 <_vfiprintf_r+0x3c>
 800a990:	692b      	ldr	r3, [r5, #16]
 800a992:	b9eb      	cbnz	r3, 800a9d0 <_vfiprintf_r+0x78>
 800a994:	4629      	mov	r1, r5
 800a996:	4630      	mov	r0, r6
 800a998:	f000 fb06 	bl	800afa8 <__swsetup_r>
 800a99c:	b1c0      	cbz	r0, 800a9d0 <_vfiprintf_r+0x78>
 800a99e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9a0:	07dc      	lsls	r4, r3, #31
 800a9a2:	d50e      	bpl.n	800a9c2 <_vfiprintf_r+0x6a>
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	b01d      	add	sp, #116	; 0x74
 800a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ae:	4b7b      	ldr	r3, [pc, #492]	; (800ab9c <_vfiprintf_r+0x244>)
 800a9b0:	429d      	cmp	r5, r3
 800a9b2:	d101      	bne.n	800a9b8 <_vfiprintf_r+0x60>
 800a9b4:	68b5      	ldr	r5, [r6, #8]
 800a9b6:	e7df      	b.n	800a978 <_vfiprintf_r+0x20>
 800a9b8:	4b79      	ldr	r3, [pc, #484]	; (800aba0 <_vfiprintf_r+0x248>)
 800a9ba:	429d      	cmp	r5, r3
 800a9bc:	bf08      	it	eq
 800a9be:	68f5      	ldreq	r5, [r6, #12]
 800a9c0:	e7da      	b.n	800a978 <_vfiprintf_r+0x20>
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	0598      	lsls	r0, r3, #22
 800a9c6:	d4ed      	bmi.n	800a9a4 <_vfiprintf_r+0x4c>
 800a9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ca:	f000 fd18 	bl	800b3fe <__retarget_lock_release_recursive>
 800a9ce:	e7e9      	b.n	800a9a4 <_vfiprintf_r+0x4c>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d4:	2320      	movs	r3, #32
 800a9d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9da:	2330      	movs	r3, #48	; 0x30
 800a9dc:	f04f 0901 	mov.w	r9, #1
 800a9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aba4 <_vfiprintf_r+0x24c>
 800a9e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	469a      	mov	sl, r3
 800a9f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f4:	b10a      	cbz	r2, 800a9fa <_vfiprintf_r+0xa2>
 800a9f6:	2a25      	cmp	r2, #37	; 0x25
 800a9f8:	d1f9      	bne.n	800a9ee <_vfiprintf_r+0x96>
 800a9fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a9fe:	d00b      	beq.n	800aa18 <_vfiprintf_r+0xc0>
 800aa00:	465b      	mov	r3, fp
 800aa02:	4622      	mov	r2, r4
 800aa04:	4629      	mov	r1, r5
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff ff93 	bl	800a932 <__sfputs_r>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	f000 80aa 	beq.w	800ab66 <_vfiprintf_r+0x20e>
 800aa12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa14:	445a      	add	r2, fp
 800aa16:	9209      	str	r2, [sp, #36]	; 0x24
 800aa18:	f89a 3000 	ldrb.w	r3, [sl]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 80a2 	beq.w	800ab66 <_vfiprintf_r+0x20e>
 800aa22:	2300      	movs	r3, #0
 800aa24:	f04f 32ff 	mov.w	r2, #4294967295
 800aa28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa2c:	f10a 0a01 	add.w	sl, sl, #1
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	9307      	str	r3, [sp, #28]
 800aa34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa38:	931a      	str	r3, [sp, #104]	; 0x68
 800aa3a:	4654      	mov	r4, sl
 800aa3c:	2205      	movs	r2, #5
 800aa3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa42:	4858      	ldr	r0, [pc, #352]	; (800aba4 <_vfiprintf_r+0x24c>)
 800aa44:	f000 fd42 	bl	800b4cc <memchr>
 800aa48:	9a04      	ldr	r2, [sp, #16]
 800aa4a:	b9d8      	cbnz	r0, 800aa84 <_vfiprintf_r+0x12c>
 800aa4c:	06d1      	lsls	r1, r2, #27
 800aa4e:	bf44      	itt	mi
 800aa50:	2320      	movmi	r3, #32
 800aa52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa56:	0713      	lsls	r3, r2, #28
 800aa58:	bf44      	itt	mi
 800aa5a:	232b      	movmi	r3, #43	; 0x2b
 800aa5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa60:	f89a 3000 	ldrb.w	r3, [sl]
 800aa64:	2b2a      	cmp	r3, #42	; 0x2a
 800aa66:	d015      	beq.n	800aa94 <_vfiprintf_r+0x13c>
 800aa68:	4654      	mov	r4, sl
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	f04f 0c0a 	mov.w	ip, #10
 800aa70:	9a07      	ldr	r2, [sp, #28]
 800aa72:	4621      	mov	r1, r4
 800aa74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa78:	3b30      	subs	r3, #48	; 0x30
 800aa7a:	2b09      	cmp	r3, #9
 800aa7c:	d94e      	bls.n	800ab1c <_vfiprintf_r+0x1c4>
 800aa7e:	b1b0      	cbz	r0, 800aaae <_vfiprintf_r+0x156>
 800aa80:	9207      	str	r2, [sp, #28]
 800aa82:	e014      	b.n	800aaae <_vfiprintf_r+0x156>
 800aa84:	eba0 0308 	sub.w	r3, r0, r8
 800aa88:	fa09 f303 	lsl.w	r3, r9, r3
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	46a2      	mov	sl, r4
 800aa90:	9304      	str	r3, [sp, #16]
 800aa92:	e7d2      	b.n	800aa3a <_vfiprintf_r+0xe2>
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	1d19      	adds	r1, r3, #4
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	9103      	str	r1, [sp, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bfbb      	ittet	lt
 800aaa0:	425b      	neglt	r3, r3
 800aaa2:	f042 0202 	orrlt.w	r2, r2, #2
 800aaa6:	9307      	strge	r3, [sp, #28]
 800aaa8:	9307      	strlt	r3, [sp, #28]
 800aaaa:	bfb8      	it	lt
 800aaac:	9204      	strlt	r2, [sp, #16]
 800aaae:	7823      	ldrb	r3, [r4, #0]
 800aab0:	2b2e      	cmp	r3, #46	; 0x2e
 800aab2:	d10c      	bne.n	800aace <_vfiprintf_r+0x176>
 800aab4:	7863      	ldrb	r3, [r4, #1]
 800aab6:	2b2a      	cmp	r3, #42	; 0x2a
 800aab8:	d135      	bne.n	800ab26 <_vfiprintf_r+0x1ce>
 800aaba:	9b03      	ldr	r3, [sp, #12]
 800aabc:	3402      	adds	r4, #2
 800aabe:	1d1a      	adds	r2, r3, #4
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	9203      	str	r2, [sp, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bfb8      	it	lt
 800aac8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aacc:	9305      	str	r3, [sp, #20]
 800aace:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aba8 <_vfiprintf_r+0x250>
 800aad2:	2203      	movs	r2, #3
 800aad4:	4650      	mov	r0, sl
 800aad6:	7821      	ldrb	r1, [r4, #0]
 800aad8:	f000 fcf8 	bl	800b4cc <memchr>
 800aadc:	b140      	cbz	r0, 800aaf0 <_vfiprintf_r+0x198>
 800aade:	2340      	movs	r3, #64	; 0x40
 800aae0:	eba0 000a 	sub.w	r0, r0, sl
 800aae4:	fa03 f000 	lsl.w	r0, r3, r0
 800aae8:	9b04      	ldr	r3, [sp, #16]
 800aaea:	3401      	adds	r4, #1
 800aaec:	4303      	orrs	r3, r0
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf4:	2206      	movs	r2, #6
 800aaf6:	482d      	ldr	r0, [pc, #180]	; (800abac <_vfiprintf_r+0x254>)
 800aaf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aafc:	f000 fce6 	bl	800b4cc <memchr>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d03f      	beq.n	800ab84 <_vfiprintf_r+0x22c>
 800ab04:	4b2a      	ldr	r3, [pc, #168]	; (800abb0 <_vfiprintf_r+0x258>)
 800ab06:	bb1b      	cbnz	r3, 800ab50 <_vfiprintf_r+0x1f8>
 800ab08:	9b03      	ldr	r3, [sp, #12]
 800ab0a:	3307      	adds	r3, #7
 800ab0c:	f023 0307 	bic.w	r3, r3, #7
 800ab10:	3308      	adds	r3, #8
 800ab12:	9303      	str	r3, [sp, #12]
 800ab14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab16:	443b      	add	r3, r7
 800ab18:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1a:	e767      	b.n	800a9ec <_vfiprintf_r+0x94>
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	2001      	movs	r0, #1
 800ab20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab24:	e7a5      	b.n	800aa72 <_vfiprintf_r+0x11a>
 800ab26:	2300      	movs	r3, #0
 800ab28:	f04f 0c0a 	mov.w	ip, #10
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	3401      	adds	r4, #1
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	4620      	mov	r0, r4
 800ab34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab38:	3a30      	subs	r2, #48	; 0x30
 800ab3a:	2a09      	cmp	r2, #9
 800ab3c:	d903      	bls.n	800ab46 <_vfiprintf_r+0x1ee>
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0c5      	beq.n	800aace <_vfiprintf_r+0x176>
 800ab42:	9105      	str	r1, [sp, #20]
 800ab44:	e7c3      	b.n	800aace <_vfiprintf_r+0x176>
 800ab46:	4604      	mov	r4, r0
 800ab48:	2301      	movs	r3, #1
 800ab4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab4e:	e7f0      	b.n	800ab32 <_vfiprintf_r+0x1da>
 800ab50:	ab03      	add	r3, sp, #12
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	462a      	mov	r2, r5
 800ab56:	4630      	mov	r0, r6
 800ab58:	4b16      	ldr	r3, [pc, #88]	; (800abb4 <_vfiprintf_r+0x25c>)
 800ab5a:	a904      	add	r1, sp, #16
 800ab5c:	f3af 8000 	nop.w
 800ab60:	4607      	mov	r7, r0
 800ab62:	1c78      	adds	r0, r7, #1
 800ab64:	d1d6      	bne.n	800ab14 <_vfiprintf_r+0x1bc>
 800ab66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab68:	07d9      	lsls	r1, r3, #31
 800ab6a:	d405      	bmi.n	800ab78 <_vfiprintf_r+0x220>
 800ab6c:	89ab      	ldrh	r3, [r5, #12]
 800ab6e:	059a      	lsls	r2, r3, #22
 800ab70:	d402      	bmi.n	800ab78 <_vfiprintf_r+0x220>
 800ab72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab74:	f000 fc43 	bl	800b3fe <__retarget_lock_release_recursive>
 800ab78:	89ab      	ldrh	r3, [r5, #12]
 800ab7a:	065b      	lsls	r3, r3, #25
 800ab7c:	f53f af12 	bmi.w	800a9a4 <_vfiprintf_r+0x4c>
 800ab80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab82:	e711      	b.n	800a9a8 <_vfiprintf_r+0x50>
 800ab84:	ab03      	add	r3, sp, #12
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	462a      	mov	r2, r5
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <_vfiprintf_r+0x25c>)
 800ab8e:	a904      	add	r1, sp, #16
 800ab90:	f000 f882 	bl	800ac98 <_printf_i>
 800ab94:	e7e4      	b.n	800ab60 <_vfiprintf_r+0x208>
 800ab96:	bf00      	nop
 800ab98:	0800b978 	.word	0x0800b978
 800ab9c:	0800b998 	.word	0x0800b998
 800aba0:	0800b958 	.word	0x0800b958
 800aba4:	0800b925 	.word	0x0800b925
 800aba8:	0800b92b 	.word	0x0800b92b
 800abac:	0800b92f 	.word	0x0800b92f
 800abb0:	00000000 	.word	0x00000000
 800abb4:	0800a933 	.word	0x0800a933

0800abb8 <_printf_common>:
 800abb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abbc:	4616      	mov	r6, r2
 800abbe:	4699      	mov	r9, r3
 800abc0:	688a      	ldr	r2, [r1, #8]
 800abc2:	690b      	ldr	r3, [r1, #16]
 800abc4:	4607      	mov	r7, r0
 800abc6:	4293      	cmp	r3, r2
 800abc8:	bfb8      	it	lt
 800abca:	4613      	movlt	r3, r2
 800abcc:	6033      	str	r3, [r6, #0]
 800abce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abd2:	460c      	mov	r4, r1
 800abd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abd8:	b10a      	cbz	r2, 800abde <_printf_common+0x26>
 800abda:	3301      	adds	r3, #1
 800abdc:	6033      	str	r3, [r6, #0]
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	0699      	lsls	r1, r3, #26
 800abe2:	bf42      	ittt	mi
 800abe4:	6833      	ldrmi	r3, [r6, #0]
 800abe6:	3302      	addmi	r3, #2
 800abe8:	6033      	strmi	r3, [r6, #0]
 800abea:	6825      	ldr	r5, [r4, #0]
 800abec:	f015 0506 	ands.w	r5, r5, #6
 800abf0:	d106      	bne.n	800ac00 <_printf_common+0x48>
 800abf2:	f104 0a19 	add.w	sl, r4, #25
 800abf6:	68e3      	ldr	r3, [r4, #12]
 800abf8:	6832      	ldr	r2, [r6, #0]
 800abfa:	1a9b      	subs	r3, r3, r2
 800abfc:	42ab      	cmp	r3, r5
 800abfe:	dc28      	bgt.n	800ac52 <_printf_common+0x9a>
 800ac00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac04:	1e13      	subs	r3, r2, #0
 800ac06:	6822      	ldr	r2, [r4, #0]
 800ac08:	bf18      	it	ne
 800ac0a:	2301      	movne	r3, #1
 800ac0c:	0692      	lsls	r2, r2, #26
 800ac0e:	d42d      	bmi.n	800ac6c <_printf_common+0xb4>
 800ac10:	4649      	mov	r1, r9
 800ac12:	4638      	mov	r0, r7
 800ac14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac18:	47c0      	blx	r8
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	d020      	beq.n	800ac60 <_printf_common+0xa8>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	68e5      	ldr	r5, [r4, #12]
 800ac22:	f003 0306 	and.w	r3, r3, #6
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	bf18      	it	ne
 800ac2a:	2500      	movne	r5, #0
 800ac2c:	6832      	ldr	r2, [r6, #0]
 800ac2e:	f04f 0600 	mov.w	r6, #0
 800ac32:	68a3      	ldr	r3, [r4, #8]
 800ac34:	bf08      	it	eq
 800ac36:	1aad      	subeq	r5, r5, r2
 800ac38:	6922      	ldr	r2, [r4, #16]
 800ac3a:	bf08      	it	eq
 800ac3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac40:	4293      	cmp	r3, r2
 800ac42:	bfc4      	itt	gt
 800ac44:	1a9b      	subgt	r3, r3, r2
 800ac46:	18ed      	addgt	r5, r5, r3
 800ac48:	341a      	adds	r4, #26
 800ac4a:	42b5      	cmp	r5, r6
 800ac4c:	d11a      	bne.n	800ac84 <_printf_common+0xcc>
 800ac4e:	2000      	movs	r0, #0
 800ac50:	e008      	b.n	800ac64 <_printf_common+0xac>
 800ac52:	2301      	movs	r3, #1
 800ac54:	4652      	mov	r2, sl
 800ac56:	4649      	mov	r1, r9
 800ac58:	4638      	mov	r0, r7
 800ac5a:	47c0      	blx	r8
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d103      	bne.n	800ac68 <_printf_common+0xb0>
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
 800ac64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac68:	3501      	adds	r5, #1
 800ac6a:	e7c4      	b.n	800abf6 <_printf_common+0x3e>
 800ac6c:	2030      	movs	r0, #48	; 0x30
 800ac6e:	18e1      	adds	r1, r4, r3
 800ac70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac7a:	4422      	add	r2, r4
 800ac7c:	3302      	adds	r3, #2
 800ac7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac82:	e7c5      	b.n	800ac10 <_printf_common+0x58>
 800ac84:	2301      	movs	r3, #1
 800ac86:	4622      	mov	r2, r4
 800ac88:	4649      	mov	r1, r9
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	47c0      	blx	r8
 800ac8e:	3001      	adds	r0, #1
 800ac90:	d0e6      	beq.n	800ac60 <_printf_common+0xa8>
 800ac92:	3601      	adds	r6, #1
 800ac94:	e7d9      	b.n	800ac4a <_printf_common+0x92>
	...

0800ac98 <_printf_i>:
 800ac98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9c:	7e0f      	ldrb	r7, [r1, #24]
 800ac9e:	4691      	mov	r9, r2
 800aca0:	2f78      	cmp	r7, #120	; 0x78
 800aca2:	4680      	mov	r8, r0
 800aca4:	460c      	mov	r4, r1
 800aca6:	469a      	mov	sl, r3
 800aca8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acae:	d807      	bhi.n	800acc0 <_printf_i+0x28>
 800acb0:	2f62      	cmp	r7, #98	; 0x62
 800acb2:	d80a      	bhi.n	800acca <_printf_i+0x32>
 800acb4:	2f00      	cmp	r7, #0
 800acb6:	f000 80d9 	beq.w	800ae6c <_printf_i+0x1d4>
 800acba:	2f58      	cmp	r7, #88	; 0x58
 800acbc:	f000 80a4 	beq.w	800ae08 <_printf_i+0x170>
 800acc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acc8:	e03a      	b.n	800ad40 <_printf_i+0xa8>
 800acca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acce:	2b15      	cmp	r3, #21
 800acd0:	d8f6      	bhi.n	800acc0 <_printf_i+0x28>
 800acd2:	a101      	add	r1, pc, #4	; (adr r1, 800acd8 <_printf_i+0x40>)
 800acd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acd8:	0800ad31 	.word	0x0800ad31
 800acdc:	0800ad45 	.word	0x0800ad45
 800ace0:	0800acc1 	.word	0x0800acc1
 800ace4:	0800acc1 	.word	0x0800acc1
 800ace8:	0800acc1 	.word	0x0800acc1
 800acec:	0800acc1 	.word	0x0800acc1
 800acf0:	0800ad45 	.word	0x0800ad45
 800acf4:	0800acc1 	.word	0x0800acc1
 800acf8:	0800acc1 	.word	0x0800acc1
 800acfc:	0800acc1 	.word	0x0800acc1
 800ad00:	0800acc1 	.word	0x0800acc1
 800ad04:	0800ae53 	.word	0x0800ae53
 800ad08:	0800ad75 	.word	0x0800ad75
 800ad0c:	0800ae35 	.word	0x0800ae35
 800ad10:	0800acc1 	.word	0x0800acc1
 800ad14:	0800acc1 	.word	0x0800acc1
 800ad18:	0800ae75 	.word	0x0800ae75
 800ad1c:	0800acc1 	.word	0x0800acc1
 800ad20:	0800ad75 	.word	0x0800ad75
 800ad24:	0800acc1 	.word	0x0800acc1
 800ad28:	0800acc1 	.word	0x0800acc1
 800ad2c:	0800ae3d 	.word	0x0800ae3d
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	1d1a      	adds	r2, r3, #4
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	602a      	str	r2, [r5, #0]
 800ad38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad40:	2301      	movs	r3, #1
 800ad42:	e0a4      	b.n	800ae8e <_printf_i+0x1f6>
 800ad44:	6820      	ldr	r0, [r4, #0]
 800ad46:	6829      	ldr	r1, [r5, #0]
 800ad48:	0606      	lsls	r6, r0, #24
 800ad4a:	f101 0304 	add.w	r3, r1, #4
 800ad4e:	d50a      	bpl.n	800ad66 <_printf_i+0xce>
 800ad50:	680e      	ldr	r6, [r1, #0]
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	2e00      	cmp	r6, #0
 800ad56:	da03      	bge.n	800ad60 <_printf_i+0xc8>
 800ad58:	232d      	movs	r3, #45	; 0x2d
 800ad5a:	4276      	negs	r6, r6
 800ad5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad60:	230a      	movs	r3, #10
 800ad62:	485e      	ldr	r0, [pc, #376]	; (800aedc <_printf_i+0x244>)
 800ad64:	e019      	b.n	800ad9a <_printf_i+0x102>
 800ad66:	680e      	ldr	r6, [r1, #0]
 800ad68:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad6c:	602b      	str	r3, [r5, #0]
 800ad6e:	bf18      	it	ne
 800ad70:	b236      	sxthne	r6, r6
 800ad72:	e7ef      	b.n	800ad54 <_printf_i+0xbc>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	6820      	ldr	r0, [r4, #0]
 800ad78:	1d19      	adds	r1, r3, #4
 800ad7a:	6029      	str	r1, [r5, #0]
 800ad7c:	0601      	lsls	r1, r0, #24
 800ad7e:	d501      	bpl.n	800ad84 <_printf_i+0xec>
 800ad80:	681e      	ldr	r6, [r3, #0]
 800ad82:	e002      	b.n	800ad8a <_printf_i+0xf2>
 800ad84:	0646      	lsls	r6, r0, #25
 800ad86:	d5fb      	bpl.n	800ad80 <_printf_i+0xe8>
 800ad88:	881e      	ldrh	r6, [r3, #0]
 800ad8a:	2f6f      	cmp	r7, #111	; 0x6f
 800ad8c:	bf0c      	ite	eq
 800ad8e:	2308      	moveq	r3, #8
 800ad90:	230a      	movne	r3, #10
 800ad92:	4852      	ldr	r0, [pc, #328]	; (800aedc <_printf_i+0x244>)
 800ad94:	2100      	movs	r1, #0
 800ad96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad9a:	6865      	ldr	r5, [r4, #4]
 800ad9c:	2d00      	cmp	r5, #0
 800ad9e:	bfa8      	it	ge
 800ada0:	6821      	ldrge	r1, [r4, #0]
 800ada2:	60a5      	str	r5, [r4, #8]
 800ada4:	bfa4      	itt	ge
 800ada6:	f021 0104 	bicge.w	r1, r1, #4
 800adaa:	6021      	strge	r1, [r4, #0]
 800adac:	b90e      	cbnz	r6, 800adb2 <_printf_i+0x11a>
 800adae:	2d00      	cmp	r5, #0
 800adb0:	d04d      	beq.n	800ae4e <_printf_i+0x1b6>
 800adb2:	4615      	mov	r5, r2
 800adb4:	fbb6 f1f3 	udiv	r1, r6, r3
 800adb8:	fb03 6711 	mls	r7, r3, r1, r6
 800adbc:	5dc7      	ldrb	r7, [r0, r7]
 800adbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adc2:	4637      	mov	r7, r6
 800adc4:	42bb      	cmp	r3, r7
 800adc6:	460e      	mov	r6, r1
 800adc8:	d9f4      	bls.n	800adb4 <_printf_i+0x11c>
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d10b      	bne.n	800ade6 <_printf_i+0x14e>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	07de      	lsls	r6, r3, #31
 800add2:	d508      	bpl.n	800ade6 <_printf_i+0x14e>
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	6861      	ldr	r1, [r4, #4]
 800add8:	4299      	cmp	r1, r3
 800adda:	bfde      	ittt	le
 800addc:	2330      	movle	r3, #48	; 0x30
 800adde:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ade2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ade6:	1b52      	subs	r2, r2, r5
 800ade8:	6122      	str	r2, [r4, #16]
 800adea:	464b      	mov	r3, r9
 800adec:	4621      	mov	r1, r4
 800adee:	4640      	mov	r0, r8
 800adf0:	f8cd a000 	str.w	sl, [sp]
 800adf4:	aa03      	add	r2, sp, #12
 800adf6:	f7ff fedf 	bl	800abb8 <_printf_common>
 800adfa:	3001      	adds	r0, #1
 800adfc:	d14c      	bne.n	800ae98 <_printf_i+0x200>
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ae02:	b004      	add	sp, #16
 800ae04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae08:	4834      	ldr	r0, [pc, #208]	; (800aedc <_printf_i+0x244>)
 800ae0a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae0e:	6829      	ldr	r1, [r5, #0]
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae16:	6029      	str	r1, [r5, #0]
 800ae18:	061d      	lsls	r5, r3, #24
 800ae1a:	d514      	bpl.n	800ae46 <_printf_i+0x1ae>
 800ae1c:	07df      	lsls	r7, r3, #31
 800ae1e:	bf44      	itt	mi
 800ae20:	f043 0320 	orrmi.w	r3, r3, #32
 800ae24:	6023      	strmi	r3, [r4, #0]
 800ae26:	b91e      	cbnz	r6, 800ae30 <_printf_i+0x198>
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	f023 0320 	bic.w	r3, r3, #32
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	2310      	movs	r3, #16
 800ae32:	e7af      	b.n	800ad94 <_printf_i+0xfc>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	f043 0320 	orr.w	r3, r3, #32
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	2378      	movs	r3, #120	; 0x78
 800ae3e:	4828      	ldr	r0, [pc, #160]	; (800aee0 <_printf_i+0x248>)
 800ae40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae44:	e7e3      	b.n	800ae0e <_printf_i+0x176>
 800ae46:	0659      	lsls	r1, r3, #25
 800ae48:	bf48      	it	mi
 800ae4a:	b2b6      	uxthmi	r6, r6
 800ae4c:	e7e6      	b.n	800ae1c <_printf_i+0x184>
 800ae4e:	4615      	mov	r5, r2
 800ae50:	e7bb      	b.n	800adca <_printf_i+0x132>
 800ae52:	682b      	ldr	r3, [r5, #0]
 800ae54:	6826      	ldr	r6, [r4, #0]
 800ae56:	1d18      	adds	r0, r3, #4
 800ae58:	6961      	ldr	r1, [r4, #20]
 800ae5a:	6028      	str	r0, [r5, #0]
 800ae5c:	0635      	lsls	r5, r6, #24
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	d501      	bpl.n	800ae66 <_printf_i+0x1ce>
 800ae62:	6019      	str	r1, [r3, #0]
 800ae64:	e002      	b.n	800ae6c <_printf_i+0x1d4>
 800ae66:	0670      	lsls	r0, r6, #25
 800ae68:	d5fb      	bpl.n	800ae62 <_printf_i+0x1ca>
 800ae6a:	8019      	strh	r1, [r3, #0]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4615      	mov	r5, r2
 800ae70:	6123      	str	r3, [r4, #16]
 800ae72:	e7ba      	b.n	800adea <_printf_i+0x152>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	2100      	movs	r1, #0
 800ae78:	1d1a      	adds	r2, r3, #4
 800ae7a:	602a      	str	r2, [r5, #0]
 800ae7c:	681d      	ldr	r5, [r3, #0]
 800ae7e:	6862      	ldr	r2, [r4, #4]
 800ae80:	4628      	mov	r0, r5
 800ae82:	f000 fb23 	bl	800b4cc <memchr>
 800ae86:	b108      	cbz	r0, 800ae8c <_printf_i+0x1f4>
 800ae88:	1b40      	subs	r0, r0, r5
 800ae8a:	6060      	str	r0, [r4, #4]
 800ae8c:	6863      	ldr	r3, [r4, #4]
 800ae8e:	6123      	str	r3, [r4, #16]
 800ae90:	2300      	movs	r3, #0
 800ae92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae96:	e7a8      	b.n	800adea <_printf_i+0x152>
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	47d0      	blx	sl
 800aea2:	3001      	adds	r0, #1
 800aea4:	d0ab      	beq.n	800adfe <_printf_i+0x166>
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	079b      	lsls	r3, r3, #30
 800aeaa:	d413      	bmi.n	800aed4 <_printf_i+0x23c>
 800aeac:	68e0      	ldr	r0, [r4, #12]
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	4298      	cmp	r0, r3
 800aeb2:	bfb8      	it	lt
 800aeb4:	4618      	movlt	r0, r3
 800aeb6:	e7a4      	b.n	800ae02 <_printf_i+0x16a>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	4632      	mov	r2, r6
 800aebc:	4649      	mov	r1, r9
 800aebe:	4640      	mov	r0, r8
 800aec0:	47d0      	blx	sl
 800aec2:	3001      	adds	r0, #1
 800aec4:	d09b      	beq.n	800adfe <_printf_i+0x166>
 800aec6:	3501      	adds	r5, #1
 800aec8:	68e3      	ldr	r3, [r4, #12]
 800aeca:	9903      	ldr	r1, [sp, #12]
 800aecc:	1a5b      	subs	r3, r3, r1
 800aece:	42ab      	cmp	r3, r5
 800aed0:	dcf2      	bgt.n	800aeb8 <_printf_i+0x220>
 800aed2:	e7eb      	b.n	800aeac <_printf_i+0x214>
 800aed4:	2500      	movs	r5, #0
 800aed6:	f104 0619 	add.w	r6, r4, #25
 800aeda:	e7f5      	b.n	800aec8 <_printf_i+0x230>
 800aedc:	0800b936 	.word	0x0800b936
 800aee0:	0800b947 	.word	0x0800b947

0800aee4 <_sbrk_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	2300      	movs	r3, #0
 800aee8:	4d05      	ldr	r5, [pc, #20]	; (800af00 <_sbrk_r+0x1c>)
 800aeea:	4604      	mov	r4, r0
 800aeec:	4608      	mov	r0, r1
 800aeee:	602b      	str	r3, [r5, #0]
 800aef0:	f7f6 fe9e 	bl	8001c30 <_sbrk>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_sbrk_r+0x1a>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_sbrk_r+0x1a>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	20000e44 	.word	0x20000e44

0800af04 <__swbuf_r>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	460e      	mov	r6, r1
 800af08:	4614      	mov	r4, r2
 800af0a:	4605      	mov	r5, r0
 800af0c:	b118      	cbz	r0, 800af16 <__swbuf_r+0x12>
 800af0e:	6983      	ldr	r3, [r0, #24]
 800af10:	b90b      	cbnz	r3, 800af16 <__swbuf_r+0x12>
 800af12:	f000 f9d5 	bl	800b2c0 <__sinit>
 800af16:	4b21      	ldr	r3, [pc, #132]	; (800af9c <__swbuf_r+0x98>)
 800af18:	429c      	cmp	r4, r3
 800af1a:	d12b      	bne.n	800af74 <__swbuf_r+0x70>
 800af1c:	686c      	ldr	r4, [r5, #4]
 800af1e:	69a3      	ldr	r3, [r4, #24]
 800af20:	60a3      	str	r3, [r4, #8]
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	071a      	lsls	r2, r3, #28
 800af26:	d52f      	bpl.n	800af88 <__swbuf_r+0x84>
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	b36b      	cbz	r3, 800af88 <__swbuf_r+0x84>
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	6820      	ldr	r0, [r4, #0]
 800af30:	b2f6      	uxtb	r6, r6
 800af32:	1ac0      	subs	r0, r0, r3
 800af34:	6963      	ldr	r3, [r4, #20]
 800af36:	4637      	mov	r7, r6
 800af38:	4283      	cmp	r3, r0
 800af3a:	dc04      	bgt.n	800af46 <__swbuf_r+0x42>
 800af3c:	4621      	mov	r1, r4
 800af3e:	4628      	mov	r0, r5
 800af40:	f000 f92a 	bl	800b198 <_fflush_r>
 800af44:	bb30      	cbnz	r0, 800af94 <__swbuf_r+0x90>
 800af46:	68a3      	ldr	r3, [r4, #8]
 800af48:	3001      	adds	r0, #1
 800af4a:	3b01      	subs	r3, #1
 800af4c:	60a3      	str	r3, [r4, #8]
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	1c5a      	adds	r2, r3, #1
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	701e      	strb	r6, [r3, #0]
 800af56:	6963      	ldr	r3, [r4, #20]
 800af58:	4283      	cmp	r3, r0
 800af5a:	d004      	beq.n	800af66 <__swbuf_r+0x62>
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	07db      	lsls	r3, r3, #31
 800af60:	d506      	bpl.n	800af70 <__swbuf_r+0x6c>
 800af62:	2e0a      	cmp	r6, #10
 800af64:	d104      	bne.n	800af70 <__swbuf_r+0x6c>
 800af66:	4621      	mov	r1, r4
 800af68:	4628      	mov	r0, r5
 800af6a:	f000 f915 	bl	800b198 <_fflush_r>
 800af6e:	b988      	cbnz	r0, 800af94 <__swbuf_r+0x90>
 800af70:	4638      	mov	r0, r7
 800af72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af74:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <__swbuf_r+0x9c>)
 800af76:	429c      	cmp	r4, r3
 800af78:	d101      	bne.n	800af7e <__swbuf_r+0x7a>
 800af7a:	68ac      	ldr	r4, [r5, #8]
 800af7c:	e7cf      	b.n	800af1e <__swbuf_r+0x1a>
 800af7e:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <__swbuf_r+0xa0>)
 800af80:	429c      	cmp	r4, r3
 800af82:	bf08      	it	eq
 800af84:	68ec      	ldreq	r4, [r5, #12]
 800af86:	e7ca      	b.n	800af1e <__swbuf_r+0x1a>
 800af88:	4621      	mov	r1, r4
 800af8a:	4628      	mov	r0, r5
 800af8c:	f000 f80c 	bl	800afa8 <__swsetup_r>
 800af90:	2800      	cmp	r0, #0
 800af92:	d0cb      	beq.n	800af2c <__swbuf_r+0x28>
 800af94:	f04f 37ff 	mov.w	r7, #4294967295
 800af98:	e7ea      	b.n	800af70 <__swbuf_r+0x6c>
 800af9a:	bf00      	nop
 800af9c:	0800b978 	.word	0x0800b978
 800afa0:	0800b998 	.word	0x0800b998
 800afa4:	0800b958 	.word	0x0800b958

0800afa8 <__swsetup_r>:
 800afa8:	4b32      	ldr	r3, [pc, #200]	; (800b074 <__swsetup_r+0xcc>)
 800afaa:	b570      	push	{r4, r5, r6, lr}
 800afac:	681d      	ldr	r5, [r3, #0]
 800afae:	4606      	mov	r6, r0
 800afb0:	460c      	mov	r4, r1
 800afb2:	b125      	cbz	r5, 800afbe <__swsetup_r+0x16>
 800afb4:	69ab      	ldr	r3, [r5, #24]
 800afb6:	b913      	cbnz	r3, 800afbe <__swsetup_r+0x16>
 800afb8:	4628      	mov	r0, r5
 800afba:	f000 f981 	bl	800b2c0 <__sinit>
 800afbe:	4b2e      	ldr	r3, [pc, #184]	; (800b078 <__swsetup_r+0xd0>)
 800afc0:	429c      	cmp	r4, r3
 800afc2:	d10f      	bne.n	800afe4 <__swsetup_r+0x3c>
 800afc4:	686c      	ldr	r4, [r5, #4]
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afcc:	0719      	lsls	r1, r3, #28
 800afce:	d42c      	bmi.n	800b02a <__swsetup_r+0x82>
 800afd0:	06dd      	lsls	r5, r3, #27
 800afd2:	d411      	bmi.n	800aff8 <__swsetup_r+0x50>
 800afd4:	2309      	movs	r3, #9
 800afd6:	6033      	str	r3, [r6, #0]
 800afd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	e03e      	b.n	800b062 <__swsetup_r+0xba>
 800afe4:	4b25      	ldr	r3, [pc, #148]	; (800b07c <__swsetup_r+0xd4>)
 800afe6:	429c      	cmp	r4, r3
 800afe8:	d101      	bne.n	800afee <__swsetup_r+0x46>
 800afea:	68ac      	ldr	r4, [r5, #8]
 800afec:	e7eb      	b.n	800afc6 <__swsetup_r+0x1e>
 800afee:	4b24      	ldr	r3, [pc, #144]	; (800b080 <__swsetup_r+0xd8>)
 800aff0:	429c      	cmp	r4, r3
 800aff2:	bf08      	it	eq
 800aff4:	68ec      	ldreq	r4, [r5, #12]
 800aff6:	e7e6      	b.n	800afc6 <__swsetup_r+0x1e>
 800aff8:	0758      	lsls	r0, r3, #29
 800affa:	d512      	bpl.n	800b022 <__swsetup_r+0x7a>
 800affc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800affe:	b141      	cbz	r1, 800b012 <__swsetup_r+0x6a>
 800b000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b004:	4299      	cmp	r1, r3
 800b006:	d002      	beq.n	800b00e <__swsetup_r+0x66>
 800b008:	4630      	mov	r0, r6
 800b00a:	f7ff fba1 	bl	800a750 <_free_r>
 800b00e:	2300      	movs	r3, #0
 800b010:	6363      	str	r3, [r4, #52]	; 0x34
 800b012:	89a3      	ldrh	r3, [r4, #12]
 800b014:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	2300      	movs	r3, #0
 800b01c:	6063      	str	r3, [r4, #4]
 800b01e:	6923      	ldr	r3, [r4, #16]
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	f043 0308 	orr.w	r3, r3, #8
 800b028:	81a3      	strh	r3, [r4, #12]
 800b02a:	6923      	ldr	r3, [r4, #16]
 800b02c:	b94b      	cbnz	r3, 800b042 <__swsetup_r+0x9a>
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b038:	d003      	beq.n	800b042 <__swsetup_r+0x9a>
 800b03a:	4621      	mov	r1, r4
 800b03c:	4630      	mov	r0, r6
 800b03e:	f000 fa05 	bl	800b44c <__smakebuf_r>
 800b042:	89a0      	ldrh	r0, [r4, #12]
 800b044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b048:	f010 0301 	ands.w	r3, r0, #1
 800b04c:	d00a      	beq.n	800b064 <__swsetup_r+0xbc>
 800b04e:	2300      	movs	r3, #0
 800b050:	60a3      	str	r3, [r4, #8]
 800b052:	6963      	ldr	r3, [r4, #20]
 800b054:	425b      	negs	r3, r3
 800b056:	61a3      	str	r3, [r4, #24]
 800b058:	6923      	ldr	r3, [r4, #16]
 800b05a:	b943      	cbnz	r3, 800b06e <__swsetup_r+0xc6>
 800b05c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b060:	d1ba      	bne.n	800afd8 <__swsetup_r+0x30>
 800b062:	bd70      	pop	{r4, r5, r6, pc}
 800b064:	0781      	lsls	r1, r0, #30
 800b066:	bf58      	it	pl
 800b068:	6963      	ldrpl	r3, [r4, #20]
 800b06a:	60a3      	str	r3, [r4, #8]
 800b06c:	e7f4      	b.n	800b058 <__swsetup_r+0xb0>
 800b06e:	2000      	movs	r0, #0
 800b070:	e7f7      	b.n	800b062 <__swsetup_r+0xba>
 800b072:	bf00      	nop
 800b074:	200001a8 	.word	0x200001a8
 800b078:	0800b978 	.word	0x0800b978
 800b07c:	0800b998 	.word	0x0800b998
 800b080:	0800b958 	.word	0x0800b958

0800b084 <abort>:
 800b084:	2006      	movs	r0, #6
 800b086:	b508      	push	{r3, lr}
 800b088:	f000 fa62 	bl	800b550 <raise>
 800b08c:	2001      	movs	r0, #1
 800b08e:	f7f6 fd5c 	bl	8001b4a <_exit>
	...

0800b094 <__sflush_r>:
 800b094:	898a      	ldrh	r2, [r1, #12]
 800b096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b098:	4605      	mov	r5, r0
 800b09a:	0710      	lsls	r0, r2, #28
 800b09c:	460c      	mov	r4, r1
 800b09e:	d457      	bmi.n	800b150 <__sflush_r+0xbc>
 800b0a0:	684b      	ldr	r3, [r1, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dc04      	bgt.n	800b0b0 <__sflush_r+0x1c>
 800b0a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dc01      	bgt.n	800b0b0 <__sflush_r+0x1c>
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0b2:	2e00      	cmp	r6, #0
 800b0b4:	d0fa      	beq.n	800b0ac <__sflush_r+0x18>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0bc:	682f      	ldr	r7, [r5, #0]
 800b0be:	602b      	str	r3, [r5, #0]
 800b0c0:	d032      	beq.n	800b128 <__sflush_r+0x94>
 800b0c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	075a      	lsls	r2, r3, #29
 800b0c8:	d505      	bpl.n	800b0d6 <__sflush_r+0x42>
 800b0ca:	6863      	ldr	r3, [r4, #4]
 800b0cc:	1ac0      	subs	r0, r0, r3
 800b0ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0d0:	b10b      	cbz	r3, 800b0d6 <__sflush_r+0x42>
 800b0d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0d4:	1ac0      	subs	r0, r0, r3
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4602      	mov	r2, r0
 800b0da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0dc:	4628      	mov	r0, r5
 800b0de:	6a21      	ldr	r1, [r4, #32]
 800b0e0:	47b0      	blx	r6
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	d106      	bne.n	800b0f6 <__sflush_r+0x62>
 800b0e8:	6829      	ldr	r1, [r5, #0]
 800b0ea:	291d      	cmp	r1, #29
 800b0ec:	d82c      	bhi.n	800b148 <__sflush_r+0xb4>
 800b0ee:	4a29      	ldr	r2, [pc, #164]	; (800b194 <__sflush_r+0x100>)
 800b0f0:	40ca      	lsrs	r2, r1
 800b0f2:	07d6      	lsls	r6, r2, #31
 800b0f4:	d528      	bpl.n	800b148 <__sflush_r+0xb4>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	6062      	str	r2, [r4, #4]
 800b0fa:	6922      	ldr	r2, [r4, #16]
 800b0fc:	04d9      	lsls	r1, r3, #19
 800b0fe:	6022      	str	r2, [r4, #0]
 800b100:	d504      	bpl.n	800b10c <__sflush_r+0x78>
 800b102:	1c42      	adds	r2, r0, #1
 800b104:	d101      	bne.n	800b10a <__sflush_r+0x76>
 800b106:	682b      	ldr	r3, [r5, #0]
 800b108:	b903      	cbnz	r3, 800b10c <__sflush_r+0x78>
 800b10a:	6560      	str	r0, [r4, #84]	; 0x54
 800b10c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b10e:	602f      	str	r7, [r5, #0]
 800b110:	2900      	cmp	r1, #0
 800b112:	d0cb      	beq.n	800b0ac <__sflush_r+0x18>
 800b114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b118:	4299      	cmp	r1, r3
 800b11a:	d002      	beq.n	800b122 <__sflush_r+0x8e>
 800b11c:	4628      	mov	r0, r5
 800b11e:	f7ff fb17 	bl	800a750 <_free_r>
 800b122:	2000      	movs	r0, #0
 800b124:	6360      	str	r0, [r4, #52]	; 0x34
 800b126:	e7c2      	b.n	800b0ae <__sflush_r+0x1a>
 800b128:	6a21      	ldr	r1, [r4, #32]
 800b12a:	2301      	movs	r3, #1
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b0      	blx	r6
 800b130:	1c41      	adds	r1, r0, #1
 800b132:	d1c7      	bne.n	800b0c4 <__sflush_r+0x30>
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0c4      	beq.n	800b0c4 <__sflush_r+0x30>
 800b13a:	2b1d      	cmp	r3, #29
 800b13c:	d001      	beq.n	800b142 <__sflush_r+0xae>
 800b13e:	2b16      	cmp	r3, #22
 800b140:	d101      	bne.n	800b146 <__sflush_r+0xb2>
 800b142:	602f      	str	r7, [r5, #0]
 800b144:	e7b2      	b.n	800b0ac <__sflush_r+0x18>
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b14c:	81a3      	strh	r3, [r4, #12]
 800b14e:	e7ae      	b.n	800b0ae <__sflush_r+0x1a>
 800b150:	690f      	ldr	r7, [r1, #16]
 800b152:	2f00      	cmp	r7, #0
 800b154:	d0aa      	beq.n	800b0ac <__sflush_r+0x18>
 800b156:	0793      	lsls	r3, r2, #30
 800b158:	bf18      	it	ne
 800b15a:	2300      	movne	r3, #0
 800b15c:	680e      	ldr	r6, [r1, #0]
 800b15e:	bf08      	it	eq
 800b160:	694b      	ldreq	r3, [r1, #20]
 800b162:	1bf6      	subs	r6, r6, r7
 800b164:	600f      	str	r7, [r1, #0]
 800b166:	608b      	str	r3, [r1, #8]
 800b168:	2e00      	cmp	r6, #0
 800b16a:	dd9f      	ble.n	800b0ac <__sflush_r+0x18>
 800b16c:	4633      	mov	r3, r6
 800b16e:	463a      	mov	r2, r7
 800b170:	4628      	mov	r0, r5
 800b172:	6a21      	ldr	r1, [r4, #32]
 800b174:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b178:	47e0      	blx	ip
 800b17a:	2800      	cmp	r0, #0
 800b17c:	dc06      	bgt.n	800b18c <__sflush_r+0xf8>
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	f04f 30ff 	mov.w	r0, #4294967295
 800b184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	e790      	b.n	800b0ae <__sflush_r+0x1a>
 800b18c:	4407      	add	r7, r0
 800b18e:	1a36      	subs	r6, r6, r0
 800b190:	e7ea      	b.n	800b168 <__sflush_r+0xd4>
 800b192:	bf00      	nop
 800b194:	20400001 	.word	0x20400001

0800b198 <_fflush_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	690b      	ldr	r3, [r1, #16]
 800b19c:	4605      	mov	r5, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	b913      	cbnz	r3, 800b1a8 <_fflush_r+0x10>
 800b1a2:	2500      	movs	r5, #0
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	bd38      	pop	{r3, r4, r5, pc}
 800b1a8:	b118      	cbz	r0, 800b1b2 <_fflush_r+0x1a>
 800b1aa:	6983      	ldr	r3, [r0, #24]
 800b1ac:	b90b      	cbnz	r3, 800b1b2 <_fflush_r+0x1a>
 800b1ae:	f000 f887 	bl	800b2c0 <__sinit>
 800b1b2:	4b14      	ldr	r3, [pc, #80]	; (800b204 <_fflush_r+0x6c>)
 800b1b4:	429c      	cmp	r4, r3
 800b1b6:	d11b      	bne.n	800b1f0 <_fflush_r+0x58>
 800b1b8:	686c      	ldr	r4, [r5, #4]
 800b1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0ef      	beq.n	800b1a2 <_fflush_r+0xa>
 800b1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1c4:	07d0      	lsls	r0, r2, #31
 800b1c6:	d404      	bmi.n	800b1d2 <_fflush_r+0x3a>
 800b1c8:	0599      	lsls	r1, r3, #22
 800b1ca:	d402      	bmi.n	800b1d2 <_fflush_r+0x3a>
 800b1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ce:	f000 f915 	bl	800b3fc <__retarget_lock_acquire_recursive>
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	4621      	mov	r1, r4
 800b1d6:	f7ff ff5d 	bl	800b094 <__sflush_r>
 800b1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1dc:	4605      	mov	r5, r0
 800b1de:	07da      	lsls	r2, r3, #31
 800b1e0:	d4e0      	bmi.n	800b1a4 <_fflush_r+0xc>
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	059b      	lsls	r3, r3, #22
 800b1e6:	d4dd      	bmi.n	800b1a4 <_fflush_r+0xc>
 800b1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ea:	f000 f908 	bl	800b3fe <__retarget_lock_release_recursive>
 800b1ee:	e7d9      	b.n	800b1a4 <_fflush_r+0xc>
 800b1f0:	4b05      	ldr	r3, [pc, #20]	; (800b208 <_fflush_r+0x70>)
 800b1f2:	429c      	cmp	r4, r3
 800b1f4:	d101      	bne.n	800b1fa <_fflush_r+0x62>
 800b1f6:	68ac      	ldr	r4, [r5, #8]
 800b1f8:	e7df      	b.n	800b1ba <_fflush_r+0x22>
 800b1fa:	4b04      	ldr	r3, [pc, #16]	; (800b20c <_fflush_r+0x74>)
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	bf08      	it	eq
 800b200:	68ec      	ldreq	r4, [r5, #12]
 800b202:	e7da      	b.n	800b1ba <_fflush_r+0x22>
 800b204:	0800b978 	.word	0x0800b978
 800b208:	0800b998 	.word	0x0800b998
 800b20c:	0800b958 	.word	0x0800b958

0800b210 <std>:
 800b210:	2300      	movs	r3, #0
 800b212:	b510      	push	{r4, lr}
 800b214:	4604      	mov	r4, r0
 800b216:	e9c0 3300 	strd	r3, r3, [r0]
 800b21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b21e:	6083      	str	r3, [r0, #8]
 800b220:	8181      	strh	r1, [r0, #12]
 800b222:	6643      	str	r3, [r0, #100]	; 0x64
 800b224:	81c2      	strh	r2, [r0, #14]
 800b226:	6183      	str	r3, [r0, #24]
 800b228:	4619      	mov	r1, r3
 800b22a:	2208      	movs	r2, #8
 800b22c:	305c      	adds	r0, #92	; 0x5c
 800b22e:	f7ff f965 	bl	800a4fc <memset>
 800b232:	4b05      	ldr	r3, [pc, #20]	; (800b248 <std+0x38>)
 800b234:	6224      	str	r4, [r4, #32]
 800b236:	6263      	str	r3, [r4, #36]	; 0x24
 800b238:	4b04      	ldr	r3, [pc, #16]	; (800b24c <std+0x3c>)
 800b23a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b23c:	4b04      	ldr	r3, [pc, #16]	; (800b250 <std+0x40>)
 800b23e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <std+0x44>)
 800b242:	6323      	str	r3, [r4, #48]	; 0x30
 800b244:	bd10      	pop	{r4, pc}
 800b246:	bf00      	nop
 800b248:	0800b589 	.word	0x0800b589
 800b24c:	0800b5ab 	.word	0x0800b5ab
 800b250:	0800b5e3 	.word	0x0800b5e3
 800b254:	0800b607 	.word	0x0800b607

0800b258 <_cleanup_r>:
 800b258:	4901      	ldr	r1, [pc, #4]	; (800b260 <_cleanup_r+0x8>)
 800b25a:	f000 b8af 	b.w	800b3bc <_fwalk_reent>
 800b25e:	bf00      	nop
 800b260:	0800b199 	.word	0x0800b199

0800b264 <__sfmoreglue>:
 800b264:	2268      	movs	r2, #104	; 0x68
 800b266:	b570      	push	{r4, r5, r6, lr}
 800b268:	1e4d      	subs	r5, r1, #1
 800b26a:	4355      	muls	r5, r2
 800b26c:	460e      	mov	r6, r1
 800b26e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b272:	f7ff fad5 	bl	800a820 <_malloc_r>
 800b276:	4604      	mov	r4, r0
 800b278:	b140      	cbz	r0, 800b28c <__sfmoreglue+0x28>
 800b27a:	2100      	movs	r1, #0
 800b27c:	e9c0 1600 	strd	r1, r6, [r0]
 800b280:	300c      	adds	r0, #12
 800b282:	60a0      	str	r0, [r4, #8]
 800b284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b288:	f7ff f938 	bl	800a4fc <memset>
 800b28c:	4620      	mov	r0, r4
 800b28e:	bd70      	pop	{r4, r5, r6, pc}

0800b290 <__sfp_lock_acquire>:
 800b290:	4801      	ldr	r0, [pc, #4]	; (800b298 <__sfp_lock_acquire+0x8>)
 800b292:	f000 b8b3 	b.w	800b3fc <__retarget_lock_acquire_recursive>
 800b296:	bf00      	nop
 800b298:	20000e41 	.word	0x20000e41

0800b29c <__sfp_lock_release>:
 800b29c:	4801      	ldr	r0, [pc, #4]	; (800b2a4 <__sfp_lock_release+0x8>)
 800b29e:	f000 b8ae 	b.w	800b3fe <__retarget_lock_release_recursive>
 800b2a2:	bf00      	nop
 800b2a4:	20000e41 	.word	0x20000e41

0800b2a8 <__sinit_lock_acquire>:
 800b2a8:	4801      	ldr	r0, [pc, #4]	; (800b2b0 <__sinit_lock_acquire+0x8>)
 800b2aa:	f000 b8a7 	b.w	800b3fc <__retarget_lock_acquire_recursive>
 800b2ae:	bf00      	nop
 800b2b0:	20000e42 	.word	0x20000e42

0800b2b4 <__sinit_lock_release>:
 800b2b4:	4801      	ldr	r0, [pc, #4]	; (800b2bc <__sinit_lock_release+0x8>)
 800b2b6:	f000 b8a2 	b.w	800b3fe <__retarget_lock_release_recursive>
 800b2ba:	bf00      	nop
 800b2bc:	20000e42 	.word	0x20000e42

0800b2c0 <__sinit>:
 800b2c0:	b510      	push	{r4, lr}
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	f7ff fff0 	bl	800b2a8 <__sinit_lock_acquire>
 800b2c8:	69a3      	ldr	r3, [r4, #24]
 800b2ca:	b11b      	cbz	r3, 800b2d4 <__sinit+0x14>
 800b2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d0:	f7ff bff0 	b.w	800b2b4 <__sinit_lock_release>
 800b2d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b2d8:	6523      	str	r3, [r4, #80]	; 0x50
 800b2da:	4b13      	ldr	r3, [pc, #76]	; (800b328 <__sinit+0x68>)
 800b2dc:	4a13      	ldr	r2, [pc, #76]	; (800b32c <__sinit+0x6c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b2e2:	42a3      	cmp	r3, r4
 800b2e4:	bf08      	it	eq
 800b2e6:	2301      	moveq	r3, #1
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	bf08      	it	eq
 800b2ec:	61a3      	streq	r3, [r4, #24]
 800b2ee:	f000 f81f 	bl	800b330 <__sfp>
 800b2f2:	6060      	str	r0, [r4, #4]
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f000 f81b 	bl	800b330 <__sfp>
 800b2fa:	60a0      	str	r0, [r4, #8]
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 f817 	bl	800b330 <__sfp>
 800b302:	2200      	movs	r2, #0
 800b304:	2104      	movs	r1, #4
 800b306:	60e0      	str	r0, [r4, #12]
 800b308:	6860      	ldr	r0, [r4, #4]
 800b30a:	f7ff ff81 	bl	800b210 <std>
 800b30e:	2201      	movs	r2, #1
 800b310:	2109      	movs	r1, #9
 800b312:	68a0      	ldr	r0, [r4, #8]
 800b314:	f7ff ff7c 	bl	800b210 <std>
 800b318:	2202      	movs	r2, #2
 800b31a:	2112      	movs	r1, #18
 800b31c:	68e0      	ldr	r0, [r4, #12]
 800b31e:	f7ff ff77 	bl	800b210 <std>
 800b322:	2301      	movs	r3, #1
 800b324:	61a3      	str	r3, [r4, #24]
 800b326:	e7d1      	b.n	800b2cc <__sinit+0xc>
 800b328:	0800b770 	.word	0x0800b770
 800b32c:	0800b259 	.word	0x0800b259

0800b330 <__sfp>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	4607      	mov	r7, r0
 800b334:	f7ff ffac 	bl	800b290 <__sfp_lock_acquire>
 800b338:	4b1e      	ldr	r3, [pc, #120]	; (800b3b4 <__sfp+0x84>)
 800b33a:	681e      	ldr	r6, [r3, #0]
 800b33c:	69b3      	ldr	r3, [r6, #24]
 800b33e:	b913      	cbnz	r3, 800b346 <__sfp+0x16>
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff ffbd 	bl	800b2c0 <__sinit>
 800b346:	3648      	adds	r6, #72	; 0x48
 800b348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	d503      	bpl.n	800b358 <__sfp+0x28>
 800b350:	6833      	ldr	r3, [r6, #0]
 800b352:	b30b      	cbz	r3, 800b398 <__sfp+0x68>
 800b354:	6836      	ldr	r6, [r6, #0]
 800b356:	e7f7      	b.n	800b348 <__sfp+0x18>
 800b358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b35c:	b9d5      	cbnz	r5, 800b394 <__sfp+0x64>
 800b35e:	4b16      	ldr	r3, [pc, #88]	; (800b3b8 <__sfp+0x88>)
 800b360:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b364:	60e3      	str	r3, [r4, #12]
 800b366:	6665      	str	r5, [r4, #100]	; 0x64
 800b368:	f000 f847 	bl	800b3fa <__retarget_lock_init_recursive>
 800b36c:	f7ff ff96 	bl	800b29c <__sfp_lock_release>
 800b370:	2208      	movs	r2, #8
 800b372:	4629      	mov	r1, r5
 800b374:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b378:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b37c:	6025      	str	r5, [r4, #0]
 800b37e:	61a5      	str	r5, [r4, #24]
 800b380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b384:	f7ff f8ba 	bl	800a4fc <memset>
 800b388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b38c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b390:	4620      	mov	r0, r4
 800b392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b394:	3468      	adds	r4, #104	; 0x68
 800b396:	e7d9      	b.n	800b34c <__sfp+0x1c>
 800b398:	2104      	movs	r1, #4
 800b39a:	4638      	mov	r0, r7
 800b39c:	f7ff ff62 	bl	800b264 <__sfmoreglue>
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	6030      	str	r0, [r6, #0]
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d1d5      	bne.n	800b354 <__sfp+0x24>
 800b3a8:	f7ff ff78 	bl	800b29c <__sfp_lock_release>
 800b3ac:	230c      	movs	r3, #12
 800b3ae:	603b      	str	r3, [r7, #0]
 800b3b0:	e7ee      	b.n	800b390 <__sfp+0x60>
 800b3b2:	bf00      	nop
 800b3b4:	0800b770 	.word	0x0800b770
 800b3b8:	ffff0001 	.word	0xffff0001

0800b3bc <_fwalk_reent>:
 800b3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	4688      	mov	r8, r1
 800b3c4:	2700      	movs	r7, #0
 800b3c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b3ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3ce:	f1b9 0901 	subs.w	r9, r9, #1
 800b3d2:	d505      	bpl.n	800b3e0 <_fwalk_reent+0x24>
 800b3d4:	6824      	ldr	r4, [r4, #0]
 800b3d6:	2c00      	cmp	r4, #0
 800b3d8:	d1f7      	bne.n	800b3ca <_fwalk_reent+0xe>
 800b3da:	4638      	mov	r0, r7
 800b3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3e0:	89ab      	ldrh	r3, [r5, #12]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d907      	bls.n	800b3f6 <_fwalk_reent+0x3a>
 800b3e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	d003      	beq.n	800b3f6 <_fwalk_reent+0x3a>
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	47c0      	blx	r8
 800b3f4:	4307      	orrs	r7, r0
 800b3f6:	3568      	adds	r5, #104	; 0x68
 800b3f8:	e7e9      	b.n	800b3ce <_fwalk_reent+0x12>

0800b3fa <__retarget_lock_init_recursive>:
 800b3fa:	4770      	bx	lr

0800b3fc <__retarget_lock_acquire_recursive>:
 800b3fc:	4770      	bx	lr

0800b3fe <__retarget_lock_release_recursive>:
 800b3fe:	4770      	bx	lr

0800b400 <__swhatbuf_r>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	460e      	mov	r6, r1
 800b404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b408:	4614      	mov	r4, r2
 800b40a:	2900      	cmp	r1, #0
 800b40c:	461d      	mov	r5, r3
 800b40e:	b096      	sub	sp, #88	; 0x58
 800b410:	da08      	bge.n	800b424 <__swhatbuf_r+0x24>
 800b412:	2200      	movs	r2, #0
 800b414:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b418:	602a      	str	r2, [r5, #0]
 800b41a:	061a      	lsls	r2, r3, #24
 800b41c:	d410      	bmi.n	800b440 <__swhatbuf_r+0x40>
 800b41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b422:	e00e      	b.n	800b442 <__swhatbuf_r+0x42>
 800b424:	466a      	mov	r2, sp
 800b426:	f000 f915 	bl	800b654 <_fstat_r>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	dbf1      	blt.n	800b412 <__swhatbuf_r+0x12>
 800b42e:	9a01      	ldr	r2, [sp, #4]
 800b430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b438:	425a      	negs	r2, r3
 800b43a:	415a      	adcs	r2, r3
 800b43c:	602a      	str	r2, [r5, #0]
 800b43e:	e7ee      	b.n	800b41e <__swhatbuf_r+0x1e>
 800b440:	2340      	movs	r3, #64	; 0x40
 800b442:	2000      	movs	r0, #0
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	b016      	add	sp, #88	; 0x58
 800b448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b44c <__smakebuf_r>:
 800b44c:	898b      	ldrh	r3, [r1, #12]
 800b44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b450:	079d      	lsls	r5, r3, #30
 800b452:	4606      	mov	r6, r0
 800b454:	460c      	mov	r4, r1
 800b456:	d507      	bpl.n	800b468 <__smakebuf_r+0x1c>
 800b458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	6123      	str	r3, [r4, #16]
 800b460:	2301      	movs	r3, #1
 800b462:	6163      	str	r3, [r4, #20]
 800b464:	b002      	add	sp, #8
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	466a      	mov	r2, sp
 800b46a:	ab01      	add	r3, sp, #4
 800b46c:	f7ff ffc8 	bl	800b400 <__swhatbuf_r>
 800b470:	9900      	ldr	r1, [sp, #0]
 800b472:	4605      	mov	r5, r0
 800b474:	4630      	mov	r0, r6
 800b476:	f7ff f9d3 	bl	800a820 <_malloc_r>
 800b47a:	b948      	cbnz	r0, 800b490 <__smakebuf_r+0x44>
 800b47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b480:	059a      	lsls	r2, r3, #22
 800b482:	d4ef      	bmi.n	800b464 <__smakebuf_r+0x18>
 800b484:	f023 0303 	bic.w	r3, r3, #3
 800b488:	f043 0302 	orr.w	r3, r3, #2
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	e7e3      	b.n	800b458 <__smakebuf_r+0xc>
 800b490:	4b0d      	ldr	r3, [pc, #52]	; (800b4c8 <__smakebuf_r+0x7c>)
 800b492:	62b3      	str	r3, [r6, #40]	; 0x28
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	6020      	str	r0, [r4, #0]
 800b498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	9b00      	ldr	r3, [sp, #0]
 800b4a0:	6120      	str	r0, [r4, #16]
 800b4a2:	6163      	str	r3, [r4, #20]
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	b15b      	cbz	r3, 800b4c0 <__smakebuf_r+0x74>
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ae:	f000 f8e3 	bl	800b678 <_isatty_r>
 800b4b2:	b128      	cbz	r0, 800b4c0 <__smakebuf_r+0x74>
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	f023 0303 	bic.w	r3, r3, #3
 800b4ba:	f043 0301 	orr.w	r3, r3, #1
 800b4be:	81a3      	strh	r3, [r4, #12]
 800b4c0:	89a0      	ldrh	r0, [r4, #12]
 800b4c2:	4305      	orrs	r5, r0
 800b4c4:	81a5      	strh	r5, [r4, #12]
 800b4c6:	e7cd      	b.n	800b464 <__smakebuf_r+0x18>
 800b4c8:	0800b259 	.word	0x0800b259

0800b4cc <memchr>:
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	b510      	push	{r4, lr}
 800b4d0:	b2c9      	uxtb	r1, r1
 800b4d2:	4402      	add	r2, r0
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	d101      	bne.n	800b4de <memchr+0x12>
 800b4da:	2000      	movs	r0, #0
 800b4dc:	e003      	b.n	800b4e6 <memchr+0x1a>
 800b4de:	7804      	ldrb	r4, [r0, #0]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	428c      	cmp	r4, r1
 800b4e4:	d1f6      	bne.n	800b4d4 <memchr+0x8>
 800b4e6:	bd10      	pop	{r4, pc}

0800b4e8 <__malloc_lock>:
 800b4e8:	4801      	ldr	r0, [pc, #4]	; (800b4f0 <__malloc_lock+0x8>)
 800b4ea:	f7ff bf87 	b.w	800b3fc <__retarget_lock_acquire_recursive>
 800b4ee:	bf00      	nop
 800b4f0:	20000e40 	.word	0x20000e40

0800b4f4 <__malloc_unlock>:
 800b4f4:	4801      	ldr	r0, [pc, #4]	; (800b4fc <__malloc_unlock+0x8>)
 800b4f6:	f7ff bf82 	b.w	800b3fe <__retarget_lock_release_recursive>
 800b4fa:	bf00      	nop
 800b4fc:	20000e40 	.word	0x20000e40

0800b500 <_raise_r>:
 800b500:	291f      	cmp	r1, #31
 800b502:	b538      	push	{r3, r4, r5, lr}
 800b504:	4604      	mov	r4, r0
 800b506:	460d      	mov	r5, r1
 800b508:	d904      	bls.n	800b514 <_raise_r+0x14>
 800b50a:	2316      	movs	r3, #22
 800b50c:	6003      	str	r3, [r0, #0]
 800b50e:	f04f 30ff 	mov.w	r0, #4294967295
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b516:	b112      	cbz	r2, 800b51e <_raise_r+0x1e>
 800b518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b51c:	b94b      	cbnz	r3, 800b532 <_raise_r+0x32>
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 f830 	bl	800b584 <_getpid_r>
 800b524:	462a      	mov	r2, r5
 800b526:	4601      	mov	r1, r0
 800b528:	4620      	mov	r0, r4
 800b52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b52e:	f000 b817 	b.w	800b560 <_kill_r>
 800b532:	2b01      	cmp	r3, #1
 800b534:	d00a      	beq.n	800b54c <_raise_r+0x4c>
 800b536:	1c59      	adds	r1, r3, #1
 800b538:	d103      	bne.n	800b542 <_raise_r+0x42>
 800b53a:	2316      	movs	r3, #22
 800b53c:	6003      	str	r3, [r0, #0]
 800b53e:	2001      	movs	r0, #1
 800b540:	e7e7      	b.n	800b512 <_raise_r+0x12>
 800b542:	2400      	movs	r4, #0
 800b544:	4628      	mov	r0, r5
 800b546:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b54a:	4798      	blx	r3
 800b54c:	2000      	movs	r0, #0
 800b54e:	e7e0      	b.n	800b512 <_raise_r+0x12>

0800b550 <raise>:
 800b550:	4b02      	ldr	r3, [pc, #8]	; (800b55c <raise+0xc>)
 800b552:	4601      	mov	r1, r0
 800b554:	6818      	ldr	r0, [r3, #0]
 800b556:	f7ff bfd3 	b.w	800b500 <_raise_r>
 800b55a:	bf00      	nop
 800b55c:	200001a8 	.word	0x200001a8

0800b560 <_kill_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	2300      	movs	r3, #0
 800b564:	4d06      	ldr	r5, [pc, #24]	; (800b580 <_kill_r+0x20>)
 800b566:	4604      	mov	r4, r0
 800b568:	4608      	mov	r0, r1
 800b56a:	4611      	mov	r1, r2
 800b56c:	602b      	str	r3, [r5, #0]
 800b56e:	f7f6 fadc 	bl	8001b2a <_kill>
 800b572:	1c43      	adds	r3, r0, #1
 800b574:	d102      	bne.n	800b57c <_kill_r+0x1c>
 800b576:	682b      	ldr	r3, [r5, #0]
 800b578:	b103      	cbz	r3, 800b57c <_kill_r+0x1c>
 800b57a:	6023      	str	r3, [r4, #0]
 800b57c:	bd38      	pop	{r3, r4, r5, pc}
 800b57e:	bf00      	nop
 800b580:	20000e44 	.word	0x20000e44

0800b584 <_getpid_r>:
 800b584:	f7f6 baca 	b.w	8001b1c <_getpid>

0800b588 <__sread>:
 800b588:	b510      	push	{r4, lr}
 800b58a:	460c      	mov	r4, r1
 800b58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b590:	f000 f894 	bl	800b6bc <_read_r>
 800b594:	2800      	cmp	r0, #0
 800b596:	bfab      	itete	ge
 800b598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b59a:	89a3      	ldrhlt	r3, [r4, #12]
 800b59c:	181b      	addge	r3, r3, r0
 800b59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5a2:	bfac      	ite	ge
 800b5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5a6:	81a3      	strhlt	r3, [r4, #12]
 800b5a8:	bd10      	pop	{r4, pc}

0800b5aa <__swrite>:
 800b5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ae:	461f      	mov	r7, r3
 800b5b0:	898b      	ldrh	r3, [r1, #12]
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	05db      	lsls	r3, r3, #23
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	d505      	bpl.n	800b5c8 <__swrite+0x1e>
 800b5bc:	2302      	movs	r3, #2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c4:	f000 f868 	bl	800b698 <_lseek_r>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	4632      	mov	r2, r6
 800b5cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	463b      	mov	r3, r7
 800b5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	f000 b817 	b.w	800b610 <_write_r>

0800b5e2 <__sseek>:
 800b5e2:	b510      	push	{r4, lr}
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ea:	f000 f855 	bl	800b698 <_lseek_r>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	bf15      	itete	ne
 800b5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5fe:	81a3      	strheq	r3, [r4, #12]
 800b600:	bf18      	it	ne
 800b602:	81a3      	strhne	r3, [r4, #12]
 800b604:	bd10      	pop	{r4, pc}

0800b606 <__sclose>:
 800b606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60a:	f000 b813 	b.w	800b634 <_close_r>
	...

0800b610 <_write_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4604      	mov	r4, r0
 800b614:	4608      	mov	r0, r1
 800b616:	4611      	mov	r1, r2
 800b618:	2200      	movs	r2, #0
 800b61a:	4d05      	ldr	r5, [pc, #20]	; (800b630 <_write_r+0x20>)
 800b61c:	602a      	str	r2, [r5, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	f7f6 faba 	bl	8001b98 <_write>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d102      	bne.n	800b62e <_write_r+0x1e>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	b103      	cbz	r3, 800b62e <_write_r+0x1e>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	20000e44 	.word	0x20000e44

0800b634 <_close_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	2300      	movs	r3, #0
 800b638:	4d05      	ldr	r5, [pc, #20]	; (800b650 <_close_r+0x1c>)
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	602b      	str	r3, [r5, #0]
 800b640:	f7f6 fac6 	bl	8001bd0 <_close>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_close_r+0x1a>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_close_r+0x1a>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	20000e44 	.word	0x20000e44

0800b654 <_fstat_r>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	2300      	movs	r3, #0
 800b658:	4d06      	ldr	r5, [pc, #24]	; (800b674 <_fstat_r+0x20>)
 800b65a:	4604      	mov	r4, r0
 800b65c:	4608      	mov	r0, r1
 800b65e:	4611      	mov	r1, r2
 800b660:	602b      	str	r3, [r5, #0]
 800b662:	f7f6 fac0 	bl	8001be6 <_fstat>
 800b666:	1c43      	adds	r3, r0, #1
 800b668:	d102      	bne.n	800b670 <_fstat_r+0x1c>
 800b66a:	682b      	ldr	r3, [r5, #0]
 800b66c:	b103      	cbz	r3, 800b670 <_fstat_r+0x1c>
 800b66e:	6023      	str	r3, [r4, #0]
 800b670:	bd38      	pop	{r3, r4, r5, pc}
 800b672:	bf00      	nop
 800b674:	20000e44 	.word	0x20000e44

0800b678 <_isatty_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	2300      	movs	r3, #0
 800b67c:	4d05      	ldr	r5, [pc, #20]	; (800b694 <_isatty_r+0x1c>)
 800b67e:	4604      	mov	r4, r0
 800b680:	4608      	mov	r0, r1
 800b682:	602b      	str	r3, [r5, #0]
 800b684:	f7f6 fabe 	bl	8001c04 <_isatty>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_isatty_r+0x1a>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_isatty_r+0x1a>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	20000e44 	.word	0x20000e44

0800b698 <_lseek_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	4611      	mov	r1, r2
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4d05      	ldr	r5, [pc, #20]	; (800b6b8 <_lseek_r+0x20>)
 800b6a4:	602a      	str	r2, [r5, #0]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f7f6 fab6 	bl	8001c18 <_lseek>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d102      	bne.n	800b6b6 <_lseek_r+0x1e>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	b103      	cbz	r3, 800b6b6 <_lseek_r+0x1e>
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	20000e44 	.word	0x20000e44

0800b6bc <_read_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4604      	mov	r4, r0
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	4611      	mov	r1, r2
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4d05      	ldr	r5, [pc, #20]	; (800b6dc <_read_r+0x20>)
 800b6c8:	602a      	str	r2, [r5, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f7f6 fa47 	bl	8001b5e <_read>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	d102      	bne.n	800b6da <_read_r+0x1e>
 800b6d4:	682b      	ldr	r3, [r5, #0]
 800b6d6:	b103      	cbz	r3, 800b6da <_read_r+0x1e>
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	20000e44 	.word	0x20000e44

0800b6e0 <_init>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	bf00      	nop
 800b6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e6:	bc08      	pop	{r3}
 800b6e8:	469e      	mov	lr, r3
 800b6ea:	4770      	bx	lr

0800b6ec <_fini>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	bf00      	nop
 800b6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6f2:	bc08      	pop	{r3}
 800b6f4:	469e      	mov	lr, r3
 800b6f6:	4770      	bx	lr

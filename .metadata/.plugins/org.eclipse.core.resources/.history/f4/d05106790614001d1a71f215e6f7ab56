/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define FLASH_STORAGE 0x08019000
#define page_size 0x400

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_flash(uint8_t* data)
{
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
		if(read_data != 0xFFFFFFFF)
		{
			data[read_cnt] = (uint8_t)read_data;
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
			read_cnt += 4;
		}
	}while(read_data != 0xFFFFFFFF);
}

extern USBD_HandleTypeDef hUsbDeviceFS;

typedef struct
{
	uint8_t rx_8lsb; // lsb 8 bits rx
	uint8_t ry_4lsb_rx_4msb; // msb 4 bits rx + lsb 4 bits ry
	uint8_t ry_8msb; // 8 bits msb ry
	uint8_t rz_8lsb; // 8 bits lsb_rz
	uint8_t rz_4msb; // 4 bits msb rx
	uint8_t dummy_bits0 ;
	uint8_t dummy_bits1 ;
	uint8_t dummy_bits2 ;
} joystickHID;

joystickHID joystickhid = {0, 0, 0, 0, 0, 0, 0, 0};				// struct que contém os dados do hid é enviada pela usb

uint16_t ADCValue[3] = {0, 0, 0};			//Valor da leitura dos ADCs que é atualizada por uma DMA automaticamente

uint8_t updating = 0;

uint16_t range_x_data[3][6] = { 		// array de pontos em x para interpolacao do valor de saida com base nos limites min e max
		{0, 200, 400, 600, 800, 1000},
		{0, 200, 400, 600, 800, 1000},
		{0, 200, 400, 600, 800, 1000}
		};

uint16_t sliders_data[3][6] = {
		{0, 200, 400, 600, 800, 1000},
		{0, 200, 400, 600, 800, 1000},
		{0, 200, 400, 600, 800, 1000}
		};

uint8_t inverter_config[3] = {0, 0, 0};

void update_data_from_flash(uint16_t (*sliders_data)[6], uint16_t (*range_x_data)[6], uint8_t (*inverter_config)){
	char data[0xC0];
	read_flash((uint8_t *)data);
    char * token = strtok(data,",");				//first strtok go to variable directly
    sliders_data[0][0] = atoi(token)*10;

    for (int i=1; i<6; i++){						// fills first array of range_x for first pedal
    	token = strtok(NULL,",");
    	sliders_data[0][i] = atoi(token)*10;
    }

	for (int i=0; i<6; i++){						// until all arrays be full filled for first pedal
		token = strtok(NULL,",");
		range_x_data[0][i] = atoi(token)*10;
	}

	token = strtok(NULL,",");						// inverted for first pedal
	inverter_config[0] = atoi(token);


	for (int i=0; i<6; i++){						// until all arrays be full filled
		token = strtok(NULL,",");
		sliders_data[1][i] = atoi(token)*10;
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
		token = strtok(NULL,",");
		range_x_data[1][i] = atoi(token)*10;
	}

	token = strtok(NULL,",");						// inverted for second pedal
	inverter_config[1] = atoi(token);

	for (int i=0; i<6; i++){						// until all arrays be full filled
		token = strtok(NULL,",");
		sliders_data[2][i] = atoi(token)*10;
	}

	for (int i=0; i<6; i++){						// until all arrays be full filled
		token = strtok(NULL,",");
		range_x_data[2][i] = atoi(token)*10;
	}

	token = strtok(NULL,",");						// inverted for third pedal
	inverter_config[2] = atoi(token);

}

float interpolacao_linear(double x, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
	//"""Realiza a interpolação de x sobre uma reta dada por [(x0,y0),(x1,y1)] e retorna o valor em y"""
	double y;
//	x = x*100;
	y = (double)y0 + ( (double)y1 - (double)y0 ) * ( x-(double)x0 ) / ( (double)x1-(double)x0 );
//	y = y/100;
	return y;
}

uint16_t * ret_x0_y0_x1_y1(double x, uint16_t * x_array, uint16_t * y_array){
	// """Com base em uma lista de pontos [(x0,y0), (x1,y1)... (xn,yn)]
    //a funcao retorna o conjunto de pontos [(xa,ya),(xb,yb)] que formam uma reta
    //na qual o ponto x possa ser interpolado.\n
    //Os pontos precisam estar alistados em ordem crescente, e as listas de x e y precisam ter o mesmo tamanho."""
	static uint16_t x0y0x1y1array[4] = {0, 0, 0, 0};

	for (int i=0; i<6; i++){
		if (x < (double)x_array[i]){
			x0y0x1y1array[0] = x_array[i-1];
			x0y0x1y1array[1] = y_array[i-1];
			x0y0x1y1array[2] = x_array[i];
			x0y0x1y1array[3] = y_array[i];
			break;
		}
	}
	return x0y0x1y1array;
}

uint16_t* set_output(uint16_t * valor_entrada, uint16_t (*sliders_data)[6], uint16_t (*range_x_data)[6], uint8_t * inverter_config){
	//"""Método que calcula e atualiza o valor de saída de acordo com o valor da entrada"""

	static uint16_t valor_saida[3] = {0, 0, 0};
	double entrada_invertida[3] = {0, 0, 0};        //alterei pra usar menor memoria

	for (int i=0; i<3; i++){
		entrada_invertida[i] = (valor_entrada[i]*1000)/4095;		//converte o valor de entrada de 12bits para um range de 0,0 a 100,0

		if (inverter_config[i] == 1){
			entrada_invertida[i] = 1000 - entrada_invertida[i];		// inverte a entrada caso o bit de inversao esteja ligado
		}
//		char buffer[12];
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", (uint16_t)entrada_invertida[i]), 100);
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", range_x_data[i][0]), 100);

		if ((uint16_t)entrada_invertida[i] <= range_x_data[i][0]){			// caso entrada esteja abaixa da calibracao minima
			valor_saida[i] = sliders_data[i][0];
		}
		else if ((uint16_t)entrada_invertida[i] >= range_x_data[i][5]){			// caso a entrada esteja acima da calibracao maxima
			valor_saida[i] = sliders_data[i][5];
		}
		else{
			uint16_t * x0y0x1y1_list = ret_x0_y0_x1_y1(entrada_invertida[i], range_x_data[i], sliders_data[i]);
			valor_saida[i] = interpolacao_linear(entrada_invertida[i], x0y0x1y1_list[0], x0y0x1y1_list[1], x0y0x1y1_list[2], x0y0x1y1_list[3]);
		}
		valor_saida[i] = (valor_saida[i]*4095)/1000;         //transforma o valor de saida de 0-100 em 12 bits
//		char buffer[8];
//	    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", valor_saida[0]), 100);
	}
	return valor_saida;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_USB_DEVICE_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCValue, 3);
  update_data_from_flash(sliders_data, range_x_data, inverter_config);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (updating){
		  updating = 0;
		  update_data_from_flash(sliders_data, range_x_data, inverter_config);
	  }
	  uint16_t * OutputValue = set_output(ADCValue, sliders_data, range_x_data, inverter_config);
	  joystickhid.rx_8lsb = (OutputValue[0]);
	  joystickhid.ry_4lsb_rx_4msb = ((OutputValue[1] & 0xf) << 4 | OutputValue[0] >> 8);
	  joystickhid.ry_8msb = OutputValue[1] >> 4;
	  joystickhid.rz_8lsb = OutputValue[2];
	  joystickhid.rz_4msb = OutputValue[2] >> 8;
//  	  uint8_t Test[] = "Fim\r\n"; //Data to send
//  	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &joystickhid, sizeof(joystickhid));
	  HAL_Delay(1);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", ADCValue[0]), 100);
//	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sprintf(buffer, "%u ", OutputValue[0]), 100);


//	  uint8_t Test2[] = "\r\n Valores fim !!!\r\n"; //Data to send
//	  HAL_UART_Transmit(&huart1,Test2,sizeof(Test),10);// Sending in normal mode

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 3;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
